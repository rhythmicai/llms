# https://primevue.org llms-full.txt

## PrimeVue UI Suite
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

# The Next-Gen UI Suite for Vue.js

Enhance your web applications with PrimeVue's comprehensive suite of customizable, feature-rich UI components. With PrimeVue, turning your development vision into reality has never been easier.

[Get Started](https://primevue.org/setup/) [Give a Star](https://github.com/primefaces/primevue)

Overview

Chat

Inbox

Cards

Customers

Movies

![](https://www.primefaces.org/cdn/primevue/images/landing/apps/sampleshots/overview.jpg)

Prime

ãƒ»Overview

ãƒ»Chat

ãƒ»Inbox

ãƒ»Cards

ãƒ»Customers

ãƒ»Movies

ãƒ»Settings

![](https://www.primefaces.org/cdn/primevue/images/landing/apps/main-avatar.png)

Robin Jonas

hi@robin.xyz

Overview

Welcome to PrimeVue

WeeklyMonthlyYearly

Download

Crypto Analytics

Personal Wallet

Corporate Wallet

Investment Wallet

Transactions

| Id | Name | Coin | Date | Process | Amount |
| --- | --- | --- | --- | --- | --- |
| #1254 | AY<br>Amy Yelsner |  | May 5th | Buy | 3.005 BTC |
| #2355 | AF<br>Anna Fali |  | Mar 17th | Buy | 0.050 ETH |
| #1235 | SS<br>Stepen Shaw |  | May 24th | Sell | 3.050 BTC |
| #2355 | AF<br>Anna Fali |  | Mar 17th | Sell | 0.050 ETH |
| #2355 | AF<br>Anna Fali |  | Mar 17th | Sell | 0.050 ETH |

My Wallet

BTC (15%)

27.215

ETH (5%)

4.367

GBP (25%)

Â£ 147.562,32

EUR (11%)

â‚¬ 137.457,25

USD (29%)

$ 133.364,12

XAU (29%)

200 g

Show All

Features

PrimeVue is the most complete solution for your UI requirements.

![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-components.svg)

80+ UI Components

The ultimate set of UI Components to assist you with 80+ impressive Vue Components.

![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-theme.svg)

Styled or Unstyled

Choose from a variety of pre-built themes or implement your design systems with the CSS library of your choice like TailwindCSS.

![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-community.svg)

Community

Connect with the other open source community members, collaborate and have a voice in the project roadmap.

![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-accessibility.svg)

Accessibility

Compliant with the Web Content Accessibility Guidelines (WCAG 2.0).

![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-support.svg)

Enterprise Support

Exceptional support service featuring response within 1 business day and option to request enhancements and new features for the library.

![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-mobile.svg)

Mobile

First class support for responsive design led by touch optimized elements.

![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-productivity.svg)

Blocks

500+ pre-designed copy paste ready UI blocks to build spectacular apps in no time.

![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-ts.svg)

Typescript

Top-notch support for Typescript with types and tooling assistance.

Who Uses

PrimeTek libraries have reached over 250 Million Downloads  on npm! Join the PrimeLand community and experience the difference yourself.

![fox-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/fox-dark.svg)

![airbus-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/airbus-dark.svg)

![mercedes-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/mercedes-dark.svg)

![ebay-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ebay-dark.svg)

![ford-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ford-dark.svg)

![vw-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/vw-dark.svg)

![fox-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/fox-dark.svg)

![airbus-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/airbus-dark.svg)

![mercedes-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/mercedes-dark.svg)

![ebay-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ebay-dark.svg)

![ford-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ford-dark.svg)

![vw-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/vw-dark.svg)

![fox-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/fox-dark.svg)

![airbus-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/airbus-dark.svg)

![mercedes-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/mercedes-dark.svg)

![ebay-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ebay-dark.svg)

![ford-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ford-dark.svg)

![vw-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/vw-dark.svg)

![intel-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/intel-dark.svg)

![unicredit-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/unicredit-dark.svg)

![lufthansa-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/lufthansa-dark.svg)

![nvidia-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/nvidia-dark.svg)

![verizon-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/verizon-dark.svg)

![amex-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/amex-dark.svg)

![intel-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/intel-dark.svg)

![unicredit-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/unicredit-dark.svg)

![lufthansa-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/lufthansa-dark.svg)

![nvidia-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/nvidia-dark.svg)

![verizon-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/verizon-dark.svg)

![amex-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/amex-dark.svg)

![intel-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/intel-dark.svg)

![unicredit-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/unicredit-dark.svg)

![lufthansa-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/lufthansa-dark.svg)

![nvidia-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/nvidia-dark.svg)

![verizon-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/verizon-dark.svg)

![amex-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/amex-dark.svg)

Components

The most complete UI component library for Vue.js based on a design-agnostic infrastructure.

Customers

|  | Name | Country | Agent | Date | Balance | Status | Activity |  |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
|  | James Butt | ![flag](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)Algeria | ![Ioni Bowcher](https://primefaces.org/cdn/primevue/images/avatar/ionibowcher.png)Ioni Bowcher | 09/12/2015 | $70,663.00 | unqualified |  |  |
|  | Josephine Darakjy | ![flag](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)Egypt | ![Amy Elsner](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)Amy Elsner | 02/08/2019 | $82,429.00 | negotiation |  |  |
|  | Art Venere | ![flag](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)Panama | ![Asiya Javayant](https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png)Asiya Javayant | 05/12/2017 | $28,334.00 | qualified |  |  |
|  | Lenna Paprocki | ![flag](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)Slovenia | ![Xuxue Feng](https://primefaces.org/cdn/primevue/images/avatar/xuxuefeng.png)Xuxue Feng | 09/14/2020 | $88,521.00 | new |  |  |
|  | Donette Foller | ![flag](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)South Africa | ![Asiya Javayant](https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png)Asiya Javayant | 05/19/2016 | $93,905.00 | negotiation |  |  |

Blocks

500+ ready to copy-paste UI blocks to build spectacular applications in no time.

[Explore All](https://primeblocks.org/)

![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-1.svg)

![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-1.svg)

26 %

6 %

62 %

39 %

![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-2.svg)

![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-1.svg)

![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-2.svg)

![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-1.svg)

![question mark](https://primefaces.org/cdn/primevue/images/landing/blocks/question.svg)

Templates

Professionally designed highly customizable application templates to get started in style.

[Explore All](https://www.primefaces.org/store)

[Verona Preview](https://verona.primevue.org/)

[Freya Preview](https://freya.primevue.org/)

[Atlantis Preview](https://atlantis.primevue.org/)

![](https://primefaces.org/cdn/primevue/images/landing/templates/templates-text-noir-light.png)

[Apollo Preview](https://apollo.primevue.org/)

[Diamond Preview](https://diamond.primevue.org/)

[Ultima Preview](https://ultima.primevue.org/)

- General
- [Get Started](https://primevue.org/setup/)
- [Examples](https://github.com/primefaces/primevue-examples)

- Support
- [Forum](https://github.com/orgs/primefaces/discussions)
- [Discord](https://discord.gg/gzKFYnpmCY)
- [PRO Support](https://primevue.org/support/)

- Theming
- [Styled Mode](https://primevue.org/theming/styled/)
- [Unstyled Mode](https://primevue.org/theming/unstyled/)

- Resources
- [PrimeTV](https://www.youtube.com/channel/UCTgmp69aBOlLnPEqlUyetWw)
- [Store](https://www.primefaces.org/store/)
- [Source Code](https://github.com/primefaces/primevue)
- [Twitter](https://twitter.com/primevue)
- [Newsletter](https://www.primefaces.org/newsletter)
- [PrimeGear](https://gear.primefaces.org/)
- [Contact Us](mailto:contact@primetek.com.tr)

* * *

## PrimeVue Message Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Message

Message component is used to display inline messages.

## Import [\#](https://primevue.org/message/\#import)

```javascript

import Message from 'primevue/message';

```

Copy

## Basic [\#](https://primevue.org/message/\#basic)

Message component requires a content to display.

Message Content

```markup

<Message>Message Content</Message>

```

Copy

## Severity [\#](https://primevue.org/message/\#severity)

The _severity_ option specifies the type of the message.

Success Message

Info Message

Warn Message

Error Message

Secondary Message

Contrast Message

```markup

<Message severity="success">Success Message</Message>
<Message severity="info">Info Message</Message>
<Message severity="warn">Warn Message</Message>
<Message severity="error">Error Message</Message>
<Message severity="secondary">Secondary Message</Message>
<Message severity="contrast">Contrast Message</Message>

```

Copy

## Icon [\#](https://primevue.org/message/\#icon)

Icon property and the _icon_ slots are available to customize the icon of the message.

Info Message

![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)

How may I help you?

```markup

<Message severity="info" icon="pi pi-send">Info Message</Message>
<Message severity="success">
    <template #icon>
        <Avatar image="/images/avatar/amyelsner.png" shape="circle" />
    </template>
    <span class="ml-2">How may I help you?</span>
</Message>

```

Copy

## Outlined [\#](https://primevue.org/message/\#outlined)

Configure the _variant_ value as _outlined_ for messages with borders and no background.

Success Message

Info Message

Warn Message

Error Message

Secondary Message

Contrast Message

```markup

<Message severity="success" variant="outlined">Success Message</Message>
<Message severity="info" variant="outlined">Info Message</Message>
<Message severity="warn" variant="outlined">Warn Message</Message>
<Message severity="error" variant="outlined">Error Message</Message>
<Message severity="secondary" variant="outlined">Secondary Message</Message>
<Message severity="contrast" variant="outlined">Contrast Message</Message>

```

Copy

## Simple [\#](https://primevue.org/message/\#simple)

Configure the _variant_ value as _simple_ for messages without borders, backgrounds and paddings.

Success Message

Info Message

Warn Message

Error Message

Secondary Message

Contrast Message

```markup

<Message severity="success" variant="simple">Success Message</Message>
<Message severity="info" variant="simple">Info Message</Message>
<Message severity="warn" variant="simple">Warn Message</Message>
<Message severity="error" variant="simple">Error Message</Message>
<Message severity="secondary" variant="simple">Secondary Message</Message>
<Message severity="contrast" variant="simple">Contrast Message</Message>

```

Copy

## Sizes [\#](https://primevue.org/message/\#sizes)

Message provides _small_ and _large_ sizes as alternatives to the base.

Small Message

Normal Message

Large Message

```markup

<Message size="small" icon="pi pi-send">Small Message</Message>
<Message icon="pi pi-user">Normal Message</Message>
<Message size="large" icon="pi pi-check">Large Message</Message>

```

Copy

## Forms [\#](https://primevue.org/message/\#forms)

Validation errors in a form are displayed with the _error_ severity.

Validation error

Username is required

Email is not valid

```markup

<Message v-if="!username || !email" severity="error" icon="pi pi-times-circle" class="mb-2">Validation error</Message>
<Message v-if="username && email" severity="success" icon="pi pi-times-circle" class="mb-2">Form is valid</Message>
<div class="flex flex-col gap-1">
    <InputText v-model="username" placeholder="Username" aria-label="username" :invalid="!username" />
    <Message v-if="!username" severity="error" variant="simple" size="small">Username is required</Message>
</div>
<div class="flex flex-col gap-1">
    <InputText v-model="email" placeholder="Email" aria-label="email" :invalid="!email" />
    <Message v-if="!email" severity="error" variant="simple" size="small">Email is not valid</Message>
</div>

```

Copy

## Dynamic [\#](https://primevue.org/message/\#dynamic)

Multiple messages can be displayed using the standard v-for directive.

ShowClear

```markup

<Button label="Show" @click="addMessages()" />
<Button label="Clear" severity="secondary" class="ml-2" @click="clearMessages()" />
<transition-group name="p-message" tag="div" class="flex flex-col">
    <Message v-for="msg of messages" :key="msg.id" :severity="msg.severity" class="mt-4">{{ msg.content }}</Message>
</transition-group>

```

Copy

## Closable [\#](https://primevue.org/message/\#closable)

Enable _closable_ option to display an icon to remove a message.

Closable Message

```markup

<Message closable>Closable Message</Message>

```

Copy

## Life [\#](https://primevue.org/message/\#life)

Messages can disappear automatically by defined the _life_ in milliseconds.

Show

```markup

<Button label="Show" @click="showMessage" :disabled="visible" class="mb-4" />
<Message v-if="visible" severity="success" :life="3000">Auto Disappear Message</Message>

```

Copy

## Accessibility [\#](https://primevue.org/message/\#accessibility)

### Screen Reader

Message component uses _alert_ role that implicitly defines _aria-live_ as "assertive" and _aria-atomic_ as "true". Since any attribute is passed to the root element, attributes like _aria-labelledby_ and _aria-label_ can optionally be used as well.

Close element is a _button_ with an _aria-label_ that refers to the _aria.close_ property of the [locale](https://primevue.org/configuration/#locale) API by default, you may use _closeButtonProps_ to customize the element and override the default _aria-label_.

### Close Button Keyboard Support

| Key | Function |
| --- | --- |
| _enter_ | Closes the message. |
| _space_ | Closes the message. |

- Import

- Basic

- Severity

- Icon

- Outlined

- Simple

- Sizes

- Forms

- Dynamic

- Closable

- Life

- Accessibility


# Message API

API defines helper props, events and others for the PrimeVue Message module.

## Message [\#](https://primevue.org/message/\#api.message)

Message groups a collection of contents in tabs.

### Props [\#](https://primevue.org/message/\#api.message.props)

Defines valid properties in Message component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| severity | HintedString<"error" \| "secondary" \| "info" \| "success" \| "warn" \| "contrast"> | info | Severity level of the message. |  |
| closable | boolean | false | Whether the message can be closed manually using the close icon. |  |
| sticky | boolean | true |  |  |
| life | number | null | Delay in milliseconds to close the message automatically. |  |
| icon | string | null | Display a custom icon for the message. |  |
| closeIcon | string | null | Icon to display in the message close button. |  |
| closeButtonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the close button. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<MessagePassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| variant | HintedString<"outlined" \| "simple"> | undefined | Specifies the variant of the component. |  |

### Emits [\#](https://primevue.org/message/\#api.message.emits)

Defines valid emits in Message component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| close | event: Event | void | Callback to invoke when a message is closed. |  |
| life-end |  | void | Callback to invoke when the message's timeout is over. |  |

### Slots [\#](https://primevue.org/message/\#api.message.slots)

Defines valid slots in Message slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default custom slot. |  |
| icon | scope: {<br>class: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom message icon template. |  |
| closeicon | scope: {<br>class: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close icon template. |  |
| container | scope: {<br>closeCallback: () â‡’ void, // Close message function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |

### Interfaces [\#](https://primevue.org/message/\#api.message.interfaces)

Defines the custom interfaces used by the module.

#### MessagePassThroughMethodOptions [\#](https://primevue.org/message/\#api.message.interfaces.MessagePassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [MessageProps](https://primevue.org/message/#api.message.interfaces.MessageProps) | null | Defines valid properties. |
| state | [MessageState](https://primevue.org/message/#api.message.interfaces.MessageState) | null | Defines current inline state. |
| parent | any | null | Defines parent instance. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### MessagePassThroughOptions [\#](https://primevue.org/message/\#api.message.interfaces.MessagePassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| content | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the content's DOM element. |
| icon | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the icon's DOM element. |
| text | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the text's DOM element. |
| closeButton | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the button's DOM element. |
| closeIcon | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the button icon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [MessagePassThroughTransitionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughTransitionType%3CT%3E) | null | Used to control Vue Transition API. |

#### MessagePassThroughAttributes [\#](https://primevue.org/message/\#api.message.interfaces.MessagePassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### MessageState [\#](https://primevue.org/message/\#api.message.interfaces.MessageState)

Defines current inline state in Message component.

| name | type | default | description |
| --- | --- | --- | --- |
| visible | boolean | false | Current visible state as a boolean. |

## Types [\#](https://primevue.org/message/\#api.message.types)

Defines the custom types used by the module.

#### MessagePassThroughOptionType [\#](https://primevue.org/message/\#api.message.types.MessagePassThroughOptionType)

| values |
| --- |
| MessagePassThroughAttributes \| (options: MessagePassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### MessagePassThroughTransitionType [\#](https://primevue.org/message/\#api.message.types.MessagePassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: MessagePassThroughMethodOptions) => TransitionProps \| undefined |

#### MessageEmits [\#](https://primevue.org/message/\#api.message.types.MessageEmits)

| values |
| --- |
| EmitFn<MessageEmitsOptions> |

- Message

  - Props

  - Emits

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## Listbox Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Listbox

Listbox is used to select one or more values from a list of items.

## Import [\#](https://primevue.org/listbox/\#import)

```javascript

import Listbox from 'primevue/listbox';

```

Copy

## Basic [\#](https://primevue.org/listbox/\#basic)

Listbox is used with the _v-model_ property for two-way value binding along with the _options_ collection. Label and value of an option are defined with the _optionLabel_ and _optionValue_ properties respectively. Note that, when options are simple primitive values such as a string array, no _optionLabel_ and _optionValue_ would be necessary.

- New York
- Rome
- London
- Istanbul
- Paris

No selected item

```markup

<Listbox v-model="selectedCity" :options="cities" optionLabel="name" class="w-full md:w-56" />

```

Copy

## Forms [\#](https://primevue.org/listbox/\#forms)

Listbox integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.

- New York
- Rome
- London
- Istanbul
- Paris

1 items selected

Submit

```markup

<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-56">
    <div class="flex flex-col gap-1">
        <Listbox name="city" :options="cities" optionLabel="name" fluid />
        <Message v-if="$form.city?.invalid" severity="error" size="small" variant="simple">{{ $form.city.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>

```

Copy

## Checkmark [\#](https://primevue.org/listbox/\#checkmark)

An alternative way to highlight the selected option is displaying a checkmark instead.

- New York
- Rome
- London
- Istanbul
- Paris

No selected item

```markup

<Listbox v-model="selectedCity" :options="cities" optionLabel="name" checkmark :highlightOnSelect="false" class="w-full md:w-56" />

```

Copy

## Multiple [\#](https://primevue.org/listbox/\#multiple)

Listbox allows choosing a single item by default, enable _multiple_ property to choose more than one. When the optional _metaKeySelection_ is present, behavior is changed in a way that selecting a new item requires meta key to be present.

- New York
- Rome
- London
- Istanbul
- Paris

No selected item

```markup

<Listbox v-model="selectedCity" :options="cities" multiple optionLabel="name" class="w-full md:w-56" />

```

Copy

## Group [\#](https://primevue.org/listbox/\#group)

Options can be grouped when a nested data structures is provided. To define the label of a group _optionGroupLabel_ property is needed and also _optionGroupChildren_ is required to define the property that refers to the children of a group.

- ![](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

Germany

- Berlin
- Frankfurt
- Hamburg
- Munich
- ![](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

USA

- Chicago
- Los Angeles
- New York
- San Francisco
- ![](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

Japan

- Kyoto
- Osaka
- Tokyo
- Yokohama

No selected item

```markup

<Listbox v-model="selectedCity" :options="groupedCities" optionLabel="label" optionGroupLabel="label" optionGroupChildren="items" class="w-full md:w-56" listStyle="max-height:250px">
    <template #optiongroup="slotProps">
        <div class="flex items-center">
            <img :alt="slotProps.option.name" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px" />
            <div>{{ slotProps.option.label }}</div>
        </div>
    </template>
</Listbox>

```

Copy

## Filter [\#](https://primevue.org/listbox/\#filter)

Listbox provides built-in filtering that is enabled by adding the _filter_ property.

5 results are available

- New York
- Rome
- London
- Istanbul
- Paris

No selected item

```markup

<Listbox v-model="selectedCity" :options="cities" filter optionLabel="name" class="w-full md:w-56" />

```

Copy

## Template [\#](https://primevue.org/listbox/\#template)

Custom content for an option is displayed with the _option_ slot that takes an option as a parameter. Additional available templating sections are _filter_ and _optionGroup_.

- ![Australia](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

Australia

- ![Brazil](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

Brazil

- ![China](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

China

- ![Egypt](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

Egypt

- ![France](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

France

- ![Germany](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

Germany

- ![India](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

India

- ![Japan](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

Japan

- ![Spain](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

Spain

- ![United States](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)

United States


No selected item

```markup

<Listbox v-model="selectedCountry" :options="countries" optionLabel="name" class="w-full md:w-56" listStyle="max-height:250px">
    <template #option="slotProps">
        <div class="flex items-center">
            <img :alt="slotProps.option.name" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px" />
            <div>{{ slotProps.option.name }}</div>
        </div>
    </template>
</Listbox>

```

Copy

## Virtual Scroll [\#](https://primevue.org/listbox/\#virtualscroll)

VirtualScroller is used to render a long list of options efficiently like 100K records in this demo. The configuration is done with _virtualScrollerOptions_ property, refer to the [VirtualScroller](https://primevue.org/virtualscroller) for more information about the available options as it is used internally by Listbox.

- Item #0
- Item #1
- Item #2
- Item #3
- Item #4
- Item #5
- Item #6
- Item #7
- Item #8
- Item #9
- Item #10
- Item #11
- Item #12
- Item #13
- Item #14

No selected item

```markup

<Listbox v-model="selectedItem" :options="items" optionLabel="label" optionValue="value"
    :virtualScrollerOptions="{ itemSize: 38 }" class="w-full md:w-56" listStyle="height:250px" striped />

```

Copy

## Invalid [\#](https://primevue.org/listbox/\#invalid)

Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.

- New York
- Rome
- London
- Istanbul
- Paris

No selected item

```markup

<Listbox v-model="selectedCity" :options="cities" optionLabel="name" :invalid="selectedCity === null"  class="w-full md:w-56" />

```

Copy

## Disabled [\#](https://primevue.org/listbox/\#disabled)

When _disabled_ is present, the element cannot be edited and focused.

- New York
- Rome
- London
- Istanbul
- Paris

No selected item

```markup

<Listbox v-model="selectedCity" disabled :options="cities" optionLabel="name" class="w-full md:w-56" />

```

Copy

## Accessibility [\#](https://primevue.org/listbox/\#accessibility)

### Screen Reader

Value to describe the component can be provided _aria-labelledby_ or _aria-label_ props. The list element has a _listbox_ role with the _aria-multiselectable_ attribute that sets to true when multiple selection is enabled. Each list item has an _option_ role with _aria-selected_ and _aria-disabled_ as their attributes.

If filtering is enabled, _filterInputProps_ can be defined to give _aria-\*_ props to the input element. Alternatively _filterPlaceholder_ is usually utilized by the screen readers as well.

```markup

<span id="lb"></span>Options</span>
<Listbox aria-labelledby="lb" />

<Listbox aria-label="City" />

```

Copy

### Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the first selected option, if there is none then first option receives the focus. |
| _up arrow_ | Moves focus to the previous option. |
| _down arrow_ | Moves focus to the next option. |
| _enter_ | Toggles the selected state of the focused option. |
| _space_ | Toggles the selected state of the focused option. |
| _home_ | Moves focus to the first option. |
| _end_ | Moves focus to the last option. |
| _shift_ \+ _down arrow_ | Moves focus to the next option and toggles the selection state. |
| _shift_ \+ _up arrow_ | Moves focus to the previous option and toggles the selection state. |
| _shift_ \+ _space_ | Selects the items between the most recently selected option and the focused option. |
| _control_ \+ _shift_ \+ _home_ | Selects the focused options and all the options up to the first one. |
| _control_ \+ _shift_ \+ _end_ | Selects the focused options and all the options down to the last one. |
| _control_ \+ _a_ | Selects all options. |
| _pageUp_ | Jumps visual focus to first option. |
| _pageDown_ | Jumps visual focus to last option. |
| _any printable character_ | Moves focus to the option whose label starts with the characters being typed. |

### Filter Input Keyboard Support

| Key | Function |
| --- | --- |
| _down arrow_ | Moves focus to the next option, if there is none then visual focus does not change. |
| _up arrow_ | Moves focus to the previous option, if there is none then visual focus does not change. |
| _left arrow_ | Removes the visual focus from the current option and moves input cursor to one character left. |
| _right arrow_ | Removes the visual focus from the current option and moves input cursor to one character right. |
| _home_ | Moves input cursor at the end, if not then moves focus to the first option. |
| _end_ | Moves input cursor at the beginning, if not then moves focus to the last option. |
| _enter_ | Closes the popup and moves focus to the multiselect element. |
| _escape_ | Closes the popup and moves focus to the multiselect element. |
| _tab_ | Moves focus to the next focusable element in the component. If there is none, moves focus to next element in page. |

- Import

- Basic

- Forms

- Checkmark

- Multiple

- Group

- Filter

- Template

- Virtual Scroll

- Invalid

- Disabled

- Accessibility


# Listbox API

API defines helper props, events and others for the PrimeVue Listbox module.

## Listbox [\#](https://primevue.org/listbox/\#api.listbox)

ListBox is used to select one or more values from a list of items.

### Props [\#](https://primevue.org/listbox/\#api.listbox.props)

Defines valid properties in Listbox component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| options | any\[\] | null | An array of selectitems to display as the available options. |  |
| optionLabel | string \| Function | null | Property name or getter function to use as the label of an option. |  |
| optionValue | string \| Function | null | Property name or getter function to use as the value of an option, defaults to the option itself when not defined. |  |
| optionDisabled | string \| Function | null | Property name or getter function to use as the disabled flag of an option, defaults to false when not defined. |  |
| optionGroupLabel | string \| Function | null | Property name or getter function to use as the label of an option group. |  |
| optionGroupChildren | string \| Function | null | Property name or getter function that refers to the children options of option group. |  |
| listStyle | string | null | Inline style of inner list element. |  |
| scrollHeight | string | 14rem | Height of the viewport, a scrollbar is defined if height of list exceeds this value. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When specified, disables the component. |  |
| dataKey | string | null | A property to uniquely identify an option. |  |
| multiple | boolean | false | When specified, allows selecting multiple values. |  |
| metaKeySelection | boolean | false | Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.<br>On touch enabled devices, metaKeySelection is turned off automatically. |  |
| filter | boolean | false | When specified, displays a filter input at header. |  |
| filterPlaceholder | string | null | Placeholder text to show when filter input is empty. |  |
| filterLocale | string | null | Locale to use in filtering. The default locale is the host environment's current locale. |  |
| filterMatchMode | HintedString<"startsWith" \| "contains" \| "endsWith"> | contains | Defines the filtering algorithm to use when searching the options. |  |
| filterFields | string\[\] | null | Fields used when filtering the options, defaults to optionLabel. |  |
| virtualScrollerOptions | any | null | Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it. |  |
| autoOptionFocus | boolean | false | Whether to focus on the first visible or selected element. |  |
| selectOnFocus | boolean | false | When enabled, the focused option is selected. |  |
| focusOnHover | boolean | true | When enabled, the focus is placed on the hovered option. |  |
| highlightOnSelect | boolean | true | Whether the selected option will be add highlight class. |  |
| checkmark | boolean | false | Whether the selected option will be shown with a check mark. |  |
| filterMessage | string | '{0} results are available' | Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration. |  |
| selectionMessage | string | '{0} items selected' | Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySelectionMessage | string | No selected item | Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration. |  |
| emptyFilterMessage | string | No results found | Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration. |  |
| emptyMessage | string | No available options | Text to display when there are no options available. Defaults to value from PrimeVue locale configuration. |  |
| striped | boolean | false | Whether to displays rows with alternating colors. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| filterIcon | string | null | Icon to display in filter input. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying input element. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ListboxPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/listbox/\#api.listbox.emits)

Defines valid emits in Listbox component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [ListboxChangeEvent](https://primevue.org/listbox/#api.listbox.events.ListboxChangeEvent) | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| filter | event: [ListboxFilterEvent](https://primevue.org/listbox/#api.listbox.events.ListboxFilterEvent) | void | Callback to invoke on filter input. |  |
| item-dblclick | event: [ListboxOptionDblClickEvent](https://primevue.org/listbox/#api.listbox.events.ListboxOptionDblClickEvent) | void | Callback to invoke on option double click. |  |
| option-dblclick | event: [ListboxOptionDblClickEvent](https://primevue.org/listbox/#api.listbox.events.ListboxOptionDblClickEvent) | void | Callback to invoke on option double click. |  |

### Slots [\#](https://primevue.org/listbox/\#api.listbox.slots)

Defines valid slots in Listbox component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header | scope: {<br>value: any, // Value of the componentoptions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer | scope: {<br>value: any, // Value of the componentoptions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| option | scope: {<br>option: any, // Option instanceselected: boolean, // Selection stateindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option template. |  |
| optiongroup | scope: {<br>option: any, // Option instanceindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom optiongroup template. |  |
| emptyfilter |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom emptyfilter template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template. |  |
| content | scope: {<br>items: any, // An array of objects to display for virtualscrollerstyleClass: string, // Style class of the componentcontentRef: (el: any) â‡’ void, // Referance of the contentgetItemOptions: (index: number) â‡’ VirtualScrollerItemOptions, // Options of the items<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| loader | scope: {<br>options: any, // Options of the loader items for virtualscroller<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loader template. |  |
| filtericon | scope: {<br>class: any, // Style class of the filter icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter icon template. |  |

### Events [\#](https://primevue.org/listbox/\#api.listbox.events)

Defines the custom events used by the component's emit.

#### ListboxChangeEvent [\#](https://primevue.org/listbox/\#api.listbox.events.ListboxChangeEvent)

Custom change event.

See [change](https://primevue.org/listbox/#api.listbox.emitsoptions.change)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event |
| value | any | Selected option value |

#### ListboxOptionDblClickEvent [\#](https://primevue.org/listbox/\#api.listbox.events.ListboxOptionDblClickEvent)

Custom double click event.

See [\['item-dblclick'\]](https://primevue.org/listbox/#api.listbox.listboxemitsoptions.['item-dblclick'])

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event |
| value | any | Selected option value |

#### ListboxFilterEvent [\#](https://primevue.org/listbox/\#api.listbox.events.ListboxFilterEvent)

Custom filter event.

See [filter](https://primevue.org/listbox/#api.listbox.emitsoptions.filter)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event |
| value | string | Filter value |
| filterValue | any\[\] | Filtered options |

### Interfaces [\#](https://primevue.org/listbox/\#api.listbox.interfaces)

Defines the custom interfaces used by the module.

#### ListboxPassThroughMethodOptions [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ListboxProps](https://primevue.org/listbox/#api.listbox.interfaces.ListboxProps) | null | Defines valid properties. |
| state | [ListboxState](https://primevue.org/listbox/#api.listbox.interfaces.ListboxState) | null | Defines current inline state. |
| context | [ListboxContext](https://primevue.org/listbox/#api.listbox.interfaces.ListboxContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### ListboxSharedPassThroughMethodOptions [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [ListboxProps](https://primevue.org/listbox/#api.listbox.interfaces.ListboxProps) | null | Defines valid properties. |
| state | [ListboxState](https://primevue.org/listbox/#api.listbox.interfaces.ListboxState) | null | Defines current inline state. |

#### ListboxPassThroughOptions [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| header | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header's DOM element. |
| pcFilterContainer | any | null | Used to pass attributes to the IconField component. |
| pcFilter | any | null | Used to pass attributes to the InputText component. |
| pcFilterIconContainer | any | null | Used to pass attributes to the InputIcon component. |
| filterIcon | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the filter icon's DOM element. |
| listContainer | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the list container's DOM element. |
| virtualScroller | any | null | Used to pass attributes to the VirtualScroller component. |
| list | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the list's DOM element. |
| optionGroup | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option group's DOM element. |
| option | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option's DOM element. |
| optionCheckIcon | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option check icon's DOM element. |
| optionBlankIcon | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option blank icon's DOM element. |
| emptyMessage | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the emptyMessage's DOM element. |
| hiddenFirstFocusableEl | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden first focusable element's DOM element. |
| hiddenFilterResult | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden filter result's DOM element. |
| hiddenSelectedMessage | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden selected message's DOM element. |
| hiddenLastFocusableEl | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden last focusable element's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### ListboxPassThroughAttributes [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### ListboxState [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxState)

Defines current inline state in Listbox component.

| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| focused | boolean | false | Current focused state as a boolean. |
| filterValue | string | null | Current filter value state as a string. |
| focusedOptionIndex | number | -1 | Current focused item index as a number. |

#### ListboxContext [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxContext)

Defines current options in Listbox component.

| name | type | default | description |
| --- | --- | --- | --- |
| selected | boolean | false | Current selection state of the item as a boolean. |
| focused | boolean | false | Current focus state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |

## Types [\#](https://primevue.org/listbox/\#api.listbox.types)

Defines the custom types used by the module.

#### ListboxPassThroughOptionType [\#](https://primevue.org/listbox/\#api.listbox.types.ListboxPassThroughOptionType)

| values |
| --- |
| ListboxPassThroughAttributes \| (options: ListboxPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### ListboxEmits [\#](https://primevue.org/listbox/\#api.listbox.types.ListboxEmits)

| values |
| --- |
| EmitFn<ListboxEmitsOptions> |

- Listbox

  - Props

  - Emits

  - Slots

  - Events

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## Toast Component Overview
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Toast

Toast is used to display messages in an overlay.

## Import [\#](https://primevue.org/toast/\#import)

```javascript

import Toast from 'primevue/toast';

```

Copy

## Toast Service [\#](https://primevue.org/toast/\#toast-service)

Toast component is controlled via the _ToastService_ that needs to be installed as an application plugin.

```javascript

import {createApp} from 'vue';
import ToastService from 'primevue/toastservice';

const app = createApp(App);
app.use(ToastService);

```

Copy

The service is available with the _useToast_ function for Composition API or using the _$toast_ property of the application for Options API.

```javascript

import { useToast } from 'primevue/usetoast';

const toast = useToast();

```

Copy

## Basic [\#](https://primevue.org/toast/\#basic)

Ideal location of a Toast is the main application template so that it can be used by any component within the application. A single message is represented by the Message interface that defines properties such as severity, summary and detail.

Show

```markup

<Toast />
<Button label="Show" @click="show()" />

```

Copy

## Severity [\#](https://primevue.org/toast/\#severity)

The _severity_ option specifies the type of the message.

SuccessInfoWarnErrorSecondaryContrast

```markup

<Toast />
<Button label="Success" severity="success" @click="showSuccess" />
<Button label="Info" severity="info" @click="showInfo" />
<Button label="Warn" severity="warn" @click="showWarn" />
<Button label="Error" severity="danger" @click="showError" />
<Button label="Secondary" severity="secondary" @click="showSecondary" />
<Button label="Contrast" severity="contrast" @click="showContrast" />

```

Copy

## Position [\#](https://primevue.org/toast/\#position)

A message can be targeted to a certain Toast component by matching the _group_ keys whereas location is customized with the _position_.

Top LeftBottom LeftBottom Right

```markup

<Toast position="top-left" group="tl" />
<Toast position="bottom-left" group="bl" />
<Toast position="bottom-right" group="br" />

<Button label="Top Left" @click="showTopLeft" />
<Button label="Bottom Left" @click="showBottomLeft" />
<Button label="Bottom Right" @click="showBottomRight" />

```

Copy

## Multiple [\#](https://primevue.org/toast/\#multiple)

Multiple messages are displayed by passing an array to the _show_ method.

Multiple

```markup

<Toast />
<Button label="Multiple" @click="showMultiple()" />

```

Copy

## Sticky [\#](https://primevue.org/toast/\#sticky)

A message disappears after the number of milliseconds defined in the _life_ option. Omit the _life_ option to make the message sticky.

StickyClear

```markup

<Toast />
<Button @click="showSticky" label="Sticky" />
<Button label="Clear" severity="secondary" @click="clear()" />

```

Copy

## Template [\#](https://primevue.org/toast/\#template)

Custom content inside a message is defined with the _message_ template.

View

```markup

<Toast position="bottom-center" group="bc" @close="onClose">
    <template #message="slotProps">
        <div class="flex flex-col items-start flex-auto">
            <div class="flex items-center gap-2">
                <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" shape="circle" />
                <span class="font-bold">Amy Elsner</span>
            </div>
            <div class="font-medium text-lg my-4">{{ slotProps.message.summary }}</div>
            <Button size="small" label="Reply" severity="success" @click="onReply()"></Button>
        </div>
    </template>
</Toast>
<Button @click="showTemplate" label="View" />

```

Copy

## Headless [\#](https://primevue.org/toast/\#headless)

Headless mode is enabled by defining a _container_ slot that lets you implement entire toast UI instead of the default elements.

View

```markup

<Toast position="top-center" group="headless" @close="visible = false">
    <template #container="{ message, closeCallback }">
        <section class="flex flex-col p-4 gap-4 w-full bg-primary/70 rounded-xl">
            <div class="flex items-center gap-5">
                <i class="pi pi-cloud-upload text-white dark:text-black text-2xl"></i>
                <span class="font-bold text-base text-white dark:text-black">{{ message.summary }}</span>
            </div>
            <div class="flex flex-col gap-2">
                <ProgressBar :value="progress" :showValue="false" :style="{ height: '4px' }" pt:value:class="!bg-primary-50 dark:!bg-primary-900" class="!bg-primary/80"></ProgressBar>
                <label class="text-sm font-bold text-white dark:text-black">{{ progress }}% uploaded</label>
            </div>
            <div class="flex gap-4 mb-4 justify-end">
                <Button label="Another Upload?" size="small" @click="closeCallback"></Button>
                <Button label="Cancel" size="small" @click="closeCallback"></Button>
            </div>
        </section>
    </template>
</Toast>
<Button @click="show" label="View" />

```

Copy

## Accessibility [\#](https://primevue.org/toast/\#accessibility)

### Screen Reader

Toast component use _alert_ role that implicitly defines _aria-live_ as "assertive" and _aria-atomic_ as "true".

Close element is a _button_ with an _aria-label_ that refers to the _aria.close_ property of the [locale](https://primevue.org/configuration/#locale) API by default, you may use _closeButtonProps_ to customize the element and override the default _aria-label_.

### Close Button Keyboard Support

| Key | Function |
| --- | --- |
| _enter_ | Closes the message. |
| _space_ | Closes the message. |

- Import

- Toast Service

- Basic

- Severity

- Position

- Multiple

- Sticky

- Template

- Headless

- Accessibility


# Toast API

API defines helper props, events and others for the PrimeVue Toast module.

## Toast [\#](https://primevue.org/toast/\#api.toast)

Toast is used to display messages in an overlay.

### Props [\#](https://primevue.org/toast/\#api.toast.props)

Defines valid properties in Toast component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| group | string | null | Unique identifier of a message group. |  |
| position | "center" \| "top-left" \| "top-center" \| "top-right" \| "bottom-left" \| "bottom-center" \| "bottom-right" | top-right | Position of the toast in viewport. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| breakpoints | [ToastBreakpointsType](https://primevue.org/toast/#api.toast.types.ToastBreakpointsType) | null | Object literal to define styles per screen size. |  |
| closeIcon | string | null | Icon to display in the toast close button. |  |
| infoIcon | string | null | Icon to display in the toast with info severity. |  |
| warnIcon | string | null | Icon to display in the toast with warn severity. |  |
| errorIcon | string | null | Icon to display in the toast with error severity. |  |
| successIcon | string | null | Icon to display in the toast with success severity. |  |
| closeButtonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the close button. |  |
| message | [ToastMessageOptions](https://primevue.org/toast/#api.toast.interfaces.ToastMessageOptions) | null | Used to access message options. |  |
| onMouseEnter | Function | null | Used to specify a callback function to be run when the mouseenter event is fired on the message component. |  |
| onMouseLeave | Function | null | Used to specify a callback function to be run when the mouseleave event is fired on the message component. |  |
| onClick | Function | null | Used to specify a callback function to be run when the click event is fired on the message component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ToastPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/toast/\#api.toast.emits)

Defines valid emits in Toast component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| close | message: [ToastMessageOptions](https://primevue.org/toast/#api.toast.interfaces.ToastMessageOptions) | void | Callback to invoke when the toast is closed. |  |
| life-end | message: [ToastMessageOptions](https://primevue.org/toast/#api.toast.interfaces.ToastMessageOptions) | void | Callback to invoke when the toast's timeout is over. |  |

### Slots [\#](https://primevue.org/toast/\#api.toast.slots)

Defines valid slot in Toast component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| message | scope: {<br>message: any, // Message of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom message template. |  |
| icon | scope: {<br>class: any, // Style class of the message icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| messageicon | scope: {<br>class: any, // Style class of the icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom message icon template. |  |
| closeicon | scope: {<br>class: any, // Style class of the close icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close icon template. |  |
| container | scope: {<br>message: any, // Message of the componentcloseCallback: () â‡’ void, // Close sidebar function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |

### Interfaces [\#](https://primevue.org/toast/\#api.toast.interfaces)

Defines the custom interfaces used by the module.

#### ToastPassThroughMethodOptions [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ToastProps](https://primevue.org/toast/#api.toast.interfaces.ToastProps) | null | Defines valid properties. |
| state | [ToastState](https://primevue.org/toast/#api.toast.interfaces.ToastState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### ToastPassThroughOptions [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| message | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the message's DOM element. |
| messageContent | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the message content's DOM element. |
| messageIcon | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the message icon's DOM element. |
| messageText | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the message text's DOM element. |
| summary | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the summary's DOM element. |
| detail | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the detail's DOM element. |
| buttonContainer | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the button container's DOM element. |
| closeButton | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the button's DOM element. |
| closeIcon | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the button icon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [ToastPassThroughTransitionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughTransitionType) | null | Used to control Vue Transition API. |

#### ToastPassThroughAttributes [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### ToastMessageOptions [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastMessageOptions)

Defines message options in Toast component.

| name | type | default | description |
| --- | --- | --- | --- |
| severity | HintedString<"error" \| "secondary" \| "info" \| "success" \| "warn" \| "contrast"> | info | Severity level of the message. |
| summary | string | null | Summary content of the message. |
| detail | any | null | Detail content of the message. |
| closable | boolean | true | Whether the message can be closed manually using the close icon. |
| life | number | null | Delay in milliseconds to close the message automatically. |
| group | string | null | Key of the Toast to display the message. |
| styleClass | any | null | Style class of the message. |
| contentStyleClass | any | null | Style class of the content. |

#### ToastBreakpointsType [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastBreakpointsType)

Defines breakpoints type in Toast component.

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### ToastState [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastState)

Defines current inline state in Toast component.

| name | type | default | description |
| --- | --- | --- | --- |
| messages | any\[\] | null | Current messages. |

## Types [\#](https://primevue.org/toast/\#api.toast.types)

Defines the custom types used by the module.

#### ToastPassThroughOptionType [\#](https://primevue.org/toast/\#api.toast.types.ToastPassThroughOptionType)

| values |
| --- |
| ToastPassThroughAttributes \| (options: ToastPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### ToastPassThroughTransitionType [\#](https://primevue.org/toast/\#api.toast.types.ToastPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: ToastPassThroughMethodOptions) => TransitionProps \| undefined |

#### ToastEmits [\#](https://primevue.org/toast/\#api.toast.types.ToastEmits)

| values |
| --- |
| EmitFn<ToastEmitsOptions> |

## ToastService-UseToast [\#](https://primevue.org/toast/\#api.toastservice-usetoast)

### Services [\#](https://primevue.org/toast/\#api.toastservice-usetoast.services)

Toast Service methods.

| name | parameters | returnType | description |
| --- | --- | --- | --- |
| add | message: [ToastMessageOptions](https://primevue.org/toast/#api.toast.interfaces.ToastMessageOptions) | void | Displays the message in a suitable Toast component. |
| remove | message: [ToastMessageOptions](https://primevue.org/toast/#api.toast.interfaces.ToastMessageOptions) | void | Clears the message. |
| removeGroup | group: string | void | Clears the messages that belongs to the group. |
| removeAllGroups |  | void | Clears all the messages. |

- Toast

  - Props

  - Emits

  - Slots

  - Interfaces

  - Types
- ToastService-UseToast

  - Services

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Accordion Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Accordion

Accordion groups a collection of contents in panels.

## Import [\#](https://primevue.org/accordion/\#import)

```javascript

import Accordion from 'primevue/accordion';
import AccordionPanel from 'primevue/accordionpanel';
import AccordionHeader from 'primevue/accordionheader';
import AccordionContent from 'primevue/accordioncontent';

```

Copy

## Basic [\#](https://primevue.org/accordion/\#basic)

Accordion is defined using _AccordionPanel_, _AccordionHeader_ and _AccordionContent_ components. Each AccordionPanel must contain a unique _value_ property to specify the active item.

Header I

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Header II

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

Header III

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

```markup

<Accordion value="0">
    <AccordionPanel value="0">
        <AccordionHeader>Header I</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="1">
        <AccordionHeader>Header II</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="2">
        <AccordionHeader>Header III</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </AccordionContent>
    </AccordionPanel>
</Accordion>

```

Copy

## Dynamic [\#](https://primevue.org/accordion/\#dynamic)

AccordionPanel can be generated dynamically using the standard _v-for_ directive.

Title 1

Content 1

Title 2

Content 2

Title 3

Content 3

```markup

<Accordion value="0">
    <AccordionPanel v-for="tab in tabs" :key="tab.title" :value="tab.value">
        <AccordionHeader>{{ tab.title }}</AccordionHeader>
        <AccordionContent>
            <p class="m-0">{{ tab.content }}</p>
        </AccordionContent>
    </AccordionPanel>
</Accordion>

```

Copy

## Multiple [\#](https://primevue.org/accordion/\#multiple)

Only one tab at a time can be active by default, enabling _multiple_ property changes this behavior to allow multiple panels. In this case _value_ needs to be an array.

Header I

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Header II

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

Header III

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

```markup

<Accordion :value="['0']" multiple>
    <AccordionPanel value="0">
        <AccordionHeader>Header I</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="1">
        <AccordionHeader>Header II</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="2">
        <AccordionHeader>Header III</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </AccordionContent>
    </AccordionPanel>
</Accordion>

```

Copy

## Disabled [\#](https://primevue.org/accordion/\#disabled)

Enabling _disabled_ property of an AccordionPanel prevents user interaction.

Header I

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Header II

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

Header III

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

Header IV

```markup

<Accordion :value="['0']" multiple>
    <AccordionPanel value="0">
        <AccordionHeader>Header I</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="1">
        <AccordionHeader>Header II</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="2">
        <AccordionHeader>Header III</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="3" disabled>
        <AccordionHeader>Header IV</AccordionHeader>
    </AccordionPanel>
</Accordion>

```

Copy

## Controlled [\#](https://primevue.org/accordion/\#controlled)

Panels can be controlled programmatically using _value_ property as a model.

123

Header I

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Header II

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

Header III

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

```markup

<div class="flex mb-4 gap-2 justify-end">
    <Button @click="active = '0'" rounded label="1" class="w-8 h-8 p-0" :outlined="active !== '0'" />
    <Button @click="active = '1'" rounded label="2" class="w-8 h-8 p-0" :outlined="active !== '1'" />
    <Button @click="active = '2'" rounded label="3" class="w-8 h-8 p-0" :outlined="active !== '2'" />
</div>

<Accordion v-model:value="active">
    <AccordionPanel value="0">
        <AccordionHeader>Header I</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="1">
        <AccordionHeader>Header II</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="2">
        <AccordionHeader>Header III</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </AccordionContent>
    </AccordionPanel>
</Accordion>

```

Copy

## Template [\#](https://primevue.org/accordion/\#template)

Custom content for a header is defined with the default slot. The optional _as_ property controls the default container element of a header, for example setting it to a _div_ renders a div for the header instead of a button. The _asChild_ option enables the headless mode for further customization by passing callbacks and properties to implement your own header.

![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
Amy Elsner3

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

![](https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png)
Onyama Limba4

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

![](https://primefaces.org/cdn/primevue/images/avatar/ionibowcher.png)
Ioni Bowcher2

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

```markup

<Accordion value="0" expandIcon="pi pi-plus" collapseIcon="pi pi-minus">
    <AccordionPanel value="0">
        <AccordionHeader>
            <span class="flex items-center gap-2 w-full">
                <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" shape="circle" />
                <span class="font-bold whitespace-nowrap">Amy Elsner</span>
                <Badge value="3" class="ml-auto mr-2" />
            </span>
        </AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="1">
        <AccordionHeader>
            <span class="flex items-center gap-2 w-full">
                <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png" shape="circle" />
                <span class="font-bold whitespace-nowrap">Onyama Limba</span>
                <Badge value="4" class="ml-auto mr-2" />
            </span>
        </AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="2">
        <AccordionHeader>
            <span class="flex items-center gap-2 w-full">
                <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/ionibowcher.png" shape="circle" />
                <span class="font-bold whitespace-nowrap">Ioni Bowcher</span>
                <Badge value="2" class="ml-auto mr-2" />
            </span>
        </AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </AccordionContent>
    </AccordionPanel>
</Accordion>

```

Copy

## Accessibility [\#](https://primevue.org/accordion/\#accessibility)

### Screen Reader

Accordion header elements is a _button_ element and use _aria-controls_ to define the id of the content section along with _aria-expanded_ for the visibility state. The value to read a header element defaults to the value of the _header_ property and can be customized by defining an _aria-label_ or _aria-labelledby_ via the _pt_ property.

The content uses _region_ role, defines an id that matches the _aria-controls_ of the header and _aria-labelledby_ referring to the id of the header.

### Header Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous focusable element in the page tab sequence. |
| _enter_ | Toggles the visibility of the content. |
| _space_ | Toggles the visibility of the content. |
| _down arrow_ | Moves focus to the next header. If focus is on the last header, moves focus to the first header. |
| _up arrow_ | Moves focus to the previous header. If focus is on the first header, moves focus to the last header. |
| _home_ | Moves focus to the first header. |
| _end_ | Moves focus to the last header. |

- Import

- Basic

- Dynamic

- Multiple

- Disabled

- Controlled

- Template

- Accessibility


# Accordion API

API defines helper props, events and others for the PrimeVue Accordion module.

## Accordion [\#](https://primevue.org/accordion/\#api.accordion)

Accordion groups a collection of contents in tabs.

### Props [\#](https://primevue.org/accordion/\#api.accordion.props)

Defines valid properties in Accordion component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | null \| string \| number \| string\[\] \| number\[\] | null | Value of the active panel or an array of values in multiple mode. |  |
| multiple | boolean | false | When enabled, multiple tabs can be activated at the same time. |  |
| activeIndex | null \| number \| number\[\] | null | Index of the active tab or an array of indexes in multiple mode. |  |
| lazy | boolean | false | When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css. |  |
| expandIcon | string | null | Icon of a collapsed tab. |  |
| collapseIcon | string | null | Icon of an expanded tab. |  |
| tabindex | number | 0 | Index of the element in tabbing order. |  |
| selectOnFocus | boolean | false | When enabled, the focused tab is activated. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AccordionPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/accordion/\#api.accordion.emits)

Defines valid emits in Accordion component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:value | value: undefined \| null \| string \| string\[\] | void | Emitted when the active panel changes. |  |
| update:activeIndex | value: undefined \| number | void | Emitted when the active tab changes. |  |
| tab-open | event: [AccordionTabOpenEvent](https://primevue.org/accordion/#api.accordion.events.AccordionTabOpenEvent) | void | Callback to invoke when a tab gets expanded. |  |
| tab-close | event: [AccordionTabCloseEvent](https://primevue.org/accordion/#api.accordion.events.AccordionTabCloseEvent) | void | Callback to invoke when an active tab is collapsed by clicking on the header. |  |
| tab-click | event: [AccordionClickEvent](https://primevue.org/accordion/#api.accordion.events.AccordionClickEvent) | void | Callback to invoke when an active tab is clicked. |  |

### Slots [\#](https://primevue.org/accordion/\#api.accordion.slots)

Defines valid slots in Accordion slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default slot to detect AccordionTab components. |  |
| collapseicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom collapse icon template. |  |
| expandicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom expand icon template. |  |

### Events [\#](https://primevue.org/accordion/\#api.accordion.events)

Defines the custom events used by the component's emit.

#### AccordionTabOpenEvent [\#](https://primevue.org/accordion/\#api.accordion.events.AccordionTabOpenEvent)

Custom tab open event.

See [tab-open](https://primevue.org/accordion/#api.accordion.emitsoptions.tab-open)

| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event. |
| index | number | Opened tab index. |

#### AccordionTabCloseEvent [\#](https://primevue.org/accordion/\#api.accordion.events.AccordionTabCloseEvent)

Custom tab close event.

See [tab-close](https://primevue.org/accordion/#api.accordion.emitsoptions.tab-close)

| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event. |
| index | number | Opened tab index. |

#### AccordionClickEvent [\#](https://primevue.org/accordion/\#api.accordion.events.AccordionClickEvent)

Custom tab open event.

See [tab-open](https://primevue.org/accordion/#api.accordion.emitsoptions.tab-open)

| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event. |
| index | number | Opened tab index. |

### Interfaces [\#](https://primevue.org/accordion/\#api.accordion.interfaces)

Defines the custom interfaces used by the module.

#### AccordionPassThroughMethodOptions [\#](https://primevue.org/accordion/\#api.accordion.interfaces.AccordionPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AccordionProps](https://primevue.org/accordion/#api.accordion.interfaces.AccordionProps) | null | Defines valid properties. |
| state | [AccordionState](https://primevue.org/accordion/#api.accordion.interfaces.AccordionState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### AccordionPassThroughOptions [\#](https://primevue.org/accordion/\#api.accordion.interfaces.AccordionPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [AccordionPassThroughOptionType](https://primevue.org/accordion/#api.accordion.types.AccordionPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### AccordionPassThroughAttributes [\#](https://primevue.org/accordion/\#api.accordion.interfaces.AccordionPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### AccordionState [\#](https://primevue.org/accordion/\#api.accordion.interfaces.AccordionState)

Defines current inline state in Accordion component.

| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string |
| d\_value | string \| string\[\] | null | Current active value state. |

## Types [\#](https://primevue.org/accordion/\#api.accordion.types)

Defines the custom types used by the module.

#### AccordionPassThroughOptionType [\#](https://primevue.org/accordion/\#api.accordion.types.AccordionPassThroughOptionType)

| values |
| --- |
| AccordionPassThroughAttributes \| (options: AccordionPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### AccordionEmits [\#](https://primevue.org/accordion/\#api.accordion.types.AccordionEmits)

| values |
| --- |
| EmitFn<AccordionEmitsOptions> |

## AccordionPanel [\#](https://primevue.org/accordion/\#api.accordionpanel)

AccordionPanel is a helper component for Accordion component.

### Props [\#](https://primevue.org/accordion/\#api.accordionpanel.props)

Defines valid properties in AccordionPanel component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | undefined \| string \| number | null | Unique value of item. |  |
| disabled | boolean | false | Whether the item is disabled. |  |
| as | string \| Component | DIV | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AccordionPanelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |

### Slots [\#](https://primevue.org/accordion/\#api.accordionpanel.slots)

Defines valid slots in AccordionPanel slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |

### Interfaces [\#](https://primevue.org/accordion/\#api.accordionpanel.interfaces)

Defines the custom interfaces used by the module.

#### AccordionPanelPassThroughMethodOptions [\#](https://primevue.org/accordion/\#api.accordionpanel.interfaces.AccordionPanelPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AccordionPanelProps](https://primevue.org/accordion/#api.accordionpanel.interfaces.AccordionPanelProps) | null | Defines valid properties. |
| context | [AccordionPanelContext](https://primevue.org/accordion/#api.accordionpanel.interfaces.AccordionPanelContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### AccordionPanelPassThroughOptions [\#](https://primevue.org/accordion/\#api.accordionpanel.interfaces.AccordionPanelPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [AccordionPanelPassThroughOptionType](https://primevue.org/accordion/#api.accordionpanel.types.AccordionPanelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### AccordionPanelPassThroughAttributes [\#](https://primevue.org/accordion/\#api.accordionpanel.interfaces.AccordionPanelPassThroughAttributes)

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### AccordionPanelContext [\#](https://primevue.org/accordion/\#api.accordionpanel.interfaces.AccordionPanelContext)

Defines current options in AccordionPanel component.

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/accordion/\#api.accordionpanel.types)

Defines the custom types used by the module.

#### AccordionPanelPassThroughOptionType [\#](https://primevue.org/accordion/\#api.accordionpanel.types.AccordionPanelPassThroughOptionType)

| values |
| --- |
| AccordionPanelPassThroughAttributes \| (options: AccordionPanelPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### AccordionPanelEmits [\#](https://primevue.org/accordion/\#api.accordionpanel.types.AccordionPanelEmits)

| values |
| --- |
| EmitFn<AccordionPanelEmitsOptions> |

## AccordionHeader [\#](https://primevue.org/accordion/\#api.accordionheader)

AccordionHeader is a helper component for Accordion component.

### Props [\#](https://primevue.org/accordion/\#api.accordionheader.props)

Defines valid properties in AccordionHeader component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| as | string \| Component | BUTTON | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AccordionHeaderPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |

### Slots [\#](https://primevue.org/accordion/\#api.accordionheader.slots)

Defines valid slots in AccordionHeader slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| toggleicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom toggleicon template. |  |

### Interfaces [\#](https://primevue.org/accordion/\#api.accordionheader.interfaces)

Defines the custom interfaces used by the module.

#### AccordionHeaderPassThroughMethodOptions [\#](https://primevue.org/accordion/\#api.accordionheader.interfaces.AccordionHeaderPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AccordionHeaderProps](https://primevue.org/accordion/#api.accordionheader.interfaces.AccordionHeaderProps) | null | Defines valid properties. |
| context | [AccordionHeaderContext](https://primevue.org/accordion/#api.accordionheader.interfaces.AccordionHeaderContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### AccordionHeaderPassThroughOptions [\#](https://primevue.org/accordion/\#api.accordionheader.interfaces.AccordionHeaderPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [AccordionHeaderPassThroughOptionType](https://primevue.org/accordion/#api.accordionheader.types.AccordionHeaderPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| toggleicon | [AccordionHeaderPassThroughOptionType](https://primevue.org/accordion/#api.accordionheader.types.AccordionHeaderPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### AccordionHeaderPassThroughAttributes [\#](https://primevue.org/accordion/\#api.accordionheader.interfaces.AccordionHeaderPassThroughAttributes)

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### AccordionHeaderContext [\#](https://primevue.org/accordion/\#api.accordionheader.interfaces.AccordionHeaderContext)

Defines current options in AccordionHeader component.

| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | null | Whether the item is active. |

## Types [\#](https://primevue.org/accordion/\#api.accordionheader.types)

Defines the custom types used by the module.

#### AccordionHeaderPassThroughOptionType [\#](https://primevue.org/accordion/\#api.accordionheader.types.AccordionHeaderPassThroughOptionType)

| values |
| --- |
| AccordionHeaderPassThroughAttributes \| (options: AccordionHeaderPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### AccordionHeaderEmits [\#](https://primevue.org/accordion/\#api.accordionheader.types.AccordionHeaderEmits)

| values |
| --- |
| EmitFn<AccordionHeaderEmitsOptions> |

## AccordionContent [\#](https://primevue.org/accordion/\#api.accordioncontent)

AccordionContent is a helper component for Accordion component.

### Props [\#](https://primevue.org/accordion/\#api.accordioncontent.props)

Defines valid properties in AccordionContent component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| as | string \| Component | DIV | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AccordionContentPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |

### Slots [\#](https://primevue.org/accordion/\#api.accordioncontent.slots)

Defines valid slots in AccordionContent slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |

### Interfaces [\#](https://primevue.org/accordion/\#api.accordioncontent.interfaces)

Defines the custom interfaces used by the module.

#### AccordionContentPassThroughMethodOptions [\#](https://primevue.org/accordion/\#api.accordioncontent.interfaces.AccordionContentPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AccordionContentProps](https://primevue.org/accordion/#api.accordioncontent.interfaces.AccordionContentProps) | null | Defines valid properties. |
| context | [AccordionContentContext](https://primevue.org/accordion/#api.accordioncontent.interfaces.AccordionContentContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### AccordionContentPassThroughOptions [\#](https://primevue.org/accordion/\#api.accordioncontent.interfaces.AccordionContentPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [AccordionContentPassThroughOptionType](https://primevue.org/accordion/#api.accordioncontent.types.AccordionContentPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| transition | [AccordionContentPassThroughOptionType](https://primevue.org/accordion/#api.accordioncontent.types.AccordionContentPassThroughOptionType) | null | Used to pass attributes to the transition's DOM element. |
| content | [AccordionContentPassThroughOptionType](https://primevue.org/accordion/#api.accordioncontent.types.AccordionContentPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### AccordionContentPassThroughAttributes [\#](https://primevue.org/accordion/\#api.accordioncontent.interfaces.AccordionContentPassThroughAttributes)

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### AccordionContentContext [\#](https://primevue.org/accordion/\#api.accordioncontent.interfaces.AccordionContentContext)

Defines current options in AccordionContent component.

| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | null | Whether the item is active. |

## Types [\#](https://primevue.org/accordion/\#api.accordioncontent.types)

Defines the custom types used by the module.

#### AccordionContentPassThroughOptionType [\#](https://primevue.org/accordion/\#api.accordioncontent.types.AccordionContentPassThroughOptionType)

| values |
| --- |
| AccordionContentPassThroughAttributes \| (options: AccordionContentPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### AccordionContentEmits [\#](https://primevue.org/accordion/\#api.accordioncontent.types.AccordionContentEmits)

| values |
| --- |
| EmitFn<AccordionContentEmitsOptions> |

- Accordion

  - Props

  - Emits

  - Slots

  - Events

  - Interfaces

  - Types
- AccordionPanel

  - Props

  - Slots

  - Interfaces

  - Types
- AccordionHeader

  - Props

  - Slots

  - Interfaces

  - Types
- AccordionContent

  - Props

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## Password Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Password

Password displays strength indicator for password fields.

## Import [\#](https://primevue.org/password/\#import)

```javascript

import Password from 'primevue/password';

```

Copy

## Basic [\#](https://primevue.org/password/\#basic)

Password is used with the _v-model_ property for two-way value binding.

Enter a password

```markup

<Password v-model="value" :feedback="false" />

```

Copy

## Forms [\#](https://primevue.org/password/\#forms)

InputText is used with the _v-model_ property.

Enter a password

Submit

```markup

<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-64">
    <div class="flex flex-col gap-1">
        <Password name="password" placeholder="Password" :feedback="false" fluid />
        <template v-if="$form.password?.invalid">
            <Message v-for="(error, index) of $form.password.errors" :key="index" severity="error" size="small" variant="simple">{{ error.message }}</Message>
        </template>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>

```

Copy

## Meter [\#](https://primevue.org/password/\#meter)

Strength meter is displayed as a popup while a value is being entered.

Enter a password

```markup

<Password v-model="value" />

```

Copy

## Locale [\#](https://primevue.org/password/\#locale)

Labels are translated at component level by _promptLabel_, _weakLabel_, _mediumLabel_ and _strongLabel_ properties. In order to apply global translations for all Password components in the application, refer to the [locale](https://primevue.org/configuration/#locale).

Choose a password

```markup

<Password v-model="value" promptLabel="Choose a password" weakLabel="Too simple" mediumLabel="Average complexity" strongLabel="Complex password" />

```

Copy

## ToggleMask [\#](https://primevue.org/password/\#togglemask)

When _toggleMask_ is present, an icon is displayed to show the value as plain text.

Enter a password

```markup

<Password v-model="value" toggleMask />

```

Copy

## Template [\#](https://primevue.org/password/\#template)

3 slots are included to customize the overlay. These are _header_, _content_ and _footer_. Note that content overrides the default meter.

Enter a password

```markup

<Password v-model="value">
    <template #header>
        <div class="font-semibold text-xm mb-4">Pick a password</div>
    </template>
    <template #footer>
        <Divider />
        <ul class="pl-2 my-0 leading-normal">
            <li>At least one lowercase</li>
            <li>At least one uppercase</li>
            <li>At least one numeric</li>
            <li>Minimum 8 characters</li>
        </ul>
    </template>
</Password>

```

Copy

## Filled [\#](https://primevue.org/password/\#filled)

Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.

Enter a password

```markup

<Password v-model="value" :feedback="false" variant="filled" />

```

Copy

## Float Label [\#](https://primevue.org/password/\#floatlabel)

A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.

Enter a password
Over Label
Enter a password
In Label
Enter a password
On Label

```markup

<FloatLabel>
    <Password v-model="value1" inputId="over_label" />
    <label for="over_label">Over Label</label>
</FloatLabel>

<FloatLabel variant="in">
    <Password v-model="value2" inputId="in_label" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>

<FloatLabel variant="on">
    <Password v-model="value3" inputId="on_label" />
    <label for="on_label">On Label</label>
</FloatLabel>

```

Copy

## Ifta Label [\#](https://primevue.org/password/\#iftalabel)

IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.

Enter a password
Password

```markup

<IftaLabel>
    <Password v-model="value" inputId="password" variant="filled" />
    <label for="password">Password</label>
</IftaLabel>

```

Copy

## Sizes [\#](https://primevue.org/password/\#sizes)

Password provides _small_ and _large_ sizes as alternatives to the base.

Enter a password

Enter a password

Enter a password

```markup

<div class="card flex flex-col items-center gap-4">
    <Password v-model="value1" size="small" placeholder="Small" />
    <Password v-model="value2" placeholder="Normal" />
    <Password v-model="value3" size="large" placeholder="Large" />
</div>

```

Copy

## Invalid [\#](https://primevue.org/password/\#invalid)

Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.

Enter a password

Enter a password

```markup

<Password v-model="value1" :invalid="!value1" placeholder="Password" />
<Password v-model="value2" :invalid="!value2" variant="filled" placeholder="Password" />

```

Copy

## Disabled [\#](https://primevue.org/password/\#disabled)

When _disabled_ is present, the element cannot be edited and focused.

Enter a password

```markup

<Password disabled placeholder="Disabled" />

```

Copy

## Accessibility [\#](https://primevue.org/password/\#accessibility)

### Screen Reader

Value to describe the component can either be provided via _label_ tag combined with _id_ prop or using _aria-labelledby_, _aria-label_ props. Screen reader is notified about the changes to the strength of the password using a section that has _aria-live_ while typing.

```markup

<label for="pwd1">Password</label>
<Password inputId="pwd1" />

<span id="pwd2">Password</span>
<Password aria-labelledby="pwd2" />

<Password aria-label="Password"/>

```

Copy

### Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the input. |
| _escape_ | Hides the strength meter if open. |

- Import

- Basic

- Forms

- Meter

- Locale

- ToggleMask

- Template

- Filled

- Float Label

- Ifta Label

- Sizes

- Invalid

- Disabled

- Accessibility


# Password API

API defines helper props, events and others for the PrimeVue Password module.

## Password [\#](https://primevue.org/password/\#api.password)

Password displays strength indicator for password fields.

### Props [\#](https://primevue.org/password/\#api.password.props)

Defines valid properties in Password component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | Nullable<string> | null | Value of the component. |  |
| defaultValue | Nullable<string> | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| promptLabel | string | null | Text to prompt password entry. Defaults to PrimeVue Locale configuration. |  |
| mediumRegex | string \| RegExp | ^(((?=.\*\[a-z\])(?=.\*\[A-Z\]))\|((?=.\*\[a-z\])(?=.\*\[0-9\]))\|((?=.\*\[A-Z\])(?=.\*\[0-9\])))(?=.{6,}) | Regex for a medium level password. |  |
| strongRegex | string \| RegExp | ^(?=.\*\[a-z\])(?=.\*\[A-Z\])(?=.\*\[0-9\])(?=.{8,}) | Regex for a strong level password. |  |
| weakLabel | string | null | Text for a weak password. Defaults to PrimeVue Locale configuration. |  |
| mediumLabel | string | null | Text for a medium password. Defaults to PrimeVue Locale configuration. |  |
| strongLabel | string | null | Text for a strong password. Defaults to PrimeVue Locale configuration. |  |
| feedback | boolean | true | Whether to show the strength indicator or not. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. |  |
| toggleMask | boolean | false | Whether to show an icon to display the password as plain text. |  |
| maskIcon | string | null | Icon to hide displaying the password as plain text. |  |
| unmaskIcon | string | null | Icon to show displaying the password as plain text. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| placeholder | string | null | Placeholder text for the input. |  |
| required | boolean | false | When present, it specifies that an input field must be filled out before submitting the form. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| autofocus | boolean | null | When present, it specifies that an input element should automatically get focus when the page loads. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| inputProps | InputHTMLAttributes | null | Used to pass all properties of the HTMLInputElement to the focusable input element inside the component. |  |
| panelId | string | null | Identifier of the underlying overlay panel element. |  |
| panelClass | string \| object | null | Style class of the overlay panel. |  |
| panelStyle | object | null | Inline style of the overlay panel. |  |
| panelProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the overlay panel inside the component. |  |
| overlayId | string | null | Identifier of the underlying overlay element. |  |
| overlayClass | string \| object | null | Style class of the overlay. |  |
| overlayStyle | object | null | Inline style of the overlay. |  |
| overlayProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the overlay inside the component. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<PasswordPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/password/\#api.password.emits)

Defines valid emits in Password component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: string | void | Emitted when the value changes. |  |
| value-change | value: string | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: Event | void | Callback to invoke on value change. |  |

### Slots [\#](https://primevue.org/password/\#api.password.slots)

Defines valid slots in Password component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| content |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| hideicon | scope: {<br>toggleCallback: () â‡’ void, // Mask icon click event<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| maskicon | scope: {<br>toggleCallback: () â‡’ void, // Mask icon click event<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom hide icon template. |  |
| showicon | scope: {<br>toggleCallback: () â‡’ void, // Unmask icon click event<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| unmaskicon | scope: {<br>toggleCallback: () â‡’ void, // Unmask icon click event<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom unmask icon template. |  |

### Interfaces [\#](https://primevue.org/password/\#api.password.interfaces)

Defines the custom interfaces used by the module.

#### PasswordPassThroughMethodOptions [\#](https://primevue.org/password/\#api.password.interfaces.PasswordPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [PasswordProps](https://primevue.org/password/#api.password.interfaces.PasswordProps) | null | Defines valid properties. |
| state | [PasswordState](https://primevue.org/password/#api.password.interfaces.PasswordState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### PasswordSharedPassThroughMethodOptions [\#](https://primevue.org/password/\#api.password.interfaces.PasswordSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [PasswordProps](https://primevue.org/password/#api.password.interfaces.PasswordProps) | null | Defines valid properties. |
| state | [PasswordState](https://primevue.org/password/#api.password.interfaces.PasswordState) | null | Defines current inline state. |

#### PasswordPassThroughOptions [\#](https://primevue.org/password/\#api.password.interfaces.PasswordPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcInputText | any | null | Used to pass attributes to the InputText component. |
| maskIcon | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the mask icon's DOM element. |
| unmaskIcon | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the unmask icon's DOM element. |
| overlay | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the overlay's DOM element. |
| content | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the overlay's content DOM element. |
| meter | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the meter's DOM element. |
| meterLabel | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the meter label's DOM element. |
| meterText | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the meter text's DOM element. |
| hiddenAccesible | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the hidden accessible DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [PasswordPassThroughTransitionType](https://primevue.org/password/#api.password.types.PasswordPassThroughTransitionType) | null | Used to control Vue Transition API. |

#### PasswordPassThroughAttributes [\#](https://primevue.org/password/\#api.password.interfaces.PasswordPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### PasswordState [\#](https://primevue.org/password/\#api.password.interfaces.PasswordState)

Defines current inline state in Password component.

| name | type | default | description |
| --- | --- | --- | --- |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |
| meter | [PasswordMeterStateOptions](https://primevue.org/password/#api.password.interfaces.PasswordMeterStateOptions) | null | Current overlay visible state as a boolean. |
| infoText | string | null | Current info test state as a string. |
| focused | boolean | false | Current focused state as a boolean. |
| unmasked | boolean | false | Current unmasked state as a boolean. |

#### PasswordMeterStateOptions [\#](https://primevue.org/password/\#api.password.interfaces.PasswordMeterStateOptions)

| name | type | default | description |
| --- | --- | --- | --- |
| strength | string | null | Current strength of the meter state as a string. |
| width | string | null | Current width of the meter state as a string. |

## Types [\#](https://primevue.org/password/\#api.password.types)

Defines the custom types used by the module.

#### PasswordPassThroughOptionType [\#](https://primevue.org/password/\#api.password.types.PasswordPassThroughOptionType)

| values |
| --- |
| PasswordPassThroughAttributes \| (options: PasswordPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### PasswordPassThroughTransitionType [\#](https://primevue.org/password/\#api.password.types.PasswordPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: PasswordPassThroughMethodOptions) => TransitionProps \| undefined |

#### PasswordEmits [\#](https://primevue.org/password/\#api.password.types.PasswordEmits)

| values |
| --- |
| EmitFn<PasswordEmitsOptions> |

- Password

  - Props

  - Emits

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## TreeSelect Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# TreeSelect

TreeSelect is a form component to choose from hierarchical data.

## Import [\#](https://primevue.org/treeselect/\#import)

```javascript

import TreeSelect from 'primevue/treeselect';

```

Copy

## Basic [\#](https://primevue.org/treeselect/\#basic)

TreeSelect is used with the _v-model_ property for two-way value binding along with the _options_ collection. Internally [Tree](https://primevue.org/tree/) component is used so the options model is based on TreeNode API.

In single selection mode, value binding should be the _key_ value of a node.

Select Item

```markup

<TreeSelect v-model="selectedValue" :options="nodes" placeholder="Select Item" class="md:w-80 w-full" />

```

Copy

## Forms [\#](https://primevue.org/treeselect/\#forms)

TreeSelect is used with the _v-model_ property.

Select Item

Submit

```markup

<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-full md:w-80">
    <div class="flex flex-col gap-1">
        <TreeSelect name="node" :options="nodes" placeholder="Select Item" fluid />
        <Message v-if="$form.node?.invalid" severity="error" size="small" variant="simple">{{ $form.node.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>

```

Copy

## Multiple [\#](https://primevue.org/treeselect/\#multiple)

More than one node is selectable by setting _selectionMode_ to _multiple_. By default in multiple selection mode, metaKey press (e.g. _âŒ˜_) is not necessary to add to existing selections. When the optional _metaKeySelection_ is present, behavior is changed in a way that selecting a new node requires meta key to be present. Note that in touch enabled devices, TreeSelect always ignores metaKey.

In multiple selection mode, value binding should be a key-value pair where key is the node key and value is a boolean to indicate selection.

```javascript

{
    '0-0': true,
    '0-1-0': true
}

```

Copy

Select Items

```markup

<TreeSelect v-model="selectedValue" :options="nodes" selectionMode="multiple" display="chip" :maxSelectedLabels="3" placeholder="Select Items" class="md:w-80 w-full" />

```

Copy

## Checkbox [\#](https://primevue.org/treeselect/\#checkbox)

Selection of multiple nodes via checkboxes is enabled by configuring _selectionMode_ as _checkbox_.

In checkbox selection mode, value binding should be a key-value pair where key is the node key and value is an object that has _checked_ and _partialChecked_ properties to represent the checked state of a node object to indicate selection.

```javascript

{
    '0-0': {
        partialChecked: false,
        checked: true
    }
}

```

Copy

Select Items

```markup

<TreeSelect v-model="selectedValue" :options="nodes" selectionMode="checkbox" placeholder="Select Item" class="md:w-80 w-full" />

```

Copy

## Lazy [\#](https://primevue.org/treeselect/\#lazy)

Lazy loading is useful when dealing with huge datasets, in this example nodes are dynamically loaded on demand using _loading_ property and _node-expand_ method. Default value of _loadingMode_ is _mask_ and also _icon_ is available.

Select Item

Select Item

```markup

<TreeSelect v-model="selectedValue" :loading="loading" :options="nodes" @node-expand="onNodeExpand" placeholder="Select Item" class="md:w-80 w-full" />
<TreeSelect v-model="selectedValue2" loadingMode="icon" :options="nodes2" @node-expand="onNodeExpand2" placeholder="Select Item" class="md:w-80 w-full" />

```

Copy

## Filter [\#](https://primevue.org/treeselect/\#filter)

Filtering is enabled by adding the _filter_ property, by default label property of a node is used to compare against the value in the text field, in order to customize which field(s) should be used during search define _filterBy_ property. In addition _filterMode_ specifies the filtering strategy. In _lenient_ mode when the query matches a node, children of the node are not searched further as all descendants of the node are included. On the other hand, in _strict_ mode when the query matches a node, filtering continues on all descendants.

Select Item

Select Item

```markup

<TreeSelect v-model="selectedValue" filter filterMode="lenient" :options="nodes" placeholder="Select Item" class="md:w-80 w-full" />
<TreeSelect v-model="selectedValue" filter filterMode="strict" :options="nodes" placeholder="Select Item" class="md:w-80 w-full" />

```

Copy

## Clear Icon [\#](https://primevue.org/treeselect/\#clearicon)

When _showClear_ is enabled, a clear icon is added to reset the TreeSelect.

Select Item

```markup

<TreeSelect v-model="selectedValue" :options="nodes" placeholder="Select Item" class="md:w-80 w-full" />

```

Copy

## Template [\#](https://primevue.org/treeselect/\#template)

TreeSelect offers multiple slots for customization through templating.

Select Item

```markup

<TreeSelect v-model="selectedValue" :options="nodes" placeholder="Select Item" class="md:w-80 w-full">
    <template #dropdownicon>
        <i class="pi pi-search" />
    </template>
    <template #header>
        <div class="font-medium px-3 py-2">Available Files</div>
    </template>
    <template #footer>
        <div class="px-3 pt-1 pb-2 flex justify-between">
            <Button label="Add New" severity="secondary" text size="small" icon="pi pi-plus" />
            <Button label="Remove All" severity="danger" text size="small" icon="pi pi-plus" />
        </div>
    </template>
</TreeSelect>

```

Copy

## Filled [\#](https://primevue.org/treeselect/\#filled)

Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.

Select Item

```markup

<TreeSelect v-model="selectedValue" variant="filled" :options="nodes" placeholder="Select Item" class="md:w-80 w-full" />

```

Copy

## Float Label [\#](https://primevue.org/treeselect/\#floatlabel)

A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.

empty

Over Label

empty

In Label

empty

On Label

```markup

<FloatLabel class="w-full md:w-80">
    <TreeSelect v-model="value1" inputId="over_label" :options="nodes" class="w-full" />
    <label for="over_label">Over Label</label>
</FloatLabel>

<FloatLabel class="w-full md:w-80" variant="in">
    <TreeSelect v-model="value2" inputId="in_label" :options="nodes" class="w-full" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>

<FloatLabel class="w-full md:w-80" variant="on">
    <TreeSelect v-model="value3" inputId="on_label" :options="nodes" class="w-full" />
    <label for="on_label">On Label</label>
</FloatLabel>

```

Copy

## Ifta Label [\#](https://primevue.org/treeselect/\#iftalabel)

IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.

empty

File

```markup

<IftaLabel class="w-full md:w-80">
    <TreeSelect v-model="selectedValue" inputId="t_file" :options="nodes" class="w-full" variant="filled" />
    <label for="t_file">File</label>
</IftaLabel>

```

Copy

## Sizes [\#](https://primevue.org/treeselect/\#sizes)

TreeSelect provides _small_ and _large_ sizes as alternatives to the base.

Small

Normal

Large

```markup

<TreeSelect v-model="value1" :options="nodes" size="small" placeholder="Small" class="md:w-80 w-full" />
<TreeSelect v-model="value2" :options="nodes" placeholder="Normal" class="md:w-80 w-full" />
<TreeSelect v-model="value3" :options="nodes" size="large" placeholder="Large" class="md:w-80 w-full" />

```

Copy

## Invalid [\#](https://primevue.org/treeselect/\#invalid)

Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.

TreeSelect

TreeSelect

```markup

<TreeSelect v-model="selectedValue1" :invalid="Object.keys(selectedValue1).length === 0" class="md:w-80 w-full" :options="nodes" placeholder="TreeSelect" />
<TreeSelect v-model="selectedValue2" :invalid="Object.keys(selectedValue2).length === 0" class="md:w-80 w-full" :options="nodes" placeholder="TreeSelect" variant="filled" />

```

Copy

## Disabled [\#](https://primevue.org/treeselect/\#disabled)

When _disabled_ is present, the element cannot be edited and focused.

TreeSelect

```markup

<TreeSelect v-model="selectedValue" disabled class="md:w-80 w-full" :options="nodes" placeholder="TreeSelect" />

```

Copy

## Accessibility [\#](https://primevue.org/treeselect/\#accessibility)

### Screen Reader

Value to describe the component can either be provided with _aria-labelledby_ or _aria-label_ props. The treeselect element has a _combobox_ role in addition to _aria-haspopup_ and _aria-expanded_ attributes. The relation between the combobox and the popup is created with _aria-controls_ that refers to the id of the popup.

The popup list has an id that refers to the _aria-controls_ attribute of the _combobox_ element and uses _tree_ as the role. Each list item has a _treeitem_ role along with _aria-label_, _aria-selected_ and _aria-expanded_ attributes. In checkbox selection, _aria-checked_ is used instead of _aria-selected_. Checkbox and toggle icons are hidden from screen readers as their parent element with _treeitem_ role and attributes are used instead for readers and keyboard support. The container element of a treenode has the _group_ role. The _aria-setsize_, _aria-posinset_ and _aria-level_ attributes are calculated implicitly and added to each treeitem.

```markup

<span id="dd1">Options</span>
<TreeSelect aria-labelledby="dd1" />

<TreeSelect aria-label="Options" />

```

Copy

### Closed State Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the treeselect element. |
| _space_ | Opens the popup and moves visual focus to the selected treenode, if there is none then first treenode receives the focus. |
| _down arrow_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |

### Popup Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous focusable element in the page tab sequence. |
| _enter_ | Selects the focused option, closes the popup if selection mode is single. |
| _space_ | Selects the focused option, closes the popup if selection mode is single. |
| _escape_ | Closes the popup, moves focus to the treeselect element. |
| _down arrow_ | Moves focus to the next treenode. |
| _up arrow_ | Moves focus to the previous treenode. |
| _right arrow_ | If node is closed, opens the node otherwise moves focus to the first child node. |
| _left arrow_ | If node is open, closes the node otherwise moves focus to the parent node. |

- Import

- Basic

- Forms

- Multiple

- Checkbox

- Lazy

- Filter

- Clear Icon

- Template

- Filled

- Float Label

- Ifta Label

- Sizes

- Invalid

- Disabled

- Accessibility


# TreeSelect API

API defines helper props, events and others for the PrimeVue TreeSelect module.

## TreeSelect [\#](https://primevue.org/treeselect/\#api.treeselect)

TreeSelect is a form component to choose from hierarchical data.

### Props [\#](https://primevue.org/treeselect/\#api.treeselect.props)

Defines valid properties in TreeSelect component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| options | TreeNode\[\] | null | An array of treenodes. |  |
| expandedKeys | any | null | A map of keys to represent the expansion state in controlled mode. |  |
| showClear | boolean | false | When enabled, a clear icon is displayed to clear the value. |  |
| clearIcon | string | null | Icon to display in clear button. |  |
| scrollHeight | string | 20rem | Height of the viewport, a scrollbar is defined if height of list exceeds this value. |  |
| selectionMode | HintedString<"single" \| "multiple" \| "checkbox"> | null | Defines the selection mode. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. |  |
| display | HintedString<"comma" \| "chip"> | comma | Defines how the selected items are displayed. |  |
| selectedItemsLabel | string | null | Label to display after exceeding max selected labels. |  |
| maxSelectedLabels | number | null | Decides how many selected item labels to show at most. |  |
| metaKeySelection | boolean | false | Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.<br>On touch enabled devices, metaKeySelection is turned off automatically. |  |
| loading | boolean | false | Whether to display loading indicator. |  |
| loadingIcon | string | null | Icon to display when tree is loading. |  |
| loadingMode | HintedString<"mask" \| "icon"> | mask | Loading mode display. |  |
| filter | boolean | false | When specified, displays an input field to filter the items. |  |
| filterBy | string \| Function | label | When filtering is enabled, filterBy decides which field or fields (comma separated) to search against. A callable taking a TreeNode can be provided instead of a list of field names. |  |
| filterMode | HintedString<"lenient" \| "strict"> | lenient | Mode for filtering. |  |
| filterPlaceholder | string | null | Placeholder text to show when filter input is empty. |  |
| filterLocale | string | null | Locale to use in filtering. The default locale is the host environment's current locale. |  |
| emptyMessage | string | No available options | Text to display when there are no options available. Defaults to value from PrimeVue locale configuration. |  |
| placeholder | string | null | Label to display when there are no selections. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| tabindex | string | null | Index of the element in tabbing order. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| inputProps | InputHTMLAttributes | null | Used to pass all properties of the HTMLInputElement to the focusable input element inside the component. |  |
| panelClass | any | null | Style class of the overlay panel. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TreeSelectPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/treeselect/\#api.treeselect.emits)

Defines valid emits in TreeSelect component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| update:expandedKeys | value: TreeExpandedKeys | void | Emitted when the expanded keys change. |  |
| change | value: string\[\] | void | Callback to invoke on value change. |  |
| before-show |  | void | Callback to invoke before the overlay is shown. |  |
| before-hide |  | void | Callback to invoke before the overlay is hidden. |  |
| show |  | void | Callback to invoke when the overlay is shown. |  |
| hide |  | void | Callback to invoke when the overlay is hidden. |  |
| node-select | node: TreeNode | void | Callback to invoke when a node is selected. |  |
| node-unselect | node: TreeNode | void | Callback to invoke when a node is unselected. |  |
| node-expand | node: TreeNode | void | Callback to invoke when a node is expanded. |  |
| node-collapse | node: TreeNode | void | Callback to invoke when a node is collapsed. |  |

### Slots [\#](https://primevue.org/treeselect/\#api.treeselect.slots)

Defines valid slots in TreeSelect component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| value | scope: {<br>value: any, // Selected valueplaceholder: string, // Placeholder<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom value template. |  |
| option | scope: {<br>node: any, // Current nodeselected: boolean, // Selection stateexpanded: boolean, // Expanded state<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option template. |  |
| header | scope: {<br>value: any, // Selected valueoptions: TreeNode, // An array of treenodes.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer | scope: {<br>value: any, // Selected valueoptions: TreeNode, // An array of treenodes.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template. |  |
| triggericon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| dropdownicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom indicator template. |  |
| itemtogglericon | scope: {<br>node: any, // Node instanceexpanded: TreeNode, // Expanded state of the node<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| itemtoggleicon | scope: {<br>node: any, // Node instanceexpanded: TreeNode, // Expanded state of the node<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item toggle icon template. |  |
| itemcheckboxicon | scope: {<br>checked: boolean, // Check state of the nodepartialChecked: boolean, // Partial check state of the node<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item checkbox icon template. |  |
| clearicon | scope: {<br>clearCallback: (event: Event) â‡’ void, // Clear icon click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom clear icon template. |  |

### Interfaces [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces)

Defines the custom interfaces used by the module.

#### TreeSelectPassThroughMethodOptions [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces.TreeSelectPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TreeSelectProps](https://primevue.org/treeselect/#api.treeselect.interfaces.TreeSelectProps) | null | Defines valid properties. |
| state | [TreeSelectState](https://primevue.org/treeselect/#api.treeselect.interfaces.TreeSelectState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### TreeSelectSharedPassThroughMethodOptions [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces.TreeSelectSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [TreeSelectProps](https://primevue.org/treeselect/#api.treeselect.interfaces.TreeSelectProps) | null | Defines valid properties. |
| state | [TreeSelectState](https://primevue.org/treeselect/#api.treeselect.interfaces.TreeSelectState) | null | Defines current inline state. |

#### TreeSelectPassThroughOptions [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces.TreeSelectPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| labelContainer | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the label container's DOM element. |
| label | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the label's DOM element. |
| clearIcon | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the clear icon's DOM element. |
| chipItem | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the chip's DOM element. |
| pcChip | any | null | Used to pass attributes to the Chip. |
| dropdown | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the dropdown's DOM element. |
| dropdownIcon | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the dropdown icon's DOM element. |
| panel | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the panel's DOM element. |
| treeContainer | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the tree container's DOM element. |
| pcTree | any | null | Used to pass attributes to Tree component. |
| emptyMessage | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the empty message's DOM element. |
| hiddenInputContainer | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the hidden input container's DOM element. |
| hiddenInput | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the hidden input's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [TreeSelectPassThroughTransitionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughTransitionType) | null | Used to control Vue Transition API. |

#### TreeSelectPassThroughAttributes [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces.TreeSelectPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### TreeSelectState [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces.TreeSelectState)

Defines current inline state in TreeSelect component.

| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| focused | boolean | false | Current focused state as a boolean. |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |
| expandedKeys | TreeExpandedKeys | null | Current expanded keys state. |

## Types [\#](https://primevue.org/treeselect/\#api.treeselect.types)

Defines the custom types used by the module.

#### TreeSelectPassThroughOptionType [\#](https://primevue.org/treeselect/\#api.treeselect.types.TreeSelectPassThroughOptionType)

| values |
| --- |
| TreeSelectPassThroughAttributes \| (options: TreeSelectPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### TreeSelectPassThroughTransitionType [\#](https://primevue.org/treeselect/\#api.treeselect.types.TreeSelectPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: TreeSelectPassThroughMethodOptions) => TransitionProps \| undefined |

#### TreeSelectEmits [\#](https://primevue.org/treeselect/\#api.treeselect.types.TreeSelectEmits)

| values |
| --- |
| EmitFn<TreeSelectEmitsOptions> |

## TreeNode [\#](https://primevue.org/treeselect/\#api.treenode)

PrimeVue tree components share a common api to specify the node.

### Options [\#](https://primevue.org/treeselect/\#api.options.TreeNode)

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| key | string | null | Mandatory unique key of the node. |  |
| label | string | null | Label of the node. |  |
| data | any | null | Data represented by the node. |  |
| type | string | null | Type of the node to match a template. |  |
| icon | string | null | Icon of the node to display next to content. |  |
| children | TreeNode\[\] | null | An array of treenodes as children. |  |
| style | any | null | Inline style of the node. |  |
| styleClass | string | null | Style class of the node. |  |
| selectable | boolean | null | Whether the node is selectable when selection mode is enabled. |  |
| leaf | boolean | false | Specifies if the node has children. Used in lazy loading. |  |
| loading | boolean | null | Specifies the node loading. Used in Tree and TreeTable. |  |
| expandedIcon | string | null | Icon to use in expanded state. |  |
| collapsedIcon | string | null | Icon to use in collapsed state. |  |
| \[key: string\] | any | null |  |  |

- TreeSelect

  - Props

  - Emits

  - Slots

  - Interfaces

  - Types
- TreeNode

  - Options

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Splitter Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Splitter

Splitter is utilized to separate and resize panels.

## Import [\#](https://primevue.org/splitter/\#import)

```javascript

import Splitter from 'primevue/splitter';
import SplitterPanel from 'primevue/splitterpanel';

```

Copy

## Horizontal [\#](https://primevue.org/splitter/\#horizontal)

Splitter requires two SplitterPanel components as children which are displayed horizontally by default.

Panel 1

Panel 2

```markup

<Splitter style="height: 300px" class="mb-8">
    <SplitterPanel class="flex items-center justify-center"> Panel 1 </SplitterPanel>
    <SplitterPanel class="flex items-center justify-center"> Panel 2 </SplitterPanel>
</Splitter>

```

Copy

## Size [\#](https://primevue.org/splitter/\#size)

Initial dimension of a panel is percentage based and defined using the _size_ property. In addition, _minSize_ is provided to set a minimum value during a resize.

Panel 1

Panel 2

```markup

<Splitter style="height: 300px">
    <SplitterPanel class="flex items-center justify-center" :size="25" :minSize="10"> Panel 1 </SplitterPanel>
    <SplitterPanel class="flex items-center justify-center" :size="75"> Panel 2 </SplitterPanel>
</Splitter>

```

Copy

## Vertical [\#](https://primevue.org/splitter/\#vertical)

Panels are displayed as stacked by setting the _layout_ to _vertical_.

Panel 1

Panel 2

```markup

<Splitter style="height: 300px" layout="vertical">
    <SplitterPanel class="flex items-center justify-center"> Panel 1 </SplitterPanel>
    <SplitterPanel class="flex items-center justify-center"> Panel 2 </SplitterPanel>
</Splitter>

```

Copy

## Nested [\#](https://primevue.org/splitter/\#nested)

Splitters can be combined to create advanced layouts.

Panel 1

Panel 2

Panel 3

Panel 4

```markup

<Splitter style="height: 300px">
    <SplitterPanel class="flex items-center justify-center" :size="20" :minSize="10"> Panel 1 </SplitterPanel>
    <SplitterPanel :size="80">
        <Splitter layout="vertical">
            <SplitterPanel class="flex items-center justify-center" :size="15"> Panel 2 </SplitterPanel>
            <SplitterPanel :size="85">
                <Splitter>
                    <SplitterPanel class="flex items-center justify-center" :size="20"> Panel 3 </SplitterPanel>
                    <SplitterPanel class="flex items-center justify-center" :size="80"> Panel 4 </SplitterPanel>
                </Splitter>
            </SplitterPanel>
        </Splitter>
    </SplitterPanel>
</Splitter>

```

Copy

## Accessibility [\#](https://primevue.org/splitter/\#accessibility)

### Screen Reader

Splitter bar defines _separator_ as the role with _aria-orientation_ set to either horizontal or vertical.

### Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the splitter bar. |
| _down arrow_ | Moves a vertical splitter down. |
| _up arrow_ | Moves a vertical splitter up. |
| _left arrow_ | Moves a horizontal splitter to the left. |
| _right arrow_ | Moves a horizontal splitter to the right. |

- Import

- Horizontal

- Size

- Vertical

- Nested

- Accessibility


# Splitter API

API defines helper props, events and others for the PrimeVue Splitter module.

## Splitter [\#](https://primevue.org/splitter/\#api.splitter)

Splitter is utilized to separate and resize panels.

### Props [\#](https://primevue.org/splitter/\#api.splitter.props)

Defines valid properties in Splitter component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| layout | HintedString<"horizontal" \| "vertical"> | horizontal | Orientation of the panels. |  |
| gutterSize | number | 4 | Size of the divider in pixels. |  |
| stateKey | string | null | Storage identifier of a stateful Splitter. |  |
| stateStorage | HintedString<"session" \| "local"> | session | Defines where a stateful splitter keeps its state, valid values are 'session' for sessionStorage and 'local' for localStorage. |  |
| step | number | 1 | Step factor to increment/decrement the size of the panels while pressing the arrow keys. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SplitterPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/splitter/\#api.splitter.emits)

Defines valid emits in Splitter component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| resizestart | event: [SplitterResizeStartEvent](https://primevue.org/splitter/#api.splitter.events.SplitterResizeStartEvent) | void | Callback to invoke when resize starts. |  |
| resize | event: [SplitterResizeEvent](https://primevue.org/splitter/#api.splitter.events.SplitterResizeEvent) | void | Callback to invoke during the resizing process. |  |
| resizeend | event: [SplitterResizeEndEvent](https://primevue.org/splitter/#api.splitter.events.SplitterResizeEndEvent) | void | Callback to invoke when resize ends. |  |

### Slots [\#](https://primevue.org/splitter/\#api.splitter.slots)

Defines valid slots in Splitter slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default slot to detect SplitterPanel components. |  |

### Methods [\#](https://primevue.org/splitter/\#api.splitter.methods)

Defines methods that can be accessed by the component's reference.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| resetState |  | void | This method resizes all panels by either using the stored state in the case of a stateful Splitter, the size property of each SplitterPanel, or by resetting them to their default values. |  |

### Events [\#](https://primevue.org/splitter/\#api.splitter.events)

Defines the custom events used by the component's emit.

#### SplitterResizeStartEvent [\#](https://primevue.org/splitter/\#api.splitter.events.SplitterResizeStartEvent)

Custom resize start event.

See [resizestart](https://primevue.org/splitter/#api.splitter.emitsoptions.resizestart)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| sizes | number\[\] | Sizes of the panels |

#### SplitterResizeEvent [\#](https://primevue.org/splitter/\#api.splitter.events.SplitterResizeEvent)

Custom resize event.

See [resize](https://primevue.org/splitter/#api.splitter.emitsoptions.resize)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| sizes | number\[\] | Sizes of the panels |

#### SplitterResizeEndEvent [\#](https://primevue.org/splitter/\#api.splitter.events.SplitterResizeEndEvent)

Custom resize end event.

See [resizeend](https://primevue.org/splitter/#api.splitter.emitsoptions.resizeend)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| sizes | number\[\] | Sizes of the panels |

### Interfaces [\#](https://primevue.org/splitter/\#api.splitter.interfaces)

Defines the custom interfaces used by the module.

#### SplitterPassThroughMethodOptions [\#](https://primevue.org/splitter/\#api.splitter.interfaces.SplitterPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SplitterProps](https://primevue.org/splitter/#api.splitter.interfaces.SplitterProps) | null | Defines valid properties. |
| state | [SplitterState](https://primevue.org/splitter/#api.splitter.interfaces.SplitterState) | null | Defines current inline state. |
| context | [SplitterContext](https://primevue.org/splitter/#api.splitter.interfaces.SplitterContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### SplitterPassThroughOptions [\#](https://primevue.org/splitter/\#api.splitter.interfaces.SplitterPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [SplitterPassThroughOptionType](https://primevue.org/splitter/#api.splitter.types.SplitterPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| gutter | [SplitterPassThroughOptionType](https://primevue.org/splitter/#api.splitter.types.SplitterPassThroughOptionType) | null | Used to pass attributes to the gutter's DOM element. |
| gutterHandle | [SplitterPassThroughOptionType](https://primevue.org/splitter/#api.splitter.types.SplitterPassThroughOptionType) | null | Used to pass attributes to the gutter handle's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### SplitterPassThroughAttributes [\#](https://primevue.org/splitter/\#api.splitter.interfaces.SplitterPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### SplitterState [\#](https://primevue.org/splitter/\#api.splitter.interfaces.SplitterState)

Defines current inline state in Panel component.

| name | type | default | description |
| --- | --- | --- | --- |
| prevSize | number | null | Previous size state as a number. |

#### SplitterContext [\#](https://primevue.org/splitter/\#api.splitter.interfaces.SplitterContext)

Defines options in Splitter component.

| name | type | default | description |
| --- | --- | --- | --- |
| nested | boolean | null | Current nested state of the component. |

## Types [\#](https://primevue.org/splitter/\#api.splitter.types)

Defines the custom types used by the module.

#### SplitterPassThroughOptionType [\#](https://primevue.org/splitter/\#api.splitter.types.SplitterPassThroughOptionType)

| values |
| --- |
| SplitterPassThroughAttributes \| (options: SplitterPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### SplitterEmits [\#](https://primevue.org/splitter/\#api.splitter.types.SplitterEmits)

| values |
| --- |
| EmitFn<SplitterEmitsOptions> |

## SplitterPanel [\#](https://primevue.org/splitter/\#api.splitterpanel)

SplitterPanel is a helper component for Splitter component.

### Props [\#](https://primevue.org/splitter/\#api.splitterpanel.props)

Defines valid properties in SplitterPanel component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| size | number | null | Size of the element relative to 100%. |  |
| minSize | number | null | Minimum size of the element relative to 100%. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SplitterPanelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Interfaces [\#](https://primevue.org/splitter/\#api.splitterpanel.interfaces)

Defines the custom interfaces used by the module.

#### SplitterPanelPassThroughMethodOptions [\#](https://primevue.org/splitter/\#api.splitterpanel.interfaces.SplitterPanelPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SplitterPanelProps](https://primevue.org/splitter/#api.splitterpanel.interfaces.SplitterPanelProps) | null | Defines valid properties. |
| context | [SplitterPanelContext](https://primevue.org/splitter/#api.splitterpanel.interfaces.SplitterPanelContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### SplitterPanelPassThroughOptions [\#](https://primevue.org/splitter/\#api.splitterpanel.interfaces.SplitterPanelPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [SplitterPanelPassThroughOptionType](https://primevue.org/splitter/#api.splitterpanel.types.SplitterPanelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### SplitterPanelPassThroughAttributes [\#](https://primevue.org/splitter/\#api.splitterpanel.interfaces.SplitterPanelPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### SplitterPanelContext [\#](https://primevue.org/splitter/\#api.splitterpanel.interfaces.SplitterPanelContext)

Defines options in SplitterPanel component.

| name | type | default | description |
| --- | --- | --- | --- |
| nested | boolean | null | Current nested state of the panel. |

## Types [\#](https://primevue.org/splitter/\#api.splitterpanel.types)

Defines the custom types used by the module.

#### SplitterPanelPassThroughOptionType [\#](https://primevue.org/splitter/\#api.splitterpanel.types.SplitterPanelPassThroughOptionType)

| values |
| --- |
| SplitterPanelPassThroughAttributes \| (options: SplitterPanelPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### SplitterPanelEmits [\#](https://primevue.org/splitter/\#api.splitterpanel.types.SplitterPanelEmits)

| values |
| --- |
| EmitFn<SplitterPanelEmitsOptions> |

- Splitter

  - Props

  - Emits

  - Slots

  - Methods

  - Events

  - Interfaces

  - Types
- SplitterPanel

  - Props

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Auto Import
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

# Auto Import

On-demand PrimeVue components with auto imports and tree-shaking.

## Overview [\#](https://primevue.org/autoimport/\#overview)

PrimeVue components need to be imported and configured individually. In the next section, we'll cleanup the code using auto imports.

```javascript

import { createApp } from "vue";
import PrimeVue from "primevue/config";
import InputText from 'primevue/inputtext';
import Button from 'primevue/button';
import App from './App.vue'
const app = createApp(App);

app.use(PrimeVue);
app.component('InputText', InputText);
app.component('Button', Button);

```

Copy

## Unplugin [\#](https://primevue.org/autoimport/\#unplugin)

The [unplugin-vue-components](https://github.com/unplugin/unplugin-vue-components) library can automatically import and register PrimeVue components with the help of _@primevue/auto-import-resolver_. Begin with installing the packages as dev dependencies.

```javascript

npm i unplugin-vue-components -D
npm i @primevue/auto-import-resolver -D

```

Copy

Next step would be adding the _PrimeVueResolver_ at vite.config using the _Components_ plugin.

```javascript

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import Components from 'unplugin-vue-components/vite';
import {PrimeVueResolver} from '@primevue/auto-import-resolver';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [\
    vue(),\
    Components({\
      resolvers: [\
        PrimeVueResolver()\
      ]\
    })]
})

```

Copy

That's it, now the initialization code can be refactored as the following. For configuration like namespacing, visit the [official documentation](https://github.com/unplugin/unplugin-vue-components?tab=readme-ov-file#configuration).

```javascript

import { createApp } from "vue";
import PrimeVue from "primevue/config";
import App from './App.vue'
const app = createApp(App);

app.use(PrimeVue);

```

Copy

## Example [\#](https://primevue.org/autoimport/\#example)

A complete example using PrimeVue with auto imports is available at the [playground](https://primevue.org/playground).

- Overview

- Unplugin

- Example


PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## InputText Component Overview
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# InputText

InputText is an extension to standard input element with theming.

## Import [\#](https://primevue.org/inputtext/\#import)

```javascript

import InputText from 'primevue/inputtext';

```

Copy

## Basic [\#](https://primevue.org/inputtext/\#basic)

InputText is used with the _v-model_ property for two-way value binding.

```markup

<InputText type="text" v-model="value" />

```

Copy

## Forms [\#](https://primevue.org/inputtext/\#forms)

InputText integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.

Submit

```markup

<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex justify-center flex-col gap-4">
    <div class="flex flex-col gap-1">
        <InputText name="username" type="text" placeholder="Username" />
        <Message v-if="$form.username?.invalid" severity="error" size="small" variant="simple">{{ $form.username.error?.message }}</Message>
    </div>
    <div class="flex flex-col gap-1">
        <InputText name="email" type="text" placeholder="Email" />
        <Message v-if="$form.email?.invalid" severity="error" size="small" variant="simple">{{ $form.email.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>

```

Copy

## Filled [\#](https://primevue.org/inputtext/\#filled)

Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.

```markup

<InputText type="text" v-model="value" variant="filled" />

```

Copy

## Float Label [\#](https://primevue.org/inputtext/\#floatlabel)

FloatLabel visually integrates a label with its form element. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.

Over LabelIn LabelOn Label

```markup

<FloatLabel>
    <InputText id="over_label" v-model="value1" />
    <label for="over_label">Over Label</label>
</FloatLabel>

<FloatLabel variant="in">
    <InputText id="in_label" v-model="value2" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>

<FloatLabel variant="on">
    <InputText id="on_label" v-model="value3" />
    <label for="on_label">On Label</label>
</FloatLabel>

```

Copy

## Ifta Label [\#](https://primevue.org/inputtext/\#iftalabel)

IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.

Username

```markup

<IftaLabel>
    <InputText id="username" v-model="value" variant="filled" />
    <label for="username">Username</label>
</IftaLabel>

```

Copy

## Sizes [\#](https://primevue.org/inputtext/\#sizes)

InputText provides _small_ and _large_ sizes as alternatives to the base.

```markup

<InputText v-model="value1" type="text" size="small" placeholder="Small" />
<InputText v-model="value2" type="text" placeholder="Normal" />
<InputText v-model="value3" type="text" size="large" placeholder="Large" />

```

Copy

## Help Text [\#](https://primevue.org/inputtext/\#helptext)

An advisory text can be defined with the [Message](https://primevue.org/message) component.

Username

Enter your username to reset your password.

```markup

<div class="flex flex-col gap-2">
    <label for="username">Username</label>
    <InputText id="username" v-model="value" aria-describedby="username-help" />
    <Message size="small" severity="secondary" variant="simple">Enter your username to reset your password.</Message>
</div>

```

Copy

## Invalid [\#](https://primevue.org/inputtext/\#invalid)

Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.

```markup

<InputText v-model="value1" :invalid="!value1" placeholder="Name" />
<InputText v-model="value2" :invalid="!value2" variant="filled" placeholder="Name" />

```

Copy

## Disabled [\#](https://primevue.org/inputtext/\#disabled)

When _disabled_ is present, the element cannot be edited and focused.

```markup

<InputText v-model="value" disabled placeholder="Disabled" />

```

Copy

## Accessibility [\#](https://primevue.org/inputtext/\#accessibility)

### Screen Reader

InputText component renders a native input element that implicitly includes any passed prop. Value to describe the component can either be provided via _label_ tag combined with _id_ prop or using _aria-labelledby_, _aria-label_ props.

```markup

<label for="firstname">Firstname</label>
<InputText id="firstname" />

<span id="lastname">Lastname</span>
<InputText aria-labelledby="lastname" />

<InputText aria-label="Age"/>

```

Copy

### Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the input. |

- Import

- Basic

- Forms

- Filled

- Float Label

- Ifta Label

- Sizes

- Help Text

- Invalid

- Disabled

- Accessibility


# InputText API

API defines helper props, events and others for the PrimeVue InputText module.

## InputText [\#](https://primevue.org/inputtext/\#api.inputtext)

InputText renders a text field to enter data.

### Props [\#](https://primevue.org/inputtext/\#api.inputtext.props)

Defines valid properties in InputText component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | Nullable<string> | null | Value of the component. |  |
| defaultValue | Nullable<string> | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| size | null \| HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | null \| boolean | false | When present, it specifies that the component should have invalid state style. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| fluid | null \| boolean | null | Spans 100% width of the container when enabled. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<InputTextPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/inputtext/\#api.inputtext.emits)

Defines valid emits in InputText component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: undefined \| string | void | Emitted when the value changes. |  |
| value-change | value: undefined \| string | void | Emitted when the value changes in uncontrolled mode. |  |

### Interfaces [\#](https://primevue.org/inputtext/\#api.inputtext.interfaces)

Defines the custom interfaces used by the module.

#### InputTextPassThroughMethodOptions [\#](https://primevue.org/inputtext/\#api.inputtext.interfaces.InputTextPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [InputTextProps](https://primevue.org/inputtext/#api.inputtext.interfaces.InputTextProps) | null | Defines valid properties. |
| context | [InputTextContext](https://primevue.org/inputtext/#api.inputtext.interfaces.InputTextContext) | null | Defines current options. |
| parent | any | null | Defines parent instance. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### InputTextPassThroughOptions [\#](https://primevue.org/inputtext/\#api.inputtext.interfaces.InputTextPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [InputTextPassThroughOptionType<T>](https://primevue.org/inputtext/#api.inputtext.types.InputTextPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### InputTextPassThroughAttributes [\#](https://primevue.org/inputtext/\#api.inputtext.interfaces.InputTextPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### InputTextContext [\#](https://primevue.org/inputtext/\#api.inputtext.interfaces.InputTextContext)

Defines current options in InputText component.

| name | type | default | description |
| --- | --- | --- | --- |
| filled | boolean | false | Current filled state of the component as a boolean. |
| disabled | boolean | false | Current disabled state of the component as a boolean. |

## Types [\#](https://primevue.org/inputtext/\#api.inputtext.types)

Defines the custom types used by the module.

#### InputTextPassThroughOptionType [\#](https://primevue.org/inputtext/\#api.inputtext.types.InputTextPassThroughOptionType)

| values |
| --- |
| InputTextPassThroughAttributes \| (options: InputTextPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### InputTextEmits [\#](https://primevue.org/inputtext/\#api.inputtext.types.InputTextEmits)

| values |
| --- |
| EmitFn<InputTextEmitsOptions> |

- InputText

  - Props

  - Emits

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue AutoComplete Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# AutoComplete

AutoComplete is an input component that provides real-time suggestions when being typed.

## Import [\#](https://primevue.org/autocomplete/\#import)

```javascript

import AutoComplete from 'primevue/autocomplete';

```

Copy

## Basic [\#](https://primevue.org/autocomplete/\#basic)

AutoComplete is used with the _v-model_ property for two-way value binding. In addition, _suggestions_ property and a _complete_ method are required to query the results.

No results found

```markup

<AutoComplete v-model="value" :suggestions="items" @complete="search" />

```

Copy

## Objects [\#](https://primevue.org/autocomplete/\#objects)

AutoComplete can work with objects using the _optionLabel_ property that defines the label to display as a suggestion. The value passed to the model would still be the object instance of a suggestion. Here is an example with a Country object that has name and code fields such as _{name: "United States", code:"USA"}_.

No results found

```markup

<AutoComplete v-model="selectedCountry" optionLabel="name" :suggestions="filteredCountries" @complete="search" />

```

Copy

## Forms [\#](https://primevue.org/autocomplete/\#forms)

AutoComplete integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.

No results found

Submit

```markup

<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex justify-center flex-col gap-4 w-full md:w-56">
    <div class="flex flex-col gap-1">
        <AutoComplete name="country.name" optionLabel="name" :suggestions="filteredCountries" @complete="search" />
        <Message v-if="$form.country?.name?.invalid" severity="error" size="small" variant="simple">{{ $form.country.name.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>

```

Copy

## Dropdown [\#](https://primevue.org/autocomplete/\#dropdown)

Enabling _dropdown_ property displays a button next to the input field where click behavior of the button is defined using _dropdownMode_ property that takes **blank** or **current** as possible values. _blank_ is the default mode to send a query with an empty string whereas _current_ setting sends a query with the current value of the input.

No results found

```markup

<AutoComplete v-model="value" dropdown :suggestions="items" @complete="search" />

```

Copy

## Template [\#](https://primevue.org/autocomplete/\#template)

AutoComplete offers multiple slots for customization through templating.

No results found

```markup

<AutoComplete v-model="selectedCountry" optionLabel="name" :suggestions="filteredCountries" @complete="search">
    <template #option="slotProps">
        <div class="flex items-center">
            <img :alt="slotProps.option.name" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px" />
            <div>{{ slotProps.option.name }}</div>
        </div>
    </template>
    <template #header>
        <div class="font-medium px-3 py-2">Available Countries</div>
    </template>
    <template #footer>
        <div class="px-3 py-3">
            <Button label="Add New" fluid severity="secondary" text size="small" icon="pi pi-plus" />
        </div>
    </template>
</AutoComplete>

```

Copy

## Group [\#](https://primevue.org/autocomplete/\#group)

Option groups are specified with the _optionGroupLabel_ and _optionGroupChildren_ properties.

No results found

```markup

<AutoComplete v-model="selectedCity" :suggestions="filteredCities" @complete="search" optionLabel="label" optionGroupLabel="label" optionGroupChildren="items" placeholder="Hint: type 'a'">
    <template #optiongroup="slotProps">
        <div class="flex items-center country-item">
            <img :alt="slotProps.option.label" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px" />
            <div>{{ slotProps.option.label }}</div>
        </div>
    </template>
</AutoComplete>

```

Copy

## Force Selection [\#](https://primevue.org/autocomplete/\#forceselection)

ForceSelection mode validates the manual input to check whether it also exists in the suggestions list, if not the input value is cleared to make sure the value passed to the model is always one of the suggestions. Simply enable _forceSelection_ to enforce that input is always from the suggestion list.

No results found

```markup

<AutoComplete v-model="selectedCountry" forceSelection optionLabel="name" :suggestions="filteredCountries" @complete="search" />

```

Copy

## Virtual Scroll [\#](https://primevue.org/autocomplete/\#virtualscroll)

Virtual Scrolling is a performant way to render large lists. Configuration of the scroll behavior is defined with _virtualScrollerOptions_ that requires _itemSize_ as the mandatory value to set the height of an item. Visit [VirtualScroller](https://primevue.org/virtualscroller/) documentation for more information about the configuration API.

No results found

```markup

<AutoComplete v-model="selectedItem" :suggestions="filteredItems" @complete="searchItems"
    :virtualScrollerOptions="{ itemSize: 38 }" optionLabel="label" dropdown />

```

Copy

## Filled [\#](https://primevue.org/autocomplete/\#filled)

Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.

No results found

```markup

<AutoComplete v-model="value" :suggestions="items" @complete="search" variant="filled" />

```

Copy

## Float Label [\#](https://primevue.org/autocomplete/\#floatlabel)

A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.

No results found
Over Label
No results found
In Label
No results found
On Label

```markup

<FloatLabel>
    <AutoComplete v-model="value1" inputId="over_label" :suggestions="items" @complete="search" />
    <label for="over_label">Over Label</label>
</FloatLabel>

<FloatLabel variant="in">
    <AutoComplete v-model="value2" inputId="in_label" :suggestions="items" @complete="search" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>

<FloatLabel variant="on">
    <AutoComplete v-model="value3" inputId="on_label" :suggestions="items" @complete="search" />
    <label for="on_label">On Label</label>
</FloatLabel>

```

Copy

## Ifta Label [\#](https://primevue.org/autocomplete/\#iftalabel)

IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.

No results found
Identifier

```markup

<IftaLabel>
    <AutoComplete v-model="value" inputId="ac" :suggestions="items" @complete="search" variant="filled" />
    <label for="ac">Identifier</label>
</IftaLabel>

```

Copy

## Sizes [\#](https://primevue.org/autocomplete/\#sizes)

AutoComplete provides _small_ and _large_ sizes as alternatives to the base.

No results found

No results found

No results found

```markup

<AutoComplete v-model="value1" :suggestions="items" @complete="search" size="small" placeholder="Small" dropdown />
<AutoComplete v-model="value2" :suggestions="items" @complete="search" placeholder="Normal" dropdown />
<AutoComplete v-model="value3" :suggestions="items" @complete="search" size="large" placeholder="Large" dropdown />

```

Copy

## Multiple [\#](https://primevue.org/autocomplete/\#multiple)

Multiple mode is enabled using _multiple_ property used to select more than one value from the autocomplete. In this case, value reference should be an array.

With Typeahead

No results found

Without Typeahead

```markup

<label for="multiple-ac-1" class="font-bold mb-2 block">With Typeahead</label>
<AutoComplete v-model="value1" inputId="multiple-ac-1" multiple fluid :suggestions="items" @complete="search" />

<label for="multiple-ac-2" class="font-bold mt-8 mb-2 block">Without Typeahead</label>
<AutoComplete v-model="value2" inputId="multiple-ac-2" multiple fluid @complete="search" :typeahead="false" />

```

Copy

## Invalid [\#](https://primevue.org/autocomplete/\#invalid)

Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.

No results found

No results found

```markup

<AutoComplete v-model="value1" :suggestions="items" @complete="search" :invalid="!value1" placeholder="Code" />
<AutoComplete v-model="value2" :suggestions="items" @complete="search" :invalid="!value2" variant="filled" placeholder="Code" />

```

Copy

## Disabled [\#](https://primevue.org/autocomplete/\#disabled)

When _disabled_ is present, the element cannot be edited and focused.

No results found

```markup

<AutoComplete disabled placeholder="Disabled" />

```

Copy

## Accessibility [\#](https://primevue.org/autocomplete/\#accessibility)

### Screen Reader

Value to describe the component can either be provided via _label_ tag combined with _inputId_ prop or using _aria-labelledby_, _aria-label_ props. The input element has _combobox_ role in addition to _aria-autocomplete_, _aria-haspopup_ and _aria-expanded_ attributes. The relation between the input and the popup is created with _aria-controls_ and _aria-activedescendant_ attribute is used to instruct screen reader which option to read during keyboard navigation within the popup list.

In multiple mode, chip list uses _listbox_ role with _aria-orientation_ set to horizontal whereas each chip has the _option_ role with _aria-label_ set to the label of the chip.

The popup list has an id that refers to the _aria-controls_ attribute of the input element and uses _listbox_ as the role. Each list item has _option_ role and an id to match the _aria-activedescendant_ of the input element.

```markup

<label for="ac1">;Username</label>
<AutoComplete inputId="ac1" />

<span id="ac2">Email</span>
<AutoComplete aria-labelledby="ac2" />

<AutoComplete aria-label="City" />

```

Copy

### Closed State Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the autocomplete element. |
| _any printable character_ | Opens the popup and moves focus to the first option. |

### Popup Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next focusable element in the popup. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page. |
| _shift_ \+ _tab_ | Moves focus to the previous focusable element in the popup. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page. |
| _enter_ | Selects the focused option and closes the popup, then moves focus to the autocomplete element. |
| _space_ | Selects the focused option and closes the popup, then moves focus to the autocomplete element. |
| _escape_ | Closes the popup, then moves focus to the autocomplete element. |
| _down arrow_ | Moves focus to the next option, if there is none then visual focus does not change. |
| _up arrow_ | Moves focus to the previous option, if there is none then visual focus does not change. |
| _alt_ \+ _up arrow_ | Selects the focused option and closes the popup, then moves focus to the autocomplete element. |
| _left arrow_ | Removes the visual focus from the current option and moves input cursor to one character left. |
| _right arrow_ | Removes the visual focus from the current option and moves input cursor to one character right. |
| _home_ | Moves input cursor at the end, if not then moves focus to the first option. |
| _end_ | Moves input cursor at the beginning, if not then moves focus to the last option. |
| _pageUp_ | Jumps visual focus to first option. |
| _pageDown_ | Jumps visual focus to last option. |
| _shift_ \+ _down arrow_ | Moves focus to the next option and toggles the selection state. |
| _shift_ \+ _up arrow_ | Moves focus to the previous option and toggles the selection state. |
| _shift_ \+ _space_ | Selects the items between the most recently selected option and the focused option. |
| _control_ \+ _shift_ \+ _home_ | Selects the focused options and all the options up to the first one. |
| _control_ \+ _shift_ \+ _end_ | Selects the focused options and all the options down to the last one. |

### Chips Input Keyboard Support

| Key | Function |
| --- | --- |
| _backspace_ | Deletes the previous chip if the input field is empty. |
| _left arrow_ | Moves focus to the previous chip if available and input field is empty. |

### Chip Keyboard Support

| Key | Function |
| --- | --- |
| _left arrow_ | Moves focus to the previous chip if available. |
| _right arrow_ | Moves focus to the next chip, if there is none then input field receives the focus. |
| _backspace_ | Deletes the chips and adds focus to the input field. |

- Import

- Basic

- Objects

- Forms

- Dropdown

- Template

- Group

- Force Selection

- Virtual Scroll

- Filled

- Float Label

- Ifta Label

- Sizes

- Multiple

- Invalid

- Disabled

- Accessibility


# AutoComplete API

API defines helper props, events and others for the PrimeVue AutoComplete module.

## AutoComplete [\#](https://primevue.org/autocomplete/\#api.autocomplete)

AutoComplete is an input component that provides real-time suggestions while being typed.

### Props [\#](https://primevue.org/autocomplete/\#api.autocomplete.props)

Defines valid properties in AutoComplete component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| suggestions | any\[\] | null | An array of suggestions to display. |  |
| optionLabel | string \| Function | null | Property name or getter function to use as the label of an option. |  |
| optionDisabled | string \| Function | null | Property name or getter function to use as the disabled flag of an option, defaults to false when not defined. |  |
| optionGroupLabel | string \| Function | null | Property name or getter function to use as the label of an option group. |  |
| optionGroupChildren | string \| Function | null | Property name or getter function that refers to the children options of option group. |  |
| typeahead | boolean | true | whether typeahead is active or not. |  |
| scrollHeight | string | 14rem | Maximum height of the suggestions overlay. |  |
| dropdown | boolean | false | Displays a button next to the input field when enabled. |  |
| dropdownMode | HintedString<"blank" \| "current"> | blank | Specifies the behavior dropdown button. Default 'blank' mode sends an empty string and 'current' mode sends the input value. |  |
| multiple | boolean | false | Specifies if multiple values can be selected. |  |
| placeholder | string | null | Default text to display when no option is selected. |  |
| loading | boolean | false | Whether the autocomplete is in loading state. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| dataKey | string | null | A property to uniquely identify an option. |  |
| minLength | number | 1 | Minimum number of characters to initiate a search. |  |
| delay | number | 300 | Delay between keystrokes to wait before sending a query. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached.<br>Special keywords are 'body' for document body and 'self' for the element itself. |  |
| forceSelection | boolean | false | When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions. |  |
| completeOnFocus | boolean | false | Whether to run a query when input receives focus. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| panelStyle | object | null | Inline style of the overlay. |  |
| panelClass | string \| object | null | Style class of the overlay. |  |
| overlayStyle | object | null | Inline style of the overlay overlay. |  |
| overlayClass | string \| object | null | Style class of the overlay overlay. |  |
| dropdownIcon | string | null | Icon to display in the dropdown. |  |
| dropdownClass | string \| object | null | Style class of the dropdown button. |  |
| loadingIcon | string | null | Icon to display in loading state. |  |
| loader | string | null | Icon to display in loading state. |  |
| removeTokenIcon | string | null | Icon to display in chip remove action. |  |
| chipIcon | string | null | Icon to display in chip remove action. |  |
| virtualScrollerOptions | any | null | Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it. |  |
| autoOptionFocus | boolean | false | Whether to focus on the first visible or selected element when the overlay is shown. |  |
| selectOnFocus | boolean | false | When enabled, the focused option is selected. |  |
| focusOnHover | boolean | true | When enabled, the focus is placed on the hovered option. |  |
| searchLocale | string | null | Locale to use in searching. The default locale is the host environment's current locale. |  |
| searchMessage | string | '{0} results are available' | Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration. |  |
| selectionMessage | string | '{0} items selected' | Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySelectionMessage | string | No selected item | Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySearchMessage | string | No results found | Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration. |  |
| showEmptyMessage | boolean | true | When enabled, empty search message will be visible. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying input element. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AutoCompletePassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/autocomplete/\#api.autocomplete.emits)

Defines valid emits in AutoComplete component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [AutoCompleteChangeEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteChangeEvent) | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| item-select | event: [AutoCompleteOptionSelectEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteOptionSelectEvent) | void |  |  |
| item-unselect | event: [AutoCompleteOptionUnselectEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteOptionUnselectEvent) | void |  |  |
| option-select | event: [AutoCompleteOptionSelectEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteOptionSelectEvent) | void | Callback to invoke when a suggestion is selected. |  |
| option-unselect | event: [AutoCompleteOptionUnselectEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteOptionUnselectEvent) | void | Callback to invoke when a selected value is removed. |  |
| dropdown-click | event: [AutoCompleteDropdownClickEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteDropdownClickEvent) | void | Callback to invoke to when dropdown button is clicked. |  |
| clear |  | void | Callback to invoke when input is cleared by the user. |  |
| complete | event: [AutoCompleteCompleteEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteCompleteEvent) | void | Callback to invoke to search for suggestions. |  |
| before-show |  | void | Callback to invoke before the overlay is shown. |  |
| before-hide |  | void | Callback to invoke before the overlay is hidden. |  |
| show |  | void | Callback to invoke when the overlay is shown. |  |
| hide |  | void | Callback to invoke when the overlay is hidden. |  |

### Slots [\#](https://primevue.org/autocomplete/\#api.autocomplete.slots)

Defines valid slots in AutoComplete component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| chip | scope: {<br>value: any, // A value in the selectionindex: number, // Index of the token.removeCallback: (event: Event) â‡’ void, // Remove token icon function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom chip template. |  |
| header | scope: {<br>value: any, // Value of the componentsuggestions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template of panel. |  |
| footer | scope: {<br>value: any, // Value of the componentsuggestions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template of panel. |  |
| option | scope: {<br>option: any, // Option instanceindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option template. |  |
| optiongroup | scope: {<br>option: any, // Option instanceindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option group template. |  |
| content | scope: {<br>items: any, // An array of objects to display for virtualscrollerstyleClass: string, // Style class of the componentcontentRef: (el: any) â‡’ void, // Referance of the contentgetItemOptions: (index: number) â‡’ VirtualScrollerItemOptions, // Options of the items<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| loader | scope: {<br>options: any, // Options of the loader items for virtualscroller<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loader template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template when there is no data to display. |  |
| dropdownicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom dropdown icon template. |  |
| removetokenicon | scope: {<br>class: string, // Style class of the icon.index: number, // Index of the token.removeCallback: (event: Event, index: number) â‡’ void, // Remove token icon function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| chipicon | scope: {<br>class: string, // Style class of the icon.index: number, // Index of the token.removeCallback: (event: Event, index: number) â‡’ void, // Remove token icon function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom chip icon template in multiple mode. |  |
| loadingicon | scope: {<br>class: string, // Style class of the loader.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| dropdownbutton | scope: {<br>toggleCallback: (event: Event) â‡’ void, // Toggle function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| dropdown | scope: {<br>toggleCallback: (event: Event) â‡’ void, // Toggle function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom dropdown template. |  |

### Events [\#](https://primevue.org/autocomplete/\#api.autocomplete.events)

Defines the custom events used by the component's emit.

#### AutoCompleteChangeEvent [\#](https://primevue.org/autocomplete/\#api.autocomplete.events.AutoCompleteChangeEvent)

Custom change event.

See [change](https://primevue.org/autocomplete/#api.autocomplete.emitsoptions.change)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| value | any | Selected option value |

#### AutoCompleteOptionSelectEvent [\#](https://primevue.org/autocomplete/\#api.autocomplete.events.AutoCompleteOptionSelectEvent)

Custom item select event.

See [item-select](https://primevue.org/autocomplete/#api.autocomplete.emitsoptions.item-select)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | any | Selected item |

#### AutoCompleteOptionUnselectEvent [\#](https://primevue.org/autocomplete/\#api.autocomplete.events.AutoCompleteOptionUnselectEvent)

Custom item unselect event.

See [item-unselect](https://primevue.org/autocomplete/#api.autocomplete.emitsoptions.item-unselect)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | any | Selected item |

#### AutoCompleteDropdownClickEvent [\#](https://primevue.org/autocomplete/\#api.autocomplete.events.AutoCompleteDropdownClickEvent)

Custom dropdown click event.

See [dropdown-click](https://primevue.org/autocomplete/#api.autocomplete.emitsoptions.dropdown-click)

| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event |
| query | string | Current value of the input field |

#### AutoCompleteCompleteEvent [\#](https://primevue.org/autocomplete/\#api.autocomplete.events.AutoCompleteCompleteEvent)

Custom complete event.

See [complete](https://primevue.org/autocomplete/#api.autocomplete.emitsoptions.complete)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| query | string | Value to search with |

### Interfaces [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces)

Defines the custom interfaces used by the module.

#### AutoCompletePassThroughMethodOptions [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompletePassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AutoCompleteProps](https://primevue.org/autocomplete/#api.autocomplete.interfaces.AutoCompleteProps) | null | Defines valid properties. |
| state | [AutoCompleteState](https://primevue.org/autocomplete/#api.autocomplete.interfaces.AutoCompleteState) | null | Defines current inline state. |
| context | [AutoCompleteContext](https://primevue.org/autocomplete/#api.autocomplete.interfaces.AutoCompleteContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### AutoCompleteSharedPassThroughMethodOptions [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompleteSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [AutoCompleteProps](https://primevue.org/autocomplete/#api.autocomplete.interfaces.AutoCompleteProps) | null | Defines valid properties. |
| state | [AutoCompleteState](https://primevue.org/autocomplete/#api.autocomplete.interfaces.AutoCompleteState) | null | Defines current inline state. |

#### AutoCompletePassThroughOptions [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompletePassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcInputText | any | null | Used to pass attributes to the InputText component. |
| inputMultiple | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the input multiple's DOM element. |
| chipItem | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the chip's DOM element. |
| pcChip | any | null | Used to pass attributes to the Chip. |
| chipIcon | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the chip icon's DOM element. |
| inputChip | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the input chip's DOM element. |
| loader | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the loader's DOM element. |
| dropdown | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the dropdown's DOM element. |
| dropdownIcon | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the dropdown icon's DOM element. |
| overlay | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the overlay's DOM element. |
| virtualScroller | any | null | Used to pass attributes to the VirtualScroller component. |
| listContainer | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the list container's DOM element. |
| list | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| optionGroup | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the option group's DOM element. |
| option | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the option's DOM element. |
| emptyMessage | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the empty message's DOM element. |
| searchResultMessage | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the search result message's DOM element. |
| selectedMessage | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the selected message's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [AutoCompletePassThroughTransitionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughTransitionType) | null | Used to control Vue Transition API. |

#### AutoCompletePassThroughAttributes [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompletePassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### AutoCompleteState [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompleteState)

Defines current inline state in AutoComplete component.

| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| focused | boolean | false | Current focused state as a boolean. |
| focusedOptionIndex | number | -1 | Current focused item index as a number. |
| focusedMultipleOptionIndex | number | -1 | Current focused item index as a number. |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |
| searching | boolean | false | Current search state as a boolean. |
| multipleInputValue | Nullable<string> | null | Value of the token input as a string. |

#### AutoCompleteContext [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompleteContext)

Defines current options in AutoComplete component.

| name | type | default | description |
| --- | --- | --- | --- |
| option | any | null | Current option. |
| index | number | null | Index of the current option. |
| selected | boolean | false | Current selection state of the item as a boolean. |
| focused | boolean | false | Current focus state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |

## Types [\#](https://primevue.org/autocomplete/\#api.autocomplete.types)

Defines the custom types used by the module.

#### AutoCompletePassThroughOptionType [\#](https://primevue.org/autocomplete/\#api.autocomplete.types.AutoCompletePassThroughOptionType)

| values |
| --- |
| AutoCompletePassThroughAttributes \| (options: AutoCompletePassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### AutoCompletePassThroughTransitionType [\#](https://primevue.org/autocomplete/\#api.autocomplete.types.AutoCompletePassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: AutoCompletePassThroughMethodOptions) => TransitionProps \| undefined |

#### AutoCompleteEmits [\#](https://primevue.org/autocomplete/\#api.autocomplete.types.AutoCompleteEmits)

| values |
| --- |
| EmitFn<AutoCompleteEmitsOptions> |

- AutoComplete

  - Props

  - Emits

  - Slots

  - Events

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## ProgressSpinner Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# ProgressSpinner

ProgressSpinner is a process status indicator.

## import [\#](https://primevue.org/progressspinner/\#import)

```javascript

import ProgressSpinner from 'primevue/progressspinner';

```

Copy

## Basic [\#](https://primevue.org/progressspinner/\#basic)

An infinite spin animation is displayed by default.

```markup

<ProgressSpinner />

```

Copy

## Custom [\#](https://primevue.org/progressspinner/\#custom)

ProgressSpinner can be customized with styling property like _style_, _strokeWidth_ _fill_ and _animationDuration_.

```markup

<ProgressSpinner style="width: 50px; height: 50px" strokeWidth="8" fill="transparent"
    animationDuration=".5s" aria-label="Custom ProgressSpinner" />

```

Copy

## Accessibility [\#](https://primevue.org/progressspinner/\#accessibility)

### Screen Reader

ProgressSpinner components uses _progressbar_ role. Value to describe the component can be defined using _aria-labelledby_ and _aria-label_ props.

```markup

<ProgressSpinner aria-label="Loading" />

```

Copy

### Keyboard Support

Component does not include any interactive elements.

- import

- Basic

- Custom

- Accessibility


# ProgressSpinner API

API defines helper props, events and others for the PrimeVue ProgressSpinner module.

## ProgressSpinner [\#](https://primevue.org/progressspinner/\#api.progressspinner)

ProgressSpinner is a process status indicator.

### Props [\#](https://primevue.org/progressspinner/\#api.progressspinner.props)

Defines valid properties in ProgressSpinner component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| strokeWidth | string | 2 | Width of the circle stroke. |  |
| fill | string | null | Color for the background of the circle. |  |
| animationDuration | string | 2s | Duration of the rotate animation. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ProgressSpinnerPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Interfaces [\#](https://primevue.org/progressspinner/\#api.progressspinner.interfaces)

Defines the custom interfaces used by the module.

#### ProgressSpinnerPassThroughMethodOptions [\#](https://primevue.org/progressspinner/\#api.progressspinner.interfaces.ProgressSpinnerPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ProgressSpinnerProps](https://primevue.org/progressspinner/#api.progressspinner.interfaces.ProgressSpinnerProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### ProgressSpinnerPassThroughOptions [\#](https://primevue.org/progressspinner/\#api.progressspinner.interfaces.ProgressSpinnerPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [ProgressSpinnerPassThroughOptionType](https://primevue.org/progressspinner/#api.progressspinner.types.ProgressSpinnerPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| spin | [ProgressSpinnerPassThroughOptionType](https://primevue.org/progressspinner/#api.progressspinner.types.ProgressSpinnerPassThroughOptionType) | null | Used to pass attributes to the spinner's DOM element. |
| circle | [ProgressSpinnerPassThroughOptionType](https://primevue.org/progressspinner/#api.progressspinner.types.ProgressSpinnerPassThroughOptionType) | null | Used to pass attributes to the circle's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### ProgressSpinnerPassThroughAttributes [\#](https://primevue.org/progressspinner/\#api.progressspinner.interfaces.ProgressSpinnerPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/progressspinner/\#api.progressspinner.types)

Defines the custom types used by the module.

#### ProgressSpinnerPassThroughOptionType [\#](https://primevue.org/progressspinner/\#api.progressspinner.types.ProgressSpinnerPassThroughOptionType)

| values |
| --- |
| ProgressSpinnerPassThroughAttributes \| (options: ProgressSpinnerPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### ProgressSpinnerEmits [\#](https://primevue.org/progressspinner/\#api.progressspinner.types.ProgressSpinnerEmits)

| values |
| --- |
| EmitFn<ProgressSpinnerEmitsOptions> |

- ProgressSpinner

  - Props

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Team
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

# Meet the Team

[PrimeTek](https://www.primetek.com.tr/) is a world renowned vendor of popular UI Component suites including [PrimeFaces](https://primefaces.org/), [PrimeNG](https://primeng.org/), [PrimeReact](https://primereact.org/) and [PrimeVue](https://primevue.org/) . All the members in our team are full time employees of PrimeTek who share the same passion and vision for open source to create awesome UI libraries.

![Cagatay Civici](https://primefaces.org/cdn/primevue/images/team/cagatay.jpg)Ã‡aÄŸatay Ã‡iviciFounder

![Mert Sincan](https://primefaces.org/cdn/primevue/images/team/mert.jpg)Mert SincanCTO

![Onur ÅžentÃ¼re](https://primefaces.org/cdn/primevue/images/team/onur.jpg)Onur ÅžentÃ¼reDesign Lead

![Dilara Can](https://primefaces.org/cdn/primevue/images/team/dilara.jpg)Dilara GÃ¼ngenciBusiness Administration

![Ã‡etin Ã‡akÄ±roÄŸlu](https://primefaces.org/cdn/primevue/images/team/cetin.jpg)Ã‡etin Ã‡akÄ±roÄŸluFront-End Developer

![TuÄŸÃ§e KÃ¼Ã§Ã¼koÄŸlu](https://primefaces.org/cdn/primevue/images/team/tugce.jpg)TuÄŸÃ§e KÃ¼Ã§Ã¼koÄŸluFront-End Developer

![Atakan Tepe](https://primefaces.org/cdn/primevue/images/team/atakan.jpg)Atakan TepeFront-End Developer

![Ãœmit Ã‡elik](https://primefaces.org/cdn/primevue/images/team/umit.jpg)Ãœmit Ã‡elikUI/UX Designer

![Mehmet Ã‡etin](https://primefaces.org/cdn/primevue/images/team/mehmet.jpg)Mehmet Ã‡etinFront-End Developer

![Taner Engin](https://primefaces.org/cdn/primevue/images/team/taner.jpg)Taner EnginFront-End Developer

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Rating Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Rating

Rating component is a star based selection input.

## Import [\#](https://primevue.org/rating/\#import)

```javascript

import Rating from 'primevue/rating';

```

Copy

## Basic [\#](https://primevue.org/rating/\#basic)

Rating is used with the _v-model_ property for two-way value binding.

```markup

<Rating v-model="value" />

```

Copy

## Forms [\#](https://primevue.org/rating/\#forms)

Rating integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.

Submit

```markup

<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-40">
    <div class="flex flex-col items-center gap-2">
        <Rating name="rating" />
        <Message v-if="$form.rating?.invalid" severity="error" size="small" variant="simple">{{ $form.rating.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>

```

Copy

## Number of Stars [\#](https://primevue.org/rating/\#numberofstars)

Number of stars to display is defined with _stars_ property.

```markup

<Rating v-model="value" :stars="10" />

```

Copy

## Template [\#](https://primevue.org/rating/\#template)

Custom icons are used to override the default icons with _onicon_, _officon_ and _cancelicon_ slots.

![](https://primefaces.org/cdn/primevue/images/rating/custom-officon.png)

![](https://primefaces.org/cdn/primevue/images/rating/custom-officon.png)

![](https://primefaces.org/cdn/primevue/images/rating/custom-officon.png)

![](https://primefaces.org/cdn/primevue/images/rating/custom-officon.png)

![](https://primefaces.org/cdn/primevue/images/rating/custom-officon.png)

```markup

<Rating v-model="value">
    <template #onicon>
        <img src="/images/rating/custom-onicon.png" height="24" width="24" />
    </template>
    <template #officon>
        <img src="/images/rating/custom-officon.png" height="24" width="24" />
    </template>
</Rating>

```

Copy

## ReadOnly [\#](https://primevue.org/rating/\#readonly)

When _readOnly_ present, value cannot be edited.

```markup

<Rating v-model="value" readonly />

```

Copy

## Disabled [\#](https://primevue.org/rating/\#disabled)

When _disabled_ is present, a visual hint is applied to indicate that the Knob cannot be interacted with.

```markup

<Rating v-model="value" disabled />

```

Copy

## Accessibility [\#](https://primevue.org/rating/\#accessibility)

### Screen Reader

Rating component internally uses radio buttons that are only visible to screen readers. The value to read for item is retrieved from the [locale](https://primevue.org/configuration/#locale) API via _star_ and _stars_ of the _aria_ property.

### Keyboard Support

Keyboard interaction is derived from the native browser handling of radio buttons in a group.

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the star representing the value, if there is none then first star receives the focus. |
| _left arrow_ _up arrow_ | Moves focus to the previous star, if there is none then last radio button receives the focus. |
| _right arrow_ _down arrow_ | Moves focus to the next star, if there is none then first star receives the focus. |
| _space_ | If the focused star does not represent the value, changes the value to the star value. |

- Import

- Basic

- Forms

- Number of Stars

- Template

- ReadOnly

- Disabled

- Accessibility


# Rating API

API defines helper props, events and others for the PrimeVue Rating module.

## Rating [\#](https://primevue.org/rating/\#api.rating)

Rating component is a star based selection input.

### Props [\#](https://primevue.org/rating/\#api.rating.props)

Defines valid properties in Rating component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | number | null | Value of the rating. |  |
| defaultValue | number | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | Name of the element. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the element should be disabled. |  |
| readonly | boolean | false | When present, it specifies that component is read-only. |  |
| stars | number | 5 | Number of stars. |  |
| onIcon | string | null | Icon for the on state. |  |
| offIcon | string | null | Icon for the off state. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<RatingPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/rating/\#api.rating.emits)

Defines valid emits in Rating component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: number | void | Emitted when the value changes. |  |
| value-change | value: number | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [RatingChangeEvent](https://primevue.org/rating/#api.rating.events.RatingChangeEvent) | void | Callback to invoke when a suggestion is selected. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |

### Slots [\#](https://primevue.org/rating/\#api.rating.slots)

Defines valid slots in Rating component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| onicon | scope: {<br>value: number, // Option valueclass: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom on icon template. |  |
| officon | scope: {<br>value: number, // Option valueclass: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom off icon template. |  |

### Events [\#](https://primevue.org/rating/\#api.rating.events)

Defines the custom events used by the component's emit.

#### RatingChangeEvent [\#](https://primevue.org/rating/\#api.rating.events.RatingChangeEvent)

Custom change event.

See [change](https://primevue.org/rating/#api.rating.emitsoptions.change)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | number | Selected option value |

### Interfaces [\#](https://primevue.org/rating/\#api.rating.interfaces)

Defines the custom interfaces used by the module.

#### RatingPassThroughMethodOptions [\#](https://primevue.org/rating/\#api.rating.interfaces.RatingPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [RatingProps](https://primevue.org/rating/#api.rating.interfaces.RatingProps) | null | Defines valid properties. |
| state | [RatingState](https://primevue.org/rating/#api.rating.interfaces.RatingState) | null | Defines current inline state. |
| context | [RatingContext](https://primevue.org/rating/#api.rating.interfaces.RatingContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### RatingPassThroughOptions [\#](https://primevue.org/rating/\#api.rating.interfaces.RatingPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| option | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the option's DOM element. |
| onIcon | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the on icon's DOM element. |
| offIcon | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the off icon's DOM element. |
| hiddenOptionInputContainer | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the hidden option input container's DOM element. |
| hiddenOptionInput | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the hidden option input's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### RatingPassThroughAttributes [\#](https://primevue.org/rating/\#api.rating.interfaces.RatingPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### RatingState [\#](https://primevue.org/rating/\#api.rating.interfaces.RatingState)

Defines current inline state in Rating component.

| name | type | default | description |
| --- | --- | --- | --- |
| name | string | null | name state as a number. |
| focusedOptionIndex | number | null | focusedOptionIndex state as a number. |

#### RatingContext [\#](https://primevue.org/rating/\#api.rating.interfaces.RatingContext)

Defines current options in Rating component.

| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | false | Current active state of the option as a boolean. |
| focused | boolean | false | Current focused state of option as a boolean. |

## Types [\#](https://primevue.org/rating/\#api.rating.types)

Defines the custom types used by the module.

#### RatingPassThroughOptionType [\#](https://primevue.org/rating/\#api.rating.types.RatingPassThroughOptionType)

| values |
| --- |
| RatingPassThroughAttributes \| (options: RatingPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### RatingEmits [\#](https://primevue.org/rating/\#api.rating.types.RatingEmits)

| values |
| --- |
| EmitFn<RatingEmitsOptions> |

- Rating

  - Props

  - Emits

  - Slots

  - Events

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Badge Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Badge

Badge is a small status indicator for another element.

## Import [\#](https://primevue.org/badge/\#import)

```javascript

// import as component
import Badge from 'primevue/badge';
import OverlayBadge from 'primevue/overlaybadge';

```

Copy

## Basic [\#](https://primevue.org/badge/\#basic)

Content to display is defined with the _value_ property or the default slot.

210

```markup

<Badge value="2"></Badge>
<Badge>10</Badge>

```

Copy

## Severity [\#](https://primevue.org/badge/\#severity)

Severity defines the variant of a badge.

2684935

```markup

<Badge value="2"></Badge>
<Badge value="6" severity="secondary"></Badge>
<Badge value="8" severity="success"></Badge>
<Badge value="4" severity="info"></Badge>
<Badge value="9" severity="warn"></Badge>
<Badge value="3" severity="danger"></Badge>
<Badge value="5" severity="contrast"></Badge>

```

Copy

## Size [\#](https://primevue.org/badge/\#size)

Use the _size_ property to customize the dimensions of a Badge.

8642

```markup

<Badge value="8" size="xlarge" severity="success"></Badge>
<Badge value="6" size="large" severity="warn"></Badge>
<Badge value="4" severity="info"></Badge>
<Badge value="2" size="small"></Badge>

```

Copy

## Overlay [\#](https://primevue.org/badge/\#overlay)

A badge can be added to any element by encapsulating the content with the _OverlayBadge_ component.

2

4

```markup

<OverlayBadge value="2">
    <i class="pi pi-bell" style="font-size: 2rem" />
</OverlayBadge>
<OverlayBadge value="4" severity="danger">
    <i class="pi pi-calendar" style="font-size: 2rem" />
</OverlayBadge>
<OverlayBadge severity="danger">
    <i class="pi pi-envelope" style="font-size: 2rem" />
</OverlayBadge>

```

Copy

## Button [\#](https://primevue.org/badge/\#button)

Buttons have built-in support for badges to display a badge inline.

Notifications2Inbox2

```markup

<Button type="button" label="Notifications" icon="pi pi-bell" badge="2" />
<Button type="button" label="Inbox" icon="pi pi-inbox" badge="2" badgeSeverity="contrast" outlined />

```

Copy

## Accessibility [\#](https://primevue.org/badge/\#accessibility)

### Screen Reader

Badge does not include any roles and attributes by default, any attribute is passed to the root element so aria roles and attributes can be added if required. If the badges are dynamic, _aria-live_ may be utilized as well. In case badges need to be tabbable, _tabindex_ can be added to implement custom key handlers.

### Keyboard Support

Component does not include any interactive elements.

- Import

- Basic

- Severity

- Size

- Overlay

- Button

- Accessibility


# Badge API

API defines helper props, events and others for the PrimeVue Badge module.

## Badge [\#](https://primevue.org/badge/\#api.badge)

Badge represents people using icons, labels and images.

### Props [\#](https://primevue.org/badge/\#api.badge.props)

Defines valid properties in Badge component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | string \| number | null | Value to display inside the badge. |  |
| severity | null \| HintedString<"secondary" \| "info" \| "success" \| "warn" \| "danger" \| "contrast"> | null | Severity type of the badge. |  |
| size | null \| HintedString<"small" \| "large" \| "xlarge"> | null | Size of the badge, valid options are 'small', 'large', and 'xlarge'. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<BadgePassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/badge/\#api.badge.slots)

Defines valid slots in Badge component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Content can easily be customized with the default slot instead of using the built-in display. |  |

### Interfaces [\#](https://primevue.org/badge/\#api.badge.interfaces)

Defines the custom interfaces used by the module.

#### BadgePassThroughMethodOptions [\#](https://primevue.org/badge/\#api.badge.interfaces.BadgePassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [BadgeProps](https://primevue.org/badge/#api.badge.interfaces.BadgeProps) | null | Defines valid properties. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
| parent | any | null | Defines parent instance. |

#### BadgePassThroughAttributes [\#](https://primevue.org/badge/\#api.badge.interfaces.BadgePassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### BadgePassThroughOptions [\#](https://primevue.org/badge/\#api.badge.interfaces.BadgePassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [BadgePassThroughOptionType<T>](https://primevue.org/badge/#api.badge.types.BadgePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

## Types [\#](https://primevue.org/badge/\#api.badge.types)

Defines the custom types used by the module.

#### BadgePassThroughOptionType [\#](https://primevue.org/badge/\#api.badge.types.BadgePassThroughOptionType)

| values |
| --- |
| BadgePassThroughAttributes \| (options: BadgePassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### BadgeEmits [\#](https://primevue.org/badge/\#api.badge.types.BadgeEmits)

| values |
| --- |
| EmitFn<BadgeEmitsOptions> |

## OverlayBadge [\#](https://primevue.org/badge/\#api.overlaybadge)

OverlayBadge represents people using icon, label, image and badge.

### Props [\#](https://primevue.org/badge/\#api.overlaybadge.props)

Defines valid properties in OverlayBadge component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | string \| number | null | Value to display inside the badge. |  |
| severity | null \| HintedString<"secondary" \| "info" \| "success" \| "warn" \| "danger" \| "contrast"> | null | Severity type of the badge. |  |
| size | null \| HintedString<"small" \| "large" \| "xlarge"> | null | Size of the badge, valid options are 'small', 'large', and 'xlarge'. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<OverlayBadgePassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/badge/\#api.overlaybadge.slots)

Defines valid slots in OverlayBadge component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Content can easily be customized with the default slot instead of using the built-in display. |  |

### Interfaces [\#](https://primevue.org/badge/\#api.overlaybadge.interfaces)

Defines the custom interfaces used by the module.

#### OverlayBadgePassThroughMethodOptions [\#](https://primevue.org/badge/\#api.overlaybadge.interfaces.OverlayBadgePassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [OverlayBadgeProps](https://primevue.org/badge/#api.overlaybadge.interfaces.OverlayBadgeProps) | null | Defines valid properties. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
| parent | any | null | Defines parent instance. |

#### OverlayBadgeSharedPassThroughMethodOptions [\#](https://primevue.org/badge/\#api.overlaybadge.interfaces.OverlayBadgeSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [OverlayBadgeProps](https://primevue.org/badge/#api.overlaybadge.interfaces.OverlayBadgeProps) | null | Defines valid properties. |

#### OverlayBadgePassThroughAttributes [\#](https://primevue.org/badge/\#api.overlaybadge.interfaces.OverlayBadgePassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### OverlayBadgePassThroughOptions [\#](https://primevue.org/badge/\#api.overlaybadge.interfaces.OverlayBadgePassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [OverlayBadgePassThroughOptionType<T>](https://primevue.org/badge/#api.overlaybadge.types.OverlayBadgePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| pcBadge | any | null | Used to pass attributes to the Badge. |
| hooks | any | null | Used to manage all lifecycle hooks. |

## Types [\#](https://primevue.org/badge/\#api.overlaybadge.types)

Defines the custom types used by the module.

#### OverlayBadgePassThroughOptionType [\#](https://primevue.org/badge/\#api.overlaybadge.types.OverlayBadgePassThroughOptionType)

| values |
| --- |
| OverlayBadgePassThroughAttributes \| (options: OverlayBadgePassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### OverlayBadgeEmits [\#](https://primevue.org/badge/\#api.overlaybadge.types.OverlayBadgeEmits)

| values |
| --- |
| EmitFn<OverlayBadgeEmitsOptions> |

- Badge

  - Props

  - Slots

  - Interfaces

  - Types
- OverlayBadge

  - Props

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Button Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Button

Button is an extension to standard input element with icons and theming.

## Import [\#](https://primevue.org/button/\#import)

```javascript

import Button from 'primevue/button';

```

Copy

## Basic [\#](https://primevue.org/button/\#basic)

Text to display on a button is defined with the _label_ property.

Submit

```markup

<Button label="Submit" />

```

Copy

## Icons [\#](https://primevue.org/button/\#icons)

Icon of a button is specified with _icon_ property and position is configured using _iconPos_ attribute.

ProfileSave

SearchUpdate

```markup

<Button icon="pi pi-home" aria-label="Save" />
<Button label="Profile" icon="pi pi-user" />
<Button label="Save" icon="pi pi-check" iconPos="right" />
<Button label="Search" icon="pi pi-search" iconPos="top" />
<Button label="Update" icon="pi pi-refresh" iconPos="bottom" />

```

Copy

## Loading [\#](https://primevue.org/button/\#loading)

Busy state is controlled with the _loading_ property.

Search

```markup

<Button type="button" label="Search" icon="pi pi-search" :loading="loading" @click="load" />

```

Copy

## Link [\#](https://primevue.org/button/\#link)

The button element can be displayed as a link element visually when the _link_ property is present. If you need to customize the rendering, use the _as_ to change the element or _asChild_ for advanced templating.

Link [External](https://vuejs.org/) [Router](https://primevue.org/)

```markup

<Button label="Link" variant="link" />
<Button as="a" label="External" href="https://vuejs.org/" target="_blank" rel="noopener" />
<Button asChild v-slot="slotProps">
    <RouterLink to="/" :class="slotProps.class">Router</RouterLink>
</Button>

```

Copy

## Severity [\#](https://primevue.org/button/\#severity)

The _severity_ property defines the variant of a button.

PrimarySecondarySuccessInfoWarnHelpDangerContrast

```markup

<Button label="Primary" />
<Button label="Secondary" severity="secondary" />
<Button label="Success" severity="success" />
<Button label="Info" severity="info" />
<Button label="Warn" severity="warn" />
<Button label="Help" severity="help" />
<Button label="Danger" severity="danger" />
<Button label="Contrast" severity="contrast" />

```

Copy

## Disabled [\#](https://primevue.org/button/\#disabled)

When _disabled_ is present, the element cannot be used.

Submit

```markup

<Button label="Submit" disabled />

```

Copy

## Raised [\#](https://primevue.org/button/\#raised)

Raised buttons display a shadow to indicate elevation.

PrimarySecondarySuccessInfoWarnHelpDangerContrast

```markup

<Button label="Primary" raised />
<Button label="Secondary" severity="secondary" raised />
<Button label="Success" severity="success" raised />
<Button label="Info" severity="info" raised />
<Button label="Warn" severity="warn" raised />
<Button label="Help" severity="help" raised />
<Button label="Danger" severity="danger" raised />
<Button label="Contrast" severity="contrast" raised />

```

Copy

## Rounded [\#](https://primevue.org/button/\#rounded)

Rounded buttons have a circular border radius.

PrimarySecondarySuccessInfoWarnHelpDangerContrast

```markup

<Button label="Primary" rounded />
<Button label="Secondary" severity="secondary" rounded />
<Button label="Success" severity="success" rounded />
<Button label="Info" severity="info" rounded />
<Button label="Warn" severity="warn" rounded />
<Button label="Help" severity="help" rounded />
<Button label="Danger" severity="danger" rounded />
<Button label="Contrast" severity="contrast" rounded />

```

Copy

## Text [\#](https://primevue.org/button/\#text)

Text buttons are displayed as textual elements.

PrimarySecondarySuccessInfoWarnHelpDangerContrast

```markup

<Button label="Primary" variant="text" />
<Button label="Secondary" severity="secondary" variant="text" />
<Button label="Success" severity="success" variant="text" />
<Button label="Info" severity="info" variant="text" />
<Button label="Warn" severity="warn" variant="text" />
<Button label="Help" severity="help" variant="text" />
<Button label="Danger" severity="danger" variant="text" />
<Button label="Contrast" severity="contrast" variant="text" />

```

Copy

## Raised Text [\#](https://primevue.org/button/\#raisedtext)

Text buttons can be displayed elevated with the _raised_ option.

PrimarySecondarySuccessInfoWarnHelpDangerContrast

```markup

<Button label="Primary" variant="text" raised />
<Button label="Secondary" severity="secondary" variant="text" raised />
<Button label="Success" severity="success" variant="text" raised />
<Button label="Info" severity="info" variant="text" raised />
<Button label="Warn" severity="warn" variant="text" raised />
<Button label="Help" severity="help" variant="text" raised />
<Button label="Danger" severity="danger" variant="text" raised />
<Button label="Contrast" severity="contrast" variant="text" raised />

```

Copy

## Outlined [\#](https://primevue.org/button/\#outlined)

Outlined buttons display a border without a transparent background.

PrimarySecondarySuccessInfoWarnHelpDangerContrast

```markup

<Button label="Primary" variant="outlined" />
<Button label="Secondary" severity="secondary" variant="outlined" />
<Button label="Success" severity="success" variant="outlined" />
<Button label="Info" severity="info" variant="outlined" />
<Button label="Warn" severity="warn" variant="outlined" />
<Button label="Help" severity="help" variant="outlined" />
<Button label="Danger" severity="danger" variant="outlined" />
<Button label="Contrast" severity="contrast" variant="outlined" />

```

Copy

## Icon Only [\#](https://primevue.org/button/\#icononly)

Buttons can have icons without labels.

SmallNormalLarge

```markup

<Button icon="pi pi-check" aria-label="Filter" />
<Button icon="pi pi-bookmark" severity="secondary" aria-label="Bookmark" />
<Button icon="pi pi-search" severity="success" aria-label="Search" />
<Button icon="pi pi-user" severity="info" aria-label="User" />
<Button icon="pi pi-bell" severity="warn" aria-label="Notification" />
<Button icon="pi pi-heart" severity="help" aria-label="Favorite" />
<Button icon="pi pi-times" severity="danger" aria-label="Cancel" />
<Button icon="pi pi-star" severity="contrast" aria-label="Star" />

<Button icon="pi pi-check" rounded aria-label="Filter" />
<Button icon="pi pi-bookmark" severity="secondary" rounded aria-label="Bookmark" />
<Button icon="pi pi-search" severity="success" rounded aria-label="Search" />
<Button icon="pi pi-user" severity="info" rounded aria-label="User" />
<Button icon="pi pi-bell" severity="warn" rounded aria-label="Notification" />
<Button icon="pi pi-heart" severity="help" rounded aria-label="Favorite" />
<Button icon="pi pi-times" severity="danger" rounded aria-label="Cancel" />
<Button icon="pi pi-star" severity="contrast" rounded aria-label="Star" />

<Button icon="pi pi-check" rounded variant="outlined" aria-label="Filter" />
<Button icon="pi pi-bookmark" severity="secondary" rounded variant="outlined" aria-label="Bookmark" />
<Button icon="pi pi-search" severity="success" rounded variant="outlined" aria-label="Search" />
<Button icon="pi pi-user" severity="info" rounded variant="outlined" aria-label="User" />
<Button icon="pi pi-bell" severity="warn" rounded variant="outlined" aria-label="Notification" />
<Button icon="pi pi-heart" severity="help" rounded variant="outlined" aria-label="Favorite" />
<Button icon="pi pi-times" severity="danger" rounded variant="outlined" aria-label="Cancel" />
<Button icon="pi pi-star" severity="contrast" rounded variant="outlined" aria-label="Star" />

<Button icon="pi pi-check" variant="text" raised rounded aria-label="Filter" />
<Button icon="pi pi-bookmark" severity="secondary" variant="text" raised rounded aria-label="Bookmark" />
<Button icon="pi pi-search" severity="success" variant="text" raised rounded aria-label="Search" />
<Button icon="pi pi-user" severity="info" variant="text" raised rounded aria-label="User" />
<Button icon="pi pi-bell" severity="warn" variant="text" raised rounded aria-label="Notification" />
<Button icon="pi pi-heart" severity="help" variant="text" raised rounded aria-label="Favorite" />
<Button icon="pi pi-times" severity="danger" variant="text" raised rounded aria-label="Cancel" />
<Button icon="pi pi-star" severity="contrast" variant="text" raised rounded aria-label="Star" />

<Button icon="pi pi-check" variant="text" rounded aria-label="Filter" />
<Button icon="pi pi-bookmark" severity="secondary" variant="text" rounded aria-label="Bookmark" />
<Button icon="pi pi-search" severity="success" variant="text" rounded aria-label="Search" />
<Button icon="pi pi-user" severity="info" variant="text" rounded aria-label="User" />
<Button icon="pi pi-bell" severity="warn" variant="text" rounded aria-label="Notification" />
<Button icon="pi pi-heart" severity="help" variant="text" rounded aria-label="Favorite" />
<Button icon="pi pi-times" severity="danger" variant="text" rounded aria-label="Cancel" />
<Button icon="pi pi-star" severity="contrast" variant="text" rounded aria-label="Star" />

```

Copy

## Badge [\#](https://primevue.org/button/\#badge)

Buttons have built-in badge support with _badge_ and _badgeSeverity_ properties.

Emails2Messages2

```markup

<Button type="button" label="Emails" badge="2" />
<Button type="button" label="Messages" icon="pi pi-users" badge="2" badgeSeverity="contrast" variant="outlined"  />

```

Copy

## Button Group [\#](https://primevue.org/button/\#buttongroup)

Multiple buttons are grouped when wrapped inside an element with _ButtonGroup_ component.

SaveDeleteCancel

```markup

<ButtonGroup>
    <Button label="Save" icon="pi pi-check" />
    <Button label="Delete" icon="pi pi-trash" />
    <Button label="Cancel" icon="pi pi-times" />
</ButtonGroup>

```

Copy

## Sizes [\#](https://primevue.org/button/\#sizes)

Button provides _small_ and _large_ sizes as alternatives to the base.

SmallNormalLarge

```markup

<Button label="Small" icon="pi pi-check" size="small" />
<Button label="Normal" icon="pi pi-check" />
<Button label="Large" icon="pi pi-check" size="large" />

```

Copy

## Template [\#](https://primevue.org/button/\#template)

Custom content inside a button is defined as children.

```markup

<Button variant="outlined" class="!border-2">
    <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="..." fill="var(--p-primary-color)" />
        <path d="..." fill="var(--p-text-color)" />
    </svg>
</Button>

```

Copy

## Headless [\#](https://primevue.org/button/\#headless)

Headless mode is enabled by adding the _asChild_ property and defining your own UI element with the available bindings.

SIGN UP

```markup

<Button v-slot="slotProps" asChild>
    <button
        v-bind="slotProps.a11yAttrs"
        class="rounded-lg bg-gradient-to-br from-primary-400 to-primary-700 active:from-primary-700 active:to-primary-900 text-white border-none px-6 py-3 font-bold hover:ring-2 cursor-pointer ring-offset-2 ring-offset-surface-0 dark:ring-offset-surface-900 ring-primary transition-all"
    >
        SIGN UP
    </button>
</Button>

```

Copy

## Accessibility [\#](https://primevue.org/button/\#accessibility)

### Screen Reader

Button component renders a native button element that implicitly includes any passed prop. Text to describe the button is defined with the _aria-label_ prop, if not present _label_ prop is used as the value. If the button is icon only or custom templating is used, it is recommended to use _aria-label_ so that screen readers would be able to read the element properly.

```markup

<Button icon="pi pi-check" aria-label="Submit" />

<Button icon="pi pi-check" label="Submit" />

<Button class="youtube p-0" aria-label="Youtube">
    <i class="pi pi-youtube px-2"></i>
    <span class="px-4">Youtube</span>
</Button>

```

Copy

### Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the button. |
| _enter_ | Activates the button. |
| _space_ | Activates the button. |

- Import

- Basic

- Icons

- Loading

- Link

- Severity

- Disabled

- Raised

- Rounded

- Text

- Raised Text

- Outlined

- Icon Only

- Badge

- Button Group

- Sizes

- Template

- Headless

- Accessibility


# Button API

API defines helper props, events and others for the PrimeVue Button module.

## Button [\#](https://primevue.org/button/\#api.button)

Button is an extension to standard button element with icons and theming.

### Props [\#](https://primevue.org/button/\#api.button.props)

Defines valid properties in Button component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| aria-activedescendant | string | null | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. |  |
| aria-atomic | Booleanish | null | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. |  |
| aria-autocomplete | "none" \| "inline" \| "list" \| "both" | null | Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be<br>presented if they are made. |  |
| aria-busy | Booleanish | null | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. |  |
| aria-checked | Booleanish \| "mixed" | null | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets. |  |
| aria-colcount | Numberish | null | Defines the total number of columns in a table, grid, or treegrid. |  |
| aria-colindex | Numberish | null | Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. |  |
| aria-colspan | Numberish | null | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. |  |
| aria-controls | string | null | Identifies the element (or elements) whose contents or presence are controlled by the current element. |  |
| aria-current | Booleanish \| "page" \| "step" \| "location" \| "date" \| "time" | null | Indicates the element that represents the current item within a container or set of related elements. |  |
| aria-describedby | string | null | Identifies the element (or elements) that describes the object. |  |
| aria-details | string | null | Identifies the element that provides a detailed, extended description for the object. |  |
| aria-disabled | Booleanish | null | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. |  |
| aria-dropeffect | "link" \| "none" \| "copy" \| "execute" \| "move" \| "popup" | null | Indicates what functions can be performed when a dragged object is released on the drop target. |  |
| aria-errormessage | string | null | Identifies the element that provides an error message for the object. |  |
| aria-expanded | Booleanish | null | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. |  |
| aria-flowto | string | null | Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,<br>allows assistive technology to override the general default of reading in document source order. |  |
| aria-grabbed | Booleanish | null | Indicates an element's "grabbed" state in a drag-and-drop operation. |  |
| aria-haspopup | Booleanish \| "menu" \| "listbox" \| "tree" \| "grid" \| "dialog" | null | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. |  |
| aria-hidden | Booleanish | null | Indicates whether the element is exposed to an accessibility API. |  |
| aria-invalid | Booleanish \| "grammar" \| "spelling" | null | Indicates the entered value does not conform to the format expected by the application. |  |
| aria-keyshortcuts | string | null | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. |  |
| aria-label | string | null | Defines a string value that labels the current element. |  |
| aria-labelledby | string | null | Identifies the element (or elements) that labels the current element. |  |
| aria-level | Numberish | null | Defines the hierarchical level of an element within a structure. |  |
| aria-live | "off" \| "assertive" \| "polite" | null | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. |  |
| aria-modal | Booleanish | null | Indicates whether an element is modal when displayed. |  |
| aria-multiline | Booleanish | null | Indicates whether a text box accepts multiple lines of input or only a single line. |  |
| aria-multiselectable | Booleanish | null | Indicates that the user may select more than one item from the current selectable descendants. |  |
| aria-orientation | "horizontal" \| "vertical" | null | Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. |  |
| aria-owns | string | null | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br>between DOM elements where the DOM hierarchy cannot be used to represent the relationship. |  |
| aria-placeholder | string | null | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br>A hint could be a sample value or a brief description of the expected format. |  |
| aria-posinset | Numberish | null | Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. |  |
| aria-pressed | Booleanish \| "mixed" | null | Indicates the current "pressed" state of toggle buttons. |  |
| aria-readonly | Booleanish | null | Indicates that the element is not editable, but is otherwise operable. |  |
| aria-relevant | "text" \| "additions" \| "additions removals" \| "additions text" \| "all" \| "removals" \| "removals additions" \| "removals text" \| "text additions" \| "text removals" | null | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. |  |
| aria-required | Booleanish | null | Indicates that user input is required on the element before a form may be submitted. |  |
| aria-roledescription | string | null | Defines a human-readable, author-localized description for the role of an element. |  |
| aria-rowcount | Numberish | null | Defines the total number of rows in a table, grid, or treegrid. |  |
| aria-rowindex | Numberish | null | Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. |  |
| aria-rowspan | Numberish | null | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. |  |
| aria-selected | Booleanish | null | Indicates the current "selected" state of various widgets. |  |
| aria-setsize | Numberish | null | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. |  |
| aria-sort | "none" \| "ascending" \| "descending" \| "other" | null | Indicates if items in a table or grid are sorted in ascending or descending order. |  |
| aria-valuemax | Numberish | null | Defines the maximum allowed value for a range widget. |  |
| aria-valuemin | Numberish | null | Defines the minimum allowed value for a range widget. |  |
| aria-valuenow | Numberish | null | Defines the current value for a range widget. |  |
| aria-valuetext | string | null | Defines the human readable text alternative of aria-valuenow for a range widget. |  |
| innerHTML | string | null |  |  |
| accesskey | string | null |  |  |
| contenteditable | Booleanish \| "inherit" \| "plaintext-only" | null |  |  |
| contextmenu | string | null |  |  |
| dir | string | null |  |  |
| draggable | Booleanish | null |  |  |
| hidden | "" \| Booleanish \| "hidden" \| "until-found" | null |  |  |
| id | string | null |  |  |
| inert | Booleanish | null |  |  |
| lang | string | null |  |  |
| placeholder | string | null |  |  |
| spellcheck | Booleanish | null |  |  |
| tabindex | Numberish | null |  |  |
| title | string | null |  |  |
| translate | "yes" \| "no" | null |  |  |
| radiogroup | string | null |  |  |
| role | string | null |  |  |
| about | string | null |  |  |
| datatype | string | null |  |  |
| inlist | any | null |  |  |
| prefix | string | null |  |  |
| property | string | null |  |  |
| resource | string | null |  |  |
| typeof | string | null |  |  |
| vocab | string | null |  |  |
| autocapitalize | string | null |  |  |
| autocorrect | string | null |  |  |
| autosave | string | null |  |  |
| color | string | null |  |  |
| itemprop | string | null |  |  |
| itemscope | Booleanish | null |  |  |
| itemtype | string | null |  |  |
| itemid | string | null |  |  |
| itemref | string | null |  |  |
| results | Numberish | null |  |  |
| security | string | null |  |  |
| unselectable | "on" \| "off" | null |  |  |
| inputmode | "text" \| "none" \| "tel" \| "url" \| "email" \| "numeric" \| "decimal" \| "search" | null | Hints at the type of data that might be entered by the user while editing the element or its contents |  |
| is | string | null | Specify that a standard HTML element should behave like a defined custom built-in element |  |
| autofocus | Booleanish | null |  |  |
| disabled | Booleanish | null |  |  |
| form | string | null |  |  |
| formaction | string | null |  |  |
| formenctype | string | null |  |  |
| formmethod | string | null |  |  |
| formnovalidate | Booleanish | null |  |  |
| formtarget | string | null |  |  |
| name | string | null |  |  |
| type | "submit" \| "reset" \| ["button"](https://primevue.org/button/#api.button.interfaces.%22button%22) | null |  |  |
| value | string \| number \| readonly string\[\] | null |  |  |
| onCopy | Function | null |  |  |
| onCut | Function | null |  |  |
| onPaste | Function | null |  |  |
| onCompositionend | Function | null |  |  |
| onCompositionstart | Function | null |  |  |
| onCompositionupdate | Function | null |  |  |
| onDrag | Function | null |  |  |
| onDragend | Function | null |  |  |
| onDragenter | Function | null |  |  |
| onDragexit | Function | null |  |  |
| onDragleave | Function | null |  |  |
| onDragover | Function | null |  |  |
| onDragstart | Function | null |  |  |
| onDrop | Function | null |  |  |
| onFocus | Function | null |  |  |
| onFocusin | Function | null |  |  |
| onFocusout | Function | null |  |  |
| onBlur | Function | null |  |  |
| onChange | Function | null |  |  |
| onBeforeinput | Function | null |  |  |
| onInput | Function | null |  |  |
| onReset | Function | null |  |  |
| onSubmit | Function | null |  |  |
| onInvalid | Function | null |  |  |
| onLoad | Function | null |  |  |
| onError | Function | null |  |  |
| onKeydown | Function | null |  |  |
| onKeypress | Function | null |  |  |
| onKeyup | Function | null |  |  |
| onAuxclick | Function | null |  |  |
| onClick | Function | null |  |  |
| onContextmenu | Function | null |  |  |
| onDblclick | Function | null |  |  |
| onMousedown | Function | null |  |  |
| onMouseenter | Function | null |  |  |
| onMouseleave | Function | null |  |  |
| onMousemove | Function | null |  |  |
| onMouseout | Function | null |  |  |
| onMouseover | Function | null |  |  |
| onMouseup | Function | null |  |  |
| onAbort | Function | null |  |  |
| onCanplay | Function | null |  |  |
| onCanplaythrough | Function | null |  |  |
| onDurationchange | Function | null |  |  |
| onEmptied | Function | null |  |  |
| onEncrypted | Function | null |  |  |
| onEnded | Function | null |  |  |
| onLoadeddata | Function | null |  |  |
| onLoadedmetadata | Function | null |  |  |
| onLoadstart | Function | null |  |  |
| onPause | Function | null |  |  |
| onPlay | Function | null |  |  |
| onPlaying | Function | null |  |  |
| onProgress | Function | null |  |  |
| onRatechange | Function | null |  |  |
| onSeeked | Function | null |  |  |
| onSeeking | Function | null |  |  |
| onStalled | Function | null |  |  |
| onSuspend | Function | null |  |  |
| onTimeupdate | Function | null |  |  |
| onVolumechange | Function | null |  |  |
| onWaiting | Function | null |  |  |
| onSelect | Function | null |  |  |
| onScroll | Function | null |  |  |
| onScrollend | Function | null |  |  |
| onTouchcancel | Function | null |  |  |
| onTouchend | Function | null |  |  |
| onTouchmove | Function | null |  |  |
| onTouchstart | Function | null |  |  |
| onPointerdown | Function | null |  |  |
| onPointermove | Function | null |  |  |
| onPointerup | Function | null |  |  |
| onPointercancel | Function | null |  |  |
| onPointerenter | Function | null |  |  |
| onPointerleave | Function | null |  |  |
| onPointerover | Function | null |  |  |
| onPointerout | Function | null |  |  |
| onWheel | Function | null |  |  |
| onAnimationstart | Function | null |  |  |
| onAnimationend | Function | null |  |  |
| onAnimationiteration | Function | null |  |  |
| onTransitionend | Function | null |  |  |
| onTransitionstart | Function | null |  |  |
| style | any | null | Inline style of the button. |  |
| class | any | null | Style class of the button. |  |
| label | string | null | Text of the button. |  |
| icon | string | null | Name of the icon. |  |
| iconPos | HintedString<"left" \| "right" \| "top" \| "bottom"> | left | Position of the icon. |  |
| iconClass | string \| object | null | Style class of the icon. |  |
| badge | string | null | Value of the badge. |  |
| badgeClass | string \| object | null | Style class of the badge. |  |
| badgeSeverity | null \| HintedString<"secondary" \| "info" \| "success" \| "warn" \| "danger" \| "contrast"> | null | Severity type of the badge. |  |
| loading | boolean | false | Whether the button is in loading state. |  |
| loadingIcon | string | null | Icon to display in loading state. |  |
| as | string \| Component | BUTTON | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| link | boolean | false | Add a link style to the button. |  |
| severity | HintedString<"secondary" \| "info" \| "success" \| "warn" \| "danger" \| "contrast" \| "help"> | null | Defines the style of the button. |  |
| raised | boolean | false | Add a shadow to indicate elevation. |  |
| rounded | boolean | false | Add a circular border radius to the button. |  |
| text | boolean | false | Add a textual class to the button without a background initially. |  |
| outlined | boolean | false | Add a border class without a background initially. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the button. |  |
| variant | HintedString<"outlined" \| "text" \| "link"> | undefined | Specifies the variant of the component. |  |
| plain | boolean | false | Add a plain textual class to the button without a background initially. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ButtonPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/button/\#api.button.slots)

Defines valid slots in Button component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default | scope: {<br>a11yAttrs: Record, // Object containing the accessibility attributes.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content such as icons, images and text can be placed inside the button via the default slot. Note that when slot is used, label, icon and badge properties are not included. |  |
| icon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| loadingicon | scope: {<br>class: string, // Style class of the loading icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading icon template. |  |

### Interfaces [\#](https://primevue.org/button/\#api.button.interfaces)

Defines the custom interfaces used by the module.

#### ButtonPassThroughMethodOptions [\#](https://primevue.org/button/\#api.button.interfaces.ButtonPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ButtonProps](https://primevue.org/button/#api.button.interfaces.ButtonProps) | null | Defines valid properties. |
| context | [ButtonContext](https://primevue.org/button/#api.button.interfaces.ButtonContext) | null | Defines current options. |
| parent | any | null | Defines parent instance. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### ButtonPassThroughOptions [\#](https://primevue.org/button/\#api.button.interfaces.ButtonPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [ButtonPassThroughOptionType<T>](https://primevue.org/button/#api.button.types.ButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| loadingIcon | [ButtonPassThroughOptionType<T>](https://primevue.org/button/#api.button.types.ButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the loading icon's DOM element. |
| icon | [ButtonPassThroughOptionType<T>](https://primevue.org/button/#api.button.types.ButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the icon's DOM element. |
| label | [ButtonPassThroughOptionType<T>](https://primevue.org/button/#api.button.types.ButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the label's DOM element. |
| pcBadge | [ButtonPassThroughOptionType<T>](https://primevue.org/button/#api.button.types.ButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the Badge component. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### ButtonPassThroughAttributes [\#](https://primevue.org/button/\#api.button.interfaces.ButtonPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### ButtonContext [\#](https://primevue.org/button/\#api.button.interfaces.ButtonContext)

Defines current options in Button component.

| name | type | default | description |
| --- | --- | --- | --- |
| disabled | boolean | false | Current disabled state of the element as a boolean. |

## Types [\#](https://primevue.org/button/\#api.button.types)

Defines the custom types used by the module.

#### ButtonPassThroughOptionType [\#](https://primevue.org/button/\#api.button.types.ButtonPassThroughOptionType)

| values |
| --- |
| ButtonPassThroughAttributes \| (options: ButtonPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### ButtonEmits [\#](https://primevue.org/button/\#api.button.types.ButtonEmits)

| values |
| --- |
| EmitFn<ButtonEmitsOptions> |

## ButtonGroup [\#](https://primevue.org/button/\#api.buttongroup)

A set of Buttons can be displayed together using the ButtonGroup component.

### Props [\#](https://primevue.org/button/\#api.buttongroup.props)

Defines valid properties in ButtonGroup component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ButtonGroupPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/button/\#api.buttongroup.slots)

Defines valid slots in ButtonGroup component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default slot to detect Button components. |  |

### Interfaces [\#](https://primevue.org/button/\#api.buttongroup.interfaces)

Defines the custom interfaces used by the module.

#### ButtonGroupPassThroughMethodOptions [\#](https://primevue.org/button/\#api.buttongroup.interfaces.ButtonGroupPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ButtonGroupProps](https://primevue.org/button/#api.buttongroup.interfaces.ButtonGroupProps) | null | Defines valid properties. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### ButtonGroupPassThroughOptions [\#](https://primevue.org/button/\#api.buttongroup.interfaces.ButtonGroupPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [ButtonGroupPassThroughOptionType](https://primevue.org/button/#api.buttongroup.types.ButtonGroupPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### ButtonGroupPassThroughAttributes [\#](https://primevue.org/button/\#api.buttongroup.interfaces.ButtonGroupPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/button/\#api.buttongroup.types)

Defines the custom types used by the module.

#### ButtonGroupPassThroughOptionType [\#](https://primevue.org/button/\#api.buttongroup.types.ButtonGroupPassThroughOptionType)

| values |
| --- |
| ButtonGroupPassThroughAttributes \| (options: ButtonGroupPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### ButtonGroupEmits [\#](https://primevue.org/button/\#api.buttongroup.types.ButtonGroupEmits)

| values |
| --- |
| EmitFn<ButtonGroupEmitsOptions> |

- Button

  - Props

  - Slots

  - Interfaces

  - Types
- ButtonGroup

  - Props

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Skeleton Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Skeleton

Skeleton is a placeholder to display instead of the actual content.

## Import [\#](https://primevue.org/skeleton/\#import)

```javascript

import Skeleton from 'primevue/skeleton';

```

Copy

## Shapes [\#](https://primevue.org/skeleton/\#shapes)

Various shapes and sizes can be created using styling properties like _shape_, _width_, _height_, _borderRadius_ and _class_.

##### Rectangle

##### Rounded

##### Square

##### Circle

```markup

<h5>Rectangle</h5>
<Skeleton class="mb-2"></Skeleton>
<Skeleton width="10rem" class="mb-2"></Skeleton>
<Skeleton width="5rem" class="mb-2"></Skeleton>
<Skeleton height="2rem" class="mb-2"></Skeleton>
<Skeleton width="10rem" height="4rem"></Skeleton>

<h5>Rounded</h5>
<Skeleton class="mb-2" borderRadius="16px"></Skeleton>
<Skeleton width="10rem" class="mb-2" borderRadius="16px"></Skeleton>
<Skeleton width="5rem" borderRadius="16px" class="mb-2"></Skeleton>
<Skeleton height="2rem" class="mb-2" borderRadius="16px"></Skeleton>
<Skeleton width="10rem" height="4rem" borderRadius="16px"></Skeleton>

<h5 class="mt-4">Square</h5>
<Skeleton size="2rem" class="mr-2"></Skeleton>
<Skeleton size="3rem" class="mr-2"></Skeleton>
<Skeleton size="4rem" class="mr-2"></Skeleton>
<Skeleton size="5rem"></Skeleton>

<h5 class="mt-4">Circle</h5>
<Skeleton shape="circle" size="2rem" class="mr-2"></Skeleton>
<Skeleton shape="circle" size="3rem" class="mr-2"></Skeleton>
<Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
<Skeleton shape="circle" size="5rem"></Skeleton>

```

Copy

## Card [\#](https://primevue.org/skeleton/\#card)

Sample Card implementation using different Skeleton components and Tailwind CSS utilities.

```markup

<div class="rounded border border-surface-200 dark:border-surface-700 p-6 bg-surface-0 dark:bg-surface-900">
    <div class="flex mb-4">
        <Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
        <div>
            <Skeleton width="10rem" class="mb-2"></Skeleton>
            <Skeleton width="5rem" class="mb-2"></Skeleton>
            <Skeleton height=".5rem"></Skeleton>
        </div>
    </div>
    <Skeleton width="100%" height="150px"></Skeleton>
    <div class="flex justify-between mt-4">
        <Skeleton width="4rem" height="2rem"></Skeleton>
        <Skeleton width="4rem" height="2rem"></Skeleton>
    </div>
</div>

```

Copy

## List [\#](https://primevue.org/skeleton/\#list)

Sample List implementation using different Skeleton components and Tailwind CSS utilities.

```markup

<div class="rounded border border-surface-200 dark:border-surface-700 p-6 bg-surface-0 dark:bg-surface-900">
    <ul class="m-0 p-0 list-none">
        <li class="mb-4">
            <div class="flex">
                <Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
                <div class="self-center" style="flex: 1">
                    <Skeleton width="100%" class="mb-2"></Skeleton>
                    <Skeleton width="75%"></Skeleton>
                </div>
            </div>
        </li>
        <li class="mb-4">
            <div class="flex">
                <Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
                <div class="self-center" style="flex: 1">
                    <Skeleton width="100%" class="mb-2"></Skeleton>
                    <Skeleton width="75%"></Skeleton>
                </div>
            </div>
        </li>
        <li class="mb-4">
            <div class="flex">
                <Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
                <div class="self-center" style="flex: 1">
                    <Skeleton width="100%" class="mb-2"></Skeleton>
                    <Skeleton width="75%"></Skeleton>
                </div>
            </div>
        </li>
        <li>
            <div class="flex">
                <Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
                <div class="self-center" style="flex: 1">
                    <Skeleton width="100%" class="mb-2"></Skeleton>
                    <Skeleton width="75%"></Skeleton>
                </div>
            </div>
        </li>
    </ul>
</div>

```

Copy

## DataTable [\#](https://primevue.org/skeleton/\#datatable)

Sample DataTable implementation using different Skeleton components and Tailwind CSS utilities.

| Code | Name | Category | Quantity |
| --- | --- | --- | --- |
|  |  |  |  |
|  |  |  |  |
|  |  |  |  |
|  |  |  |  |

```markup

<DataTable :value="products">
    <Column field="code" header="Code">
        <template #body>
            <Skeleton></Skeleton>
        </template>
    </Column>
    <Column field="name" header="Name">
        <template #body>
            <Skeleton></Skeleton>
        </template>
    </Column>
    <Column field="category" header="Category">
        <template #body>
            <Skeleton></Skeleton>
        </template>
    </Column>
    <Column field="quantity" header="Quantity">
        <template #body>
            <Skeleton></Skeleton>
        </template>
    </Column>
</DataTable>

```

Copy

## Accessibility [\#](https://primevue.org/skeleton/\#accessibility)

### Screen Reader

Skeleton uses _aria-hidden_ as "true" so that it gets ignored by screen readers, any valid attribute is passed to the root element so you may customize it further if required. If multiple skeletons are grouped inside a container, you may use _aria-busy_ on the container element as well to indicate the loading process.

### Keyboard Support

Component does not include any interactive elements.

- Import

- Shapes

- Card

- List

- DataTable

- Accessibility


# Skeleton API

API defines helper props, events and others for the PrimeVue Skeleton module.

## Skeleton [\#](https://primevue.org/skeleton/\#api.skeleton)

Skeleton is a placeholder to display instead of the actual content.

### Props [\#](https://primevue.org/skeleton/\#api.skeleton.props)

Defines valid properties in Skeleton component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| shape | HintedString<"circle" \| "rectangle"> | rectangle | Shape of the element. |  |
| size | string | null | Size of the Circle or Square. |  |
| width | string | 100% | Width of the element. |  |
| height | string | 1rem | Height of the element. |  |
| borderRadius | string | null | Border radius of the element, defaults to value from theme. |  |
| animation | HintedString<"none" \| "wave"> | wave | Type of the animation. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SkeletonPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Interfaces [\#](https://primevue.org/skeleton/\#api.skeleton.interfaces)

Defines the custom interfaces used by the module.

#### SkeletonPassThroughMethodOptions [\#](https://primevue.org/skeleton/\#api.skeleton.interfaces.SkeletonPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SkeletonProps](https://primevue.org/skeleton/#api.skeleton.interfaces.SkeletonProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### SkeletonPassThroughOptions [\#](https://primevue.org/skeleton/\#api.skeleton.interfaces.SkeletonPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [SkeletonPassThroughOptionType](https://primevue.org/skeleton/#api.skeleton.types.SkeletonPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### SkeletonPassThroughAttributes [\#](https://primevue.org/skeleton/\#api.skeleton.interfaces.SkeletonPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/skeleton/\#api.skeleton.types)

Defines the custom types used by the module.

#### SkeletonPassThroughOptionType [\#](https://primevue.org/skeleton/\#api.skeleton.types.SkeletonPassThroughOptionType)

| values |
| --- |
| SkeletonPassThroughAttributes \| (options: SkeletonPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### SkeletonEmits [\#](https://primevue.org/skeleton/\#api.skeleton.types.SkeletonEmits)

| values |
| --- |
| EmitFn<SkeletonEmitsOptions> |

- Skeleton

  - Props

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Support Options
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

Community Support

[Forum](https://github.com/orgs/primefaces/discussions) and [Discord](https://discord.gg/gzKFYnpmCY) are where the community users gather to seek support, post topics and discuss the technology. GitHub issue is the channel for the community users to create tickets however PrimeTek does not guarantee a response time although they are monitored and maintained by our staff. If you need to secure a response, you may consider PRO support instead.

Professional Support

With PRO support, it's easy to support, tune, and add features to PrimeVue as an in-house library. With the exclusive services of a PRO account, you no longer need to post questions in the community forum and the community issue tracker at GitHub. Service is delivered via a private issue tracker based on a one-business-day response time.

Service Features

200$/h

- Private Issue Tracker
- Response within 1 business day
- Unlimited Number of Tickets
- Hourly Support Model
- 1 year term
- Minimum 25 Hours for initiation
- Shared account per organization
- Maintenance for Any Version
- New Features
- POC implementations of a requirement

[Buy Now](mailto:primetek.com.tr?subject=PrimeVue%20PRO%20Support)

How It Works

- 1\. Purchase PRO Support
Contact [PrimeTek](mailto:contact@primetek.com.tr) to purchase support.
- 2\. Setup
An account is created for you in our exclusive JIRA issue tracker.
- 3\. Request Support
Create a ticket with a description of the issue and receive a reply within 1 business day.
- 4\. Estimate and Approval
An estimate is provided to resolve the issue, upon your approval the PrimeTek team commences work.
- 5\. Resolution
Issue is resolved and the approved hours are deducted from your account.
- 6\. Delivery
If the issue requires an update in the library, it gets published to npm by as part of the public PrimeVue package. A patch update on an older version can also be requested if you are not using the latest version.

Consulting

Unlock the full potential of your software projects in addition to PRO Support with the premier consulting services of our partners. The team of seasoned consultants is available to provide tailored expertise and guidance, ensuring your software development initiatives are successful, efficient, and innovative.

Deep Expertise

Our consultants are experts with extensive experience in various aspects of software development, including design, architecture, coding, testing, and deployment. They bring a wealth of knowledge and best practices to your project.

Customized Solutions

We understand that every project is unique. Our consultants work closely with you to understand your specific requirements and challenges, delivering solutions that are perfectly aligned with your business goals..

Scalable Engagements

Whether you need short-term advice for a specific problem or long-term strategic guidance, our consulting services are flexible and scalable to meet your needs.

We are proud to collaborate with [EpicMax](https://www.epicmax.co/contacts) and [Virtua](https://virtua.tech/) that share our commitment to excellence and open source values.

[Get a Quote](https://www.epicmax.co/contacts)

[Get a Quote](https://virtua.tech/contact)

Frequently Asked Questions

How many issue tracker accounts do we get?

We provide 1 shared account per organization.

What is the duration of the service?

Service ends either when all support hours are used or after 1 year.

What happens if we extend after 1 year and we have unused hours?

Unused hours expire and are not transferred to the new term.

What are hours used for?

Hours are utilized when creating tickets, filing defects, requesting enhancements, POC implementations of a use case and questions.

Are the changes delivered with a custom build?

No, changes become part of the PrimeVue core and pushed to the public npm package on next update.

Who provides the support service?

Support service is provided by the PrimeVue team at PrimeTek.

Is there a minimum hour requirement?

At least 25 hours are required to initiate the service.

What happens if the issue takes longer or shorter than the approved estimate?

The confirmed estimate is still used even if it takes longer to resolve the issue.

Can we request new features and enhancements?

Yes, initially the request needs to be approved by PrimeTek based on project roadmap fit. As a result, not all requests may be accepted.

What are the payment terms?

Payment in advance is required to initiate the service.

What payment methods are available?

Credit card and bank wire transfers are the available options.

We are a reseller, can we purchase this support for our client?

That is possible, the service will be provided to your client even if you are the contact in purchase process.

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## File Upload Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# File Upload

FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.

## Import [\#](https://primevue.org/fileupload/\#import)

```javascript

import FileUpload from 'primevue/fileupload';

```

Copy

## Basic [\#](https://primevue.org/fileupload/\#basic)

FileUpload basic _mode_ provides a simpler UI as an alternative to default advanced mode.

ChooseNo file chosen

Upload

```markup

<FileUpload ref="fileupload" mode="basic" name="demo[]" url="/api/upload" accept="image/*" :maxFileSize="1000000" @upload="onUpload" />
<Button label="Upload" @click="upload" severity="secondary" />

```

Copy

## Auto [\#](https://primevue.org/fileupload/\#auto)

When _auto_ property is enabled, a file gets uploaded instantly after selection.

Browse

```markup

<FileUpload mode="basic" name="demo[]" url="/api/upload" accept="image/*" :maxFileSize="1000000" @upload="onUpload" :auto="true" chooseLabel="Browse" />

```

Copy

## Advanced [\#](https://primevue.org/fileupload/\#advanced)

FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.

ChooseUploadCancel

Drag and drop files to here to upload.

```markup

<FileUpload name="demo[]" url="/api/upload" @upload="onAdvancedUpload($event)" :multiple="true" accept="image/*" :maxFileSize="1000000">
    <template #empty>
        <span>Drag and drop files to here to upload.</span>
    </template>
</FileUpload>

```

Copy

## Template [\#](https://primevue.org/fileupload/\#template)

Uploader UI can be customized with templating.

Drag and drop files to here to upload.

```markup

<FileUpload name="demo[]" url="/api/upload" @upload="onTemplatedUpload($event)" :multiple="true" accept="image/*" :maxFileSize="1000000" @select="onSelectedFiles">
    <template #header="{ chooseCallback, uploadCallback, clearCallback, files }">
        <div class="flex flex-wrap justify-between items-center flex-1 gap-4">
            <div class="flex gap-2">
                <Button @click="chooseCallback()" icon="pi pi-images" rounded outlined severity="secondary"></Button>
                <Button @click="uploadEvent(uploadCallback)" icon="pi pi-cloud-upload" rounded outlined severity="success" :disabled="!files || files.length === 0"></Button>
                <Button @click="clearCallback()" icon="pi pi-times" rounded outlined severity="danger" :disabled="!files || files.length === 0"></Button>
            </div>
            <ProgressBar :value="totalSizePercent" :showValue="false" class="md:w-20rem h-1 w-full md:ml-auto">
                <span class="whitespace-nowrap">{{ totalSize }}B / 1Mb</span>
            </ProgressBar>
        </div>
    </template>
    <template #content="{ files, uploadedFiles, removeUploadedFileCallback, removeFileCallback, messages }">
        <div class="flex flex-col gap-8 pt-4">
            <Message v-for="message of messages" :key="message" :class="{ 'mb-8': !files.length && !uploadedFiles.length}" severity="error">
                {{ message }}
            </Message>

            <div v-if="files.length > 0">
                <h5>Pending</h5>
                <div class="flex flex-wrap gap-4">
                    <div v-for="(file, index) of files" :key="file.name + file.type + file.size" class="p-8 rounded-border flex flex-col border border-surface items-center gap-4">
                        <div>
                            <img role="presentation" :alt="file.name" :src="file.objectURL" width="100" height="50" />
                        </div>
                        <span class="font-semibold text-ellipsis max-w-60 whitespace-nowrap overflow-hidden">{{ file.name }}</span>
                        <div>{{ formatSize(file.size) }}</div>
                        <Badge value="Pending" severity="warn" />
                        <Button icon="pi pi-times" @click="onRemoveTemplatingFile(file, removeFileCallback, index)" outlined rounded severity="danger" />
                    </div>
                </div>
            </div>

            <div v-if="uploadedFiles.length > 0">
                <h5>Completed</h5>
                <div class="flex flex-wrap gap-4">
                    <div v-for="(file, index) of uploadedFiles" :key="file.name + file.type + file.size" class="p-8 rounded-border flex flex-col border border-surface items-center gap-4">
                        <div>
                            <img role="presentation" :alt="file.name" :src="file.objectURL" width="100" height="50" />
                        </div>
                        <span class="font-semibold text-ellipsis max-w-60 whitespace-nowrap overflow-hidden">{{ file.name }}</span>
                        <div>{{ formatSize(file.size) }}</div>
                        <Badge value="Completed" class="mt-4" severity="success" />
                        <Button icon="pi pi-times" @click="removeUploadedFileCallback(index)" outlined rounded severity="danger" />
                    </div>
                </div>
            </div>
        </div>
    </template>
    <template #empty>
        <div class="flex items-center justify-center flex-col">
            <i class="pi pi-cloud-upload !border-2 !rounded-full !p-8 !text-4xl !text-muted-color" />
            <p class="mt-6 mb-0">Drag and drop files to here to upload.</p>
        </div>
    </template>
</FileUpload>

```

Copy

## Custom Upload [\#](https://primevue.org/fileupload/\#custom-upload)

Uploading implementation can be overridden by enabling _customUpload_ property. This sample, displays the image on the client side with a grayscale filter.

Choose

```markup

<FileUpload mode="basic" @select="onFileSelect" customUpload auto severity="secondary" class="p-button-outlined" />
<img v-if="src" :src="src" alt="Image" class="shadow-md rounded-xl w-full sm:w-64" style="filter: grayscale(100%)" />

```

Copy

## Accessibility [\#](https://primevue.org/fileupload/\#accessibility)

### Screen Reader

FileUpload uses a hidden native _input_ element with _type="file"_ for screen readers.

### Keyboard Support

Interactive elements of the uploader are buttons, visit the [Button](https://primevue.org/button/#accessibility) accessibility section for more information.

- Import

- Basic

- Auto

- Advanced

- Template

- Custom Upload

- Accessibility


# File Upload API

API defines helper props, events and others for the PrimeVue File Upload module.

## FileUpload [\#](https://primevue.org/fileupload/\#api.fileupload)

FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.

### Props [\#](https://primevue.org/fileupload/\#api.fileupload.props)

Defines valid properties in FileUpload component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| name | string | null | Name of the request parameter to identify the files at backend. |  |
| url | string | null | Remote url to upload the files. |  |
| mode | HintedString<"advanced" \| "basic"> | advanced | Defines the UI of the component, possible values are 'advanced' and 'basic'. |  |
| multiple | boolean | false | Used to select multiple files at once from file dialog. |  |
| accept | string | null | Pattern to restrict the allowed file types such as 'image/\*'. |  |
| disabled | boolean | false | Disables the upload functionality. |  |
| auto | boolean | false | When enabled, upload begins automatically after selection is completed. |  |
| maxFileSize | number | null | Maximum file size allowed in bytes. |  |
| invalidFileSizeMessage | string | : Invalid file size, file size should be smaller than {1.} | Message of the invalid fize size. |  |
| invalidFileLimitMessage | string | Maximum number of files to be uploaded is {0.} | Message to display when number of files to be uploaded exceeeds the limit. |  |
| invalidFileTypeMessage | string | '{0}: Invalid file type.' | Message of the invalid fize type. |  |
| fileLimit | number | null | Maximum number of files that can be uploaded. |  |
| withCredentials | boolean | false | Cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates. |  |
| previewWidth | number | 50 | Width of the image thumbnail in pixels. |  |
| chooseLabel | string | null | Label of the choose button. Defaults to PrimeVue Locale configuration. |  |
| uploadLabel | string | null | Label of the upload button. Defaults to PrimeVue Locale configuration. |  |
| cancelLabel | string | Cancel | Label of the cancel button. Defaults to PrimeVue Locale configuration. |  |
| customUpload | boolean | null | Whether to use the default upload or a manual implementation defined in uploadHandler callback. Defaults to PrimeVue Locale configuration. |  |
| showUploadButton | boolean | true | Whether to show the upload button. |  |
| showCancelButton | boolean | true | Whether to show the cancel button. |  |
| chooseIcon | string | null | Icon of the choose button. |  |
| uploadIcon | string | null | Icon of the upload button. |  |
| cancelIcon | string | null | Icon of the cancel button. |  |
| style | any | null | Inline style of the component. |  |
| class | any | null | Style class of the component. |  |
| chooseButtonProps | object | null | Used to pass all properties of the ButtonProps to the choose button inside the component. |  |
| uploadButtonProps | object | null | Used to pass all properties of the ButtonProps to the upload button inside the component. |  |
| cancelButtonProps | object | null | Used to pass all properties of the ButtonProps to the cancel button inside the component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<FileUploadPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/fileupload/\#api.fileupload.emits)

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| select | event: [FileUploadSelectEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadSelectEvent) | void | Callback to invoke when files are selected. |  |
| before-upload | event: [FileUploadBeforeUploadEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadBeforeUploadEvent) | void | Callback to invoke before file upload begins to customize the request such as post parameters before the files. |  |
| progress | event: [FileUploadProgressEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadProgressEvent) | void | Callback to invoke when files are being uploaded. |  |
| upload | event: [FileUploadUploadEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadUploadEvent) | void | Callback to invoke when file upload is complete. |  |
| uploader | event: [FileUploadUploaderEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadUploaderEvent) | void | Callback to invoke to implement a custom upload. |  |
| error | event: [FileUploadErrorEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadErrorEvent) | void | Callback to invoke if file upload fails. |  |
| before-send | event: [FileUploadBeforeSendEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadBeforeSendEvent) | void | Callback to invoke before file send begins to customize the request such as adding headers. |  |
| clear |  | void | Callback to invoke when files in queue are removed without uploading. |  |
| remove | event: [FileUploadRemoveEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadRemoveEvent) | void | Callback to invoke when a singe file is removed from the list. |  |
| removeUploadedFile | event: [FileUploadRemoveUploadedFile](https://primevue.org/fileupload/#api.fileupload.interfaces.FileUploadRemoveUploadedFile) | void | Callback to invoke when a single uploaded file is removed from the uploaded file list. |  |

### Slots [\#](https://primevue.org/fileupload/\#api.fileupload.slots)

Defines valid slots in FileUpload slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header | scope: {<br>files: File, // Files to upload.uploadedFiles: File, // Uploaded files.chooseCallback: () â‡’ void, // Choose functionuploadCallback: () â‡’ void, // Upload functionclearCallback: () â‡’ void, // Clear function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header content template. |  |
| content | scope: {<br>files: File, // Files to upload.uploadedFiles: File, // Uploaded files.removeUploadedFileCallback: (index: number) â‡’ void, // Function to remove an uploaded file.removeFileCallback: (index: number) â‡’ void, // Function to remove a file.progress: number, // Uploaded progress as number.messages: undefined, // Status messages about upload process.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom uploaded content template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content when there is no selected file. |  |
| chooseicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom choose icon template. |  |
| uploadicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom upload icon template. |  |
| cancelicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom cancel icon template. |  |
| fileremoveicon | scope: {<br>file: File, // File to upload.index: number, // The index of file<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom remove icon template for each file. |  |
| filelabel | scope: {<br>files: File, // File to upload.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom file label template. |  |

### Methods [\#](https://primevue.org/fileupload/\#api.fileupload.methods)

Defines methods that can be accessed by the component's reference.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| upload |  | void | Upload file. |  |

### Events [\#](https://primevue.org/fileupload/\#api.fileupload.events)

Defines the custom events used by the component's emit.

#### FileUploadSelectEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadSelectEvent)

Custom select event.

See [select](https://primevue.org/fileupload/#api.fileupload.emitsoptions.select)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| files | any | List of selected files. |

#### FileUploadBeforeUploadEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadBeforeUploadEvent)

Custom before upload event.

See [before-upload](https://primevue.org/fileupload/#api.fileupload.emitsoptions.before-upload)

| name | type | description |
| --- | --- | --- |
| xhr | XMLHttpRequest | XmlHttpRequest instance. |
| formData | FormData | FormData object. |

#### FileUploadProgressEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadProgressEvent)

Custom progress event.

See [progress](https://primevue.org/fileupload/#api.fileupload.emitsoptions.progress)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| progress | number | Calculated progress value. |

#### FileUploadUploadEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadUploadEvent)

Custom upload event.

See [upload](https://primevue.org/fileupload/#api.fileupload.emitsoptions.upload)

| name | type | description |
| --- | --- | --- |
| xhr | XMLHttpRequest | XmlHttpRequest instance. |
| files | File \| File\[\] | Files that are not uploaded. |

#### FileUploadUploaderEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadUploaderEvent)

Custom uploader event.

See [uploader](https://primevue.org/fileupload/#api.fileupload.emitsoptions.uploader)

| name | type | description |
| --- | --- | --- |
| files | File \| File\[\] | List of selected files. |

#### FileUploadErrorEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadErrorEvent)

Custom error event.

See [error](https://primevue.org/fileupload/#api.fileupload.emitsoptions.error)

| name | type | description |
| --- | --- | --- |
| xhr | XMLHttpRequest | XmlHttpRequest instance. |
| files | File \| File\[\] | Files that are not uploaded. |

#### FileUploadBeforeSendEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadBeforeSendEvent)

Custom before send event.

See [before-send](https://primevue.org/fileupload/#api.fileupload.emitsoptions.before-send)

| name | type | description |
| --- | --- | --- |
| xhr | XMLHttpRequest | XmlHttpRequest instance. |
| formData | FormData | FormData object. |

#### FileUploadRemoveEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadRemoveEvent)

Custom remove event.

See [remove](https://primevue.org/fileupload/#api.fileupload.emitsoptions.remove)

| name | type | description |
| --- | --- | --- |
| file | File | Removed file. |
| files | File\[\] | Remaining files to be uploaded. |

### Interfaces [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces)

Defines the custom interfaces used by the module.

#### FileUploadPassThroughMethodOptions [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces.FileUploadPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [FileUploadProps](https://primevue.org/fileupload/#api.fileupload.interfaces.FileUploadProps) | null | Defines valid properties. |
| state | [FileUploadState](https://primevue.org/fileupload/#api.fileupload.interfaces.FileUploadState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### FileUploadRemoveUploadedFile [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces.FileUploadRemoveUploadedFile)

Custom remove upload file event.

| name | type | default | description |
| --- | --- | --- | --- |
| file | File | null | Removed file. |
| files | File\[\] | null | Remaining files to be uploaded. |

#### FileUploadPassThroughOptions [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces.FileUploadPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| input | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the input's DOM element. |
| header | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| pcChooseButton | any | null | Used to pass attributes to the choose Button component. |
| pcUploadButton | any | null | Used to pass attributes to the upload Button component. |
| pcCancelButton | any | null | Used to pass attributes to the cancel Button component. |
| content | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| pcProgressBar | any | null | Used to pass attributes to the ProgressBar component. |
| pcMessage | any | null | Used to pass attributes to the message's DOM element. |
| file | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the file's DOM element. |
| fileThumbnail | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the file thumbnail's DOM element. |
| fileInfo | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the file info's DOM element. |
| fileName | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the fileName's DOM element. |
| fileSize | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the fileSize's DOM element. |
| pcFileBadge | any | null | Used to pass attributes to the Badge component. |
| fileActions | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the file actions' DOM element. |
| pcFileRemoveButton | any | null | Used to pass attributes to the file remove button's DOM element. |
| empty | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the empty's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### FileUploadPassThroughAttributes [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces.FileUploadPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### FileUploadState [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces.FileUploadState)

Defines current inline state in FileUpload component.

| name | type | default | description |
| --- | --- | --- | --- |
| uploadedFileCount | number | 0 | Current uploaded file count state as a number. |
| files | any\[\] | null | Current files. |
| messages | null \| string\[\] | null | Current messages. |
| progress | number | null | Current progress state as a number. |
| uploadedFiles | any\[\] | null | Current uploaded files. |

## Types [\#](https://primevue.org/fileupload/\#api.fileupload.types)

Defines the custom types used by the module.

#### FileUploadPassThroughOptionType [\#](https://primevue.org/fileupload/\#api.fileupload.types.FileUploadPassThroughOptionType)

| values |
| --- |
| FileUploadPassThroughAttributes \| (options: FileUploadPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### FileUploadEmits [\#](https://primevue.org/fileupload/\#api.fileupload.types.FileUploadEmits)

| values |
| --- |
| EmitFn<FileUploadEmitsOptions> |

- FileUpload

  - Props

  - Emits

  - Slots

  - Methods

  - Events

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## Volt UI Component Suite
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

![PrimeVue Figma UI Kit](https://primefaces.org/cdn/primevue/images/uikit/primeone-cover-light.jpeg)

![PrimeVue UI Kit](https://primefaces.org/cdn/primevue/images/uikit/uikit-figma.png)

UP-TO-DATE

Best Features of Figma

PrimeOne for Figma uses the latest powerful features like components, variants, auto layout, styles, variables and interactive components. It'll always follow the best practices.

- Auto Layout
- Variants
- Variables and Styles
- Interactive Components
- Boolean, Instance Swap and Text Properties
- Nested Instances

ENTERPRISE GRADE

Powerful System

Save countless hours on every project with a carefully designed system that uses Prime UI Suite components. Start producing design results in no time.

- Numerous Components
- Icon Library
- Easy Customization
- Atomic Approach

![PrimeVue Designer](https://primefaces.org/cdn/primevue/images/uikit/uikit-system.png)

![PrimeVue Designer](https://primefaces.org/cdn/primevue/images/uikit/uikit-themes.png)

DARK MODE

Two Themes

PrimeOne is designed based on Aura Light and Aura Dark themes. Easily change the themes of your designs using Figma's Swap Library feature or Tokens Studio Sets.

- Aura Light
- Aura Dark

TOKENS STUDIO

Tokens Support

Empower yourself with unprecedented control over your designs. Tokens Studio integration unlocks a whole new level of flexibility, allowing you to create and manage design tokens seamlessly.

- Countless Design Tokens
- Light and Dark Sets
- Well Documented
- Primitive, Semantic and Component Tokens

![Tokens Support](https://primefaces.org/cdn/primevue/images/uikit/uikit-tokens.png)

![PrimeVue Designer](https://primefaces.org/cdn/designer/feature-2.png)

AUTOMATED

Figma to Theme

_This feature requires a [Theme Designer](https://primevue.org/designer) subscription._

Bridge the gap between design and development with our powerful Figma sync technology. Fully integrated with the PrimeVue Figma UI Kit, get started in no time by importing your design token file. Save countless hours in your workflow by eliminating manual theme creation from Figma designs.

- Automatic Mapping
- Eliminate Handoff
- Maintain Perfect Fidelity
- Verify Synchorization

[Preview Light![Figma Light](https://primefaces.org/cdn/primevue/images/uikit/logo-figma-light.svg)](https://www.figma.com/design/JRSFCni27PU4TrqOjoWeOA/Preview-%7C%20PrimeOne-|-3.1.0?node-id=806-36648&t=CpfshQ7laurr043o-1) [Preview Dark![Figma Dark](https://primefaces.org/cdn/primevue/images/uikit/logo-figma-dark.svg)](https://www.figma.com/design/ybRv6Rx2vGo9vQR0KRRt6G/Preview-%7C-Dark-%7C%20PrimeOne-|-3.1.0?node-id=6738-55117&t=XXwVln6ycpiKPlSS-1)

Pricing

Choose the right plan for your business. Whether you are an individual or a member of a team, UI Kit is available for affordable prices.

[View License Details](https://www.primefaces.org/uikit/licenses)

Single Designer

For individual designers

* * *

$249

* * *

- 1 Designer
- Auto Layout & Variants
- Interactive Components
- Tokens Studio Support
- 1 Year Free Updates
- Use on Unlimited Projects

* * *

[Buy Now](https://www.primefaces.org/store/uikit.xhtml)

Team

For small teams

* * *

$990

* * *

- Up to 5 Designers
- Auto Layout & Variants
- Interactive Components
- Tokens Studio Support
- 1 Year Free Updates
- Use on Unlimited Projects

* * *

[Buy Now](https://www.primefaces.org/store/uikit.xhtml)

Enterprise

For large teams

* * *

EXCLUSIVE DEALS

* * *

- Custom Team Size
- Auto Layout & Variants
- Interactive Components
- Tokens Studio Support
- 1 Year Free Updates
- Use on Unlimited Projects

* * *

[Contact Us](mailto:contact@primetek.com.tr)

Frequently Asked Questions

What do I get when I purchase a license?

You'll be able to download two Figma files for light and dark themes.

Is there a recurring fee or is the license perpetual?

UI Kit license is perpetual so requires one time payment with 1 year free updates, not subscription based.

Can I use UI Kit license for commercial projects?

Yes, your license allows you to sell your projects that utilize the UI Kit implementations.

Can I create multiple projects for multiple clients?

There is no limit, you are able to use UI Kit in multiple projects for multiple clients.

What Does "Free Updates" Mean?

All updates are completely free for the first year after your purchase. After this one-year period, you will no longer have access to newer versions. However, all versions released within the first year from your purchase date will remain accessible to you indefinitely.

How Can I Extend My Access to Updates After One Year?

At PrimeStore, you have the option to purchase an additional update term. This will grant you access to all existing versions and updates for another year.

How can I get support?

PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and [Forum](https://github.com/orgs/primefaces/discussions/categories/figma-ui-kit).

Does the enterprise license include contractors within the organization?

Yes, contractors are also able to use the UI Kit within your company within the custom team limit.

Can subsidiary company of a larger organization share the enterprise license?

No, enterprise license is per company so each subsidiary company needs to purchase a separate license.

Can I include UI Kit in an open source project?

Due to the license, it is not possible to use the UI Kit in an open source project where the design files are publicly available.

We're a reseller, are we able to purchase a license on behalf of our client?

Yes, after the purchase, please [contact us](mailto:contact@primetek.com.tr) so we can transfer the license to your client.

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Divider Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Divider

Divider is used to separate contents.

## Import [\#](https://primevue.org/divider/\#import)

```javascript

import Divider from 'primevue/divider';

```

Copy

## Basic [\#](https://primevue.org/divider/\#basic)

Divider is basically placed between the items to separate.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.

```markup

<p class="m-0">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis
    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</p>

<Divider />

<p class="m-0">
    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam
    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
</p>

<Divider />

<p class="m-0">
    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia
    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
</p>

<Divider />

<p class="m-0">
    Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus
    maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.
</p>

```

Copy

## Type [\#](https://primevue.org/divider/\#type)

Style of the border is configured with the _type_ property that can either be _solid_, _dotted_ or _dashed_.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.

```markup

<p class="m-0">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis
    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</p>

<Divider type="solid" />

<p class="m-0">
    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam
    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
</p>

<Divider type="dotted" />

<p class="m-0">
    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia
    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
</p>

<Divider type="dashed" />

<p class="m-0">
    Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus
    maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.
</p>

```

Copy

## Vertical [\#](https://primevue.org/divider/\#vertical)

Vertical divider is enabled by setting the _layout_ property as _vertical_.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

```markup

<p class="m-0">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis
    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</p>

<Divider layout="vertical" />

<p class="m-0">
    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam
    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
</p>

<Divider layout="vertical" />

<p class="m-0">
    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia
    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
</p>

```

Copy

## Content [\#](https://primevue.org/divider/\#content)

Children are rendered within the boundaries of the divider where location of the content is configured with the _align_ property. In horizontal layout, alignment options are _left_, _center_ and _right_ whereas vertical mode supports _top_, _center_ and _bottom_.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

**Left**

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

**Center**

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

**Right**

Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.

```markup

<p class="m-0">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis
    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</p>

<Divider align="left" type="solid">
    <b>Left</b>
</Divider>

<p class="m-0">
    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam
    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
</p>

<Divider align="center" type="dotted">
    <b>Center</b>
</Divider>

<p class="m-0">
    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia
    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
</p>

<Divider align="right" type="dashed">
    <b>Right</b>
</Divider>

<p class="m-0">
    Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus
    maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.
</p>

```

Copy

## Login [\#](https://primevue.org/divider/\#login)

Sample implementation of a login form using a divider with content.

Username

Password

Login

**OR**

**OR**

Sign Up

```markup

<div class="flex flex-col md:flex-row">
    <div class="w-full md:w-5/12 flex flex-col items-center justify-center gap-3 py-5">
        <div class="flex flex-col gap-2">
            <label for="username">Username</label>
            <InputText id="username" type="text" />
        </div>
        <div class="flex flex-col gap-2">
            <label for="password">Password</label>
            <InputText id="password" type="password" />
        </div>
        <div class="flex">
            <Button label="Login" icon="pi pi-user" class="w-full max-w-[17.35rem] mx-auto"></Button>
        </div>
    </div>
    <div class="w-full md:w-2/12">
        <Divider layout="vertical" class="!hidden md:!flex"><b>OR</b></Divider>
        <Divider layout="horizontal" class="!flex md:!hidden" align="center"><b>OR</b></Divider>
    </div>
    <div class="w-full md:w-5/12 flex items-center justify-center py-5">
        <Button label="Sign Up" icon="pi pi-user-plus" severity="success" class="w-full max-w-[17.35rem] mx-auto"></Button>
    </div>
</div>

```

Copy

## Accessibility [\#](https://primevue.org/divider/\#accessibility)

### Screen Reader

Divider uses a _separator_ role with _aria-orientation_ set to either "horizontal" or "vertical".

### Keyboard Support

Component does not include any interactive elements.

- Import

- Basic

- Type

- Vertical

- Content

- Login

- Accessibility


# Divider API

API defines helper props, events and others for the PrimeVue Divider module.

## Divider [\#](https://primevue.org/divider/\#api.divider)

Divider is used to separate contents.

### Props [\#](https://primevue.org/divider/\#api.divider.props)

Defines valid properties in Divider component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| align | HintedString<"left" \| "right" \| "top" \| "bottom" \| "center"> | null | Alignment of the content. |  |
| layout | HintedString<"horizontal" \| "vertical"> | horizontal | Specifies the orientation, valid values are 'horizontal' and 'vertical'. |  |
| type | HintedString<"solid" \| "dashed" \| "dotted"> | solid | Border style type. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DividerPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/divider/\#api.divider.slots)

Defines valid slots in Divider slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default content slot. |  |

### Interfaces [\#](https://primevue.org/divider/\#api.divider.interfaces)

Defines the custom interfaces used by the module.

#### DividerPassThroughMethodOptions [\#](https://primevue.org/divider/\#api.divider.interfaces.DividerPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DividerProps](https://primevue.org/divider/#api.divider.interfaces.DividerProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### DividerPassThroughOptions [\#](https://primevue.org/divider/\#api.divider.interfaces.DividerPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [DividerPassThroughOptionType](https://primevue.org/divider/#api.divider.types.DividerPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| content | [DividerPassThroughOptionType](https://primevue.org/divider/#api.divider.types.DividerPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### DividerPassThroughAttributes [\#](https://primevue.org/divider/\#api.divider.interfaces.DividerPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/divider/\#api.divider.types)

Defines the custom types used by the module.

#### DividerPassThroughOptionType [\#](https://primevue.org/divider/\#api.divider.types.DividerPassThroughOptionType)

| values |
| --- |
| DividerPassThroughAttributes \| (options: DividerPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### DividerEmits [\#](https://primevue.org/divider/\#api.divider.types.DividerEmits)

| values |
| --- |
| EmitFn<DividerEmitsOptions> |

- Divider

  - Props

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue RadioButton Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# RadioButton

RadioButton is an extension to standard radio button element with theming.

## Import [\#](https://primevue.org/radiobutton/\#import)

```javascript

import RadioButton from 'primevue/radiobutton';

```

Copy

## Group [\#](https://primevue.org/radiobutton/\#group)

RadioButton is used with the _v-model_ property for two-way value binding.

Cheese

Mushroom

Pepper

Onion

```markup

<div class="flex flex-wrap gap-4">
    <div class="flex items-center gap-2">
        <RadioButton v-model="ingredient" inputId="ingredient1" name="pizza" value="Cheese" />
        <label for="ingredient1">Cheese</label>
    </div>
    <div class="flex items-center gap-2">
        <RadioButton v-model="ingredient" inputId="ingredient2" name="pizza" value="Mushroom" />
        <label for="ingredient2">Mushroom</label>
    </div>
    <div class="flex items-center gap-2">
        <RadioButton v-model="ingredient" inputId="ingredient3" name="pizza" value="Pepper" />
        <label for="ingredient3">Pepper</label>
    </div>
    <div class="flex items-center gap-2">
        <RadioButton v-model="ingredient" inputId="ingredient4" name="pizza" value="Onion" />
        <label for="ingredient4">Onion</label>
    </div>
</div>

```

Copy

## Forms [\#](https://primevue.org/radiobutton/\#forms)

RadioButton integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.

Cheese

Mushroom

Pepper

Onion

Submit

```markup

<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col gap-2">
        <RadioButtonGroup name="ingredient" class="flex flex-wrap gap-4">
            <div class="flex items-center gap-2">
                <RadioButton inputId="cheese" value="Cheese" />
                <label for="cheese">Cheese</label>
            </div>
            <div class="flex items-center gap-2">
                <RadioButton inputId="mushroom" value="Mushroom" />
                <label for="mushroom">Mushroom</label>
            </div>
            <div class="flex items-center gap-2">
                <RadioButton inputId="pepper" value="Pepper" />
                <label for="pepper">Pepper</label>
            </div>
            <div class="flex items-center gap-2">
                <RadioButton inputId="onion" value="Onion" />
                <label for="onion">Onion</label>
            </div>
        </RadioButtonGroup>
        <Message v-if="$form.ingredient?.invalid" severity="error" size="small" variant="simple">{{ $form.ingredient.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>

```

Copy

## Dynamic [\#](https://primevue.org/radiobutton/\#dynamic)

RadioButtons can be generated using a list of values.

Accounting

Marketing

Production

Research

```markup

<div v-for="category in categories" :key="category.key" class="flex items-center gap-2">
    <RadioButton v-model="selectedCategory" :inputId="category.key" name="dynamic" :value="category.name" />
    <label :for="category.key">{{ category.name }}</label>
</div>

```

Copy

## Filled [\#](https://primevue.org/radiobutton/\#filled)

Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.

```markup

<RadioButton v-model="value" value="1" variant="filled" />

```

Copy

## Sizes [\#](https://primevue.org/radiobutton/\#sizes)

RadioButton provides _small_ and _large_ sizes as alternatives to the base.

Small

Normal

Large

```markup

<div class="flex flex-wrap gap-4">
    <div class="flex items-center gap-2">
        <RadioButton v-model="size" inputId="size_small" name="size" value="Small" size="small" />
        <label for="size_small" class="text-sm">Small</label>
    </div>
    <div class="flex items-center gap-2">
        <RadioButton v-model="size" inputId="size_normal" name="size" value="Normal" />
        <label for="size_normal">Normal</label>
    </div>
    <div class="flex items-center gap-2">
        <RadioButton v-model="size" inputId="size_large" name="size" value="Large" size="large" />
        <label for="size_large" class="text-lg">Large</label>
    </div>
</div>

```

Copy

## Invalid [\#](https://primevue.org/radiobutton/\#invalid)

Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.

```markup

<RadioButton v-model="value" value="1" :invalid="value === null" />

```

Copy

## Disabled [\#](https://primevue.org/radiobutton/\#disabled)

When _disabled_ is present, the element cannot be edited and focused.

```markup

<RadioButton v-model="value" :value="1" disabled />
<RadioButton v-model="value" :value="2" disabled />

```

Copy

## Accessibility [\#](https://primevue.org/radiobutton/\#accessibility)

### Screen Reader

RadioButton component uses a hidden native radio button element internally that is only visible to screen readers. Value to describe the component can either be provided via _label_ tag combined with _id_ prop or using _aria-labelledby_, _aria-label_ props.

```markup

<label for="rb1">One</label>
<RadioButton inputId="rb1" />

<span id="rb2">Two</span>
<RadioButton aria-labelledby="rb2" />

<RadioButton aria-label="Three" />

```

Copy

### Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the checked radio button, if there is none within the group then first radio button receives the focus. |
| _left arrow_ _up arrow_ | Moves focus to the previous radio button, if there is none then last radio button receives the focus. |
| _right arrow_ _down arrow_ | Moves focus to the next radio button, if there is none then first radio button receives the focus. |
| _space_ | If the focused radio button is unchecked, changes the state to checked. |

- Import

- Group

- Forms

- Dynamic

- Filled

- Sizes

- Invalid

- Disabled

- Accessibility


# RadioButton API

API defines helper props, events and others for the PrimeVue RadioButton module.

## RadioButton [\#](https://primevue.org/radiobutton/\#api.radiobutton)

RadioButton is an extension to standard radio button element with theming.

### Props [\#](https://primevue.org/radiobutton/\#api.radiobutton.props)

Defines valid properties in RadioButton component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | any | null | Value of the checkbox. |  |
| modelValue | any | null | Value binding of the checkbox. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | Name of the input element. |  |
| binary | boolean | null | Allows to select a boolean value. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| readonly | boolean | null | When present, it specifies that an input field is read-only. |  |
| tabindex | number | null | Index of the element in tabbing order. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<RadioButtonPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/radiobutton/\#api.radiobutton.emits)

Defines valid emits in RadioButton component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: Event | void | Callback to invoke on radio button value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |

### Interfaces [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces)

Defines the custom interfaces used by the module.

#### RadioButtonPassThroughMethodOptions [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces.RadioButtonPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [RadioButtonProps](https://primevue.org/radiobutton/#api.radiobutton.interfaces.RadioButtonProps) | null | Defines valid properties. |
| state | [RadioButtonState](https://primevue.org/radiobutton/#api.radiobutton.interfaces.RadioButtonState) | null | Defines current inline state. |
| context | [RadioButtonContext](https://primevue.org/radiobutton/#api.radiobutton.interfaces.RadioButtonContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### RadioButtonPassThroughOptions [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces.RadioButtonPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [RadioButtonPassThroughOptionType](https://primevue.org/radiobutton/#api.radiobutton.types.RadioButtonPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| input | [RadioButtonPassThroughOptionType](https://primevue.org/radiobutton/#api.radiobutton.types.RadioButtonPassThroughOptionType) | null | Used to pass attributes to the input's DOM element. |
| box | [RadioButtonPassThroughOptionType](https://primevue.org/radiobutton/#api.radiobutton.types.RadioButtonPassThroughOptionType) | null | Used to pass attributes to the box's DOM element. |
| icon | [RadioButtonPassThroughOptionType](https://primevue.org/radiobutton/#api.radiobutton.types.RadioButtonPassThroughOptionType) | null | Used to pass attributes to the icon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### RadioButtonPassThroughAttributes [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces.RadioButtonPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### RadioButtonState [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces.RadioButtonState)

Defines current inline state in RadioButton component.

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### RadioButtonContext [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces.RadioButtonContext)

Defines current options in RadioButton component.

| name | type | default | description |
| --- | --- | --- | --- |
| checked | boolean | false | Current checked state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |

## Types [\#](https://primevue.org/radiobutton/\#api.radiobutton.types)

Defines the custom types used by the module.

#### RadioButtonPassThroughOptionType [\#](https://primevue.org/radiobutton/\#api.radiobutton.types.RadioButtonPassThroughOptionType)

| values |
| --- |
| RadioButtonPassThroughAttributes \| (options: RadioButtonPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### RadioButtonEmits [\#](https://primevue.org/radiobutton/\#api.radiobutton.types.RadioButtonEmits)

| values |
| --- |
| EmitFn<RadioButtonEmitsOptions> |

- RadioButton

  - Props

  - Emits

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Menubar Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Menubar

Menubar also known as Navbar, is a horizontal menu component.

## Import [\#](https://primevue.org/menubar/\#import)

```javascript

import Menubar from 'primevue/menubar';

```

Copy

## Basic [\#](https://primevue.org/menubar/\#basic)

Menubar requires a collection of menuitems as its _model_.

- Home

- Features

- Projects

  - Components

  - Blocks

  - UI Kit

  - Templates

    - Apollo

    - Ultima
- Contact


```markup

<Menubar :model="items" />

```

Copy

## Advanced [\#](https://primevue.org/menubar/\#advanced)

Menubar is a simple horizontal navigation component, for advanced use cases consider [Marketing](https://primeblocks.org/marketing/navbar) and [Application](https://primeblocks.org/application/navbar) NavBars in PrimeBlocks or [templates](https://primevue.org/templates) with horizontal menus in application templates.

## Template [\#](https://primevue.org/menubar/\#template)

Menubar offers item customization with the _item_ template that receives the menuitem instance from the model as a parameter. Additional slots named _start_ and _end_ are provided to embed content before or after the menu.

- Home

- Projects3

  - CoreâŒ˜+S

  - BlocksâŒ˜+B

  - UI KitâŒ˜+U

![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)

```markup

<Menubar :model="items">
    <template #start>
        <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-8">
            <path d="..." fill="var(--p-primary-color)" />
            <path d="..." fill="var(--p-text-color)" />
        </svg>
    </template>
    <template #item="{ item, props, hasSubmenu, root }">
        <a v-ripple class="flex items-center" v-bind="props.action">
            <span>{{ item.label }}</span>
            <Badge v-if="item.badge" :class="{ 'ml-auto': !root, 'ml-2': root }" :value="item.badge" />
            <span v-if="item.shortcut" class="ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1">{{ item.shortcut }}</span>
            <i v-if="hasSubmenu" :class="['pi pi-angle-down ml-auto', { 'pi-angle-down': root, 'pi-angle-right': !root }]"></i>
        </a>
    </template>
    <template #end>
        <div class="flex items-center gap-2">
            <InputText placeholder="Search" type="text" class="w-32 sm:w-auto" />
            <Avatar image="/images/avatar/amyelsner.png" shape="circle" />
        </div>
    </template>
</Menubar>

```

Copy

## Command [\#](https://primevue.org/menubar/\#command)

The _command_ property defines the callback to run when an item is activated by click or a key event.

- File

  - New

  - Print
- Search

- Sync

  - Import

  - Export

```markup

<Menubar :model="items" />
<Toast />

```

Copy

## Router [\#](https://primevue.org/menubar/\#router)

Items with navigation are defined with templating to be able to use a router link component, an external link or programmatic navigation.

- Router

  - [Styled](https://primevue.org/theming/styled)

  - [Unstyled](https://primevue.org/theming/unstyled)
- Programmatic

- External

  - [Vue.js](https://vuejs.org/)

  - [Vite.js](https://vitejs.dev/)

```markup

<Menubar :model="items">
    <template #item="{ item, props, hasSubmenu }">
        <router-link v-if="item.route" v-slot="{ href, navigate }" :to="item.route" custom>
            <a v-ripple :href="href" v-bind="props.action" @click="navigate">
                <span :class="item.icon" />
                <span>{{ item.label }}</span>
            </a>
        </router-link>
        <a v-else v-ripple :href="item.url" :target="item.target" v-bind="props.action">
            <span :class="item.icon" />
            <span>{{ item.label }}</span>
            <span v-if="hasSubmenu" class="pi pi-fw pi-angle-down" />
        </a>
    </template>
</Menubar>

```

Copy

## Accessibility [\#](https://primevue.org/menubar/\#accessibility)

### Screen Reader

Menubar component uses the _menubar_ role and the value to describe the menu can either be provided with _aria-labelledby_ or _aria-label_ props. Each list item has a _menuitem_ role with _aria-label_ referring to the label of the item and _aria-disabled_ defined if the item is disabled. A submenu within a MenuBar uses the _menu_ role with an _aria-labelledby_ defined as the id of the submenu root menuitem label. In addition, menuitems that open a submenu have _aria-haspopup_, _aria-expanded_ and _aria-controls_ to define the relation between the item and the submenu.

In mobile viewports, a menu icon appears with a _button_ role along with _aria-haspopup_, _aria-expanded_ and _aria-controls_ to manage the relation between the overlay menubar and the button. The value to describe the button can be defined _aria-label_ or _aria-labelledby_ specified using _buttonProps_, by default _navigation_ key of the _aria_ property from the [locale](https://primevue.org/configuration/#locale) API as the _aria-label_.

### Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Add focus to the first item if focus moves in to the menu. If the focus is already within the menu, focus moves to the next focusable item in the page tab sequence. |
| _shift_ \+ _tab_ | Add focus to the first item if focus moves in to the menu. If the focus is already within the menu, focus moves to the previous focusable item in the page tab sequence. |
| _enter_ | If menuitem has a submenu, toggles the visibility of the submenu otherwise activates the menuitem and closes all open overlays. |
| _space_ | If menuitem has a submenu, toggles the visibility of the submenu otherwise activates the menuitem and closes all open overlays. |
| _escape_ | If focus is inside a popup submenu, closes the submenu and moves focus to the root item of the closed submenu. |
| _down arrow_ | If focus is on a root element, open a submenu and moves focus to the first element in the submenu otherwise moves focus to the next menuitem within the submenu. |
| _up arrow_ | If focus is on a root element, opens a submenu and moves focus to the last element in the submenu otherwise moves focus to the previous menuitem within the submenu. |
| _right arrow_ | If focus is on a root element, moves focus to the next menuitem otherwise opens a submenu if there is one available and moves focus to the first item. |
| _left arrow_ | If focus is on a root element, moves focus to the previous menuitem otherwise closes a submenu and moves focus to the root item of the closed submenu. |
| _home_ | Moves focus to the first menuitem within the submenu. |
| _end_ | Moves focus to the last menuitem within the submenu. |
| _any printable character_ | Moves focus to the menuitem whose label starts with the characters being typed. |

- Import

- Basic

- Advanced

- Template

- Command

- Router

- Accessibility


# Menubar API

API defines helper props, events and others for the PrimeVue Menubar module.

## Menubar [\#](https://primevue.org/menubar/\#api.menubar)

Menubar is a horizontal menu component.

### Props [\#](https://primevue.org/menubar/\#api.menubar.props)

Defines valid properties in Menubar component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | MenuItem\[\] | null | An array of menuitems. |  |
| breakpoint | string | 960px | The breakpoint to define the maximum width boundary. |  |
| buttonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the menu button. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying input element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<MenubarPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/menubar/\#api.menubar.slots)

Defines valid slots in Menubar component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| start |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom start template. |  |
| end |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom end template. |  |
| item | scope: {<br>item: MenuItem, // Menuitem instancelabel: undefined, // Label property of the menuitemprops: MenubarRouterBindProps, // Binding properties of the menuitemroot: boolean, // State of the roothasSubmenu: boolean, // Whether or not there is a submenu<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item template. |  |
| menubutton | scope: {<br>id: string, // Current id state as a stringclass: string, // Style class of componenttoggleCallback: () â‡’ void, // Toggle event<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| button | scope: {<br>id: string, // Current id state as a stringclass: string, // Style class of componenttoggleCallback: () â‡’ void, // Toggle event<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom menu button template on responsive mode. |  |
| menubuttonicon |  | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| buttonicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom menu button icon template on responsive mode. |  |
| submenuicon | scope: {<br>root: boolean, // Whether item is rootactive: boolean, // Whether item is active<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom submenu icon template. |  |
| itemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item icon template. |  |

### Interfaces [\#](https://primevue.org/menubar/\#api.menubar.interfaces)

Defines the custom interfaces used by the module.

#### MenubarPassThroughMethodOptions [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [MenubarProps](https://primevue.org/menubar/#api.menubar.interfaces.MenubarProps) | null | Defines valid properties. |
| state | [MenubarState](https://primevue.org/menubar/#api.menubar.interfaces.MenubarState) | null | Defines current inline state. |
| context | [MenubarContext](https://primevue.org/menubar/#api.menubar.interfaces.MenubarContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### MenubarPassThroughOptions [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| rootList | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the root list's DOM element. |
| item | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| itemContent | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the item content's DOM element. |
| itemLink | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the item link's DOM element. |
| itemIcon | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the item icon's DOM element. |
| itemLabel | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the item label's DOM element. |
| submenuIcon | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the submenu icon's DOM element. |
| separator | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the separator's DOM element. |
| button | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the mobile menu button's DOM element. |
| buttonIcon | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the mobile menu button icon's DOM element. |
| submenu | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the submenu's DOM element. |
| start | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the start of the component. |
| end | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the end of the component. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### MenubarPassThroughAttributes [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### MenubarFocusedItemInfo [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarFocusedItemInfo)

Defines focused item info

| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Active item index |
| level | number | null | Active item level |
| parentKey | string | null | Parent key info |

#### MenubarState [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarState)

Defines current inline state in Menubar component.

| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| mobileActive | boolean | false | Current mobile menu active state as a boolean. |
| focused | boolean | false | Current focus state as a boolean. |
| focusedItemInfo | [MenubarFocusedItemInfo](https://primevue.org/menubar/#api.menubar.interfaces.MenubarFocusedItemInfo) | null | Current focused item info. |
| activeItemPath | [MenubarFocusedItemInfo\[\]](https://primevue.org/menubar/#api.menubar.interfaces.MenubarFocusedItemInfo[]) | null | Active item path. |

#### MenubarContext [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarContext)

Defines current options in Menubar component.

| name | type | default | description |
| --- | --- | --- | --- |
| item | any | null | Current menuitem |
| index | number | null | Current index of the menuitem. |
| active | boolean | false | Current active state of menuitem as a boolean. |
| focused | boolean | false | Current focused state of menuitem as a boolean. |
| disabled | boolean | false | Current disabled state of menuitem as a boolean. |
| level | number | null | Current level of the menuitem. |

## Types [\#](https://primevue.org/menubar/\#api.menubar.types)

Defines the custom types used by the module.

#### MenubarPassThroughOptionType [\#](https://primevue.org/menubar/\#api.menubar.types.MenubarPassThroughOptionType)

| values |
| --- |
| MenubarPassThroughAttributes \| (options: MenubarPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### MenubarEmits [\#](https://primevue.org/menubar/\#api.menubar.types.MenubarEmits)

| values |
| --- |
| EmitFn<MenubarEmitsOptions> |

## MenuItem [\#](https://primevue.org/menubar/\#api.menuitem)

PrimeVue menu components share a common api to specify the menuitems and submenus.

### Events [\#](https://primevue.org/menubar/\#api.menuitem.events)

Defines the custom events used by the component's emit.

#### MenuItemCommandEvent [\#](https://primevue.org/menubar/\#api.menuitem.events.MenuItemCommandEvent)

Custom command event.

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| item | [MenuItem](https://primevue.org/menubar/#api.options.MenuItem) | Menuitem instance. |
| \[key: string\] | any |  |

### Options [\#](https://primevue.org/menubar/\#api.options.MenuItem)

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string \| Function | null | Property name or getter function to use as the label of an item. |  |
| icon | string | null | Icon of the item. |  |
| command | Function | null |  |  |
| url | string | null | External link to navigate when item is clicked. |  |
| items | MenuItem\[\] | null | An array of children menuitems. |  |
| disabled | boolean \| Function | false | A boolean or a function to return a boolean to specify if the item is disabled. |  |
| visible | boolean \| Function | true | A boolean or a function to return a boolean to specify if the item is visible. |  |
| target | string | null | Specifies where to open the linked document. |  |
| separator | boolean | false | Defines the item as a separator. |  |
| style | any | null | Inline style of the menuitem. |  |
| class | any | null | Style class of the menuitem. |  |
| key | string | null | Unique identifier of an item. |  |
| \[key: string\] | any | null |  |  |

- Menubar

  - Props

  - Slots

  - Interfaces

  - Types
- MenuItem

  - Events

  - Options

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## Speed Dial Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Speed Dial

When pressed, a floating action button can display multiple primary actions that can be performed on a page.

## Import [\#](https://primevue.org/speeddial/\#import)

```javascript

import SpeedDial from 'primevue/speeddial';

```

Copy

## Linear [\#](https://primevue.org/speeddial/\#linear)

SpeedDial items are defined with the _model_ property based on MenuModel API. Default orientation of the items is linear and _direction_ property is used to define the position of the items related to the button.

```markup

<SpeedDial :model="items" direction="up" style="position: absolute; left: calc(50% - 2rem); bottom: 0" />
<SpeedDial :model="items" direction="down" style="position: absolute; left: calc(50% - 2rem); top: 0" />
<SpeedDial :model="items" direction="left" style="position: absolute; top: calc(50% - 2rem); right: 0" />
<SpeedDial :model="items" direction="right" style="position: absolute; top: calc(50% - 2rem); left: 0" />

```

Copy

## Circle [\#](https://primevue.org/speeddial/\#circle)

Items can be displayed around the button when _type_ is set to _circle_. Additional _radius_ property defines the radius of the circle.

```markup

<SpeedDial :model="items" :radius="80" type="circle" :style="{ position: 'absolute' }" :buttonProps="{ severity: 'warn', rounded: true }" />

```

Copy

## Semi Circle [\#](https://primevue.org/speeddial/\#semi-circle)

When _type_ is defined as _semi-circle_, items are displayed in a half-circle around the button.

```markup

<SpeedDial :model="items" :radius="80" type="semi-circle" direction="up" style="position: absolute; left: calc(50% - 2rem); bottom: 0" />
<SpeedDial :model="items" :radius="80" type="semi-circle" direction="down" style="position: absolute; left: calc(50% - 2rem); top: 0" />
<SpeedDial :model="items" :radius="80" type="semi-circle" direction="left" style="position: absolute; top: calc(50% - 2rem); right: 0" />
<SpeedDial :model="items" :radius="80" type="semi-circle" direction="right" style="position: absolute; top: calc(50% - 2rem); left: 0" />

```

Copy

## Quarter Circle [\#](https://primevue.org/speeddial/\#quarter-circle)

Setting _type_ as _quarter-circle_ displays the items at one of four corners of a button based on the _direction_.

```markup

<SpeedDial :model="items" :radius="120" type="quarter-circle" direction="up-left" :style="{ position: 'absolute', right: 0, bottom: 0 }" />
<SpeedDial :model="items" :radius="120" type="quarter-circle" direction="up-right" :style="{ position: 'absolute', left: 0, bottom: 0 }" />
<SpeedDial :model="items" :radius="120" type="quarter-circle" direction="down-left" :style="{ position: 'absolute', right: 0, top: 0 }" />
<SpeedDial :model="items" :radius="120" type="quarter-circle" direction="down-right" :style="{ position: 'absolute', left: 0, top: 0 }" />

```

Copy

## Tooltip [\#](https://primevue.org/speeddial/\#tooltip)

Items display a tooltip on hover when a standalone [Tooltip](https://primevue.org/tooltip/) is present with a target that matches the items.

```markup

<SpeedDial :model="items" direction="up" :style="{ position: 'absolute', right: 0, bottom: 0 }" :buttonProps="{ severity: 'help', rounded: true }" :tooltipOptions="{ position: 'left' }" />
<SpeedDial :model="items" direction="up" :style="{ position: 'absolute', left: 0, bottom: 0 }" :buttonProps="{ severity: 'danger', rounded: true }" :tooltipOptions="{ position: 'right' }" />

```

Copy

## Mask [\#](https://primevue.org/speeddial/\#mask)

Adding _mask_ property displays a modal layer behind the popup items.

```markup

<SpeedDial :model="items" direction="up" mask :style="{ position: 'absolute', right: '1rem', bottom: '1rem' }" />

```

Copy

## Template [\#](https://primevue.org/speeddial/\#template)

SpeedDial offers item customization with the _item_ template that receives the menuitem instance from the model as a parameter. The button has its own _button_ template, additional slot named _icon_ is provided to embed icon content for default button.

- Add

- Update

- Delete

- Upload

- Website


```markup

<SpeedDial :model="items" direction="up" :transitionDelay="80" :style="{ position: 'absolute' }" pt:menuitem="m-2">
    <template #button="{ toggleCallback }">
        <Button outlined class="border" @click="toggleCallback">
            <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="..." fill="var(--p-primary-color)" />
                <path d="..." fill="var(--p-text-color)" />
            </svg>
        </Button>
    </template>
    <template #item="{ item, toggleCallback }">
        <div class="flex flex-col items-center justify-between gap-2 p-2 border rounded border-surface-200 dark:border-surface-700 w-20 cursor-pointer" @click="toggleCallback">
            <span :class="item.icon" />
            <span>
                {{ item.label }}
            </span>
        </div>
    </template>
</SpeedDial>

```

Copy

## Accessibility [\#](https://primevue.org/speeddial/\#accessibility)

### Screen Reader

SpeedDial component renders a native button element that implicitly includes any passed prop. Text to describe the button can be defined with the _aria-labelledby_ or _aria-label_ props. Addititonally the button includes includes _aria-haspopup_, _aria-expanded_ for states along with _aria-controls_ to define the relation between the popup and the button.

The popup overlay uses _menu_ role on the list and each action item has a _menuitem_ role with an _aria-label_ as the menuitem label. The id of the menu refers to the _aria-controls_ of the button.

```markup

<SpeedDial aria-label="Options" />

```

Copy

### Menu Button Keyboard Support

| Key | Function |
| --- | --- |
| _enter_ | Toggles the visibility of the menu. |
| _space_ | Toggles the visibility of the menu. |
| _down arrow_ | Opens the menu and moves focus to the first item. |
| _up arrow_ | Opens the menu and moves focus to the last item. |
| _right arrow_ | Opens the menu and moves focus to the last item. |
| _left arrow_ | Opens the menu and moves focus to the first item. |
| _escape_ | Closes the menu. |

### Menu Keyboard Support

| Key | Function |
| --- | --- |
| _enter_ | Actives the menuitem, closes the menu and sets focus on the menu button. |
| _space_ | Actives the menuitem, closes the menu and sets focus on the menu button. |
| _escape_ | Closes the menu and sets focus on the menu button. |
| _arrow keys_ | Navigates between the menu items. |
| _home_ | Moves focus to the first item. |
| _end_ | Moves focus to the last item. |

- Import

- Linear

- Circle

- Semi Circle

- Quarter Circle

- Tooltip

- Mask

- Template

- Accessibility


# Speed Dial API

API defines helper props, events and others for the PrimeVue Speed Dial module.

## SpeedDial [\#](https://primevue.org/speeddial/\#api.speeddial)

When pressed, a floating action button can display multiple primary actions that can be performed on a page.

### Props [\#](https://primevue.org/speeddial/\#api.speeddial.props)

Defines valid properties in SpeedDial component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | MenuItem\[\] | null | MenuModel instance to define the action items. |  |
| visible | boolean | false | Specifies the visibility of the overlay. |  |
| direction | HintedString<"left" \| "right" \| "up" \| "down" \| "up-left" \| "up-right" \| "down-left" \| "down-right"> | up | Specifies the opening direction of actions. |  |
| transitionDelay | number | 30 | Transition delay step for each action item. |  |
| type | HintedString<"circle" \| "linear" \| "semi-circle" \| "quarter-circle"> | linear | Specifies the opening type of actions. |  |
| radius | number | 0 | Radius for \*circle types. |  |
| mask | boolean | false | Whether to show a mask element behind the speeddial. |  |
| disabled | boolean | false | Whether the component is disabled. |  |
| hideOnClickOutside | boolean | true | Whether the actions close when clicked outside. |  |
| buttonClass | any | null | Style class of the button element. |  |
| maskStyle | any | null | Inline style of the mask element. |  |
| maskClass | string | null | Style class of the mask element. |  |
| showIcon | string | null | Show icon of the button element. |  |
| hideIcon | string | null | Hide icon of the button element. |  |
| rotateAnimation | boolean | true | Defined to rotate showIcon when hideIcon is not present. |  |
| class | any | null | Style class of the element. |  |
| style | any | null | Inline style of the element. |  |
| tooltipOptions | [SpeedDialTooltipOptions](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialTooltipOptions) | null | Whether to display the tooltip on items. The modifiers of Tooltip can be used like an object in it. Valid keys are 'event' and 'position'. |  |
| buttonProps | object | null | Used to pass all properties of the ButtonProps to the button component. |  |
| actionButtonProps | object | null | Used to pass all properties of the ButtonProps to the item component. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive list element. |  |
| ariaLabelledby | string | null | Identifier of the underlying list element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SpeedDialPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/speeddial/\#api.speeddial.emits)

Defines valid emits in SpeedDial component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| click | event: Event | void | Fired when the button element clicked. |  |
| show |  | void | Fired when the actions are visible. |  |
| hide |  | void | Fired when the actions are hidden. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |

### Slots [\#](https://primevue.org/speeddial/\#api.speeddial.slots)

Defines valid slots in SpeedDial component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| item | scope: {<br>item: MenuItem, // Menuitem instanceonClick: (event: Event) â‡’ void, // Item click functiontoggleCallback: (event: Event) â‡’ void, // Button click function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each item. |  |
| button | scope: {<br>visible: boolean, // Visible state of the itemtoggleCallback: (event: Event) â‡’ void, // Button click function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom button template. |  |
| icon | scope: {<br>visible: boolean, // Visible state of the item<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| itemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the icon template<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |

### Interfaces [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces)

Defines the custom interfaces used by the module.

#### SpeedDialPassThroughMethodOptions [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SpeedDialProps](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialProps) | null | Defines valid properties. |
| state | [SpeedDialState](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialState) | null | Defines current inline state. |
| context | [SpeedDialContext](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### SpeedDialSharedPassThroughMethodOptions [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [SpeedDialProps](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialProps) | null | Defines valid properties. |
| state | [SpeedDialState](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialState) | null | Defines current inline state. |

#### SpeedDialPassThroughOptions [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [SpeedDialPassThroughOptionType](https://primevue.org/speeddial/#api.speeddial.types.SpeedDialPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcButton | any | null | Used to pass attributes to the Button component. |
| list | [SpeedDialPassThroughOptionType](https://primevue.org/speeddial/#api.speeddial.types.SpeedDialPassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| item | [SpeedDialPassThroughOptionType](https://primevue.org/speeddial/#api.speeddial.types.SpeedDialPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| pcAction | any | null | Used to pass attributes to the action's Button component. |
| actionIcon | [SpeedDialPassThroughOptionType](https://primevue.org/speeddial/#api.speeddial.types.SpeedDialPassThroughOptionType) | null | Used to pass attributes to the action icon's DOM element. |
| mask | [SpeedDialPassThroughOptionType](https://primevue.org/speeddial/#api.speeddial.types.SpeedDialPassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### SpeedDialPassThroughAttributes [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### SpeedDialState [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialState)

Defines current inline state in SpeedDial component.

| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | List of items' id. |
| d\_visible | boolean | false | Current visible state as a boolean. |
| isItemClicked | boolean | false | Current click state of component as a boolean. |
| focused | boolean | false | Current focus state as a boolean. |
| focusedOptionIndex | number | -1 | Current focused option index as a number. |

#### SpeedDialContext [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialContext)

Defines current options in SpeedDial component.

| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | false | Current active state of menuitem as a boolean. |
| hidden | boolean | false | Current hidden state of menuitem as a boolean. |

#### SpeedDialTooltipOptions [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialTooltipOptions)

Defines tooltip options.

| name | type | default | description |
| --- | --- | --- | --- |
| event | undefined \| HintedString<"focus" \| "hover"> | null | Event to show the tooltip, valid values are hover and focus. |
| position | undefined \| HintedString<"left" \| "right" \| "top" \| "bottom"> | bottom | Position of element. |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/speeddial/\#api.speeddial.types)

Defines the custom types used by the module.

#### SpeedDialPassThroughOptionType [\#](https://primevue.org/speeddial/\#api.speeddial.types.SpeedDialPassThroughOptionType)

| values |
| --- |
| SpeedDialPassThroughAttributes \| (options: SpeedDialPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### SpeedDialEmits [\#](https://primevue.org/speeddial/\#api.speeddial.types.SpeedDialEmits)

| values |
| --- |
| EmitFn<SpeedDialEmitsOptions> |

- SpeedDial

  - Props

  - Emits

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Drawer Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Drawer

Drawer is a container component displayed as an overlay.

## Import [\#](https://primevue.org/drawer/\#import)

```javascript

import Drawer from 'primevue/drawer';

```

Copy

## Basic [\#](https://primevue.org/drawer/\#basic)

Drawer is used as a container and visibility is controlled with a binding to _visible_.

```markup

<div class="card flex justify-center">
    <Drawer v-model:visible="visible" header="Drawer">
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
    </Drawer>
    <Button icon="pi pi-arrow-right" @click="visible = true" />
</div>

```

Copy

## Position [\#](https://primevue.org/drawer/\#position)

Drawer location is configured with the _position_ property that can take _left_, _right_, _top_ and _bottom_ as valid values.

```markup

<div class="flex gap-2 justify-center">
    <Button icon="pi pi-arrow-right" @click="visibleLeft = true" />
    <Button icon="pi pi-arrow-left" @click="visibleRight = true" />
    <Button icon="pi pi-arrow-down" @click="visibleTop = true" />
    <Button icon="pi pi-arrow-up" @click="visibleBottom = true" />
</div>

<Drawer v-model:visible="visibleLeft" header="Left Drawer">
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
</Drawer>

<Drawer v-model:visible="visibleRight" header="Right Drawer" position="right">
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
</Drawer>

<Drawer v-model:visible="visibleTop" header="Top Drawer" position="top" style="height: auto">
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
</Drawer>

<Drawer v-model:visible="visibleBottom" header="Bottom Drawer" position="bottom" style="height: auto">
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
</Drawer>

```

Copy

## Size [\#](https://primevue.org/drawer/\#size)

Drawer dimension can be defined with _style_ or _class_ properties, this responsive example utilizes Tailwind.

```markup

<div class="card flex justify-center">
    <Drawer v-model:visible="visible" header="Drawer" class="!w-full md:!w-80 lg:!w-[30rem]">
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
    </Drawer>
    <Button icon="pi pi-arrow-right" @click="visible = true" />
</div>

```

Copy

## Full Screen [\#](https://primevue.org/drawer/\#fullscreen)

The full screen mode is enabled when _position_ property is set as _full_.

```markup

<div class="card flex justify-center">
    <Drawer v-model:visible="visible" header="Drawer" position="full">
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
    </Drawer>
    <Button icon="pi pi-window-maximize" @click="visible = true" />
</div>

```

Copy

## Template [\#](https://primevue.org/drawer/\#template)

Custom content at the header and footer sections is displayed with templating.

```markup

<Drawer v-model:visible="visible">
    <template #header>
        <div class="flex items-center gap-2">
            <Avatar image="/images/avatar/amyelsner.png" shape="circle" />
            <span class="font-bold">Amy Elsner</span>
        </div>
    </template>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
    <template #footer>
        <div class="flex items-center gap-2">
            <Button label="Account" icon="pi pi-user" class="flex-auto" outlined></Button>
            <Button label="Logout" icon="pi pi-sign-out" class="flex-auto" severity="danger" text></Button>
        </div>
    </template>
</Drawer>
<Button icon="pi pi-plus" @click="visible = true" />

```

Copy

## Headless [\#](https://primevue.org/drawer/\#headless)

Headless mode is enabled by defining a _container_ slot that lets you implement entire UI instead of the default elements.

```markup

<Drawer v-model:visible="visible">
    <template #container="{ closeCallback }">
        <div class="flex flex-col h-full">
            <div class="flex items-center justify-between px-6 pt-4 shrink-0">
                <span class="inline-flex items-center gap-2">
                    <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="..." fill="var(--p-primary-color)" />
                        <path d="..." fill="var(--p-text-color)" />
                    </svg>
                    <span class="font-semibold text-2xl text-primary">Your Logo</span>
                </span>
                <span>
                    <Button type="button" @click="closeCallback" icon="pi pi-times" rounded outlined></Button>
                </span>
            </div>
            <div class="overflow-y-auto">
                <ul class="list-none p-4 m-0">
                    <li>
                        <div
                            v-ripple
                            v-styleclass="{
                                selector: '@next',
                                enterFromClass: 'hidden',
                                enterActiveClass: 'animate-slidedown',
                                leaveToClass: 'hidden',
                                leaveActiveClass: 'animate-slideup'
                            }"
                            class="p-4 flex items-center justify-between text-surface-500 dark:text-surface-400 cursor-pointer p-ripple"
                        >
                            <span class="font-medium">FAVORITES</span>
                            <i class="pi pi-chevron-down"></i>
                        </div>
                        <ul class="list-none p-0 m-0 overflow-hidden">
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-home mr-2"></i>
                                    <span class="font-medium">Dashboard</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-bookmark mr-2"></i>
                                    <span class="font-medium">Bookmarks</span>
                                </a>
                            </li>
                            <li>
                                <a
                                    v-ripple
                                    v-styleclass="{
                                        selector: '@next',
                                        enterFromClass: 'hidden',
                                        enterActiveClass: 'animate-slidedown',
                                        leaveToClass: 'hidden',
                                        leaveActiveClass: 'animate-slideup'
                                    }"
                                    class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple"
                                >
                                    <i class="pi pi-chart-line mr-2"></i>
                                    <span class="font-medium">Reports</span>
                                    <i class="pi pi-chevron-down ml-auto"></i>
                                </a>
                                <ul class="list-none py-0 pl-4 pr-0 m-0 hidden overflow-y-hidden transition-all duration-[400ms] ease-in-out">
                                    <li>
                                        <a
                                            v-ripple
                                            v-styleclass="{
                                                selector: '@next',
                                                enterFromClass: 'hidden',
                                                enterActiveClass: 'animate-slidedown',
                                                leaveToClass: 'hidden',
                                                leaveActiveClass: 'animate-slideup'
                                            }"
                                            class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple"
                                        >
                                            <i class="pi pi-chart-line mr-2"></i>
                                            <span class="font-medium">Revenue</span>
                                            <i class="pi pi-chevron-down ml-auto"></i>
                                        </a>
                                        <ul class="list-none py-0 pl-4 pr-0 m-0 hidden overflow-y-hidden transition-all duration-[400ms] ease-in-out">
                                            <li>
                                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                                    <i class="pi pi-table mr-2"></i>
                                                    <span class="font-medium">View</span>
                                                </a>
                                            </li>
                                            <li>
                                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                                    <i class="pi pi-search mr-2"></i>
                                                    <span class="font-medium">Search</span>
                                                </a>
                                            </li>
                                        </ul>
                                    </li>
                                    <li>
                                        <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                            <i class="pi pi-chart-line mr-2"></i>
                                            <span class="font-medium">Expenses</span>
                                        </a>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-users mr-2"></i>
                                    <span class="font-medium">Team</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-comments mr-2"></i>
                                    <span class="font-medium">Messages</span>
                                    <span class="inline-flex items-center justify-center ml-auto bg-primary text-primary-contrast rounded-full" style="min-width: 1.5rem; height: 1.5rem">3</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-calendar mr-2"></i>
                                    <span class="font-medium">Calendar</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-cog mr-2"></i>
                                    <span class="font-medium">Settings</span>
                                </a>
                            </li>
                        </ul>
                    </li>
                </ul>
                <ul class="list-none p-4 m-0">
                    <li>
                        <div
                            v-ripple
                            v-styleclass="{
                                selector: '@next',
                                enterFromClass: 'hidden',
                                enterActiveClass: 'animate-slidedown',
                                leaveToClass: 'hidden',
                                leaveActiveClass: 'animate-slideup'
                            }"
                            class="p-4 flex items-center justify-between text-surface-500 dark:text-surface-400 cursor-pointer p-ripple"
                        >
                            <span class="font-medium">APPLICATION</span>
                            <i class="pi pi-chevron-down"></i>
                        </div>
                        <ul class="list-none p-0 m-0 overflow-hidden">
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-folder mr-2"></i>
                                    <span class="font-medium">Projects</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-chart-bar mr-2"></i>
                                    <span class="font-medium">Performance</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-cog mr-2"></i>
                                    <span class="font-medium">Settings</span>
                                </a>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
            <div class="mt-auto">
                <hr class="mb-4 mx-4 border-t border-0 border-surface-200 dark:border-surface-700" />
                <a v-ripple class="m-4 flex items-center cursor-pointer p-4 gap-2 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                    <Avatar image="/images/avatar/amyelsner.png" shape="circle" />
                    <span class="font-bold">Amy Elsner</span>
                </a>
            </div>
        </div>
    </template>
</Drawer>
<Button icon="pi pi-bars" @click="visible = true" />

```

Copy

## Accessibility [\#](https://primevue.org/drawer/\#accessibility)

### Screen Reader

Drawer component uses _complementary_ role by default, since any attribute is passed to the root element aria role can be changed depending on your use case and additional attributes like _aria-labelledby_ can be added. In addition _aria-modal_ is added since focus is kept within the drawer when opened.

Trigger element also requires _aria-expanded_ and _aria-controls_ to be handled explicitly.

```markup

<Button label="Show" icon="pi pi-external-link" @click="visible = true" :aria-controls="visible ? 'sbar' : null" :aria-expanded="visible"/>

<Drawer id="sbar" v-model:visible="visible" role="region" >
    <p>Content</p>
</Drawer>

```

Copy

### Overlay Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element within the drawer. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element within the drawer. |
| _escape_ | Closes the dialog. |

### Close Button Keyboard Support

| Key | Function |
| --- | --- |
| _enter_ | Closes the drawer. |
| _space_ | Closes the drawer. |

- Import

- Basic

- Position

- Size

- Full Screen

- Template

- Headless

- Accessibility


# Drawer API

API defines helper props, events and others for the PrimeVue Drawer module.

## Drawer [\#](https://primevue.org/drawer/\#api.drawer)

Drawer is a panel component displayed as an overlay at the edges of the screen.

### Props [\#](https://primevue.org/drawer/\#api.drawer.props)

Defines valid properties in Drawer component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| visible | boolean | false | Specifies the visibility of the dialog. |  |
| position | HintedString<"left" \| "right" \| "top" \| "bottom" \| "full"> | left | Specifies the position of the drawer. |  |
| header | string | null | Title content of the dialog. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| dismissable | boolean | true | Whether clicking outside closes the panel. |  |
| showCloseIcon | boolean | true | Whether to display a close icon inside the panel. |  |
| closeButtonProps | object | null | Used to pass the custom value to read for the button inside the component. |  |
| closeIcon | string | null | Icon to display in the drawer close button. |  |
| modal | boolean | true | Whether to a modal layer behind the drawer. |  |
| blockScroll | boolean | false | Whether background scroll should be blocked when drawer is visible. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DrawerPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/drawer/\#api.drawer.emits)

Defines valid emits in Drawer component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:visible | value: boolean | void | Emitted when the value changes. |  |
| show |  | void | Callback to invoke when drawer is shown. |  |
| before-hide |  | void | Callback to invoke before drawer gets hidden. |  |
| hide |  | void | Callback to invoke when drawer gets hidden. |  |
| after-hide |  | void | Callback to invoke after drawer is hidden. |  |
| after-show |  | void | Callback to invoke after drawer is shown. |  |

### Slots [\#](https://primevue.org/drawer/\#api.drawer.slots)

Defines valid slots in Drawer component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| header | scope: {<br>class: any, // Style class of the header title<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| closebutton | scope: {<br>closeCallback: () â‡’ void, // Close function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close button template. |  |
| closeicon | scope: {<br>class: any, // Style class of the close icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close icon template. |  |
| container | scope: {<br>closeCallback: () â‡’ void, // Close drawer function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |

### Interfaces [\#](https://primevue.org/drawer/\#api.drawer.interfaces)

Defines the custom interfaces used by the module.

#### DrawerPassThroughMethodOptions [\#](https://primevue.org/drawer/\#api.drawer.interfaces.DrawerPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DrawerProps](https://primevue.org/drawer/#api.drawer.interfaces.DrawerProps) | null | Defines valid properties. |
| state | [DrawerState](https://primevue.org/drawer/#api.drawer.interfaces.DrawerState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### DrawerSharedPassThroughMethodOptions [\#](https://primevue.org/drawer/\#api.drawer.interfaces.DrawerSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [DrawerProps](https://primevue.org/drawer/#api.drawer.interfaces.DrawerProps) | null | Defines valid properties. |
| state | [DrawerState](https://primevue.org/drawer/#api.drawer.interfaces.DrawerState) | null | Defines current inline state. |

#### DrawerPassThroughOptions [\#](https://primevue.org/drawer/\#api.drawer.interfaces.DrawerPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| title | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the header content's DOM element. |
| pcCloseButton | any | null | Used to pass attributes to the close button's DOM element. |
| content | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| footer | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| mask | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [DrawerPassThroughTransitionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughTransitionType) | null | Used to control Vue Transition API. |

#### DrawerPassThroughAttributes [\#](https://primevue.org/drawer/\#api.drawer.interfaces.DrawerPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### DrawerState [\#](https://primevue.org/drawer/\#api.drawer.interfaces.DrawerState)

Defines current inline state in Drawer component.

| name | type | default | description |
| --- | --- | --- | --- |
| containerVisible | boolean | false | Current container visible state as a boolean. |

## Types [\#](https://primevue.org/drawer/\#api.drawer.types)

Defines the custom types used by the module.

#### DrawerPassThroughOptionType [\#](https://primevue.org/drawer/\#api.drawer.types.DrawerPassThroughOptionType)

| values |
| --- |
| DrawerPassThroughAttributes \| (options: DrawerPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### DrawerPassThroughTransitionType [\#](https://primevue.org/drawer/\#api.drawer.types.DrawerPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: DrawerPassThroughMethodOptions) => TransitionProps \| undefined |

#### DrawerEmits [\#](https://primevue.org/drawer/\#api.drawer.types.DrawerEmits)

| values |
| --- |
| EmitFn<DrawerEmitsOptions> |

- Drawer

  - Props

  - Emits

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## Inplace Editing Component
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Inplace

Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.

## Import [\#](https://primevue.org/inplace/\#import)

```

import Inplace from 'primevue/inplace';

```

## Basic [\#](https://primevue.org/inplace/\#basic)

_Inplace_ component requires _display_ and _content_ templates to define the content of each state.

View Content

```

<Inplace>
    <template #display> View Content </template>
    <template #content>
        <p class="m-0">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        </p>
    </template>
</Inplace>

```

## Input [\#](https://primevue.org/inplace/\#input)

The _closeCallback_ switches the state back to display mode when called from an event.

Click to Edit

```

<Inplace>
    <template #display>
        {{ text || 'Click to Edit' }}
    </template>
    <template #content="{ closeCallback }">
        <span class="inline-flex items-center gap-2">
            <InputText v-model="text" autofocus />
            <Button icon="pi pi-times" text severity="danger" @click="closeCallback" />
        </span>
    </template>
</Inplace>

```

## Image [\#](https://primevue.org/inplace/\#image)

Any content such as an image can be placed inside an Inplace.

View Photo

```

<Inplace>
    <template #display>
        <span class="inline-flex items-center gap-2">
            <span class="pi pi-image"></span>
            <span>View Photo</span>
        </span>
    </template>
    <template #content>
        <img class="w-full sm:w-80 shadow-md" alt="Nature" src="https://primefaces.org/cdn/primevue/images/nature/nature8.jpg" />
    </template>
</Inplace>

```

## Lazy [\#](https://primevue.org/inplace/\#lazy)

The _open_ event is used to initialize the content such as loading data in a lazy manner.

View Data

```

<Inplace @open="loadData">
    <template #display> View Data </template>
    <template #content>
        <DataTable :value="products">
            <Column field="code" header="Code"></Column>
            <Column field="name" header="Name"></Column>
            <Column field="category" header="Category"></Column>
            <Column field="quantity" header="Quantity"></Column>
        </DataTable>
    </template>
</Inplace>

```

## Accessibility [\#](https://primevue.org/inplace/\#accessibility)

### Screen Reader

Inplace component defines _aria-live_ as "polite" by default, since any valid attribute is passed to the main container aria roles and attributes of the root element can be customized easily.

### View Mode Keyboard Support

| Key | Function |
| --- | --- |
| _enter_ | Switches to content. |

- Import

- Basic

- Input

- Image

- Lazy

- Accessibility


# Inplace API

API defines helper props, events and others for the PrimeVue Inplace module.

Theme Designer

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Chip Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Chip

Chip represents entities using icons, labels and images.

## Import [\#](https://primevue.org/chip/\#import)

```javascript

import Chip from 'primevue/chip';

```

Copy

## Basic [\#](https://primevue.org/chip/\#basic)

A basic chip with a text is created with the _label_ property. In addition when _removable_ is added, a delete icon is displayed to remove a chip.

Action

Comedy

Mystery

Thriller

```markup

<Chip label="Action" />
<Chip label="Comedy" />
<Chip label="Mystery" />
<Chip label="Thriller" removable />

```

Copy

## Icon [\#](https://primevue.org/chip/\#icon)

A font icon next to the label can be displayed with the _icon_ property.

Apple

Facebook

Google

Microsoft

GitHub

```markup

<Chip label="Apple" icon="pi pi-apple" />
<Chip label="Facebook" icon="pi pi-facebook" />
<Chip label="Google" icon="pi pi-google" />
<Chip label="Microsoft" icon="pi pi-microsoft" removable />
<Chip label="GitHub" icon="pi pi-github" removable>
    <template #removeicon="{ removeCallback, keydownCallback }">
        <i class="pi pi-minus-circle" @click="removeCallback" @keydown="keydownCallback" />
    </template>
</Chip>

```

Copy

## Image [\#](https://primevue.org/chip/\#image)

The _image_ property is used to display an image like an avatar.

![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)

Amy Elsner

![](https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png)

Asiya Javayant

![](https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png)

Onyama Limba

![](https://primefaces.org/cdn/primevue/images/avatar/xuxuefeng.png)

Xuxue Feng

```markup

<Chip label="Amy Elsner" image="/images/avatar/amyelsner.png" />
<Chip label="Asiya Javayant" image="/images/avatar/asiyajavayant.png" />
<Chip label="Onyama Limba" image="/images/avatar/onyamalimba.png" />
<Chip label="Xuxue Feng" image="/images/avatar/xuxuefeng.png" removable />

```

Copy

## Template [\#](https://primevue.org/chip/\#templatedoc)

The default slot allows displaying custom content inside a chip.

PPRIME

```markup

<Chip class="py-0 pl-0 pr-4">
    <span class="bg-primary text-primary-contrast rounded-full w-8 h-8 flex items-center justify-center">P</span>
    <span class="ml-2 font-medium">PRIME</span>
</Chip>

```

Copy

## Accessibility [\#](https://primevue.org/chip/\#accessibility)

### Screen Reader

Chip uses the _label_ property as the default _aria-label_, since any attribute is passed to the root element _aria-labelledby_ or _aria-label_ can be used to override the default behavior. Removable chips have a _tabindex_ and focusable with the tab key.

### Keyboard Support

| Key | Function |
| --- | --- |
| _backspace_ | Hides removable. |
| _enter_ | Hides removable. |

- Import

- Basic

- Icon

- Image

- Template

- Accessibility


# Chip API

API defines helper props, events and others for the PrimeVue Chip module.

## Chip [\#](https://primevue.org/chip/\#api.chip)

Chip represents people using icons, labels and images.

### Props [\#](https://primevue.org/chip/\#api.chip.props)

Defines valid properties in Chip component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string \| number | null | Defines the text to display. |  |
| icon | string | null | Defines the icon to display. |  |
| image | string | null | Defines the image to display. |  |
| removable | boolean | false | Whether to display a remove icon. |  |
| removeIcon | string | null | Icon of the remove element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ChipPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/chip/\#api.chip.emits)

Defines valid properties in Chip component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| remove | event: Event | void | Callback to invoke when a chip is removed. |  |

### Slots [\#](https://primevue.org/chip/\#api.chip.slots)

Defines valid slots in Chip component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Content can easily be customized with the default slot instead of using the built-in modes. |  |
| icon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| removeicon | scope: {<br>removeCallback: (event: Event) â‡’ void, // Remove icon click eventkeydownCallback: (event: Event) â‡’ void, // Remove icon keydown event<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom remove icon template of chip component. |  |

### Interfaces [\#](https://primevue.org/chip/\#api.chip.interfaces)

Defines the custom interfaces used by the module.

#### ChipPassThroughMethodOptions [\#](https://primevue.org/chip/\#api.chip.interfaces.ChipPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ChipProps](https://primevue.org/chip/#api.chip.interfaces.ChipProps) | null | Defines valid properties. |
| state | [ChipState](https://primevue.org/chip/#api.chip.interfaces.ChipState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### ChipPassThroughOptions [\#](https://primevue.org/chip/\#api.chip.interfaces.ChipPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [ChipPassThroughOptionType<T>](https://primevue.org/chip/#api.chip.types.ChipPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| image | [ChipPassThroughOptionType<T>](https://primevue.org/chip/#api.chip.types.ChipPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the image's DOM element. |
| icon | [ChipPassThroughOptionType<T>](https://primevue.org/chip/#api.chip.types.ChipPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the icon's DOM element. |
| label | [ChipPassThroughOptionType<T>](https://primevue.org/chip/#api.chip.types.ChipPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the label' DOM element. |
| removeIcon | [ChipPassThroughOptionType<T>](https://primevue.org/chip/#api.chip.types.ChipPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the removeIcon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### ChipPassThroughAttributes [\#](https://primevue.org/chip/\#api.chip.interfaces.ChipPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### ChipState [\#](https://primevue.org/chip/\#api.chip.interfaces.ChipState)

Defines current inline state in Chip component.

| name | type | default | description |
| --- | --- | --- | --- |
| visible | boolean | true | Current visible state as a boolean. |

## Types [\#](https://primevue.org/chip/\#api.chip.types)

Defines the custom types used by the module.

#### ChipPassThroughOptionType [\#](https://primevue.org/chip/\#api.chip.types.ChipPassThroughOptionType)

| values |
| --- |
| ChipPassThroughAttributes \| (options: ChipPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### ChipEmits [\#](https://primevue.org/chip/\#api.chip.types.ChipEmits)

| values |
| --- |
| EmitFn<ChipEmitsOptions> |

- Chip

  - Props

  - Emits

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## Dynamic Dialog Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Dynamic Dialog

Dialogs can be created dynamically with any component as the content using a DialogService.

## Import [\#](https://primevue.org/dynamicdialog/\#import)

```javascript

import DynamicDialog from 'primevue/dynamicdialog';

```

Copy

## Dialog Service [\#](https://primevue.org/dynamicdialog/\#dialogservice)

A single shared dialog instance is required in the application, ideal location would be defining it once at the main application template.

```markup

<DynamicDialog />

```

Copy

A dynamic dialog is controlled via the _DialogService_ that needs to be installed as an application plugin.

```javascript

import {createApp} from 'vue';
import DialogService from 'primevue/dialogservice';

const app = createApp(App);
app.use(DialogService);

```

Copy

The service is available with the _useDialog_ function for Composition API or using the _$dialog_ property of the application for Options API.

```javascript

/* Composition API */
import { useDialog } from 'primevue/usedialog';

const dialog = useDialog();

/* Options API */
const dialog = this.$dialog;

```

Copy

## Open [\#](https://primevue.org/dynamicdialog/\#open)

The _open_ function of the _DialogService_ is used to open a Dialog. First parameter is the component to load and second one is the configuration object to customize the Dialog.

```javascript

import ProductListDemo from './ProductListDemo';
import { useDialog } from 'primevue/usedialog';

const dialog = useDialog();

const showProducts = () => {
    dialog.open(ProductListDemo, {});
}

```

Copy

The component can also be loaded asynchronously, this approach is useful in conditional cases and to improve initial load times as well.

```javascript

import { useDialog } from 'primevue/usedialog';

const dialog = useDialog();

const dynamicComponent = defineAsyncComponent(() => import('./ProductListDemo.vue'));

const showProducts = () => {
    dialog.open(dynamicComponent, {});
}

```

Copy

## Customization [\#](https://primevue.org/dynamicdialog/\#customization)

DynamicDialog uses the Dialog component internally, visit [dialog](https://primevue.org/dialog) for more information about the available props.

```javascript

import ProductListDemo from './ProductListDemo';
import { useDialog } from 'primevue/usedialog';

const dialog = useDialog();

const showProducts = () => {
    dialog.open(ProductListDemo, {
        props: {
            header: 'Product List',
            style: {
                width: '50vw',
            },
            breakpoints:{
                '960px': '75vw',
                '640px': '90vw'
            },
            modal: true
        }
    });
}

```

Copy

## Close [\#](https://primevue.org/dynamicdialog/\#close)

The _close_ function is available through a _dialogRef_ that is injected to the component loaded by the dialog.

```javascript

import { inject } from "vue";

const dialogRef = inject('dialogRef');

const closeDialog = () => {
    dialogRef.value.close();
}

```

Copy

## Passing Data [\#](https://primevue.org/dynamicdialog/\#passingdata)

Use the _data_ property to pass parameters when opening a Dialog, the internal component can later access this data using _dialogRef_.

```javascript

const dialog = useDialog();

const showProducts = () => {
    dialog.open(ProductListDemo, {
        data: {
            user: 'primetime'
        }
    });
}

```

Copy

```javascript

import { inject, onMounted } from "vue";

const dialogRef = inject('dialogRef');

onMounted(() => {
    const params = dialogRef.value.data; // {user: 'primetime'}
})

```

Copy

Similarly when hiding a Dialog, any parameter passed to the _close_ function is received from the _onClose_ callback.

```javascript

const dialog = useDialog();

const showProducts = () => {
    dialog.open(ProductListDemo, {
        onClose: (opt) => {
            const callbackParams = opt.data; // {selectedId: 12}
        }
    });
}

```

Copy

```javascript

import { inject } from "vue";

const dialogRef = inject('dialogRef');

const closeDialog = () => {
    dialogRef.value.close({
        selectedId: 12
    });
}

```

Copy

## Events [\#](https://primevue.org/dynamicdialog/\#events)

The _emits_ object defines callbacks to handle events emitted by the component within the Dialog.

```javascript

import ProductListDemo from './ProductListDemo';
import { useDialog } from 'primevue/usedialog';

const dialog = useDialog();

const showProducts = () => {
    dialog.open(ProductListDemo, {
        onCancel: (e) => {
            console.log(e);      // {user: 'primetime'}
        },
        emits: {
            onSave: (e) => {
                console.log(e);  // {user: 'primetime'}
            }
        }
    });
}

```

Copy

```javascript

<script setup>
/* ProductListDemo.vue */
const emit = defineEmits(['cancel', 'save'])

function buttonClick() {
    emit('cancel', {user: 'primetime'});
}

function saveButtonClick() {
    emit('save', {user: 'primetime'});
}
</script>

```

Copy

## Example [\#](https://primevue.org/dynamicdialog/\#example)

A sample implementation to demonstrate loading components asynchronously, nested content and passing data.

Select a Product

```markup

<Button label="Select a Product" icon="pi pi-search" @click="showProducts" />

<DynamicDialog />

```

Copy

## Accessibility [\#](https://primevue.org/dynamicdialog/\#accessibility)

Visit accessibility section of [dialog](https://primevue.org/dialog/#accessibility) component for more information.

- Import

- Dialog Service

- Open

- Customization

- Close

- Passing Data

- Events

- Example

- Accessibility


# Dynamic Dialog API

API defines helper props, events and others for the PrimeVue Dynamic Dialog module.

## DynamicDialog [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialog)

DynamicDialogs can be created dynamically with any component as the content using a DialogService.

### Props [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialog.props)

Defines valid properties in DynamicDialog component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

## Types [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialog.types)

Defines the custom types used by the module.

#### DynamicDialogEmits [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialog.types.DynamicDialogEmits)

| values |
| --- |
| EmitFn<DynamicDialogEmitsOptions> |

## Dialog [\#](https://primevue.org/dynamicdialog/\#api.dialog)

Dialog is a container to display content in an overlay window.

### Props [\#](https://primevue.org/dynamicdialog/\#api.dialog.props)

Defines valid properties in Dialog component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| header | string | null | Title content of the dialog. |  |
| footer | string | null | Footer content of the dialog. |  |
| visible | boolean | false | Specifies the visibility of the dialog. |  |
| modal | boolean | false | Defines if background should be blocked when dialog is displayed. |  |
| contentStyle | any | null | Style of the content section. |  |
| contentClass | any | null | Style class of the content section. |  |
| contentProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the overlay Dialog inside the component. |  |
| closable | boolean | true | Adds a close icon to the header to hide the dialog. |  |
| dismissableMask | boolean | false | Specifies if clicking the modal background should hide the dialog. |  |
| closeOnEscape | boolean | true | Specifies if pressing escape key should hide the dialog. |  |
| showHeader | boolean | true | Whether to show the header or not. |  |
| blockScroll | boolean | false | Whether background scroll should be blocked when dialog is visible. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| position | HintedString<"left" \| "right" \| "top" \| "bottom" \| "center" \| "topleft" \| "topright" \| "bottomleft" \| "bottomright"> | center | Position of the dialog. |  |
| maximizable | boolean | false | Whether the dialog can be displayed full screen. |  |
| breakpoints | [DialogBreakpoints](https://primevue.org/dynamicdialog/#api.dialog.interfaces.DialogBreakpoints) | null | Object literal to define widths per screen size. |  |
| draggable | boolean | true | Enables dragging to change the position using header. |  |
| keepInViewport | boolean | true | Keeps dialog in the viewport when dragging. |  |
| minX | number | 0. | Minimum value for the left coordinate of dialog in dragging. |  |
| minY | number | 0 | Minimum value for the top coordinate of dialog in dragging. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the dialog gets attached. |  |
| style | any | null | Style of the dynamic dialog. |  |
| closeIcon | string | null | Icon to display in the dialog close button. |  |
| maximizeIcon | string | null | Icon to display in the dialog maximize button when dialog is not maximized. |  |
| minimizeIcon | string | null | Icon to display in the dialog maximize button when dialog is minimized. |  |
| closeButtonProps | object | null | Used to pass all properties of the ButtonProps to the Button component. |  |
| maximizeButtonProps | object | null | Used to pass all properties of the ButtonProps to the Button component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DialogPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/dynamicdialog/\#api.dialog.emits)

Defines valid emits in Dialog component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:visible | value: boolean | void | Emitted when the visible changes. |  |
| hide |  | void | Callback to invoke when dialog is hidden. |  |
| after-hide |  | void | Callback to invoke after dialog is hidden. |  |
| show |  | void | Callback to invoke when dialog is shown. |  |
| maximize | event: Event | void | Fired when a dialog gets maximized. |  |
| unmaximize | event: Event | void | Fired when a dialog gets unmaximized. |  |
| dragstart | event: Event | void | Fired when a dialog drag begins. |  |
| dragend | event: Event | void | Fired when a dialog drag completes. |  |

### Slots [\#](https://primevue.org/dynamicdialog/\#api.dialog.slots)

Defines valid slots in Dialog component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default content slot. |  |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| closebutton | scope: {<br>closeCallback: () â‡’ void, // Close function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close button template. |  |
| closeicon | scope: {<br>class: any, // Style class of the close icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close icon template. |  |
| maximizebutton | scope: {<br>maximized: boolean, // Maximized state as a booleanmaximizeCallback: (event: Event) â‡’ void, // Toggle maximize function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom maximize button template. |  |
| maximizeicon | scope: {<br>maximized: boolean, // Maximized state as a booleanclass: any, // Style class of the maximize icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom maximize icon template of dialog. |  |
| container | scope: {<br>closeCallback: () â‡’ void, // Close dialog function.maximizeCallback: (event: Event) â‡’ void, // Maximize/minimize dialog function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |

### Interfaces [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces)

Defines the custom interfaces used by the module.

#### DialogPassThroughMethodOptions [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DialogProps](https://primevue.org/dynamicdialog/#api.dialog.interfaces.DialogProps) | null | Defines valid properties. |
| state | [DialogState](https://primevue.org/dynamicdialog/#api.dialog.interfaces.DialogState) | null | Defines current inline state. |
| parent | any | null | Defines parent instance. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### DialogSharedPassThroughMethodOptions [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [DialogProps](https://primevue.org/dynamicdialog/#api.dialog.interfaces.DialogProps) | null | Defines valid properties. |
| state | [DialogState](https://primevue.org/dynamicdialog/#api.dialog.interfaces.DialogState) | null | Defines current inline state. |

#### DialogPassThroughOptions [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| header | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header's DOM element. |
| title | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header title's DOM element. |
| headerActions | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header actions' DOM element. |
| pcMaximizeButton | any | null | Used to pass attributes to the maximize Button component. |
| pcCloseButton | any | null | Used to pass attributes to the close Button component. |
| content | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the content's DOM element. |
| footer | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the footer's DOM element. |
| mask | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the mask's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [DialogPassThroughTransitionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughTransitionType%3CT%3E) | null | Used to control Vue Transition API. |

#### DialogPassThroughAttributes [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### DialogState [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogState)

Defines current inline state in Dialog component.

| name | type | default | description |
| --- | --- | --- | --- |
| containerVisible | boolean | false | Current visible state of the container as a boolean. |
| maximized | boolean | false | Current maximized state as a boolean. |

#### DialogBreakpoints [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogBreakpoints)

Custom breakpoint metadata.

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | string | null |  |

## Types [\#](https://primevue.org/dynamicdialog/\#api.dialog.types)

Defines the custom types used by the module.

#### DialogPassThroughOptionType [\#](https://primevue.org/dynamicdialog/\#api.dialog.types.DialogPassThroughOptionType)

| values |
| --- |
| DialogPassThroughAttributes \| (options: DialogPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### DialogPassThroughTransitionType [\#](https://primevue.org/dynamicdialog/\#api.dialog.types.DialogPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: DialogPassThroughMethodOptions) => TransitionProps \| undefined |

#### DialogEmits [\#](https://primevue.org/dynamicdialog/\#api.dialog.types.DialogEmits)

| values |
| --- |
| EmitFn<DialogEmitsOptions> |

## DialogService-UseDialog [\#](https://primevue.org/dynamicdialog/\#api.dialogservice-usedialog)

### Services [\#](https://primevue.org/dynamicdialog/\#api.dialogservice-usedialog.services)

Dynamic Dialog components methods.

| name | parameters | returnType | description |
| --- | --- | --- | --- |
| open | content: any | DynamicDialogInstance | Displays the dialog using the dynamic dialog object options. |

## DynamicDialogOptions [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialogoptions)

### Interfaces [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialogoptions.interfaces)

Defines the custom interfaces used by the module.

#### DynamicDialogTemplates [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialogoptions.interfaces.DynamicDialogTemplates)

Custom dialog templates.

| name | type | default | description |
| --- | --- | --- | --- |
| header | any | null | Custom header template. |
| footer | any | null | Custom footer template. |

#### DynamicDialogCloseOptions [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialogoptions.interfaces.DynamicDialogCloseOptions)

Dynamic Dialog close method options.

| name | type | default | description |
| --- | --- | --- | --- |
| data | any | null | Custom data object |
| type | undefined \| "config-close" \| "dialog-close" | null | Close type |

#### DynamicDialogInstance [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialogoptions.interfaces.DynamicDialogInstance)

Custom Dynamic Dialog options.

| name | type | default | description |
| --- | --- | --- | --- |
| content | any | null | Dynamic component for content template |
| options | [DynamicDialogOptions](https://primevue.org/dynamicdialog/#api.dynamicdialogoptions.interfaces.DynamicDialogOptions) | null | Instance options |
| data | any | null | Custom data object |
| close | Function | null |  |

- DynamicDialog

  - Props

  - Types
- Dialog

  - Props

  - Emits

  - Slots

  - Interfaces

  - Types
- DialogService-UseDialog

  - Services
- DynamicDialogOptions

  - Interfaces

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue PanelMenu
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# PanelMenu

PanelMenu is a hybrid of accordion-tree components.

## Import [\#](https://primevue.org/panelmenu/\#import)

```javascript

import PanelMenu from 'primevue/panelmenu';

```

Copy

## Basic [\#](https://primevue.org/panelmenu/\#basic)

PanelMenu requires a collection of menuitems as its _model_.

Files

- Documents



- Invoices



- Pending

- Paid


- Clients


- Images



- Logos


Cloud

- Upload

- Download

- Sync


Devices

- Phone

- Desktop

- Tablet


```markup

<PanelMenu :model="items" />

```

Copy

## Multiple [\#](https://primevue.org/panelmenu/\#multiple)

Only one root menuitem at a time can be active by default, enabling _multiple_ property changes this behavior to allow multiple root menuitems.

Files

- Documents



- Invoices



- Pending

- Paid


- Clients


- Images



- Logos


Cloud

- Upload

- Download

- Sync


Devices

- Phone

- Desktop

- Tablet


```markup

<PanelMenu :model="items" multiple />

```

Copy

## Controlled [\#](https://primevue.org/panelmenu/\#controlled)

If the menuitem has a _key_ defined, PanelMenu state can be controlled programmatically with the _expandedKeys_ property that defines the keys that are expanded. This property is a Map instance whose key is the key of a node and value is a boolean.

Toggle All

Users

- New



- Member

- Group


- Search


Tasks

- Add New

- Pending

- Overdue


Calendar

- New Event

- Today

- This Week


```markup

<Button type="button" label="Toggle All" text @click="toggleAll" />
<PanelMenu v-model:expandedKeys="expandedKeys" :model="items" />

```

Copy

## Template [\#](https://primevue.org/panelmenu/\#template)

PanelMenu offers item customization with the _item_ template that receives the menuitem instance from the model as a parameter.

Mail5

- ComposeâŒ˜+N

- Inbox5

- SentâŒ˜+S

- TrashâŒ˜+T


ReportsâŒ˜+R

- Sales3

- Products6


ProfileâŒ˜+W

- SettingsâŒ˜+O

- PrivacyâŒ˜+P


```markup

<PanelMenu :model="items">
    <template #item="{ item }">
        <a v-ripple class="flex items-center px-4 py-2 cursor-pointer group">
            <span :class="[item.icon, 'text-primary group-hover:text-inherit']" />
            <span :class="['ml-2', { 'font-semibold': item.items }]">{{ item.label }}</span>
            <Badge v-if="item.badge" class="ml-auto" :value="item.badge" />
            <span v-if="item.shortcut" class="ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1">{{ item.shortcut }}</span>
        </a>
    </template>
</PanelMenu>

```

Copy

## Command [\#](https://primevue.org/panelmenu/\#command)

The _command_ property defines the callback to run when an item is activated by click or a key event.

Files

- New

- Search

- Print


Sync

- Import

- Export


Sign Out

```markup

<PanelMenu :model="items" />
<Toast />

```

Copy

## Router [\#](https://primevue.org/panelmenu/\#router)

Items with navigation are defined with templating to be able to use a router link component, an external link or programmatic navigation.

Router

- [Styled](https://primevue.org/theming/styled)

- [Unstyled](https://primevue.org/theming/unstyled)


Programmatic

External

- [Vue.js](https://vuejs.org/)

- [Vite.js](https://vuejs.org/)


```markup

<PanelMenu :model="items">
    <template #item="{ item }">
        <router-link v-if="item.route" v-slot="{ href, navigate }" :to="item.route" custom>
            <a v-ripple class="flex items-center cursor-pointer text-surface-700 dark:text-surface-0 px-4 py-2" :href="href" @click="navigate">
                <span :class="item.icon" />
                <span class="ml-2">{{ item.label }}</span>
            </a>
        </router-link>
        <a v-else v-ripple class="flex items-center cursor-pointer text-surface-700 dark:text-surface-0 px-4 py-2" :href="item.url" :target="item.target">
            <span :class="item.icon" />
            <span class="ml-2">{{ item.label }}</span>
            <span v-if="item.items" class="pi pi-angle-down text-primary ml-auto" />
        </a>
    </template>
</PanelMenu>

```

Copy

## Accessibility [\#](https://primevue.org/panelmenu/\#accessibility)

### Screen Reader

Accordion header elements have a _button_ role, an _aria-label_ defined using the _label_ property of the menuitem model and _aria-controls_ to define the id of the content section along with _aria-expanded_ for the visibility state.

The content of an accordion panel uses _region_ role, defines an id that matches the _aria-controls_ of the header and _aria-labelledby_ referring to the id of the header.

The tree elements has a _tree_ as the role and each menu item has a _treeitem_ role along with _aria-label_ and _aria-expanded_ attributes. The container element of a treenode has the _group_ role. The _aria-setsize_, _aria-posinset_ and _aria-level_ attributes are calculated implicitly and added to each treeitem.

### Header Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element in the page tab sequence. |
| _enter_ | Toggles the visibility of the content. |
| _space_ | Toggles the visibility of the content. |
| _down arrow_ | Moves focus to the next header. If focus is on the last header, moves focus to the first header. |
| _up arrow_ | Moves focus to the previous header. If focus is on the first header, moves focus to the last header. |
| _home_ | Moves focus to the first header. |
| _end_ | Moves focus to the last header. |

- Import

- Basic

- Multiple

- Controlled

- Template

- Command

- Router

- Accessibility


# PanelMenu API

API defines helper props, events and others for the PrimeVue PanelMenu module.

## PanelMenu [\#](https://primevue.org/panelmenu/\#api.panelmenu)

PanelMenu is a hybrid of Accordion and Tree components.

### Props [\#](https://primevue.org/panelmenu/\#api.panelmenu.props)

Defines valid properties in PanelMenu component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | MenuItem\[\] | null | An array of menuitems. |  |
| expandedKeys | [PanelMenuExpandedKeys](https://primevue.org/panelmenu/#api.panelmenu.interfaces.PanelMenuExpandedKeys) | null | A map of keys to represent the expansion state in controlled mode. |  |
| multiple | boolean | false | When enabled, multiple root menuitems can be activated at the same time. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<PanelMenuPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/panelmenu/\#api.panelmenu.emits)

Defines valid emits in PanelMenu component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:expandedKeys | value: any | void | Emitted when the expandedKeys changes. |  |
| panel-open | event: [PanelMenuPanelOpenEvent](https://primevue.org/panelmenu/#api.panelmenu.events.PanelMenuPanelOpenEvent) | void | Callback to invoke when a panel gets expanded. |  |
| panel-close | event: [PanelMenuPanelCloseEvent](https://primevue.org/panelmenu/#api.panelmenu.events.PanelMenuPanelCloseEvent) | void | Callback to invoke when an active panel is collapsed by clicking on the header. |  |

### Slots [\#](https://primevue.org/panelmenu/\#api.panelmenu.slots)

Defines valid slots in PanelMenu component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| item | scope: {<br>item: MenuItem, // Menuitem instanceroot: boolean, // Whether there is a root menuitemactive: boolean, // Current active state of the menuitemlabel: undefined, // Label property of the menuitemprops: PanelMenuRouterBindProps, // Binding properties of the menuitemhasSubmenu: boolean, // Whether or not there is a submenu<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each item. |  |
| submenuicon | scope: {<br>active: boolean, // Whether item is active<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom submenu icon template. |  |
| headericon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header icon template. |  |
| itemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item icon template. |  |

### Events [\#](https://primevue.org/panelmenu/\#api.panelmenu.events)

Defines the custom events used by the component's emit.

#### PanelMenuPanelOpenEvent [\#](https://primevue.org/panelmenu/\#api.panelmenu.events.PanelMenuPanelOpenEvent)

Custom panel open event.

See [panel-open](https://primevue.org/panelmenu/#api.panelmenu.emitsoptions.panel-open)

| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event. |
| item | any | Current item. |

#### PanelMenuPanelCloseEvent [\#](https://primevue.org/panelmenu/\#api.panelmenu.events.PanelMenuPanelCloseEvent)

Custom panel close event.

See [panel-close](https://primevue.org/panelmenu/#api.panelmenu.emitsoptions.panel-close)

| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event. |
| item | any | Current item. |

### Interfaces [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces)

Defines the custom interfaces used by the module.

#### PanelMenuPassThroughMethodOptions [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [PanelMenuProps](https://primevue.org/panelmenu/#api.panelmenu.interfaces.PanelMenuProps) | null | Defines valid properties. |
| state | [PanelMenuState](https://primevue.org/panelmenu/#api.panelmenu.interfaces.PanelMenuState) | null | Defines current inline state. |
| context | [PanelMenuContext](https://primevue.org/panelmenu/#api.panelmenu.interfaces.PanelMenuContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### PanelMenuPassThroughOptions [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| panel | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the panel's DOM element. |
| header | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| headerContent | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the header content's DOM element. |
| headerLink | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the header link's DOM element. |
| submenuIcon | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the submenuIcon's DOM element. |
| headerIcon | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the header icon's DOM element. |
| headerLabel | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the header label's DOM element. |
| contentContainer | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the content container's DOM element. |
| content | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| rootList | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the root list's DOM element. |
| item | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the list item's DOM element. |
| itemContent | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the item content's DOM element. |
| itemLink | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the item link's DOM element. |
| itemIcon | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the item icon's DOM element. |
| itemLabel | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the item label's DOM element. |
| submenu | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the submenu's DOM element. |
| separator | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the separator's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [PanelMenuPassThroughTransitionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughTransitionType) | null | Used to control Vue Transition API. |

#### PanelMenuPassThroughAttributes [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### PanelMenuState [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuState)

Defines current inline state in PanelMenu component.

| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| activeItem | MenuItem\[\] | null | Active item path. |

#### PanelMenuContext [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuContext)

Defines current options in PanelMenu component.

| name | type | default | description |
| --- | --- | --- | --- |
| item | any | null | Current menuitem |
| index | number | null | Index of the menuitem. |
| active | boolean | false | Current active state of menuitem as a boolean. |
| focused | boolean | false | Current focused state of menuitem as a boolean. |
| disabled | boolean | false | Current disabled state of menuitem as a boolean. |

#### PanelMenuExpandedKeys [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuExpandedKeys)

Custom expanded keys metadata.

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/panelmenu/\#api.panelmenu.types)

Defines the custom types used by the module.

#### PanelMenuPassThroughOptionType [\#](https://primevue.org/panelmenu/\#api.panelmenu.types.PanelMenuPassThroughOptionType)

| values |
| --- |
| PanelMenuPassThroughAttributes \| (options: PanelMenuPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### PanelMenuPassThroughTransitionType [\#](https://primevue.org/panelmenu/\#api.panelmenu.types.PanelMenuPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: PanelMenuPassThroughMethodOptions) => TransitionProps \| undefined |

#### PanelMenuEmits [\#](https://primevue.org/panelmenu/\#api.panelmenu.types.PanelMenuEmits)

| values |
| --- |
| EmitFn<PanelMenuEmitsOptions> |

## MenuItem [\#](https://primevue.org/panelmenu/\#api.menuitem)

PrimeVue menu components share a common api to specify the menuitems and submenus.

### Events [\#](https://primevue.org/panelmenu/\#api.menuitem.events)

Defines the custom events used by the component's emit.

#### MenuItemCommandEvent [\#](https://primevue.org/panelmenu/\#api.menuitem.events.MenuItemCommandEvent)

Custom command event.

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| item | [MenuItem](https://primevue.org/panelmenu/#api.options.MenuItem) | Menuitem instance. |
| \[key: string\] | any |  |

### Options [\#](https://primevue.org/panelmenu/\#api.options.MenuItem)

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string \| Function | null | Property name or getter function to use as the label of an item. |  |
| icon | string | null | Icon of the item. |  |
| command | Function | null |  |  |
| url | string | null | External link to navigate when item is clicked. |  |
| items | MenuItem\[\] | null | An array of children menuitems. |  |
| disabled | boolean \| Function | false | A boolean or a function to return a boolean to specify if the item is disabled. |  |
| visible | boolean \| Function | true | A boolean or a function to return a boolean to specify if the item is visible. |  |
| target | string | null | Specifies where to open the linked document. |  |
| separator | boolean | false | Defines the item as a separator. |  |
| style | any | null | Inline style of the menuitem. |  |
| class | any | null | Style class of the menuitem. |  |
| key | string | null | Unique identifier of an item. |  |
| \[key: string\] | any | null |  |  |

- PanelMenu

  - Props

  - Emits

  - Slots

  - Events

  - Interfaces

  - Types
- MenuItem

  - Events

  - Options

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## SplitButton Component Overview
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# SplitButton

SplitButton groups a set of commands in an overlay with a default command.

## Import [\#](https://primevue.org/splitbutton/\#import)

```javascript

import SplitButton from 'primevue/splitbutton';

```

Copy

## Basic [\#](https://primevue.org/splitbutton/\#basic)

SplitButton has a default command button and a collection of additional options defined by the _model_ property.

Save

```markup

<SplitButton label="Save" @click="save" :model="items" />

```

Copy

## Icons [\#](https://primevue.org/splitbutton/\#icons)

The buttons and menuitems have support to display icons.

Save

```markup

<SplitButton label="Save" icon="pi pi-check" dropdownIcon="pi pi-cog" @click="save" :model="items" />

```

Copy

## Nested [\#](https://primevue.org/splitbutton/\#nested)

Multi-level menus are supported with a nested menu hierarchy.

Save

```markup

<SplitButton label="Save" @click="save" :model="items" />

```

Copy

## Severity [\#](https://primevue.org/splitbutton/\#severity)

The _severity_ property defines the variant of a button.

Save

Save

Save

Save

Save

Save

Save

Save

```markup

<SplitButton label="Save" :model="items" @click="save"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="danger"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="contrast"></SplitButton>

```

Copy

## Disabled [\#](https://primevue.org/splitbutton/\#disabled)

When _disabled_ is present, the element cannot be edited and focused.

Save

```markup

<SplitButton label="Save" @click="save" :model="items" disabled />

```

Copy

## Raised [\#](https://primevue.org/splitbutton/\#raised)

Raised buttons display a shadow to indicate elevation.

Save

Save

Save

Save

Save

Save

Save

Save

```markup

<SplitButton label="Save" :model="items" @click="save" raised></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="danger"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="contrast"></SplitButton>

```

Copy

## Rounded [\#](https://primevue.org/splitbutton/\#rounded)

Rounded buttons have a circular border radius.

Save

Save

Save

Save

Save

Save

Save

Save

```markup

<SplitButton label="Save" :model="items" @click="save" rounded></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="danger"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="contrast"></SplitButton>

```

Copy

## Text [\#](https://primevue.org/splitbutton/\#text)

Text buttons are displayed as textual elements.

Save

Save

Save

Save

Save

Save

Save

```markup

<SplitButton label="Save" :model="items" @click="save" text></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="danger"></SplitButton>

```

Copy

## Raised Text [\#](https://primevue.org/splitbutton/\#raisedtext)

Text buttons can be displayed as raised as well for elevation.

Save

Save

Save

Save

Save

Save

Save

```markup

<SplitButton label="Save" :model="items" @click="save" raised text></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="danger"></SplitButton>

```

Copy

## Outlined [\#](https://primevue.org/splitbutton/\#outlined)

Outlined buttons display a border without a background initially.

Save

Save

Save

Save

Save

Save

Save

Save

```markup

<SplitButton label="Save" :model="items" @click="save" outlined></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="danger"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="contrast"></SplitButton>

```

Copy

## Sizes [\#](https://primevue.org/splitbutton/\#sizes)

SplitButton provides _small_ and _large_ sizes as alternatives to the standard.

Save

Save

Save

```markup

<SplitButton label="Save" :model="items" icon="pi pi-plus" size="small"></SplitButton>
<SplitButton label="Save" :model="items" icon="pi pi-plus"></SplitButton>
<SplitButton label="Save" :model="items" icon="pi pi-plus" size="large"></SplitButton>

```

Copy

## Template [\#](https://primevue.org/splitbutton/\#template)

Custom content inside a button is defined as children.

![logo](https://primefaces.org/cdn/primevue/images/logo.svg)PrimeVue

```markup

<SplitButton :model="items" @click="save" severity="contrast">
    <span class="flex items-center font-bold">
        <img alt="logo" src="https://primefaces.org/cdn/primevue/images/logo.svg" style="height: 1rem; margin-right: 0.5rem" />
        <span>PrimeVue</span>
    </span>
</SplitButton>

```

Copy

## Accessibility [\#](https://primevue.org/splitbutton/\#accessibility)

### Screen Reader

SplitButton component renders two native button elements, main button uses the label property to define _aria-label_ by default which can be customized with _buttonProps_. Dropdown button requires an explicit definition to describe it using _menuButtonProps_ option and also includes _aria-haspopup_, _aria-expanded_ for states along with _aria-controls_ to define the relation between the popup and the button.

The popup overlay uses _menu_ role on the list and each action item has a _menuitem_ role with an _aria-label_ as the menuitem label. The id of the menu refers to the _aria-controls_ of the dropdown button.

```markup

<SplitButton :buttonProps="{'aria-label': 'Default Action'}" :menuButtonProps="{'aria-label': 'More Options'}" />

```

Copy

### Main Button Keyboard Support

| Key | Function |
| --- | --- |
| _enter_ | Activates the button. |
| _space_ | Activates the button. |

### Menu Button Keyboard Support

| Key | Function |
| --- | --- |
| _enter_ _space_ _down arrow_ _up arrow_ | Opens the menu and moves focus to the first item. |

### Menu Keyboard Support

| Key | Function |
| --- | --- |
| _enter_ | If menuitem has a submenu, opens the submenu otherwise activates the menuitem and closes all open overlays. |
| _space_ | If menuitem has a submenu, opens the submenu otherwise activates the menuitem and closes all open overlays. |
| _escape_ | If focus is inside a popup submenu, closes the submenu and moves focus to the root item of the closed submenu. |
| _down arrow_ | Moves focus to the next menuitem within the submenu. |
| _up arrow_ | Moves focus to the previous menuitem within the submenu. |
| _alt_ \+ _up arrow_ | Closes the popup, then moves focus to the target element. |
| _right arrow_ | In nested mode if option is closed, opens the option otherwise moves focus to the first child option. |
| _left arrow_ | In nested mode if option is open, closes the option otherwise moves focus to the parent option. |
| _home_ | Moves focus to the first menuitem within the submenu. |
| _end_ | Moves focus to the last menuitem within the submenu. |
| _any printable character_ | Moves focus to the menuitem whose label starts with the characters being typed. |

- Import

- Basic

- Icons

- Nested

- Severity

- Disabled

- Raised

- Rounded

- Text

- Raised Text

- Outlined

- Sizes

- Template

- Accessibility


# SplitButton API

API defines helper props, events and others for the PrimeVue SplitButton module.

## SplitButton [\#](https://primevue.org/splitbutton/\#api.splitbutton)

SplitButton groups a set of commands in an overlay with a default command.

### Props [\#](https://primevue.org/splitbutton/\#api.splitbutton.props)

Defines valid properties in SplitButton component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string | null | Text of the button. |  |
| icon | string | null | Name of the icon. |  |
| model | MenuItem\[\] | null | MenuModel instance to define the overlay items. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached.<br>Special keywords are 'body' for document body and 'self' for the element itself. |  |
| disabled | boolean | false | When present, it specifies that the element should be disabled. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| class | any | null | Style class of the component. |  |
| style | any | null | Inline style of the component. |  |
| buttonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the default button. |  |
| menuButtonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the menu button. |  |
| menuButtonIcon | string | null | Name of the menu button icon. |  |
| dropdownIcon | string | null | Name of the menu button icon. |  |
| severity | HintedString<"secondary" \| "info" \| "success" \| "warn" \| "danger" \| "contrast" \| "help"> | null | Defines the style of the button. |  |
| raised | boolean | false | Add a shadow to indicate elevation. |  |
| rounded | boolean | false | Add a circular border radius to the button. |  |
| text | boolean | false | Add a textual class to the button without a background initially. |  |
| outlined | boolean | false | Add a border class without a background initially. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the button. |  |
| plain | boolean | false | Add a plain textual class to the button without a background initially. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SplitButtonPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/splitbutton/\#api.splitbutton.emits)

Defines valid emits in SplitButton component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| click | event: Event | void | Callback to invoke when main button is clicked. |  |

### Slots [\#](https://primevue.org/splitbutton/\#api.splitbutton.slots)

Defines valid slots in SplitButton component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Button part of the content can easily be customized with the default slot instead of using the built-in modes. |  |
| buttoncontent |  | VNode<RendererNode, RendererElement, Object>\[\] | Command button part of the content can easily be customized with the button content slot. |  |
| icon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom button icon template. |  |
| menubuttonicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| dropdownicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom menu button icon template. |  |
| menuitemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom menu item icon template. |  |
| item | scope: {<br>item: MenuItem, // Menuitem instancelabel: undefined, // Label property of the menuitemprops: TieredMenuRouterBindProps, // Binding properties of the menuitemhasSubmenu: boolean, // Whether or not there is a submenu<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each menu item. |  |

### Interfaces [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces)

Defines the custom interfaces used by the module.

#### SplitButtonPassThroughMethodOptions [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces.SplitButtonPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SplitButtonProps](https://primevue.org/splitbutton/#api.splitbutton.interfaces.SplitButtonProps) | null | Defines valid properties. |
| state | [SplitButtonState](https://primevue.org/splitbutton/#api.splitbutton.interfaces.SplitButtonState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### SplitButtonSharedPassThroughMethodOptions [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces.SplitButtonSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [SplitButtonProps](https://primevue.org/splitbutton/#api.splitbutton.interfaces.SplitButtonProps) | null | Defines valid properties. |
| state | [SplitButtonState](https://primevue.org/splitbutton/#api.splitbutton.interfaces.SplitButtonState) | null | Defines current inline state. |

#### SplitButtonPassThroughOptions [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces.SplitButtonPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [SplitButtonPassThroughOptionType](https://primevue.org/splitbutton/#api.splitbutton.types.SplitButtonPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcButton | any | null | Used to pass attributes to the Button component. |
| pcDropdown | any | null | Used to pass attributes to the Button component. |
| pcMenu | any | null | Used to pass attributes to the TieredMenu component. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### SplitButtonPassThroughAttributes [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces.SplitButtonPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### SplitButtonState [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces.SplitButtonState)

Defines current inline state in SplitButton component.

| name | type | default | description |
| --- | --- | --- | --- |
| isExpanded | boolean | false | Current expanded state as a boolean. |

## Types [\#](https://primevue.org/splitbutton/\#api.splitbutton.types)

Defines the custom types used by the module.

#### SplitButtonPassThroughOptionType [\#](https://primevue.org/splitbutton/\#api.splitbutton.types.SplitButtonPassThroughOptionType)

| values |
| --- |
| SplitButtonPassThroughAttributes \| (options: SplitButtonPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### SplitButtonEmits [\#](https://primevue.org/splitbutton/\#api.splitbutton.types.SplitButtonEmits)

| values |
| --- |
| EmitFn<SplitButtonEmitsOptions> |

- SplitButton

  - Props

  - Emits

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue VirtualScroller
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# VirtualScroller

VirtualScroller is a performant approach to render large amounts of data efficiently.

## Import [\#](https://primevue.org/virtualscroller/\#import)

```javascript

import VirtualScroller from 'primevue/virtualscroller';

```

Copy

## Basic [\#](https://primevue.org/virtualscroller/\#basic)

VirtualScroller requires _items_ as the data to display, _itemSize_ for the dimensions of an item and _item_ template are required on component. In addition, an initial array is required based on the total number of items to display. Size of the viewport is configured using _scrollWidth_, _scrollHeight_ properties directly or with CSS _width_ and _height_ styles.

Item #0

Item #1

Item #2

Item #3

Item #4

Item #5

Item #6

Item #7

```markup

<VirtualScroller :items="items" :itemSize="50" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>

```

Copy

## Horizontal [\#](https://primevue.org/virtualscroller/\#horizontal)

Setting _orientation_ to _horizontal_ enables scrolling horizontally. In this case, the _itemSize_ should refer to the width of an item.

Item #0

Item #1

Item #2

Item #3

Item #4

Item #5

Item #6

Item #7

```markup

<VirtualScroller :items="items" :itemSize="50" orientation="horizontal" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px" :pt="{ content: 'flex flex-row' }">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="width: 50px; writing-mode: vertical-lr;">{{ item }}</div>
    </template>
</VirtualScroller>

```

Copy

## Grid [\#](https://primevue.org/virtualscroller/\#grid)

Scrolling can be enabled vertically and horizontally when _orientation_ is set as _both_. In this mode, _itemSize_ should be an array where first value is the height of an item and second is the width.

Item #0\_0

Item #0\_1

Item #0\_2

Item #0\_3

Item #1\_0

Item #1\_1

Item #1\_2

Item #1\_3

Item #2\_0

Item #2\_1

Item #2\_2

Item #2\_3

Item #3\_0

Item #3\_1

Item #3\_2

Item #3\_3

Item #4\_0

Item #4\_1

Item #4\_2

Item #4\_3

Item #5\_0

Item #5\_1

Item #5\_2

Item #5\_3

Item #6\_0

Item #6\_1

Item #6\_2

Item #6\_3

Item #7\_0

Item #7\_1

Item #7\_2

Item #7\_3

```markup

<VirtualScroller :items="items" :itemSize="[50, 100]" orientation="both" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">
            <template v-for="(el, index) of item" :key="index">
                <div style="width: 100px">{{ el }}</div>
            </template>
        </div>
    </template>
</VirtualScroller>

```

Copy

## Delay [\#](https://primevue.org/virtualscroller/\#delay)

The _delay_ property adds a threshold to wait in milliseconds during scrolling for render optimization.

No Delay

Item #0

Item #1

Item #2

Item #3

Item #4

Item #5

Item #6

Item #7

150ms

Item #0

Item #1

Item #2

Item #3

Item #4

Item #5

Item #6

Item #7

500ms

Item #0

Item #1

Item #2

Item #3

Item #4

Item #5

Item #6

Item #7

```markup

<VirtualScroller :items="items" :itemSize="50" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>

<VirtualScroller :items="items" :itemSize="50" :delay="150" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>

<VirtualScroller :items="items" :itemSize="50" :delay="500" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>

```

Copy

## Loading [\#](https://primevue.org/virtualscroller/\#loading)

Busy state is enabled by adding _showLoader_ property which blocks the UI with a modal by default. Alternatively, _loader_ template can be used to customize items e.g. with [Skeleton](https://primevue.org/skeleton/).

Modal

Item #0

Item #1

Item #2

Item #3

Item #4

Item #5

Item #6

Item #7

Skeleton

Item #0

Item #1

Item #2

Item #3

Item #4

Item #5

Item #6

Item #7

```markup

<VirtualScroller :items="items" :itemSize="50" showLoader :delay="250" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>

<VirtualScroller :items="items" :itemSize="50" showLoader :delay="250" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
    <template v-slot:loader="{ options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">
            <Skeleton :width="options.even ? '60%' : '50%'" height="1.3rem" />
        </div>
    </template>
</VirtualScroller>

```

Copy

## Lazy [\#](https://primevue.org/virtualscroller/\#lazy)

Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded on demand. To implement lazy loading, enable the _lazy_ property and implement _onLazyLoad_ callback to return data.

```markup

<VirtualScroller :items="lazyItems" :itemSize="50" showLoader :delay="250" :loading="lazyLoading" lazy @lazy-load="onLazyLoad" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>

```

Copy

## Accessibility [\#](https://primevue.org/virtualscroller/\#accessibility)

### Screen Reader

VirtualScroller has no specific role is enforced, still you may use any aria role and attributes as any valid attribute is passed to the container element.

### Keyboard Support

Component does not include any built-in interactive elements.

- Import

- Basic

- Horizontal

- Grid

- Delay

- Loading

- Lazy

- Accessibility


# VirtualScroller API

API defines helper props, events and others for the PrimeVue VirtualScroller module.

## VirtualScroller [\#](https://primevue.org/virtualscroller/\#api.virtualscroller)

VirtualScroller is a performant approach to handle huge data efficiently.

### Props [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.props)

Defines valid properties in VirtualScroller component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| id | string | null | Unique identifier of the element. |  |
| style | any | null | Inline style of the component. |  |
| class | any | null | Style class of the component. |  |
| items | null \| any\[\] \| any\[\]\[\] | null | An array of objects to display. |  |
| itemSize | number \| number\[\] | null | The height/width of item according to orientation. |  |
| scrollHeight | string | null | Height of the scroll viewport. |  |
| scrollWidth | string | null | Width of the scroll viewport. |  |
| orientation | HintedString<"both" \| "horizontal" \| "vertical"> | vertical | The orientation of scrollbar. |  |
| numToleratedItems | number | half the number of items shown in the view. | Determines how many additional elements to add to the DOM outside of the view.<br>According to the scrolls made up and down, extra items are added in a certain algorithm in the form of multiples of this number. |  |
| delay | number | 0 | Delay in scroll before new data is loaded. |  |
| resizeDelay | number | 10 | Delay after window's resize finishes. |  |
| lazy | boolean | false | Defines if data is loaded and interacted with in lazy manner. |  |
| disabled | boolean | false | If disabled, the VirtualScroller feature is eliminated and the content is displayed directly. |  |
| loaderDisabled | boolean | false | Used to implement a custom loader instead of using the loader feature in the VirtualScroller. |  |
| showLoader | boolean | false | Whether to show loader. |  |
| showSpacer | boolean | true | Used to implement a custom spacer instead of using the spacer feature in the VirtualScroller. |  |
| loading | boolean | false | Whether to load items. |  |
| tabindex | string \| number | 0 | Index of the element in tabbing order. |  |
| inline | boolean | false | When enabled, positions the content as inline. |  |
| step | number | 0 | Used to specify how many items to load in each load method in lazy mode. |  |
| appendOnly | boolean | false | Used to append each loaded item to top without removing any items from the DOM. Using very large data may cause the browser to crash. |  |
| autoSize | boolean | false | Whether to dynamically change the height or width of scrollable container. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<VirtualScrollerPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.emits)

Defines valid emits in VirtualScroller component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:numToleratedItems | value: number | void | Emitted when the numToleratedItems changes. |  |
| scroll | event: Event | void | Callback to invoke when scroll position changes. |  |
| scroll-index-change | event: [VirtualScrollerScrollIndexChangeEvent](https://primevue.org/virtualscroller/#api.virtualscroller.events.VirtualScrollerScrollIndexChangeEvent) | void | Callback to invoke when scroll position and item's range in view changes. |  |
| lazy-load | event: [VirtualScrollerLazyEvent](https://primevue.org/virtualscroller/#api.virtualscroller.events.VirtualScrollerLazyEvent) | void | Callback to invoke in lazy mode to load new data. |  |

### Slots [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.slots)

Defines valid slots in VirtualScroller component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| content | scope: {<br>items: any, // An array of objects to display for virtualscrollerstyleClass: string, // Style class of the contentcontentRef: (el: any) â‡’ void, // Referance of the contentgetItemOptions: (index: number) â‡’ VirtualScrollerItemOptions, // Options of the itemsloading: boolean, // Whether the data is loaded.getLoaderOptions: (index: number, ext: any) â‡’ VirtualScrollerLoaderOptions, // Loader options of the items while the data is loading.itemSize: undefined, // The height/width of item according to orientation.rows: undefined, // The number of the rendered rows.columns: undefined, // The number of the rendered columns.spacerStyle: any, // The style of spacer element.contentStyle: any, // The style of content element.vertical: boolean, // Whether the orientation is vertical.horizontal: boolean, // Whether the orientation is horizontal.both: boolean, // Whether the orientation is both.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| item | scope: {<br>item: any, // Item data.options: VirtualScrollerItemOptions, // Item options.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item template. |  |
| loader | scope: {<br>options: VirtualScrollerLoaderOptions, // Loader options.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loader template. |  |
| loadingicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading icon template. |  |

### Methods [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.methods)

Defines methods that can be accessed by the component's reference.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| scrollTo | options: ScrollToOptions | void | Scroll to move to a specific position. |  |
| scrollToIndex | index: number | void | Scroll to move to a specific item. |  |
| scrollInView | index: number | void | It is used to move the specified index into the view. It is a method that will usually be needed when keyboard support is added to the virtualScroller component. |  |
| getRenderedRange |  | VirtualScrollerRangeMethod | Returns the range of items added to the DOM. |  |

### Events [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.events)

Defines the custom events used by the component's emit.

#### VirtualScrollerScrollIndexChangeEvent [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.events.VirtualScrollerScrollIndexChangeEvent)

Custom scroll index change event.

See [scroll-index-change](https://primevue.org/virtualscroller/#api.virtualscroller.emitsoptions.scroll-index-change)

| name | type | description |
| --- | --- | --- |
| first | number | First index of the new data range to be loaded. |
| last | number | Last index of the new data range to be loaded. |

#### VirtualScrollerLazyEvent [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.events.VirtualScrollerLazyEvent)

Custom lazy event.

See [scroll-index-change](https://primevue.org/virtualscroller/#api.virtualscroller.emitsoptions.scroll-index-change)

| name | type | description |
| --- | --- | --- |
| first | number | First index of the new data range to be loaded. |
| last | number | Last index of the new data range to be loaded. |

### Interfaces [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces)

Defines the custom interfaces used by the module.

#### VirtualScrollerPassThroughMethodOptions [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [VirtualScrollerProps](https://primevue.org/virtualscroller/#api.virtualscroller.interfaces.VirtualScrollerProps) | null | Defines valid properties. |
| state | [VirtualScrollerState](https://primevue.org/virtualscroller/#api.virtualscroller.interfaces.VirtualScrollerState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### VirtualScrollerViewport [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerViewport)

Custom virtualscroller viewport metadata.

| name | type | default | description |
| --- | --- | --- | --- |
| first | number | null | First index of the new data range to be loaded. |
| last | number | null | Last index of the new data range to be loaded. |

#### VirtualScrollerRangeMethod [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerRangeMethod)

Virtual scroller rendered range.

| name | type | default | description |
| --- | --- | --- | --- |
| first | number | null | Whether the item is first. |
| last | number | null | Whether the item is last. |
| viewport | [VirtualScrollerViewport](https://primevue.org/virtualscroller/#api.virtualscroller.interfaces.VirtualScrollerViewport) | null | Viewport info. |

#### VirtualScrollerItemOptions [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerItemOptions)

Custom item options.

| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Item index |
| count | number | null | Items count |
| first | boolean | null | Whether the item is first. |
| last | boolean | null | Whether the item is last. |
| even | boolean | null | Whether the item is even. |
| odd | boolean | null | Whether the item is odd. |
| \[key: string\] | any | null |  |

#### VirtualScrollerPassThroughOptions [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [VirtualScrollerPassThroughOptionType](https://primevue.org/virtualscroller/#api.virtualscroller.types.VirtualScrollerPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| content | [VirtualScrollerPassThroughOptionType](https://primevue.org/virtualscroller/#api.virtualscroller.types.VirtualScrollerPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| loader | [VirtualScrollerPassThroughOptionType](https://primevue.org/virtualscroller/#api.virtualscroller.types.VirtualScrollerPassThroughOptionType) | null | Used to pass attributes to the loader's DOM element. |
| loadingIcon | [VirtualScrollerPassThroughOptionType](https://primevue.org/virtualscroller/#api.virtualscroller.types.VirtualScrollerPassThroughOptionType) | null | Used to pass attributes to the loading icon's DOM element. |
| spacer | [VirtualScrollerPassThroughOptionType](https://primevue.org/virtualscroller/#api.virtualscroller.types.VirtualScrollerPassThroughOptionType) | null | Used to pass attributes to the spacer's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### VirtualScrollerPassThroughAttributes [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### VirtualScrollerState [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerState)

Defines current inline state in VirtualScroller component.

| name | type | default | description |
| --- | --- | --- | --- |
| first | number | null | First index of the new data range to be loaded as a number. |
| last | number | null | Last index of the new data range to be loaded as a number. |
| page | number | null | Index of the first item as a number. |
| numItemsInViewport | number | null | Visible item count in the viewport as a number. |
| lastScrollPos | number | null | Lastest scroll position as a number. |
| d\_numToleratedItems | number | null | Additional elements to add to the DOM outside of the view as a number. |
| d\_loading | number | false | Current loading state as a boolean. |
| loaderArr | any\[\] | null | Loadable items array. |
| spacerStyle | any | null | The style of spacer element. |
| contentStyle | any | null | The style of content element. |

#### VirtualScrollerLoaderOptions [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerLoaderOptions)

Custom virtualscroller loader options

| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Item index |
| count | number | null | Items count |
| first | boolean | null | Whether the item is first. |
| last | boolean | null | Whether the item is last. |
| even | boolean | null | Whether the item is even. |
| odd | boolean | null | Whether the item is odd. |

## Types [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.types)

Defines the custom types used by the module.

#### VirtualScrollerPassThroughOptionType [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.types.VirtualScrollerPassThroughOptionType)

| values |
| --- |
| VirtualScrollerPassThroughAttributes \| (options: VirtualScrollerPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### VirtualScrollerEmits [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.types.VirtualScrollerEmits)

| values |
| --- |
| EmitFn<VirtualScrollerEmitsOptions> |

- VirtualScroller

  - Props

  - Emits

  - Slots

  - Methods

  - Events

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## Input Group Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# InputGroup

Text, icon, buttons and other content can be grouped next to an input.

## Import [\#](https://primevue.org/inputgroup/\#import)

```javascript

import InputGroup from 'primevue/inputgroup';
import InputGroupAddon from 'primevue/inputgroupaddon';

```

Copy

## Basic [\#](https://primevue.org/inputgroup/\#basic)

A group is created by wrapping the input and add-ons with the _InputGroup_ component. Each add-on element is defined as a child of _InputGroupAddon_ component.

$

.00

www

City

```markup

<InputGroup>
    <InputGroupAddon>
        <i class="pi pi-user"></i>
    </InputGroupAddon>
    <InputText v-model="text1" placeholder="Username" />
</InputGroup>

<InputGroup>
    <InputGroupAddon>$</InputGroupAddon>
    <InputNumber v-model="number" placeholder="Price" />
    <InputGroupAddon>.00</InputGroupAddon>
</InputGroup>

<InputGroup>
    <InputGroupAddon>www</InputGroupAddon>
    <InputText v-model="text2" placeholder="Website" />
</InputGroup>

<InputGroup>
    <InputGroupAddon>
        <i class="pi pi-map"></i>
    </InputGroupAddon>
    <Select v-model="selectedCity" :options="cities" optionLabel="name" placeholder="City" />
</InputGroup>

```

Copy

## Multiple [\#](https://primevue.org/inputgroup/\#multiple)

Multiple add-ons can be placed inside the same group.

$

.00

```markup

<InputGroup class="sm:!w-96">
    <InputGroupAddon>
        <i class="pi pi-clock"></i>
    </InputGroupAddon>
    <InputGroupAddon>
        <i class="pi pi-star-fill"></i>
    </InputGroupAddon>
    <InputNumber placeholder="Price" />
    <InputGroupAddon>$</InputGroupAddon>
    <InputGroupAddon>.00</InputGroupAddon>
</InputGroup>

```

Copy

## Button [\#](https://primevue.org/inputgroup/\#button)

Buttons can be placed at either side of an input element.

Search

```markup

<InputGroup>
    <Button label="Search" />
    <InputText placeholder="Keyword" />
</InputGroup>

<InputGroup>
    <InputText placeholder="Keyword" />
    <InputGroupAddon>
        <Button icon="pi pi-search" severity="secondary" variant="text" @click="toggle" />
    </InputGroupAddon>
</InputGroup>
<Menu ref="menu" :model="items" popup class="!min-w-fit" />

<InputGroup>
    <InputGroupAddon>
        <Button icon="pi pi-check" severity="secondary" />
    </InputGroupAddon>
    <InputText placeholder="Vote" />
    <InputGroupAddon>
        <Button icon="pi pi-times" severity="secondary" />
    </InputGroupAddon>
</InputGroup>

```

Copy

## Checkbox & Radio [\#](https://primevue.org/inputgroup/\#checkbox)

Checkbox and RadioButton components can be combined with an input element under the same group.

```markup

<InputGroup>
    <InputText placeholder="Price" />
    <InputGroupAddon>
        <RadioButton v-model="radioValue1" name="rb1" value="rb1" />
    </InputGroupAddon>
</InputGroup>

<InputGroup>
    <InputGroupAddon>
        <Checkbox v-model="checked1" :binary="true" />
    </InputGroupAddon>
    <InputText placeholder="Username" />
</InputGroup>

<InputGroup>
    <InputGroupAddon>
        <Checkbox v-model="checked2" :binary="true" />
    </InputGroupAddon>
    <InputText placeholder="Website" />
    <InputGroupAddon>
        <RadioButton v-model="radioValue2" name="rb2" value="rb2" />
    </InputGroupAddon>
</InputGroup>

```

Copy

## Float Label [\#](https://primevue.org/inputgroup/\#floatlabel)

FloatLabel visually integrates a label with its form element. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.

Over Label

$

In Label

.00

www

On Label

```markup

<InputGroup>
    <InputGroupAddon>
        <i class="pi pi-user"></i>
    </InputGroupAddon>
    <FloatLabel>
        <InputText id="over_label" v-model="value1" />
        <label for="over_label">Over Label</label>
    </FloatLabel>
</InputGroup>

<InputGroup>
    <InputGroupAddon>$</InputGroupAddon>
    <FloatLabel variant="in">
        <InputText id="in_label" v-model="value2" />
        <label for="in_label">In Label</label>
    </FloatLabel>
    <InputGroupAddon>.00</InputGroupAddon>
</InputGroup>

<InputGroup>
    <InputGroupAddon>www</InputGroupAddon>
    <FloatLabel variant="on">
        <InputText id="on_label" v-model="value3" />
        <label for="on_label">On Label</label>
    </FloatLabel>
</InputGroup>

```

Copy

## Ifta Label [\#](https://primevue.org/inputgroup/\#iftalabel)

IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.

Price

```markup

<InputGroup class="md:w-80">
    <InputGroupAddon>
        <i class="pi pi-shopping-cart"></i>
    </InputGroupAddon>
    <IftaLabel>
        <InputNumber v-model="value" inputId="price" mode="currency" currency="USD" locale="en-US" />
        <label for="price">Price</label>
    </IftaLabel>
</InputGroup>

```

Copy

## Accessibility [\#](https://primevue.org/inputgroup/\#accessibility)

### Screen Reader

InputGroup and InputGroupAddon do not require any roles and attributes.

### Keyboard Support

Component does not include any interactive elements.

- Import

- Basic

- Multiple

- Button

- Checkbox & Radio

- Float Label

- Ifta Label

- Accessibility


# InputGroup API

API defines helper props, events and others for the PrimeVue InputGroup module.

## InputGroup [\#](https://primevue.org/inputgroup/\#api.inputgroup)

InputGroup displays text, icon, buttons and other content can be grouped next to an input.

### Props [\#](https://primevue.org/inputgroup/\#api.inputgroup.props)

Defines valid properties in InputGroup component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<InputGroupPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/inputgroup/\#api.inputgroup.slots)

Defines valid slots in InputGroup component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom default template. |  |

### Interfaces [\#](https://primevue.org/inputgroup/\#api.inputgroup.interfaces)

Defines the custom interfaces used by the module.

#### InputGroupPassThroughMethodOptions [\#](https://primevue.org/inputgroup/\#api.inputgroup.interfaces.InputGroupPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [InputGroupProps](https://primevue.org/inputgroup/#api.inputgroup.interfaces.InputGroupProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### InputGroupPassThroughOptions [\#](https://primevue.org/inputgroup/\#api.inputgroup.interfaces.InputGroupPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [InputGroupPassThroughOptionType](https://primevue.org/inputgroup/#api.inputgroup.types.InputGroupPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### InputGroupPassThroughAttributes [\#](https://primevue.org/inputgroup/\#api.inputgroup.interfaces.InputGroupPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/inputgroup/\#api.inputgroup.types)

Defines the custom types used by the module.

#### InputGroupPassThroughOptionType [\#](https://primevue.org/inputgroup/\#api.inputgroup.types.InputGroupPassThroughOptionType)

| values |
| --- |
| InputGroupPassThroughAttributes \| (options: InputGroupPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### InputGroupEmits [\#](https://primevue.org/inputgroup/\#api.inputgroup.types.InputGroupEmits)

| values |
| --- |
| EmitFn<InputGroupEmitsOptions> |

## InputGroupAddon [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon)

InputGroupAddon displays text, icon, buttons and other content can be grouped next to an input.

### Props [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.props)

Defines valid properties in InputGroupAddon component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<InputGroupAddonPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.slots)

Defines valid slots in InputGroupAddon component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom default template. |  |

### Interfaces [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.interfaces)

Defines the custom interfaces used by the module.

#### InputGroupAddonPassThroughMethodOptions [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.interfaces.InputGroupAddonPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### InputGroupAddonPassThroughOptions [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.interfaces.InputGroupAddonPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [InputGroupAddonPassThroughOptionType](https://primevue.org/inputgroup/#api.inputgroupaddon.types.InputGroupAddonPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### InputGroupAddonPassThroughAttributes [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.interfaces.InputGroupAddonPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.types)

Defines the custom types used by the module.

#### InputGroupAddonPassThroughOptionType [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.types.InputGroupAddonPassThroughOptionType)

| values |
| --- |
| InputGroupAddonPassThroughAttributes \| (options: InputGroupAddonPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### InputGroupAddonEmits [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.types.InputGroupAddonEmits)

| values |
| --- |
| EmitFn<InputGroupAddonEmitsOptions> |

- InputGroup

  - Props

  - Slots

  - Interfaces

  - Types
- InputGroupAddon

  - Props

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Nuxt Setup
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

# Install PrimeVue with Nuxt

Setting up PrimeVue in a Nuxt project.

## Download [\#](https://primevue.org/nuxt/\#download)

PrimeVue is available for download on [npm registry](https://www.npmjs.com/package/primevue) along with the official [@primevue/nuxt-module](https://www.npmjs.com/package/@primevue/nuxt-module).

```markup

# Using npm
npm install primevue @primeuix/themes
npm install --save-dev @primevue/nuxt-module

# Using yarn
yarn add primevue @primeuix/themes
yarn add --dev @primevue/nuxt-module

# Using pnpm
pnpm add primevue @primeuix/themes
pnpm add -D @primevue/nuxt-module

```

Copy

## Module [\#](https://primevue.org/nuxt/\#module)

In _nuxt.config_ file, add the _@primevue/nuxt-module_ to the modules section and define _primevue_ object for the configuration of the module.

```javascript

export default defineNuxtConfig({
    modules: [\
        '@primevue/nuxt-module'\
    ],
    primevue: {
        /* Configuration */
    }
})

```

Copy

## Theme [\#](https://primevue.org/nuxt/\#theme)

Configure the module to use a theme like Aura.

```javascript

import Aura from '@primeuix/themes/aura';

export default defineNuxtConfig({
    modules: [\
        '@primevue/nuxt-module'\
    ],
    primevue: {
        options: {
            theme: {
                preset: Aura
            }
        }
    }
})

```

Copy

## Verify [\#](https://primevue.org/nuxt/\#verify)

The nuxt-primevue module registers the components automatically with tree-shaking support so you may start using them instantly.

Verify

```markup

<Button label="Verify" />

```

Copy

## Configuration [\#](https://primevue.org/nuxt/\#configuration)

### usePrimeVue [\#](https://primevue.org/nuxt/\#useprimevue)

The module installs the PrimeVue plugin by default. Disable this option if you prefer to configure PrimeVue manually e.g. with a Nuxt plugin.

```javascript

primevue: {
    usePrimeVue: true | false
}

```

Copy

### options [\#](https://primevue.org/nuxt/\#options)

Main configuration settings of PrimeVue, refer to the [configuration](https://primevue.org/configuration/) documentation for details.

```javascript

import Aura from '@primeuix/themes/aura';

export default defineNuxtConfig({
    modules: [\
        '@primevue/nuxt-module'\
    ],
    primevue: {
        options: {
            ripple: true,
            inputVariant: 'filled',
            theme: {
                preset: Aura,
                options: {
                    prefix: 'p',
                    darkModeSelector: 'system',
                    cssLayer: false
                }
            }
        }
    }
})

```

Copy

### autoImport [\#](https://primevue.org/nuxt/\#autoimport)

The [auto import](https://primevue.org/autoimport) feature registers components automatically with tree shaking support. Defaults to _true_, when disabled use include/exclude options of _components_ and _directives_ for manual registration.

```javascript

primevue: {
    autoImport: true|false
}

```

Copy

Use the _prefix_ in _components_ and _directives_ to add a prefix for registration.

```javascript

primevue: {
    autoImport: true|false,
    components: {
        prefix: 'org'
    },
    directives: {
        prefix: 'org'
    }
}

```

Copy

### importPT [\#](https://primevue.org/nuxt/\#importpt)

Configures the global pass through import path.

```javascript

primevue: {
    importPT: { from: '@/passthrough/mycustompt.js' }
}

```

Copy

_mycustompt.js_ file defines the configuration and exports it.

```javascript

const MyCustomPT = {
    ...
    button: {
        root: 'my-button',
       ...
    },
    ...
}

export default MyCustomPT;

```

Copy

### importTheme [\#](https://primevue.org/nuxt/\#importtheme)

Configures the theme configuration path for the customizations of a theme in styled mode.

```javascript

primevue: {
    importTheme: { from: '@/themes/mytheme.js' },
}

```

Copy

The _mytheme.js_ file contains the theme configuration.

```javascript

import { definePreset } from '@primeuix/themes';
import Aura from '@primeuix/themes/aura';

const MyPreset = definePreset(Aura, {
    semantic: {
        primary: {
            50: '{indigo.50}',
            100: '{indigo.100}',
            200: '{indigo.200}',
            300: '{indigo.300}',
            400: '{indigo.400}',
            500: '{indigo.500}',
            600: '{indigo.600}',
            700: '{indigo.700}',
            800: '{indigo.800}',
            900: '{indigo.900}',
            950: '{indigo.950}'
        }
    }
});

export default {
    preset: MyPreset,
    options: {
        darkModeSelector: '.p-dark'
    }
};

```

Copy

### components [\#](https://primevue.org/nuxt/\#components)

When _autoImport_ is disabled, use the _include_ and _exclude_ for manual registration.

The components to import and register are defined with the _include_ option using a string array. When the value is ignored or set using the _\*_ alias, all of the components are registered.

```javascript

primevue: {
    components: {
        include: ['Button', 'DataTable']
    }
}

```

Copy

In case all components are imported, particular components can still be excluded with the _exclude_ option.

```javascript

primevue: {
    components: {
        include: '*',
        exclude: ['Galleria', 'Carousel']
    }
}

```

Copy

By default, for compatibility reasons, Chart and Editor components are excluded. To include them simply set the _exclude_ option to an empty list.

```javascript

primevue: {
    components: {
        exclude: []
    }
}

```

Copy

Use the _prefix_ option to give a prefix to the registered component names.

```javascript

primevue: {
    components: {
        prefix: 'Prime'
        include: ['Button', 'DataTable']    /* Used as <PrimeButton /> and <PrimeDataTable /> */
    }
}

```

Copy

Component registration can be customized further by implementing the _name_ function that gets an object representing the import metadata. _name_ is the label of the component, _as_ is the default export name and _from_ is the import path.

```javascript

primevue: {
    components: {
        name: ({ name, as, from }) => {
            return name === 'Button' ? `My${name}` : name;
        },
        include: ['Button', 'DataTable']    /* Used as <MyButton /> and <DataTable /> */
    }
}

```

Copy

### directives [\#](https://primevue.org/nuxt/\#directives)

When _autoImport_ is disabled, use the _include_ and _exclude_ for manual registration.

The names of the directives to import and register are provided using the _include_ property. When the value is ignored or set using the _\*_ alias, all of the directives are registered.

```javascript

primevue: {
    directives: {
        include: ['Ripple', 'Tooltip']
    }
}

```

Copy

Similar to components, certain directives can be excluded and name registration can be customized.

```javascript

primevue: {
    directives: {
        include: '*',
        exclude: ['Ripple']
    }
}

```

Copy

```javascript

primevue: {
    directives: {
        prefix: 'p'
        include: ['Ripple', 'Tooltip']    /* Used as v-pripple and v-ptooltip */
    }
}

```

Copy

### composables [\#](https://primevue.org/nuxt/\#composables)

Determines the composables to use, when default value is ignored or set as _\*_ all composables are imported.

```javascript

primevue: {
    composables: {
        include: ['useStyle']
    }
}

```

Copy

## Examples [\#](https://primevue.org/nuxt/\#examples)

[Nuxt based samples](https://github.com/primefaces/primevue-examples/tree/main/nuxt-quickstart) with different options are available at PrimeVue examples repository.

## Next Steps [\#](https://primevue.org/nuxt/\#nextsteps)

Welcome to the Prime UI Ecosystem! Once you have PrimeVue up and running, we recommend exploring the following resources to gain a deeper understanding of the library.

- [Global configuration](https://primevue.org/configuration)
- [Customization of styles](https://primevue.org/theming/styled)
- [Pass through attributes](https://primevue.org/passthrough)
- [Getting support](https://primevue.org/support)

- Download

- Module

- Theme

- Verify

- Configuration

  - usePrimeVue

  - options

  - autoImport

  - importPT

  - importTheme

  - components

  - directives

  - composables
- Examples

- Next Steps


PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Toolbar Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Toolbar

Toolbar is a grouping component for buttons and other content.

## Import [\#](https://primevue.org/toolbar/\#import)

```javascript

import Toolbar from 'primevue/toolbar';

```

Copy

## Basic [\#](https://primevue.org/toolbar/\#basic)

Toolbar provides _start_, _center_ and _end_ properties to place content at these sections.

Save

```markup

<Toolbar>
    <template #start>
        <Button icon="pi pi-plus" class="mr-2" severity="secondary" text />
        <Button icon="pi pi-print" class="mr-2" severity="secondary" text />
        <Button icon="pi pi-upload" severity="secondary" text />
    </template>

    <template #center>
        <IconField>
            <InputIcon>
                <i class="pi pi-search" />
            </InputIcon>
            <InputText placeholder="Search" />
        </IconField>
    </template>

    <template #end> <SplitButton label="Save" :model="items"></SplitButton></template>
</Toolbar>

```

Copy

## Custom [\#](https://primevue.org/toolbar/\#custom)

A customized toolbar with navigation bar functionality.

FilesEditView

Share

![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)

```markup

<Toolbar style="border-radius: 3rem; padding: 1rem 1rem 1rem 1.5rem">
    <template #start>
        <div class="flex items-center gap-2">
            <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="..." fill="var(--p-text-color)" />
                <path d="..." fill="transparent" />
            </svg>
            <Button label="Files" text plain />
            <Button label="Edit" text plain />
            <Button label="View" text plain />
        </div>
    </template>

    <template #end>
        <div class="flex items-center gap-2">
            <Button label="Share" severity="contrast" size="small" />
            <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" style="width: 32px; height: 32px" />
        </div>
    </template>
</Toolbar>

```

Copy

## Accessibility [\#](https://primevue.org/toolbar/\#accessibility)

### Screen Reader

Toolbar uses _toolbar_ role to the root element, _aria-orientation_ is not included as it defaults to "horizontal". Any valid attribute is passed to the root element so you may add additional properties like _aria-labelledby_ to define the element if required.

### Keyboard Support

Component does not include any interactive elements. Arbitrary content can be placed with templating and elements like buttons inside should follow the page tab sequence.

- Import

- Basic

- Custom

- Accessibility


# Toolbar API

API defines helper props, events and others for the PrimeVue Toolbar module.

## Toolbar [\#](https://primevue.org/toolbar/\#api.toolbar)

Toolbar is a grouping component for buttons and other content.

### Props [\#](https://primevue.org/toolbar/\#api.toolbar.props)

Defines valid properties in Toolbar component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| ariaLabelledby | string | null | Defines a string value that labels an interactive element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ToolbarPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/toolbar/\#api.toolbar.slots)

Defines valid slots in Toolbar slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| start |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom start template. |  |
| center |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom center template. |  |
| end |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom end template. |  |

### Interfaces [\#](https://primevue.org/toolbar/\#api.toolbar.interfaces)

Defines the custom interfaces used by the module.

#### ToolbarPassThroughMethodOptions [\#](https://primevue.org/toolbar/\#api.toolbar.interfaces.ToolbarPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ToolbarProps](https://primevue.org/toolbar/#api.toolbar.interfaces.ToolbarProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### ToolbarPassThroughOptions [\#](https://primevue.org/toolbar/\#api.toolbar.interfaces.ToolbarPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [ToolbarPassThroughOptionType](https://primevue.org/toolbar/#api.toolbar.types.ToolbarPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| start | [ToolbarPassThroughOptionType](https://primevue.org/toolbar/#api.toolbar.types.ToolbarPassThroughOptionType) | null | Used to pass attributes to the start's DOM element. |
| center | [ToolbarPassThroughOptionType](https://primevue.org/toolbar/#api.toolbar.types.ToolbarPassThroughOptionType) | null | Used to pass attributes to the center's DOM element. |
| end | [ToolbarPassThroughOptionType](https://primevue.org/toolbar/#api.toolbar.types.ToolbarPassThroughOptionType) | null | Used to pass attributes to the right's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### ToolbarPassThroughAttributes [\#](https://primevue.org/toolbar/\#api.toolbar.interfaces.ToolbarPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/toolbar/\#api.toolbar.types)

Defines the custom types used by the module.

#### ToolbarPassThroughOptionType [\#](https://primevue.org/toolbar/\#api.toolbar.types.ToolbarPassThroughOptionType)

| values |
| --- |
| ToolbarPassThroughAttributes \| (options: ToolbarPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### ToolbarEmits [\#](https://primevue.org/toolbar/\#api.toolbar.types.ToolbarEmits)

| values |
| --- |
| EmitFn<ToolbarEmitsOptions> |

- Toolbar

  - Props

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue UI Components
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

![PrimeVue Designer](https://primefaces.org/cdn/primevue/images/overview.png)![PrimeVue Designer](https://primefaces.org/cdn/primevue/images/overview-mobile.png)

# Introduction

Next-generation UI Component suite for Vue.

## Overview [\#](https://primevue.org/introduction/\#overview)

PrimeVue is a complete UI suite for Vue.js consisting of a rich set of UI components, icons, blocks, and application templates. The project's primary goal is to boost developer productivity by offering reusable solutions that are easy to tune and customize as an in-house library.

The project has been created by [PrimeTek](https://www.primetek.com.tr/) a world-renowned vendor of popular UI Component suites, including [PrimeFaces](https://primefaces.org/), [PrimeNG](https://primeng.org/), and [PrimeReact.](https://primereact.org/) All the members in [our team](https://primevue.org/team) are full time employees of PrimeTek who share the same passion and vision for open source to create awesome UI libraries. Depending on a 3rd party library may introduce risks if the library maintainers decide not to work on the project, however, this is not the case with PrimeVue as the track record of PrimeTek shows. For example, PrimeFaces has been maintained actively since 2008.

## Theming [\#](https://primevue.org/introduction/\#theming)

PrimeVue can be styled in two modes; styled or unstyled. Styled mode is based on pre-skinned components with opinionated theme variants of PrimeOne design like Aura, Lara or Nora presets. Unstyled mode on the other hand, leaves the styling to you while implementing the functionality and accessibility. Unstyled mode provides full control over the styling with no boundaries by implementing a pluggable architecture to utilize CSS libraries like Tailwind CSS, Bootstrap, Bulma or your own custom CSS. We've even further built the [Tailwind Presets](https://primevue.org/tailwind.primevue.org) library to skin the UI library with utility classes of Tailwind. This design is future proof as PrimeVue can be styled with any CSS library without actually depending on it in its core.

## Pass Through [\#](https://primevue.org/introduction/\#passthrough)

PassThrough is an innovative API to provide access to the internal DOM elements to add arbitrary attributes. In general, traditional UI component libraries encapsulate UI and logic with limited APIs that makes the developers dependant on the library maintainer to extend this API by adding new props or events. With [Pass Through](https://primevue.org/passthrough) this limitation has been eliminated since, you'll be able to access the internal of the components to add events and attributes. Some common use-cases are adding test attributes, additional aria attributes, custom events and styling.

## Accessibility [\#](https://primevue.org/introduction/\#accessibility)

PrimeVue has WCAG 2.1 AA level compliance; each component has a dedicated accessibility section to document several aspects, including keyboard and screen reader support. Through communication channels such as GitHub or Discord, numerous accessibility experts worldwide continue to provide constant feedback to improve the accessibility features further. View the [accessibility guide](https://primevue.org/guides/accessibility) to learn more.

## Add-Ons [\#](https://primevue.org/introduction/\#add-ons)

PrimeVue does not require financial sponsorships from its community; instead, to be backed by a solid financial foundation, optional add-ons are offered. These include a Figma UI Kit, premium application templates, and reusable UI blocks called PrimeBlocks. The add-ons are optional and there is no paywall when using PrimeVue.

- Overview

- Theming

- Pass Through

- Accessibility

- Add-Ons


PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## ConfirmPopup Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# ConfirmPopup

ConfirmPopup displays a confirmation overlay displayed relatively to its target.

## Import [\#](https://primevue.org/confirmpopup/\#import)

```javascript

import ConfirmPopup from 'primevue/confirmpopup';

```

Copy

## Service [\#](https://primevue.org/confirmpopup/\#confirmation-service)

ConfirmPopup is controlled via the _ConfirmationService_ that needs to be installed as an application plugin.

```javascript

import {createApp} from 'vue';
import ConfirmationService from 'primevue/confirmationservice';

const app = createApp(App);
app.use(ConfirmationService);

```

Copy

The service is available with the _useConfirm_ function for Composition API or using the _$confirm_ property of the application for Options API.

```javascript

import { useConfirm } from "primevue/useconfirm";

const confirm = useConfirm();

```

Copy

## Basic [\#](https://primevue.org/confirmpopup/\#basic)

ConfirmPopup is displayed by calling the _require_ method of the _$confirm_ instance by passing the options to customize the Popup. The _target_ attribute is mandatory to align the popup to its referrer.

SaveDelete

```markup

<ConfirmPopup></ConfirmPopup>
<Button @click="confirm1($event)" label="Save" outlined></Button>
<Button @click="confirm2($event)" label="Delete" severity="danger" outlined></Button>

```

Copy

## Template [\#](https://primevue.org/confirmpopup/\#template)

Templating allows customizing the message content.

Save

```markup

<ConfirmPopup group="templating">
    <template #message="slotProps">
        <div class="flex flex-col items-center w-full gap-4 border-b border-surface-200 dark:border-surface-700 p-4 mb-4 pb-0">
            <i :class="slotProps.message.icon" class="text-6xl text-primary-500"></i>
            <p>{{ slotProps.message.message }}</p>
        </div>
    </template>
</ConfirmPopup>
<Button @click="showTemplate($event)" label="Save"></Button>

```

Copy

## Headless [\#](https://primevue.org/confirmpopup/\#headless)

Headless mode is enabled by defining a _container_ slot that lets you implement entire confirmation UI instead of the default elements.

Save

```markup

<ConfirmPopup group="headless">
    <template #container="{ message, acceptCallback, rejectCallback }">
        <div class="rounded p-4">
            <span>{{ message.message }}</span>
            <div class="flex items-center gap-2 mt-4">
                <Button label="Save" @click="acceptCallback" size="small"></Button>
                <Button label="Cancel" outlined @click="rejectCallback" severity="secondary" size="small" text></Button>
            </div>
        </div>
    </template>
</ConfirmPopup>
<Button @click="requireConfirmation($event)" label="Save"></Button>

```

Copy

## Accessibility [\#](https://primevue.org/confirmpopup/\#accessibility)

### Screen Reader

ConfirmPopup component uses _alertdialog_ role and since any attribute is passed to the root element you may define attributes like _aria-label_ or _aria-labelledby_ to describe the popup contents. In addition _aria-modal_ is added since focus is kept within the popup.

When _require_ method of the _$confirm_ instance is used and a trigger is passed as a parameter, ConfirmPopup adds _aria-expanded_ state attribute and _aria-controls_ to the trigger so that the relation between the trigger and the dialog is defined.

```markup

<ConfirmPopup id="confirm" aria-label="popup" />

<Button @click="openPopup($event)" label="Confirm" id="confirmButton" :aria-expanded="isVisible" :aria-controls="isVisible ? 'confirm' : null" />

```

Copy

```markup

<script setup>
const confirm = useConfirm();
const isVisible = ref(false);
const openPopup = (event) => {
    confirm.require({
        target: event.currentTarget,
        message: 'Are you sure you want to proceed?',
        header: 'Confirmation',
        onShow: () => {
            isVisible.value = true;
        },
        onHide: () => {
            isVisible.value = false;
        }
    });
}
</script>

```

Copy

### Overlay Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element within the popup. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element within the popup. |
| _escape_ | Closes the popup and moves focus to the trigger. |

### Buttons Keyboard Support

| Key | Function |
| --- | --- |
| _enter_ | Triggers the action, closes the popup and moves focus to the trigger. |
| _space_ | Triggers the action, closes the popup and moves focus to the trigger. |

- Import

- Service

- Basic

- Template

- Headless

- Accessibility


# ConfirmPopup API

API defines helper props, events and others for the PrimeVue ConfirmPopup module.

## ConfirmPopup [\#](https://primevue.org/confirmpopup/\#api.confirmpopup)

ConfirmPopup displays a confirmation overlay displayed relatively to its target.

### Props [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.props)

Defines valid properties in ConfirmPopup component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| group | string | null | Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ConfirmPopupPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.slots)

Defines valid slots in ConfirmPopup component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| message | scope: {<br>message: ConfirmationOptions, // Message of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom message template. |  |
| icon | scope: {<br>class: any, // Style class of the icon template<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| accepticon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| rejecticon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| container | scope: {<br>message: any, // Message of the componentacceptCallback: () â‡’ void, // Accept function of the componentrejectCallback: () â‡’ void, // Reject function of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |

### Interfaces [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces)

Defines the custom interfaces used by the module.

#### ConfirmPopupPassThroughMethodOptions [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces.ConfirmPopupPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ConfirmPopupProps](https://primevue.org/confirmpopup/#api.confirmpopup.interfaces.ConfirmPopupProps) | null | Defines valid properties. |
| state | [ConfirmPopupState](https://primevue.org/confirmpopup/#api.confirmpopup.interfaces.ConfirmPopupState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### ConfirmPopupSharedPassThroughMethodOptions [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces.ConfirmPopupSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [ConfirmPopupProps](https://primevue.org/confirmpopup/#api.confirmpopup.interfaces.ConfirmPopupProps) | null | Defines valid properties. |
| state | [ConfirmPopupState](https://primevue.org/confirmpopup/#api.confirmpopup.interfaces.ConfirmPopupState) | null | Defines current inline state. |

#### ConfirmPopupPassThroughOptions [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces.ConfirmPopupPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [ConfirmPopupPassThroughOptionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| content | [ConfirmPopupPassThroughOptionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| icon | [ConfirmPopupPassThroughOptionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughOptionType) | null | Used to pass attributes to the icon's DOM element. |
| message | [ConfirmPopupPassThroughOptionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughOptionType) | null | Used to pass attributes to the message's DOM element. |
| footer | [ConfirmPopupPassThroughOptionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| pcRejectButton | any | null | Used to pass attributes to the Button component. |
| pcAcceptButton | any | null | Used to pass attributes to the Button component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [ConfirmPopupPassThroughTransitionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughTransitionType) | null | Used to control Vue Transition API. |

#### ConfirmPopupPassThroughAttributes [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces.ConfirmPopupPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### ConfirmPopupState [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces.ConfirmPopupState)

Defines current inline state in ConfirmPopup component.

| name | type | default | description |
| --- | --- | --- | --- |
| visible | boolean | false | Current visible state as a boolean. |
| confirmation | [ConfirmationOptions](https://primevue.org/confirmpopup/#api.options.ConfirmationOptions) | null | Current confirmation message. |

## Types [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.types)

Defines the custom types used by the module.

#### ConfirmPopupPassThroughOptionType [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.types.ConfirmPopupPassThroughOptionType)

| values |
| --- |
| ConfirmPopupPassThroughAttributes \| (options: ConfirmPopupPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### ConfirmPopupPassThroughTransitionType [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.types.ConfirmPopupPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: ConfirmPopupPassThroughMethodOptions) => TransitionProps \| undefined |

#### ConfirmPopupEmits [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.types.ConfirmPopupEmits)

| values |
| --- |
| EmitFn<ConfirmPopupEmitsOptions> |

## ConfirmationService-UseConfirm [\#](https://primevue.org/confirmpopup/\#api.confirmationservice-useconfirm)

### Services [\#](https://primevue.org/confirmpopup/\#api.confirmationservice-useconfirm.services)

Confirmation Service methods.

| name | parameters | returnType | description |
| --- | --- | --- | --- |
| require | options: [ConfirmationOptions](https://primevue.org/confirmpopup/#api.options.ConfirmationOptions) | void | Displays the dialog using the confirmation object options. |
| close |  | void | Hides the dialog without invoking accept or reject callbacks. |

## ConfirmationOptions [\#](https://primevue.org/confirmpopup/\#api.confirmationoptions)

### Options [\#](https://primevue.org/confirmpopup/\#api.options.ConfirmationOptions)

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| target | HTMLElement | null | Element to align the overlay. |  |
| header | string | null | Header text of the dialog. |  |
| message | string | null | Message of the confirmation. |  |
| group | string | null | Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance. |  |
| position | HintedString<"left" \| "right" \| "top" \| "bottom" \| "center" \| "topleft" \| "topright" \| "bottomleft" \| "bottomright"> | center | Position of the dialog. |  |
| icon | string | null | Icon to display next to the message. |  |
| blockScroll | boolean | false | Whether background scroll should be blocked when dialog is visible. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the confirm dialog gets attached.<br>Special keywords are 'body' for document body and 'self' for the element itself. |  |
| modal | boolean | false | Defines if background should be blocked when confirm dialog is displayed. |  |
| accept | Function | null |  |  |
| reject | Function | null |  |  |
| onShow | Function | null |  |  |
| onHide | Function | null |  |  |
| acceptLabel | string | null | Label of the accept button. Defaults to PrimeVue Locale configuration. |  |
| rejectLabel | string | null | Label of the reject button. Defaults to PrimeVue Locale configuration. |  |
| acceptIcon | string | null | Icon of the accept button. |  |
| rejectIcon | string | null | Icon of the reject button. |  |
| acceptClass | string | null | Style class of the accept button. |  |
| rejectClass | string | null | Style class of the reject button. |  |
| defaultFocus | string | null | Element to receive the focus when the dialog gets visible, valid values are "accept" and "reject". |  |
| rejectProps | object | null | Used to pass all properties of the ButtonProps to the reject button inside the component. |  |
| acceptProps | object | null | Used to pass all properties of the ButtonProps to the accept button inside the component. |  |

- ConfirmPopup

  - Props

  - Slots

  - Interfaces

  - Types
- ConfirmationService-UseConfirm

  - Services
- ConfirmationOptions

  - Options

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Textarea Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Textarea

Textarea adds styling and autoResize functionality to standard textarea element.

## Import [\#](https://primevue.org/textarea/\#import)

```javascript

import Textarea from 'primevue/textarea';

```

Copy

## Basic [\#](https://primevue.org/textarea/\#basic)

Textarea is used with the _v-model_ property for two-way value binding.

```markup

<Textarea v-model="value" rows="5" cols="30" />

```

Copy

## Forms [\#](https://primevue.org/textarea/\#forms)

Textarea integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.

Submit

```markup

<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col gap-1">
        <Textarea name="address" rows="5" cols="30" style="resize: none" />
        <Message v-if="$form.address?.invalid" severity="error" size="small" variant="simple">{{ $form.address.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>

```

Copy

## Auto Resize [\#](https://primevue.org/textarea/\#auto-resize)

When _autoResize_ is enabled, textarea grows instead of displaying a scrollbar.

```markup

<Textarea v-model="value" autoResize rows="5" cols="30" />

```

Copy

## Filled [\#](https://primevue.org/textarea/\#filled)

Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.

```markup

<Textarea v-model="value" variant="filled" rows="5" cols="30" />

```

Copy

## Float Label [\#](https://primevue.org/textarea/\#floatlabel)

A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.

Over LabelIn LabelOn Label

```markup

<FloatLabel>
    <Textarea id="over_label" v-model="value1" rows="5" cols="30" style="resize: none" />
    <label for="over_label">Over Label</label>
</FloatLabel>

<FloatLabel variant="in">
    <Textarea id="over_label" v-model="value2" rows="5" cols="30" style="resize: none" />
    <label for="in_label">In Label</label>
</FloatLabel>

<FloatLabel variant="on">
    <Textarea id="over_label" v-model="value3" rows="5" cols="30" style="resize: none" />
    <label for="on_label">On Label</label>
</FloatLabel>

```

Copy

## Ifta Label [\#](https://primevue.org/textarea/\#iftalabel)

IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.

Description

```markup

<IftaLabel>
    <Textarea id="description" v-model="value" rows="5" cols="30" style="resize: none" />
    <label for="description">Description</label>
</IftaLabel>

```

Copy

## Sizes [\#](https://primevue.org/textarea/\#sizes)

Textarea provides _small_ and _large_ sizes as alternatives to the base.

```markup

<Textarea v-model="value1" size="small" placeholder="Small" rows="3" />
<Textarea v-model="value2" placeholder="Normal" rows="3" />
<Textarea v-model="value3" size="large" placeholder="Large" rows="3" />

```

Copy

## Invalid [\#](https://primevue.org/textarea/\#invalid)

Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.

```markup

<Textarea v-model="value" rows="5" cols="30" :invalid="!value" style="resize: none" placeholder="Address" />

```

Copy

## Disabled [\#](https://primevue.org/textarea/\#disabled)

When _disabled_ is present, the element cannot be edited and focused.

```markup

<Textarea v-model="value" rows="5" cols="30" disabled />

```

Copy

## Accessibility [\#](https://primevue.org/textarea/\#accessibility)

### Screen Reader

Textarea component renders a native textarea element that implicitly includes any passed prop. Value to describe the component can either be provided via _label_ tag combined with _id_ prop or using _aria-labelledby_, _aria-label_ props.

```markup

<label for="address1">Address 1</label>
<Textarea id="address1" />

<span id="address2">Address 2</span>
<Textarea aria-labelledby="address2" />

<Textarea aria-label="Address Details"/>

```

Copy

### Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the input. |

- Import

- Basic

- Forms

- Auto Resize

- Filled

- Float Label

- Ifta Label

- Sizes

- Invalid

- Disabled

- Accessibility


# Textarea API

API defines helper props, events and others for the PrimeVue Textarea module.

## Textarea [\#](https://primevue.org/textarea/\#api.textarea)

Textarea is a multi-line text input element.

### Props [\#](https://primevue.org/textarea/\#api.textarea.props)

Defines valid properties in Textarea component. In addition to these, all properties of TextareaHTMLAttributes can be used in this component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | Nullable<string> | null | Value of the component. |  |
| defaultValue | Nullable<string> | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| autoResize | boolean | false | When present, height of textarea changes as being typed. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TextareaPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/textarea/\#api.textarea.emits)

Defines valid emits in Textarea component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| value-change | value: string | void | Emitted when the value changes in uncontrolled mode. |  |

### Interfaces [\#](https://primevue.org/textarea/\#api.textarea.interfaces)

Defines the custom interfaces used by the module.

#### TextareaPassThroughMethodOptions [\#](https://primevue.org/textarea/\#api.textarea.interfaces.TextareaPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TextareaProps](https://primevue.org/textarea/#api.textarea.interfaces.TextareaProps) | null | Defines valid properties. |
| context | [TextareaContext](https://primevue.org/textarea/#api.textarea.interfaces.TextareaContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### TextareaPassThroughOptions [\#](https://primevue.org/textarea/\#api.textarea.interfaces.TextareaPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [TextareaPassThroughOptionType](https://primevue.org/textarea/#api.textarea.types.TextareaPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### TextareaPassThroughAttributes [\#](https://primevue.org/textarea/\#api.textarea.interfaces.TextareaPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### TextareaContext [\#](https://primevue.org/textarea/\#api.textarea.interfaces.TextareaContext)

Defines current options in Textarea component.

| name | type | default | description |
| --- | --- | --- | --- |
| filled | boolean | false | Current filled state of the component as a boolean. |
| disabled | boolean | false | Current disabled state of the component as a boolean. |

## Types [\#](https://primevue.org/textarea/\#api.textarea.types)

Defines the custom types used by the module.

#### TextareaPassThroughOptionType [\#](https://primevue.org/textarea/\#api.textarea.types.TextareaPassThroughOptionType)

| values |
| --- |
| TextareaPassThroughAttributes \| (options: TextareaPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### TextareaEmits [\#](https://primevue.org/textarea/\#api.textarea.types.TextareaEmits)

| values |
| --- |
| EmitFn<TextareaEmitsOptions> |

- Textarea

  - Props

  - Emits

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Card Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Card

Card is a flexible container component.

## Import [\#](https://primevue.org/card/\#import)

```javascript

import Card from 'primevue/card';

```

Copy

## Basic [\#](https://primevue.org/card/\#basic)

A simple Card is created with a _title_ property along with the content as children.

Simple Card

Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!

```markup

<Card>
    <template #title>Simple Card</template>
    <template #content>
        <p class="m-0">
            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque
            quas!
        </p>
    </template>
</Card>

```

Copy

## Advanced [\#](https://primevue.org/card/\#advanced)

Card provides _header_, _title_, _subtitle_, _content_ and _footer_ as the named templates to place content.

![user header](https://primefaces.org/cdn/primevue/images/card-vue.jpg)

Advanced Card

Card subtitle

Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!

CancelSave

```markup

<Card style="width: 25rem; overflow: hidden">
    <template #header>
        <img alt="user header" src="/images/usercard.png" />
    </template>
    <template #title>Advanced Card</template>
    <template #subtitle>Card subtitle</template>
    <template #content>
        <p class="m-0">
            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque
            quas!
        </p>
    </template>
    <template #footer>
        <div class="flex gap-4 mt-1">
            <Button label="Cancel" severity="secondary" outlined class="w-full" />
            <Button label="Save" class="w-full" />
        </div>
    </template>
</Card>

```

Copy

## Accessibility [\#](https://primevue.org/card/\#accessibility)

### Screen Reader

A card can be utilized in many use cases as a result no role is enforced, in fact a role may not be necessary if the card is used for presentational purposes only. Any valid attribute is passed to the container element so if you require to use one of the [landmark](https://www.w3.org/TR/wai-aria/#landmark) roles like _region_, you may use the _role_ property.

```markup

<Card role="region">
    Content
</Card>

```

Copy

### Keyboard Support

Component does not include any interactive elements.

- Import

- Basic

- Advanced

- Accessibility


# Card API

API defines helper props, events and others for the PrimeVue Card module.

## Card [\#](https://primevue.org/card/\#api.card)

Card is a flexible container component.

### Props [\#](https://primevue.org/card/\#api.card.props)

Defines valid properties in Card component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<CardPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/card/\#api.card.slots)

Defines valid slots in Card component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| title |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom title template. |  |
| subtitle |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom subtitle template. |  |
| content |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |

### Interfaces [\#](https://primevue.org/card/\#api.card.interfaces)

Defines the custom interfaces used by the module.

#### CardPassThroughMethodOptions [\#](https://primevue.org/card/\#api.card.interfaces.CardPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [CardProps](https://primevue.org/card/#api.card.interfaces.CardProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### CardPassThroughOptions [\#](https://primevue.org/card/\#api.card.interfaces.CardPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| body | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the body's DOM element. |
| caption | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the caption's DOM element. |
| title | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the title's DOM element. |
| subtitle | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the subtitle's DOM element. |
| content | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| footer | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### CardPassThroughAttributes [\#](https://primevue.org/card/\#api.card.interfaces.CardPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/card/\#api.card.types)

Defines the custom types used by the module.

#### CardPassThroughOptionType [\#](https://primevue.org/card/\#api.card.types.CardPassThroughOptionType)

| values |
| --- |
| CardPassThroughAttributes \| (options: CardPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### CardEmits [\#](https://primevue.org/card/\#api.card.types.CardEmits)

| values |
| --- |
| EmitFn<CardEmitsOptions> |

- Card

  - Props

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## IftaLabel Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# IftaLabel

IftaLabel is used to create infield top aligned labels

## Import [\#](https://primevue.org/iftalabel/\#import)

```javascript

import IftaLabel from 'primevue/iftalabel';

```

Copy

## Basic [\#](https://primevue.org/iftalabel/\#basic)

IftaLabel is used by wrapping the input and its label.

Username

```markup

<IftaLabel>
    <InputText id="username" v-model="value" />
    <label for="username">Username</label>
</IftaLabel>

```

Copy

## Invalid [\#](https://primevue.org/iftalabel/\#invalid)

When the form element is invalid, the label is also highlighted.

Username

```markup

<IftaLabel>
    <InputText id="username" v-model="value" :invalid="!value" />
    <label for="username">Username</label>
</IftaLabel>

```

Copy

## Accessibility [\#](https://primevue.org/iftalabel/\#accessibility)

### Screen Reader

IftaLabel does not require any roles and attributes.

### Keyboard Support

Component does not include any interactive elements.

- Import

- Basic

- Invalid

- Accessibility


# IftaLabel API

API defines helper props, events and others for the PrimeVue IftaLabel module.

## IftaLabel [\#](https://primevue.org/iftalabel/\#api.iftalabel)

IftaLabel visually integrates a label within its form element.

### Props [\#](https://primevue.org/iftalabel/\#api.iftalabel.props)

Defines valid properties in IftaLabel component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<IftaLabelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Interfaces [\#](https://primevue.org/iftalabel/\#api.iftalabel.interfaces)

Defines the custom interfaces used by the module.

#### IftaLabelPassThroughMethodOptions [\#](https://primevue.org/iftalabel/\#api.iftalabel.interfaces.IftaLabelPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [IftaLabelProps](https://primevue.org/iftalabel/#api.iftalabel.interfaces.IftaLabelProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### IftaLabelPassThroughOptions [\#](https://primevue.org/iftalabel/\#api.iftalabel.interfaces.IftaLabelPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [IftaLabelPassThroughOptionType](https://primevue.org/iftalabel/#api.iftalabel.types.IftaLabelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### IftaLabelPassThroughAttributes [\#](https://primevue.org/iftalabel/\#api.iftalabel.interfaces.IftaLabelPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

## Types [\#](https://primevue.org/iftalabel/\#api.iftalabel.types)

Defines the custom types used by the module.

#### IftaLabelPassThroughOptionType [\#](https://primevue.org/iftalabel/\#api.iftalabel.types.IftaLabelPassThroughOptionType)

| values |
| --- |
| IftaLabelPassThroughAttributes \| (options: IftaLabelPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### IftaLabelPassThroughTransitionType [\#](https://primevue.org/iftalabel/\#api.iftalabel.types.IftaLabelPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: IftaLabelPassThroughMethodOptions) => TransitionProps \| undefined |

#### IftaLabelEmits [\#](https://primevue.org/iftalabel/\#api.iftalabel.types.IftaLabelEmits)

| values |
| --- |
| EmitFn<IftaLabelEmitsOptions> |

- IftaLabel

  - Props

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Galleria Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Galleria

Galleria is a content gallery component.

## Import [\#](https://primevue.org/galleria/\#import)

```javascript

import Galleria from 'primevue/galleria';

```

Copy

## Basic [\#](https://primevue.org/galleria/\#basic)

Galleria requires a _value_ as a collection of images, _item_ template for the higher resolution image and _thumbnail_ template to display as a thumbnail.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)

![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)

![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)

![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)

![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)

![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)

![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)

![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)

![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)

![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)

![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)

![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)

![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)

![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)

![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)

```markup

<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" containerStyle="max-width: 640px">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" />
    </template>
</Galleria>

```

Copy

## Controlled [\#](https://primevue.org/galleria/\#controlled)

Galleria can be controlled programmatically using a binding to _activeIndex_.

![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3.jpg)

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)

![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)

![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)

![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)

![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)

![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)

![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)

![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)

![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)

![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)

![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)

![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)

![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)

![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)

![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)

```markup

<div>
    <Button icon="pi pi-minus" @click="prev" />
    <Button icon="pi pi-plus" @click="next" severity="secondary" class="ml-2" />
</div>

<Galleria v-model:activeIndex="activeIndex" :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" containerStyle="max-width: 640px">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" />
    </template>
</Galleria>

```

Copy

## Indicator [\#](https://primevue.org/galleria/\#indicator)

Indicators allow quick navigation between the items.

### Click Event [\#](https://primevue.org/galleria/\#indicatorbasic)

Indicators are displayed at the bottom by enabling _showIndicators_ property and interacted with the click event by default.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

```markup

<Galleria :value="images" :numVisible="5" containerStyle="max-width: 640px"
    :showThumbnails="false" :showIndicators="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
</Galleria>

```

Copy

### Hover Event [\#](https://primevue.org/galleria/\#indicatorhoverevent)

Indicators can be activated on hover instead of click if _changeItemOnIndicatorHover_ is added.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

```markup

<Galleria :value="images" :numVisible="5" containerStyle="max-width: 640px"
    :showThumbnails="false" :showIndicators="true" :changeItemOnIndicatorHover="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
</Galleria>

```

Copy

### Position [\#](https://primevue.org/galleria/\#indicatorposition)

Indicators can be placed at four different sides using the _indicatorsPosition_ property. In addition, enabling _showIndicatorsOnItem_ moves the indicators inside the image section.

Bottom

Top

Left

Right

Inside

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

```markup

<Galleria :value="images" :numVisible="5" containerStyle="max-width: 640px" :showThumbnails="false"
    :showIndicators="true" :changeItemOnIndicatorHover="true" :showIndicatorsOnItem="inside" :indicatorsPosition="position">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
</Galleria>

```

Copy

### Template [\#](https://primevue.org/galleria/\#indicatortemplate)

Indicator content can be customized with the _indicator_ property that takes an index as a parameter and expects content.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

- 1
- 2
- 3
- 4
- 5
- 6
- 7
- 8
- 9
- 10
- 11
- 12
- 13
- 14
- 15

```markup

<Galleria :value="images" :numVisible="5" containerStyle="max-width: 640px" :showThumbnails="false"
    :showIndicators="true" :changeItemOnIndicatorHover="true" :showIndicatorsOnItem="true" indicatorsPosition="left">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #indicator="{ index }">
        <span style="color: '#ffffff', cursor: pointer">{{ index + 1 }}</span>
    </template>
</Galleria>

```

Copy

## Thumbnail [\#](https://primevue.org/galleria/\#thumbnail)

Thumbnails represent a smaller version of the actual content.

Bottom

Top

Left

Right

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)

![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)

![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)

![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)

![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)

![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)

![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)

![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)

![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)

![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)

![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)

![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)

![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)

![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)

![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)

```markup

<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :thumbnailsPosition="position" containerStyle="max-width: 640px">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <div class="grid gap-4 justify-center">
            <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block;" />
        </div>
    </template>
</Galleria>

```

Copy

## Responsive [\#](https://primevue.org/galleria/\#responsive)

Settings per screen size is defined via the _responsiveOptions_ property.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)

![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)

![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)

![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)

![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)

![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)

![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)

![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)

![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)

![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)

![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)

![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)

![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)

![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)

![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)

```markup

<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :circular="true" containerStyle="max-width: 640px">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
</Galleria>

```

Copy

## Full Screen [\#](https://primevue.org/galleria/\#fullscreen)

In fullscreen mode content covers the whole page over a modal layer.

### With Thumbnails [\#](https://primevue.org/galleria/\#fullscreenwiththumbnail)

Full screen mode is enabled by adding _fullScreen_ property and and visibility is controlled with a binding to _visible_ property.

Show

```markup

<Galleria v-model:visible="displayBasic" :value="images" :responsiveOptions="responsiveOptions" :numVisible="9" containerStyle="max-width: 50%" :circular="true" :fullScreen="true" :showItemNavigators="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
</Galleria>

<Button label="Show" icon="pi pi-external-link" @click="displayBasic = true" />

```

Copy

### Without Thumbnails [\#](https://primevue.org/galleria/\#fullscreenwithoutthumnails)

Thumbnails can also be hidden in full screen mode.

Show

```markup

<Galleria v-model:visible="displayBasic" :value="images" :responsiveOptions="responsiveOptions" :numVisible="9" containerStyle="max-width: 50%" :circular="true" :fullScreen="true" :showItemNavigators="true"  :showThumbnails="false">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
</Galleria>

<Button label="Show" icon="pi pi-external-link" @click="displayBasic = true" />

```

Copy

### Custom Content [\#](https://primevue.org/galleria/\#fullscreencustom)

Using _activeIndex_, Galleria is displayed with a specific initial image.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)

![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)

![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)

![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)

![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)

![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)

![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)

![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)

![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)

![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)

![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)

![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)

![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)

![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)

![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)

```markup

<Galleria v-model:activeIndex="activeIndex" v-model:visible="displayCustom" :value="images" :responsiveOptions="responsiveOptions" :numVisible="7"
    containerStyle="max-width: 850px" :circular="true" :fullScreen="true" :showItemNavigators="true" :showThumbnails="false">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
</Galleria>

```

Copy

## Navigator [\#](https://primevue.org/galleria/\#navigator)

Navigators are used to move back and forth between the images.

### With Thumbnails [\#](https://primevue.org/galleria/\#itemthumbnails)

Add _showItemNavigators_ to display navigator elements and the left and right side.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)

![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)

![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)

![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)

![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)

![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)

![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)

![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)

![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)

![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)

![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)

![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)

![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)

![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)

![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)

```markup

<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :circular="true" containerStyle="max-width: 640px"
    :showItemNavigators="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block;" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block;" />
    </template>
</Galleria>

```

Copy

### Without Thumbnails [\#](https://primevue.org/galleria/\#itemwithouthumbnails)

Simple example with navigators only.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

```markup

<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :circular="true" containerStyle="max-width: 640px"
    :showItemNavigators="true" :showThumbnails="false">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block;" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block;" />
    </template>
</Galleria>

```

Copy

### Display on Hover [\#](https://primevue.org/galleria/\#itemhover)

Navigators are displayed on hover only if _showItemNavigatorsOnHover_ is enabled.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)

![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)

![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)

![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)

![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)

![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)

![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)

![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)

![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)

![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)

![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)

![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)

![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)

![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)

![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)

```markup

<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :circular="true" containerStyle="max-width: 640px" :showItemNavigators="true" :showItemNavigatorsOnHover="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
</Galleria>

```

Copy

### With Indicators [\#](https://primevue.org/galleria/\#indicators)

Navigators and Indicators can be combined as well.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

```markup

<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :circular="true" containerStyle="max-width: 640px"
    :showItemNavigators="true" :showThumbnails="false" :showItemNavigatorsOnHover="true" :showIndicators="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block;" />
    </template>
    <template #thumbnail="slotProps">
            <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block;" />
    </template>
</Galleria>

```

Copy

## AutoPlay [\#](https://primevue.org/galleria/\#autoplay)

A slideshow implementation is defined by adding _circular_ and _autoPlay_ properties.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)

![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)

![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)

![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)

![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)

![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)

![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)

![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)

![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)

![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)

![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)

![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)

![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)

![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)

![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)

```markup

<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" containerStyle="max-width: 640px"
    :circular="true" :autoPlay="true" :transitionInterval="2000">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
</Galleria>

```

Copy

## Caption [\#](https://primevue.org/galleria/\#caption)

Description of an image is specified with the _caption_ property that takes the displayed object and returns content.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

Title 1

Description for Image 1

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)

![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)

![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)

![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)

![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)

![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)

![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)

![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)

![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)

![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)

![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)

![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)

![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)

![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)

![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)

```markup

<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" containerStyle="max-width: 640px">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
    <template #caption="slotProps">
        <div class="text-xl mb-2 font-bold">{{ slotProps.item.title }}</div>
        <p class="text-white">{{ slotProps.item.alt }}</p>
    </template>
</Galleria>

```

Copy

## Advanced [\#](https://primevue.org/galleria/\#advanced)

Advanced Galleria implementation with a custom UI.

![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)

1/15Title 1Description for Image 1

```markup

<Galleria
    ref="galleria"
    v-model:activeIndex="activeIndex"
    :value="images"
    :numVisible="5"
    containerStyle="max-width: 640px"
    :showThumbnails="showThumbnails"
    :showItemNavigators="true"
    :showItemNavigatorsOnHover="true"
    :circular="true"
    :autoPlay="isAutoPlay"
    :transitionInterval="3000"
    :responsiveOptions="responsiveOptions"
    :pt="{
        root: {
            class: [{ 'flex flex-col': fullScreen }]
        },
        content: {
            class: ['relative', { 'flex-1 justify-center': fullScreen }]
        },
        thumbnails: 'absolute w-full left-0 bottom-0'
    }"
>
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" :style="[{ width: !fullScreen ? '100%' : '', display: !fullScreen ? 'block' : '' }]" />
    </template>
    <template #thumbnail="slotProps">
        <div class="grid gap-4 justify-center">
            <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
        </div>
    </template>
    <template #footer>
        <div class="flex items-stretch bg-surface-950 text-white h-10">
            <button type="button" @click="onThumbnailButtonClick" class="bg-transparent border-none rounded-none hover:bg-white/10 text-white inline-flex justify-center items-center cursor-pointer px-3">
                <i class="pi pi-th-large"></i>
            </button>
            <button type="button" @click="toggleAutoSlide" class="bg-transparent border-none rounded-none hover:bg-white/10 text-white inline-flex justify-center items-center cursor-pointer px-3"><i :class="slideButtonIcon"></i></button>
            <span v-if="images" class="flex items-center gap-4 ml-3">
                <span class="text-sm">{{ activeIndex + 1 }}/{{ images.length }}</span>
                <span class="font-bold text-sm">{{ images[activeIndex].title }}</span>
                <span class="text-sm">{{ images[activeIndex].alt }}</span>
            </span>
            <button type="button" @click="toggleFullScreen" class="bg-transparent border-none rounded-none hover:bg-white/10 text-white inline-flex justify-center items-center cursor-pointer px-3 ml-auto">
                <i :class="fullScreenIcon"></i>
            </button>
        </div>
    </template>
</Galleria>

```

Copy

## Accessibility [\#](https://primevue.org/galleria/\#accessibility)

### Screen Reader

Galleria uses _region_ role and since any attribute is passed to the main container element, attributes such as _aria-label_ and _aria-roledescription_ can be used as well. The slides container has _aria-live_ attribute set as "polite" if galleria is not in autoplay mode, otherwise "off" would be the value in autoplay.

A slide has a _group_ role with an aria-label that refers to the _aria.slideNumber_ property of the [locale](https://primevue.org/configuration/#locale) API. Similarly _aria.slide_ is used as the _aria-roledescription_ of the item. Inactive slides are hidden from the readers with _aria-hidden_.

Next and Previous navigators are button elements with _aria-label_ attributes referring to the _aria.prevPageLabel_ and _aria.nextPageLabel_ properties of the [locale](https://primevue.org/configuration/#locale) API by default respectively, you may still use your own aria roles and attributes as any valid attribute is passed to the button elements implicitly by using _nextButtonProps_ and _prevButtonProps_.

Quick navigation elements and thumnbails follow the tab pattern. They are placed inside an element with a _tablist_ role whereas each item has a _tab_ role with _aria-selected_ and _aria-controls_ attributes. The _aria-label_ attribute of a quick navigation item refers to the _aria.pageLabel_ of the [locale](https://primevue.org/configuration/#locale) API. Current page is marked with _aria-current_.

In full screen mode, modal element uses _dialog_ role with _aria-modal_ enabled. The close button retrieves _aria-label_ from the _aria.close_ property of the [locale](https://primevue.org/configuration/#locale) API.

### Next/Prev Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus through interactive elements in the carousel. |
| _enter_ | Activates navigation. |
| _space_ | Activates navigation. |

### Quick Navigation Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the active slide link. |
| _enter_ | Activates the focused slide link. |
| _space_ | Activates the focused slide link. |
| _right arrow_ | Moves focus to the next slide link. |
| _left arrow_ | Moves focus to the previous slide link. |
| _home_ | Moves focus to the first slide link. |
| _end_ | Moves focus to the last slide link. |

- Import

- Basic

- Controlled

- Indicator

  - Click Event

  - Hover Event

  - Position

  - Template
- Thumbnail

- Responsive

- Full Screen

  - With Thumbnails

  - Without Thumbnails

  - Custom Content
- Navigator

  - With Thumbnails

  - Without Thumbnails

  - Display on Hover

  - With Indicators
- AutoPlay

- Caption

- Advanced

- Accessibility


# Galleria API

API defines helper props, events and others for the PrimeVue Galleria module.

## Galleria [\#](https://primevue.org/galleria/\#api.galleria)

Galleria is an advanced content gallery component.

### Props [\#](https://primevue.org/galleria/\#api.galleria.props)

Defines valid properties in Galleria component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| id | string | null | Unique identifier of the element. |  |
| value | any\[\] | null | An array of objects to display. |  |
| activeIndex | number | 0 | Index of the first item. |  |
| fullScreen | boolean | false | Whether to display the component on fullscreen. |  |
| visible | boolean | false | Specifies the visibility of the mask on fullscreen mode. |  |
| numVisible | number | 3 | Number of items per page. |  |
| responsiveOptions | [GalleriaResponsiveOptions\[\]](https://primevue.org/galleria/#api.galleria.interfaces.GalleriaResponsiveOptions[]) | null | An array of options for responsive design. |  |
| showItemNavigators | boolean | false | Whether to display navigation buttons in item section. |  |
| showThumbnailNavigators | boolean | true | Whether to display navigation buttons in thumbnail container. |  |
| showItemNavigatorsOnHover | boolean | false | Whether to display navigation buttons on item hover. |  |
| changeItemOnIndicatorHover | boolean | false | When enabled, item is changed on indicator hover. |  |
| circular | boolean | false | Defines if scrolling would be infinite. |  |
| autoPlay | boolean | false | Items are displayed with a slideshow in autoPlay mode. |  |
| transitionInterval | number | 4000 | Time in milliseconds to scroll items. |  |
| showThumbnails | boolean | true | Whether to display thumbnail container. |  |
| thumbnailsPosition | HintedString<"left" \| "right" \| "top" \| "bottom"> | bottom | Position of thumbnails. |  |
| verticalThumbnailViewPortHeight | string | 300px | Height of the viewport in vertical thumbnail. |  |
| showIndicators | boolean | false | Whether to display indicator container. |  |
| showIndicatorsOnItem | boolean | false | When enabled, indicator container is displayed on item container. |  |
| indicatorsPosition | HintedString<"left" \| "right" \| "top" \| "bottom"> | bottom | Position of indicators. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| maskClass | string | null | Style class of the mask on fullscreen mode. |  |
| containerStyle | any | null | Inline style of the component on fullscreen mode. Otherwise, the 'style' property can be used. |  |
| containerClass | any | null | Style class of the component on fullscreen mode. Otherwise, the 'class' property can be used. |  |
| containerProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the container element on fullscreen mode. |  |
| prevButtonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the previous navigation button. |  |
| nextButtonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the next navigation button. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaRoledescription | string | null | Defines a string value that description for the role of the component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<GalleriaPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/galleria/\#api.galleria.emits)

Defines valid emits in Galleria component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:activeIndex | value: number | void | Emitted when the active index changes. |  |
| update:visible | value: boolean | void | Emitted when the visible changes. |  |

### Slots [\#](https://primevue.org/galleria/\#api.galleria.slots)

Defines valid slots in Galleria slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| item | scope: {<br>item: any, // Item instance<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item template. |  |
| caption | scope: {<br>item: any, // Item instance<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom caption template. |  |
| indicator | scope: {<br>index: number, // Index of the indicator itemactiveIndex: number, // Current active item index as a number.tabindex: number, // Index of the element in tabbing order.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom indicator template. |  |
| thumbnail | scope: {<br>item: any, // Item instance<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom thumbnail template. |  |
| closeicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom close icon template. |  |
| previousitemicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom navigator previous item icon template. |  |
| nextitemicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom navigator next item icon template. |  |
| previousthumbnailicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom thumbnail previous icon template. |  |
| nextthumbnailicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom thumbnail next item template. |  |

### Interfaces [\#](https://primevue.org/galleria/\#api.galleria.interfaces)

Defines the custom interfaces used by the module.

#### GalleriaPassThroughMethodOptions [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [GalleriaProps](https://primevue.org/galleria/#api.galleria.interfaces.GalleriaProps) | null | Defines valid properties. |
| state | [GalleriaState](https://primevue.org/galleria/#api.galleria.interfaces.GalleriaState) | null | Defines current inline state. |
| context | [GalleriaContext](https://primevue.org/galleria/#api.galleria.interfaces.GalleriaContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### GalleriaResponsiveOptions [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaResponsiveOptions)

| name | type | default | description |
| --- | --- | --- | --- |
| breakpoint | string | null | Breakpoint for responsive mode. Exp; |
| numVisible | number | null | The number of visible items on breakpoint. |

#### GalleriaPassThroughOptions [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| closeButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the close button's DOM element. |
| closeIcon | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the close icon's DOM element. |
| header | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| content | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| footer | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| itemsContainer | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the item container's DOM element. |
| items | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the items' DOM element. |
| prevButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the previous item button's DOM element. |
| prevIcon | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the previous item icon's DOM element. |
| item | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| nextButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the next item button's DOM element. |
| nextIcon | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the next item icon's DOM element. |
| caption | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the caption's DOM element. |
| indicatorList | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the indicator list's DOM element. |
| indicator | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the indicator's DOM element. |
| indicatorButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the indicator button's DOM element. |
| thumbnails | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnails' DOM element. |
| thumbnailContent | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnail content's DOM element. |
| thumbnailPrevButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the previous thumbnail button's DOM element. |
| thumbnailPrevIcon | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the previous thumbnail icon's DOM element. |
| thumbnailsViewport | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnails viewport's DOM element. |
| thumbnailItems | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnail items' DOM element. |
| thumbnailItem | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnail item's DOM element. |
| thumbnail | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnail's DOM element. |
| thumbnailNextButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the next thumbnail button's DOM element. |
| thumbnailNextIcon | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the next thumbnail icon's DOM element. |
| mask | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [GalleriaPassThroughTransitionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughTransitionType) | null | Used to control Vue Transition API. |

#### GalleriaPassThroughAttributes [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### GalleriaState [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaState)

Defines current inline state in Galleria component.

| name | type | default | description |
| --- | --- | --- | --- |
| containerVisible | boolean | false | Current container visible state as a boolean. |
| id | string | null | Style id of the component. |
| activeIndex | number | 0 | Index of the first item as a number. |
| numVisible | number | 3 | Number of items per page as a number. |
| slideShowActive | boolean | false | Current slide active state as a boolean. |
| d\_numVisible | number | 3 | Number of items per page as a number. |
| d\_oldNumVisible | number | 3 | Old number of items per page as a number. |
| d\_activeIndex | number | 0 | Current active item index as a number. |
| d\_oldActiveItemIndex | number | 0 | The previous active item index as a number. |
| page | number | 0 | Index of the first item. |
| totalShiftedItems | number | 0 | Total shifted items' count as a number. |

#### GalleriaContext [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaContext)

Defines current inline options in Galleria component.

| name | type | default | description |
| --- | --- | --- | --- |
| highlighted | boolean | false | Current highlighted state of the indicator as a boolean. |

## Types [\#](https://primevue.org/galleria/\#api.galleria.types)

Defines the custom types used by the module.

#### GalleriaPassThroughOptionType [\#](https://primevue.org/galleria/\#api.galleria.types.GalleriaPassThroughOptionType)

| values |
| --- |
| GalleriaPassThroughAttributes \| (options: GalleriaPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### GalleriaPassThroughTransitionType [\#](https://primevue.org/galleria/\#api.galleria.types.GalleriaPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: GalleriaPassThroughMethodOptions) => TransitionProps \| undefined |

#### GalleriaEmits [\#](https://primevue.org/galleria/\#api.galleria.types.GalleriaEmits)

| values |
| --- |
| EmitFn<GalleriaEmitsOptions> |

- Galleria

  - Props

  - Emits

  - Slots

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Panel Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Panel

Panel is a grouping component providing with content toggle feature.

## Import [\#](https://primevue.org/panel/\#import)

```javascript

import Panel from 'primevue/panel';

```

Copy

## Basic [\#](https://primevue.org/panel/\#basic)

A simple Panel is created with a _header_ property along with the content as children.

Header

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

```markup

<Panel header="Header">
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Panel>

```

Copy

## Toggleable [\#](https://primevue.org/panel/\#toggleable)

Content of the panel can be expanded and collapsed using _toggleable_ option.

Header

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

```markup

<Panel header="Header" toggleable>
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Panel>

```

Copy

## Template [\#](https://primevue.org/panel/\#template)

Header, icons and footer sections of the panel are customizable via templating.

![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)

Amy Elsner

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Updated 2 hours ago

```markup

<Panel toggleable>
    <template #header>
        <div class="flex items-center gap-2">
            <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" shape="circle" />
            <span class="font-bold">Amy Elsner</span>
        </div>
    </template>
    <template #footer>
        <div class="flex flex-wrap items-center justify-between gap-4">
            <div class="flex items-center gap-2">
                <Button icon="pi pi-user" rounded text></Button>
                <Button icon="pi pi-bookmark" severity="secondary" rounded text></Button>
            </div>
            <span class="text-surface-500 dark:text-surface-400">Updated 2 hours ago</span>
        </div>
    </template>
    <template #icons>
        <Button icon="pi pi-cog" severity="secondary" rounded text @click="toggle" />
        <Menu ref="menu" id="config_menu" :model="items" popup />
    </template>
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Panel>

```

Copy

## Accessibility [\#](https://primevue.org/panel/\#accessibility)

### Screen Reader

Toggleable panels use a content toggle button at the header that has _aria-controls_ to define the id of the content section along with _aria-expanded_ for the visibility state. The value to read the button defaults to the value of the _header_ property and can be customized by defining an _aria-label_ or _aria-labelledby_ via the _toggleButtonProps_ property.

The content uses _region_, defines an id that matches the _aria-controls_ of the content toggle button and _aria-labelledby_ referring to the id of the header.

### Content Toggle Button Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element in the page tab sequence. |
| _enter_ | Toggles the visibility of the content. |
| _space_ | Toggles the visibility of the content. |

- Import

- Basic

- Toggleable

- Template

- Accessibility


# Panel API

API defines helper props, events and others for the PrimeVue Panel module.

## Panel [\#](https://primevue.org/panel/\#api.panel)

Panel is a container with the optional content toggle feature.

### Props [\#](https://primevue.org/panel/\#api.panel.props)

Defines valid properties in Panel component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| header | string | null | Header text of the panel. |  |
| toggleable | boolean | false | Defines if content of panel can be expanded and collapsed. |  |
| collapsed | boolean | false | Defines the initial state of panel content. |  |
| toggleButtonProps | object | null | Used to pass the custom value to read for the button inside the component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<PanelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/panel/\#api.panel.emits)

Defines valid emits in Panel component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:collapsed | value: boolean | void | Emitted when the collapsed changes. |  |
| toggle | event: [PanelToggleEvent](https://primevue.org/panel/#api.panel.events.PanelToggleEvent) | void | Callback to invoke when a tab toggle. |  |

### Slots [\#](https://primevue.org/panel/\#api.panel.slots)

Defines valid slots in Panel slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| header | scope: {<br>id: string, // Current id state as a stringclass: string, // Style class of the icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| icons |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icons template. |  |
| togglebutton | scope: {<br>collapsed: boolean, // Collapsed state as a booleantoggleCallback: (event: Event) â‡’ void, // Toggle function.keydownCallback: (event: Event) â‡’ void, // Keydown function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom toggle button template of panel. |  |
| togglericon | scope: {<br>collapsed: boolean, // Collapsed state as a boolean<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| toggleicon | scope: {<br>collapsed: boolean, // Collapsed state as a boolean<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom toggle icon template of panel. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |

### Events [\#](https://primevue.org/panel/\#api.panel.events)

Defines the custom events used by the component's emit.

#### PanelToggleEvent [\#](https://primevue.org/panel/\#api.panel.events.PanelToggleEvent)

Custom toggle event.

See [toggle](https://primevue.org/panel/#api.panel.emitsoptions.toggle)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| value | boolean | Collapsed state as a boolean |

### Interfaces [\#](https://primevue.org/panel/\#api.panel.interfaces)

Defines the custom interfaces used by the module.

#### PanelPassThroughMethodOptions [\#](https://primevue.org/panel/\#api.panel.interfaces.PanelPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [PanelProps](https://primevue.org/panel/#api.panel.interfaces.PanelProps) | null | Defines valid properties. |
| state | [PanelState](https://primevue.org/panel/#api.panel.interfaces.PanelState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### PanelSharedPassThroughMethodOptions [\#](https://primevue.org/panel/\#api.panel.interfaces.PanelSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [PanelProps](https://primevue.org/panel/#api.panel.interfaces.PanelProps) | null | Defines valid properties. |
| state | [PanelState](https://primevue.org/panel/#api.panel.interfaces.PanelState) | null | Defines current inline state. |

#### PanelPassThroughOptions [\#](https://primevue.org/panel/\#api.panel.interfaces.PanelPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| title | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the title's DOM element. |
| headerActions | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the header actions' DOM element. |
| pcToggleButton | any | null | Used to pass attributes to the toggle button button's DOM element. |
| contentContainer | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the content container's DOM element. |
| content | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| footer | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| transition | [PanelPassThroughTransitionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughTransitionType) | null | Used to control Vue Transition API. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### PanelPassThroughAttributes [\#](https://primevue.org/panel/\#api.panel.interfaces.PanelPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### PanelState [\#](https://primevue.org/panel/\#api.panel.interfaces.PanelState)

Defines current inline state in Panel component.

| name | type | default | description |
| --- | --- | --- | --- |
| d\_collapsed | boolean | false | Current collapsed state as a boolean. |

## Types [\#](https://primevue.org/panel/\#api.panel.types)

Defines the custom types used by the module.

#### PanelPassThroughOptionType [\#](https://primevue.org/panel/\#api.panel.types.PanelPassThroughOptionType)

| values |
| --- |
| PanelPassThroughAttributes \| (options: PanelPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### PanelPassThroughTransitionType [\#](https://primevue.org/panel/\#api.panel.types.PanelPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: PanelPassThroughMethodOptions) => TransitionProps \| undefined |

#### PanelEmits [\#](https://primevue.org/panel/\#api.panel.types.PanelEmits)

| values |
| --- |
| EmitFn<PanelEmitsOptions> |

- Panel

  - Props

  - Emits

  - Slots

  - Events

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Icons Library
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

# Icons

[PrimeIcons](https://github.com/primefaces/primeicons) is the default icon library of PrimeVue with over 250 open source icons developed by PrimeTek. PrimeIcons library is optional as PrimeVue components can use any icon with templating.

## Download [\#](https://primevue.org/icons/\#download)

PrimeIcons is available at npm, run the following command to download it to your project.

```javascript

npm install primeicons

```

Copy

## Import [\#](https://primevue.org/icons/\#import)

CSS file of the icon library needs to be imported in _styles.scss_ of your application.

```javascript

import 'primeicons/primeicons.css'

```

Copy

## Figma [\#](https://primevue.org/icons/\#figma)

PrimeIcons library is now available on [Figma Community](https://www.figma.com/community/file/1354343849355792252/primeicons). By adding them as a library, you can easily use these icons in your designs.

## Basic [\#](https://primevue.org/icons/\#basic)

PrimeIcons use the _pi pi-{icon}_ syntax such as _pi pi-check_. A standalone icon can be displayed using an element such as _i_ or _span_

```javascript

<i class="pi pi-check"></i>
<i class="pi pi-times"></i>
<span class="pi pi-search"></span>
<span class="pi pi-user"></span>

```

Copy

## Size [\#](https://primevue.org/icons/\#size)

Size of an icon is controlled with the font-size property of the element.

```javascript

<i class="pi pi-check" style="font-size: 1rem"></i>
<i class="pi pi-times" style="font-size: 1.5rem"></i>
<i class="pi pi-search" style="font-size: 2rem"></i>
<i class="pi pi-user" style="font-size: 2.5rem"></i>

```

Copy

## Color [\#](https://primevue.org/icons/\#color)

Icon color is defined with the _color_ property which is inherited from parent by default.

```javascript

<i class="pi pi-check" style="color: slateblue"></i>
<i class="pi pi-times" style="color: green"></i>
<i class="pi pi-search" style="color: 'var(--p-primary-color)'"></i>
<i class="pi pi-user" style="color: #708090"></i>

```

Copy

## Spin [\#](https://primevue.org/icons/\#spin)

Special _pi-spin_ class applies infinite rotation to an icon.

```javascript

<i class="pi pi-spin pi-spinner" style="font-size: 2rem"></i>
<i class="pi pi-spin pi-cog" style="font-size: 2rem"></i>

```

Copy

## Constants [\#](https://primevue.org/icons/\#constants)

Constants API is available to reference icons easily when used programmatically.

- File
- New

- Open


```javascript

<template>
    <div class="card flex justify-center">
        <Menu :model="items" />
    </div>
</template>

<script>
import { PrimeIcons } from '@primevue/core/api';

export default {
    data() {
        return {
            items: [\
                {\
                    label: 'File',\
                    items: [\
                        { label: 'New', icon: PrimeIcons.PLUS },\
                        { label: 'Open', icon: PrimeIcons.DOWNLOAD }\
                    ]\
                }\
            ]
        };
    }
};
</script>

```

Copy

## List [\#](https://primevue.org/icons/\#list)

Here is the full list of PrimeIcons. More icons will be added periodically and you may also [request new icons](https://github.com/primefaces/primeicons/issues) at the issue tracker.

pi-address-book

pi-align-center

pi-align-justify

pi-align-left

pi-align-right

pi-amazon

pi-android

pi-angle-double-down

pi-angle-double-left

pi-angle-double-right

pi-angle-double-up

pi-angle-down

pi-angle-left

pi-angle-right

pi-angle-up

pi-apple

pi-arrow-circle-down

pi-arrow-circle-left

pi-arrow-circle-right

pi-arrow-circle-up

pi-arrow-down

pi-arrow-down-left

pi-arrow-down-left-and-arrow-up-right-to-center

pi-arrow-down-right

pi-arrow-left

pi-arrow-right

pi-arrow-right-arrow-left

pi-arrow-up

pi-arrow-up-left

pi-arrow-up-right

pi-arrow-up-right-and-arrow-down-left-from-center

pi-arrows-alt

pi-arrows-h

pi-arrows-v

pi-asterisk

pi-at

pi-backward

pi-ban

pi-barcode

pi-bars

pi-bell

pi-bell-slash

pi-bitcoin

pi-bolt

pi-book

pi-bookmark

pi-bookmark-fill

pi-box

pi-briefcase

pi-building

pi-building-columns

pi-bullseye

pi-calculator

pi-calendar

pi-calendar-clock

pi-calendar-minus

pi-calendar-plus

pi-calendar-times

pi-camera

pi-car

pi-caret-down

pi-caret-left

pi-caret-right

pi-caret-up

pi-cart-arrow-down

pi-cart-minus

pi-cart-plus

pi-chart-bar

pi-chart-line

pi-chart-pie

pi-chart-scatter

pi-check

pi-check-circle

pi-check-square

pi-chevron-circle-down

pi-chevron-circle-left

pi-chevron-circle-right

pi-chevron-circle-up

pi-chevron-down

pi-chevron-left

pi-chevron-right

pi-chevron-up

pi-circle

pi-circle-fill

pi-clipboard

pi-clock

pi-clone

pi-cloud

pi-cloud-download

pi-cloud-upload

pi-code

pi-cog

pi-comment

pi-comments

pi-compass

pi-copy

pi-credit-card

pi-crown

pi-database

pi-delete-left

pi-desktop

pi-directions

pi-directions-alt

pi-discord

pi-dollar

pi-download

pi-eject

pi-ellipsis-h

pi-ellipsis-v

pi-envelope

pi-equals

pi-eraser

pi-ethereum

pi-euro

pi-exclamation-circle

pi-exclamation-triangle

pi-expand

pi-external-link

pi-eye

pi-eye-slash

pi-face-smile

pi-facebook

pi-fast-backward

pi-fast-forward

pi-file

pi-file-arrow-up

pi-file-check

pi-file-edit

pi-file-excel

pi-file-export

pi-file-import

pi-file-pdf

pi-file-plus

pi-file-word

pi-filter

pi-filter-fill

pi-filter-slash

pi-flag

pi-flag-fill

pi-folder

pi-folder-open

pi-folder-plus

pi-forward

pi-gauge

pi-gift

pi-github

pi-globe

pi-google

pi-graduation-cap

pi-hammer

pi-hashtag

pi-headphones

pi-heart

pi-heart-fill

pi-history

pi-home

pi-hourglass

pi-id-card

pi-image

pi-images

pi-inbox

pi-indian-rupee

pi-info

pi-info-circle

pi-instagram

pi-key

pi-language

pi-lightbulb

pi-link

pi-linkedin

pi-list

pi-list-check

pi-lock

pi-lock-open

pi-map

pi-map-marker

pi-mars

pi-megaphone

pi-microchip

pi-microchip-ai

pi-microphone

pi-microsoft

pi-minus

pi-minus-circle

pi-mobile

pi-money-bill

pi-moon

pi-objects-column

pi-palette

pi-paperclip

pi-pause

pi-pause-circle

pi-paypal

pi-pen-to-square

pi-pencil

pi-percentage

pi-phone

pi-pinterest

pi-play

pi-play-circle

pi-plus

pi-plus-circle

pi-pound

pi-power-off

pi-prime

pi-print

pi-qrcode

pi-question

pi-question-circle

pi-receipt

pi-reddit

pi-refresh

pi-replay

pi-reply

pi-save

pi-search

pi-search-minus

pi-search-plus

pi-send

pi-server

pi-share-alt

pi-shield

pi-shop

pi-shopping-bag

pi-shopping-cart

pi-sign-in

pi-sign-out

pi-sitemap

pi-slack

pi-sliders-h

pi-sliders-v

pi-sort

pi-sort-alpha-down

pi-sort-alpha-down-alt

pi-sort-alpha-up

pi-sort-alpha-up-alt

pi-sort-alt

pi-sort-alt-slash

pi-sort-amount-down

pi-sort-amount-down-alt

pi-sort-amount-up

pi-sort-amount-up-alt

pi-sort-down

pi-sort-down-fill

pi-sort-numeric-down

pi-sort-numeric-down-alt

pi-sort-numeric-up

pi-sort-numeric-up-alt

pi-sort-up

pi-sort-up-fill

pi-sparkles

pi-spinner

pi-spinner-dotted

pi-star

pi-star-fill

pi-star-half

pi-star-half-fill

pi-step-backward

pi-step-backward-alt

pi-step-forward

pi-step-forward-alt

pi-stop

pi-stop-circle

pi-stopwatch

pi-sun

pi-sync

pi-table

pi-tablet

pi-tag

pi-tags

pi-telegram

pi-th-large

pi-thumbs-down

pi-thumbs-down-fill

pi-thumbs-up

pi-thumbs-up-fill

pi-thumbtack

pi-ticket

pi-tiktok

pi-times

pi-times-circle

pi-trash

pi-trophy

pi-truck

pi-turkish-lira

pi-twitch

pi-twitter

pi-undo

pi-unlock

pi-upload

pi-user

pi-user-edit

pi-user-minus

pi-user-plus

pi-users

pi-venus

pi-verified

pi-video

pi-vimeo

pi-volume-down

pi-volume-off

pi-volume-up

pi-wallet

pi-warehouse

pi-wave-pulse

pi-whatsapp

pi-wifi

pi-window-maximize

pi-window-minimize

pi-wrench

pi-youtube

- Download

- Import

- Figma

- Basic

- Size

- Color

- Spin

- Constants

- List


PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue TreeTable Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# TreeTable

TreeTable is used to display hierarchical data in tabular format.

## Import [\#](https://primevue.org/treetable/\#import)

```javascript

import TreeTable from 'primevue/treetable';
import Column from 'primevue/column';

```

Copy

## Basic [\#](https://primevue.org/treetable/\#basic)

TreeTable requires a collection of _TreeNode_ instances as a _value_ and _Column_ components as children for the representation. The column with the element to toggle a node should have _expander_ enabled.

```markup

<TreeTable :value="nodes" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>

```

Copy

## Dynamic Columns [\#](https://primevue.org/treetable/\#dynamic_columns)

Columns can be created programmatically.

```markup

<TreeTable :value="nodes" tableStyle="min-width: 50rem">
    <Column v-for="col of columns" :key="col.field" :field="col.field" :header="col.header" :expander="col.expander"></Column>
</TreeTable>

```

Copy

## Controlled [\#](https://primevue.org/treetable/\#controlled)

Expansion state is controlled with _expandedKeys_ property. The _expandedKeys_ should be an object whose keys refer to the node key and values represent the expanded state e.g. _{'0-0': true}_.

```markup

<Button @click="toggleApplications" label="Toggle Applications" />
<TreeTable v-model:expandedKeys="expandedKeys" :value="nodes" class="mt-6" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>

```

Copy

## Template [\#](https://primevue.org/treetable/\#template)

Custom content at _header_ and _footer_ slots are supported via templating.

```markup

<TreeTable :value="nodes" tableStyle="min-width: 50rem">
    <template #header>
        <div class="text-xl font-bold">File Viewer</div>
    </template>
    <Column field="name" header="Name" expander style="width: 250px"></Column>
    <Column field="size" header="Size" style="width: 150px"></Column>
    <Column field="type" header="Type" style="width: 150px"></Column>
    <Column style="width: 10rem">
        <template #body>
            <div class="flex flex-wrap gap-2">
                <Button type="button" icon="pi pi-search" rounded />
                <Button type="button" icon="pi pi-pencil" rounded severity="success" />
            </div>
        </template>
    </Column>
    <template #footer>
        <div class="flex justify-start">
            <Button icon="pi pi-refresh" label="Reload" severity="warn" />
        </div>
    </template>
</TreeTable>

```

Copy

## Size [\#](https://primevue.org/treetable/\#size)

In addition to a regular table, alternatives with alternative sizes are available.

```markup

<TreeTable :value="nodes" :size="size.value" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>

```

Copy

## Pagination [\#](https://primevue.org/treetable/\#pagination)

### Basic [\#](https://primevue.org/treetable/\#paginator_basic)

Pagination is enabled by adding _paginator_ property and defining _rows_ per page.

```markup

<TreeTable :value="nodes" :paginator="true" :rows="5" :rowsPerPageOptions="[5, 10, 25]" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>

```

Copy

### Template [\#](https://primevue.org/treetable/\#paginator_template)

Paginator UI is customized using the _paginatorTemplate_ property. Each element can also be customized further with your own UI to replace the default one, refer to the [Paginator](https://primevue.org/paginator/) component for more information about the advanced customization options.

```markup

<TreeTable
    :value="nodes"
    :paginator="true"
    :rows="5"
    :rowsPerPageOptions="[5, 10, 25, 50]"
    paginatorTemplate="RowsPerPageDropdown FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink"
    currentPageReportTemplate="{first} to {last} of {totalRecords}"
    tableStyle="min-width: 50rem"
>
    <template #paginatorstart>
        <Button type="button" icon="pi pi-refresh" text />
    </template>
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
    <template #paginatorend>
        <Button type="button" icon="pi pi-download" text />
    </template>
</TreeTable>

```

Copy

### Headless [\#](https://primevue.org/treetable/\#paginator_headless)

Pagination is enabled by adding _paginator_ property and defining _rows_ per page.

```markup

<TreeTable :value="nodes" :paginator="true" :rows="5" :rowsPerPageOptions="[5, 10, 25]" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
    <template #paginatorcontainer="{ first, last, page, pageCount, prevPageCallback, nextPageCallback, totalRecords }">
        <div class="flex items-center gap-4 border border-primary bg-transparent rounded-full w-full py-1 px-2 justify-between">
            <Button icon="pi pi-chevron-left" rounded text @click="prevPageCallback" :disabled="page === 0" />
            <div class="text-color font-medium">
                <span class="hidden sm:block">Showing {{ first }} to {{ last }} of {{ totalRecords }}</span>
                <span class="block sm:hidden">Page {{ page + 1 }} of {{ pageCount }}</span>
            </div>
            <Button icon="pi pi-chevron-right" rounded text @click="nextPageCallback" :disabled="page === pageCount - 1" />
        </div>
    </template>
</TreeTable>

```

Copy

## Sort [\#](https://primevue.org/treetable/\#sort)

### Single Column [\#](https://primevue.org/treetable/\#single_sort)

Sorting on a column is enabled by adding the _sortable_ property.

```markup

<TreeTable :value="nodes" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" sortable expander style="width: 34%"></Column>
    <Column field="size" header="Size" sortable style="width: 33%"></Column>
    <Column field="type" header="Type" sortable style="width: 33%"></Column>
</TreeTable>

```

Copy

### Multiple Columns [\#](https://primevue.org/treetable/\#multiple_sort)

Multiple columns can be sorted by defining _sortMode_ as _multiple_. This mode requires metaKey (e.g. _âŒ˜_) to be pressed when clicking a header.

```markup

<TreeTable :value="nodes" sortMode="multiple" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" sortable expander style="width: 34%"></Column>
    <Column field="size" header="Size" sortable style="width: 33%"></Column>
    <Column field="type" header="Type" sortable style="width: 33%"></Column>
</TreeTable>

```

Copy

### Removable Sort [\#](https://primevue.org/treetable/\#removable_sort)

When _removableSort_ is present, the third click removes the sorting from the column.

```markup

<TreeTable :value="nodes" sortMode="multiple" removableSort tableStyle="min-width: 50rem">
    <Column field="name" header="Name" sortable expander style="width: 34%"></Column>
    <Column field="size" header="Size" sortable style="width: 33%"></Column>
    <Column field="type" header="Type" sortable style="width: 33%"></Column>
</TreeTable>

```

Copy

## Filter [\#](https://primevue.org/treetable/\#filter)

Filtering is enabled by adding the _filter_ property to a Column. The _filterMode_ specifies the filtering strategy, in _lenient_ mode when the query matches a node, children of the node are not searched further as all descendants of the node are included. On the other hand, in _strict_ mode when the query matches a node, filtering continues on all descendants. A general filled called _globalFilter_ is also provided to search all columns that support filtering.

```markup

<SelectButton v-model="filterMode" optionLabel="label" dataKey="label" :options="filterOptions" />
<TreeTable :value="nodes" :filters="filters" :filterMode="filterMode.value">
    <template #header>
        <div class="flex justify-end">
            <IconField>
                <InputIcon class="pi pi-search" />
                <InputText v-model="filters['global']" placeholder="Global Search" />
            </IconField>
        </div>
    </template>
    <Column field="name" header="Name" expander style="min-width: 12rem">
        <template #filter>
            <InputText v-model="filters['name']" type="text" placeholder="Filter by name" />
        </template>
    </Column>
    <Column field="size" header="Size" style="min-width: 12rem">
        <template #filter>
            <InputText v-model="filters['size']" type="text" placeholder="Filter by size" />
        </template>
    </Column>
    <Column field="type" header="Type" style="min-width: 12rem">
        <template #filter>
            <InputText v-model="filters['type']" type="text" placeholder="Filter by type" />
        </template>
    </Column>
</TreeTable>

```

Copy

## Selection [\#](https://primevue.org/treetable/\#selection)

### Single [\#](https://primevue.org/treetable/\#single_row_selection)

Single node selection is configured by setting _selectionMode_ as _single_ along with _selectionKeys_ property to manage the selection value binding.

By default, metaKey press (e.g. _âŒ˜_) is necessary to unselect a node however this can be configured with disabling the _metaKeySelection_ property. In touch enabled devices this option has no effect and behavior is same as setting it to false.

```markup

<ToggleSwitch v-model="metaKey" inputId="input-metakey" />

<TreeTable v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="single" :metaKeySelection="metaKey" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>

```

Copy

### Multiple [\#](https://primevue.org/treetable/\#multiple_rows_selection)

More than one node is selectable by setting _selectionMode_ to _multiple_. By default in multiple selection mode, metaKey press (e.g. _âŒ˜_) is not necessary to add to existing selections. When the optional _metaKeySelection_ is present, behavior is changed in a way that selecting a new node requires meta key to be present. Note that in touch enabled devices, TreeTable always ignores metaKey.

In multiple selection mode, value binding should be a key-value pair where key is the node key and value is a boolean to indicate selection.

```markup

<ToggleSwitch v-model="metaKey" inputId="input-metakey" />

<TreeTable v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="multiple" :metaKeySelection="metaKey" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>

```

Copy

### Checkbox [\#](https://primevue.org/treetable/\#checkbox_row_selection)

Selection of multiple nodes via checkboxes is enabled by configuring _selectionMode_ as _checkbox_.

In checkbox selection mode, value binding should be a key-value pair where key (or the dataKey) is the node key and value is an object that has _checked_ and _partialChecked_ properties to represent the checked state of a node.

```javascript

{
    '0-0': {
        partialChecked: false,
        checked: true
    }
}

```

Copy

```markup

<TreeTable v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="checkbox" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>

```

Copy

### Events [\#](https://primevue.org/treetable/\#row_selection_events)

TreeTable provides _nodeSelect_ and _nodeUnselect_ events to listen selection events.

```markup

<TreeTable v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="single" @nodeSelect="onNodeSelect" @nodeUnselect="onNodeUnselect" :metaKeySelection="false" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>

```

Copy

## Lazy Load [\#](https://primevue.org/treetable/\#lazy_load)

Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime _paging_, _sorting_ and _filtering_ occurs. Sample below imitates lazy loading data from a remote datasource using an in-memory list and timeouts to mimic network connection.

Enabling the _lazy_ property and assigning the logical number of rows to _totalRecords_ by doing a projection query are the key elements of the implementation so that paginator displays the UI assuming there are actually records of totalRecords size although in reality they are not present on page, only the records that are displayed on the current page exist.

In addition, only the root elements should be loaded, children can be loaded on demand using _nodeExpand_ callback.

```markup

<TreeTable :value="nodes" :lazy="true" :paginator="true" :rows="rows" :loading="loading"
    @nodeExpand="onExpand" @page="onPage" :totalRecords="totalRecords" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander></Column>
    <Column field="size" header="Size"></Column>
    <Column field="type" header="Type"></Column>
</TreeTable>

```

Copy

## Scroll [\#](https://primevue.org/treetable/\#scroll)

### Vertical [\#](https://primevue.org/treetable/\#vertical_scroll)

Adding _scrollable_ property along with a _scrollHeight_ for the data viewport enables vertical scrolling with fixed headers.

```markup

<TreeTable :value="nodes" scrollable scrollHeight="270px" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>

```

Copy

### Flexible [\#](https://primevue.org/treetable/\#flex_scroll)

Flex scroll feature makes the scrollable viewport section dynamic instead of a fixed value so that it can grow or shrink relative to the parent size of the table. Click the button below to display a maximizable Dialog where data viewport adjusts itself according to the size changes.

```markup

<Button label="Show" icon="pi pi-external-link" @click="dialogVisible = true" />
<Dialog v-model:visible="dialogVisible" header="Flex Scroll" :style="{ width: '75vw' }" maximizable modal :contentStyle="{ height: '300px' }">
    <TreeTable :value="nodes" :scrollable="true" scrollHeight="flex" tableStyle="min-width: 50rem">
        <Column field="name" header="Name" :expander="true" style="min-width: 200px"></Column>
        <Column field="size" header="Size" style="min-width: 200px"></Column>
        <Column field="type" header="Type" style="min-width: 200px"></Column>
    </TreeTable>
    <template #footer>
        <Button label="Ok" icon="pi pi-check" @click="dialogVisible = false" />
    </template>
</Dialog>

```

Copy

### Horizontal [\#](https://primevue.org/treetable/\#horizontal_scroll)

Horizontal scrollbar is displayed when table width exceeds the parent width.

```markup

<TreeTable :value="nodes" scrollable scrollHeight="300px">
    <Column field="name" header="Name" expander style="min-width: 250px"></Column>
    <Column field="size" header="Size" style="min-width: 200px"></Column>
    <Column field="type" header="Type 2" style="min-width: 200px"></Column>
    <Column field="size" header="Size 2" style="min-width: 200px"></Column>
    <Column field="type" header="Type 3" style="min-width: 200px"></Column>
    <Column field="size" header="Size 3" style="min-width: 200px"></Column>
</TreeTable>

```

Copy

### Frozen Columns [\#](https://primevue.org/treetable/\#frozen_columns)

A column can be fixed during horizontal scrolling by enabling the _frozen_ property on a Column. The location is defined with the _alignFrozen_ that can be _left_ or _right_.

```markup

<TreeTable :value="nodes" scrollable scrollHeight="300px">
    <Column field="name" header="Name" expander frozen style="min-width: 250px" class="font-bold"></Column>
    <Column field="size" header="Size" style="min-width: 200px"></Column>
    <Column field="type" header="Type 2" style="min-width: 200px"></Column>
    <Column field="size" header="Size 2" style="min-width: 200px"></Column>
    <Column field="type" header="Type 3" style="min-width: 200px"></Column>
    <Column field="size" header="Size 3" style="min-width: 200px"></Column>
</TreeTable>

```

Copy

## Column Resize [\#](https://primevue.org/treetable/\#column_resize)

### Fit Mode [\#](https://primevue.org/treetable/\#resize_fitmode)

Columns can be resized with drag and drop when _resizableColumns_ is enabled. Default resize mode is _fit_ that does not change the overall table width.

```markup

<TreeTable :value="nodes" :resizableColumns="true" showGridlines tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander></Column>
    <Column field="size" header="Size"></Column>
    <Column field="type" header="Type"></Column>
</TreeTable>

```

Copy

### Expand Mode [\#](https://primevue.org/treetable/\#resize_expandmode)

Setting _columnResizeMode_ as _expand_ changes the table width as well.

```markup

<TreeTable :value="nodes" :resizableColumns="true" columnResizeMode="expand" showGridlines tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander></Column>
    <Column field="size" header="Size"></Column>
    <Column field="type" header="Type"></Column>
</TreeTable>

```

Copy

## Column Toggle [\#](https://primevue.org/treetable/\#column_toggle)

Column visibility based on a condition can be implemented with dynamic columns, in this sample a MultiSelect is used to manage the visible columns.

```markup

<TreeTable :value="nodes" tableStyle="min-width: 50rem">
    <template #header>
        <div style="text-align:left">
            <MultiSelect :modelValue="selectedColumns" @update:modelValue="onToggle" :options="columns" optionLabel="header" class="w-full sm:w-64" display="chip"/>
        </div>
    </template>
    <Column field="name" header="Name" :expander="true"></Column>
    <Column v-for="col of selectedColumns" :field="col.field" :header="col.header" :key="col.field"></Column>
</TreeTable>

```

Copy

## ContextMenu [\#](https://primevue.org/treetable/\#contextmenu)

TreeTable has exclusive integration with ContextMenu using the _contextMenu_ event to open a menu on right click alont with _contextMenuSelection_ property and _row-contextmenu_ event to control the selection via the menu.

```markup

<ContextMenu ref="cm" :model="menuModel" @hide="selectedNode = null" />
<TreeTable v-model:contextMenuSelection="selectedNode" :value="nodes" contextMenu @row-contextmenu="onRowContextMenu" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>

```

Copy

## Accessibility [\#](https://primevue.org/treetable/\#accessibility)

### Screen Reader

DataTable uses a _treegrid_ element whose attributes can be extended with the _tableProps_ option. This property allows passing aria roles and attributes like _aria-label_ and _aria-describedby_ to define the table for readers. Default role of the table is _table_. Header, body and footer elements use _rowgroup_, rows use _row_ role, header cells have _columnheader_ and body cells use _cell_ roles. Sortable headers utilizer _aria-sort_ attribute either set to "ascending" or "descending".

Row elements manage _aria-expanded_ for state along with _aria-posinset_, _aria-setsize_ and _aria-level_ attribute to define the hierachy.

When selection is enabled, _aria-selected_ is set to true on a row. In checkbox mode, TreeTable component uses a hidden native checkbox element.

Editable cells use custom templating so you need to manage aria roles and attributes manually if required.

Paginator is a standalone component used inside the DataTable, refer to the [paginator](https://primevue.org/paginator/) for more information about the accessibility features.

### Sortable Headers Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves through the headers. |
| _enter_ | Sorts the column. |
| _space_ | Sorts the column. |

### Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the first selected node when focus enters the component, if there is none then first element receives the focus. If focus is already inside the component, moves focus to the next focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the last selected node when focus enters the component, if there is none then first element receives the focus. If focus is already inside the component, moves focus to the previous focusable element in the page tab sequence. |
| _enter_ | Selects the focused treenode. |
| _space_ | Selects the focused treenode. |
| _down arrow_ | Moves focus to the next treenode. |
| _up arrow_ | Moves focus to the previous treenode. |
| _right arrow_ | If node is closed, opens the node otherwise moves focus to the first child node. |
| _left arrow_ | If node is open, closes the node otherwise moves focus to the parent node. |
| _home_ | Moves focus to the first same-level node. |
| _end_ | Moves focus to the last same-level node. |

- Import

- Basic

- Dynamic Columns

- Controlled

- Template

- Size

- Pagination

  - Basic

  - Template

  - Headless
- Sort

  - Single Column

  - Multiple Columns

  - Removable Sort
- Filter

- Selection

  - Single

  - Multiple

  - Checkbox

  - Events
- Lazy Load

- Scroll

  - Vertical

  - Flexible

  - Horizontal

  - Frozen Columns
- Column Resize

  - Fit Mode

  - Expand Mode
- Column Toggle

- ContextMenu

- Accessibility


# TreeTable API

API defines helper props, events and others for the PrimeVue TreeTable module.

## TreeTable [\#](https://primevue.org/treetable/\#api.treetable)

TreeTable is used to display hierarchical data in tabular format.

### Props [\#](https://primevue.org/treetable/\#api.treetable.props)

Defines valid properties in TreeTable component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | TreeNode\[\] | null | An array of treenodes. |  |
| dataKey | string \| Function | "key" | Name of the field that uniquely identifies the a record in the data. |  |
| expandedKeys | [TreeTableExpandedKeys](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableExpandedKeys) | null | A map of keys to represent the state of the tree expansion state in controlled mode. |  |
| selectionKeys | [TreeTableSelectionKeys](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSelectionKeys) | null | A map of keys to control the selection state. |  |
| selectionMode | HintedString<"single" \| "multiple" \| "checkbox"> | null | Defines the selection mode. |  |
| metaKeySelection | boolean | false | Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.<br>On touch enabled devices, metaKeySelection is turned off automatically. |  |
| contextMenu | boolean | false | Enables context menu integration. |  |
| contextMenuSelection | any | null | Selected row instance with the ContextMenu. |  |
| rows | number | null | Number of rows to display per page. |  |
| first | number | 0 | Index of the first row to be displayed. |  |
| totalRecords | number | null | Number of total records, defaults to length of value when not defined. |  |
| paginator | boolean | false | When specified as true, enables the pagination. |  |
| paginatorPosition | HintedString<"top" \| "bottom" \| "both"> | bottom | Position of the paginator, options are 'top','bottom' or 'both'. |  |
| alwaysShowPaginator | boolean | true | Whether to show it even there is only one page. |  |
| paginatorTemplate | string | FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown | Template of the paginator. It can be customized using the template property using the predefined keys. Here are the available elements that can be placed inside a paginator in any order.<br>\- FirstPageLink<br>\- PrevPageLink<br>\- PageLinks<br>\- NextPageLink<br>\- LastPageLink<br>\- RowsPerPageDropdown<br>\- JumpToPageDropdown<br>\- JumpToPageInput<br>\- CurrentPageReport |  |
| pageLinkSize | number | 5 | Number of page links to display. |  |
| rowsPerPageOptions | number\[\] | null | Array of integer values to display inside rows per page dropdown. |  |
| currentPageReportTemplate | string | '({currentPage} of {totalPages})' | Template of the current page report element. It displays information about the pagination state.<br>\- {currentPage}<br>\- {totalPages}<br>\- {rows}<br>\- {first}<br>\- {last}<br>\- {totalRecords} |  |
| lazy | boolean | false | Defines if data is loaded and interacted with in lazy manner. |  |
| loading | boolean | false | Displays a loader to indicate data load is in progress. |  |
| loadingIcon | string | null | The icon to show while indicating data load is in progress. |  |
| loadingMode | HintedString<"mask" \| "icon"> | mask | Loading mode display. |  |
| rowHover | boolean | false | When enabled, background of the rows change on hover. |  |
| autoLayout | boolean | false | Whether the cell widths scale according to their content or not. |  |
| sortField | string \| Function | null | Property name or a getter function of a row data used for sorting by default. |  |
| sortOrder | number | null | Order to sort the data by default. |  |
| defaultSortOrder | number | 1 | Default sort order of an unsorted column. |  |
| multiSortMeta | null \| [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | null | An array of SortMeta objects to sort the data by default in multiple sort mode. |  |
| sortMode | HintedString<"single" \| "multiple"> | single | Defines whether sorting works on single column or on multiple columns. |  |
| removableSort | boolean | false | When enabled, columns can have an un-sorted state. |  |
| filters | [TreeTableFilterMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMeta) | null | Filters object with key-value pairs to define the filters. |  |
| filterMode | HintedString<"lenient" \| "strict"> | lenient | Mode for filtering. |  |
| filterLocale | string | null | Locale to use in filtering. The default locale is the host environment's current locale. |  |
| resizableColumns | boolean | false | When enabled, columns can be resized using drag and drop. |  |
| columnResizeMode | HintedString<"fit" \| "expand"> | fit | Defines whether the overall table width should change on column resize. |  |
| indentation | number | 1 | Indentation factor as rem value for children nodes. |  |
| showGridlines | boolean | false | Whether to show grid lines between cells. |  |
| scrollable | boolean | false | When specified, enables horizontal and/or vertical scrolling. |  |
| scrollHeight | HintedString<"flex"> | null | Height of the scroll viewport in fixed pixels or the 'flex' keyword for a dynamic size. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the table. |  |
| tableStyle | string \| object | null | Inline style of the table element. |  |
| tableClass | string \| object | null | Style class of the table element. |  |
| tableProps | any | null | Props to pass to the table element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TreeTablePassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/treetable/\#api.treetable.emits)

Defines valid emits in TreeTable component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:expandedKeys | value: [TreeTableExpandedKeys](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableExpandedKeys) | void | Emitted when the expanded keys change. |  |
| update:selectionKeys | event: [TreeTableSelectionKeys](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSelectionKeys) | void | Emitted when the selection keys change. |  |
| update:contextMenuSelection | value: any | void | Emitted when the contextMenuSelection changes. |  |
| update:first | value: number | void | Emitted when the first changes. |  |
| update:rows | value: number | void | Emitted when the rows changes. |  |
| update:sortField | value: string | void | Emitted when the sortField changes. |  |
| update:sortOrder | value: undefined \| number | void | Emitted when the sortOrder changes. |  |
| update:multiSortMeta | value: undefined \| null \| [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | void | Emitted when the multiSortMeta changes. |  |
| page | event: [TreeTablePageEvent](https://primevue.org/treetable/#api.treetable.events.TreeTablePageEvent) | void | Callback to invoke on pagination. Sort and Filter information is also available for lazy loading implementation. |  |
| sort | event: [TreeTableSortEvent](https://primevue.org/treetable/#api.treetable.events.TreeTableSortEvent) | void | Callback to invoke on sort. Page and Filter information is also available for lazy loading implementation. |  |
| filter | event: [TreeTableFilterEvent](https://primevue.org/treetable/#api.treetable.events.TreeTableFilterEvent) | void | Event to emit after filtering, not triggered in lazy mode. |  |
| node-select | node: TreeNode | void | Callback to invoke when a node is selected. |  |
| node-unselect | node: TreeNode | void | Callback to invoke when a node is unselected. |  |
| node-expand | node: TreeNode | void | Callback to invoke when a node is expanded. |  |
| node-collapse | node: TreeNode | void | Callback to invoke when a node is collapsed. |  |
| column-resize-end | event: Event | void | Callback to invoke when a column is resized. |  |
| row-contextmenu | event: [TreeTableRowContextMenuEvent](https://primevue.org/treetable/#api.treetable.events.TreeTableRowContextMenuEvent) | void | Callback to invoke when a row is selected with a ContextMenu. |  |

### Slots [\#](https://primevue.org/treetable/\#api.treetable.slots)

Defines valid slots in TreeTable component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template. |  |
| loadingicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading icon template. |  |
| checkboxicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom checkbox icon template. |  |
| paginatorcontainer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator container template. |  |
| paginatorstart |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator start template. |  |
| paginatorend |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator end template. |  |
| paginatorfirstpagelinkicon | scope: {<br>class: string, // Style class of the paginator first page link icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator first page link icon template. |  |
| paginatorprevpagelinkicon | scope: {<br>class: string, // Style class of the paginator prev page link icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator previous page link icon template. |  |
| paginatornextpagelinkicon | scope: {<br>class: string, // Style class of the paginator next page link icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator next page link icon template. |  |
| paginatorlastpagelinkicon | scope: {<br>class: string, // Style class of the paginator last page link icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator last page link icon template. |  |
| paginatorrowsperpagedropdownicon | scope: {<br>class: string, // Style class of the paginator rows per page dropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginatorrowsperpagedropdownicon template. |  |
| paginatorjumptopagedropdownicon | scope: {<br>class: string, // Style class of the paginator jump to page dropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginatorjumptopagedropdownicon template. |  |

### Events [\#](https://primevue.org/treetable/\#api.treetable.events)

Defines the custom events used by the component's emit.

#### TreeTableSortEvent [\#](https://primevue.org/treetable/\#api.treetable.events.TreeTableSortEvent)

Custom sort event.

See [sort](https://primevue.org/treetable/#api.treetable.emitsoptions.sort)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| first | number | Index of first record |
| rows | number | Number of rows to display in new page |
| sortField | undefined \| string \| Function | Field to sort against |
| sortOrder | undefined \| null \| 0 \| 1 \| -1 | Sort order as integer |
| multiSortMeta | undefined \| null \| [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | MultiSort metadata |
| filters | [TreeTableFilterMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMeta) | Collection of active filters |
| filterMatchModes | undefined \| HintedString<"startsWith" \| "contains" \| "notContains" \| "endsWith" \| "equals" \| "notEquals" \| "in" \| "lt" \| "lte" \| "gt" \| "gte" \| "between" \| "dateIs" \| "dateIsNot" \| "dateBefore" \| "dateAfter"> | Match modes per field |

#### TreeTablePageEvent [\#](https://primevue.org/treetable/\#api.treetable.events.TreeTablePageEvent)

Custom page event.

See [sort](https://primevue.org/treetable/#api.treetable.emitsoptions.sort)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| first | number | Index of first record |
| rows | number | Number of rows to display in new page |
| sortField | undefined \| string \| Function | Field to sort against |
| sortOrder | undefined \| null \| 0 \| 1 \| -1 | Sort order as integer |
| multiSortMeta | undefined \| null \| [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | MultiSort metadata |
| filters | [TreeTableFilterMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMeta) | Collection of active filters |
| filterMatchModes | undefined \| HintedString<"startsWith" \| "contains" \| "notContains" \| "endsWith" \| "equals" \| "notEquals" \| "in" \| "lt" \| "lte" \| "gt" \| "gte" \| "between" \| "dateIs" \| "dateIsNot" \| "dateBefore" \| "dateAfter"> | Match modes per field |
| page | number | New page number |
| pageCount | number | Total page count |

#### TreeTableFilterEvent [\#](https://primevue.org/treetable/\#api.treetable.events.TreeTableFilterEvent)

Custom filter event.

See [sort](https://primevue.org/treetable/#api.treetable.emitsoptions.sort)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| first | number | Index of first record |
| rows | number | Number of rows to display in new page |
| sortField | undefined \| string \| Function | Field to sort against |
| sortOrder | undefined \| null \| 0 \| 1 \| -1 | Sort order as integer |
| multiSortMeta | undefined \| null \| [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | MultiSort metadata |
| filters | [TreeTableFilterMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMeta) | Collection of active filters |
| filterMatchModes | undefined \| HintedString<"startsWith" \| "contains" \| "notContains" \| "endsWith" \| "equals" \| "notEquals" \| "in" \| "lt" \| "lte" \| "gt" \| "gte" \| "between" \| "dateIs" \| "dateIsNot" \| "dateBefore" \| "dateAfter"> | Match modes per field |
| filteredValue | any | Filtered collection (non-lazy only) |

#### TreeTableRowContextMenuEvent [\#](https://primevue.org/treetable/\#api.treetable.events.TreeTableRowContextMenuEvent)

Custom row context menu event.

See [row-contextmenu](https://primevue.org/treetable/#api.treetable.emitsoptions.row-contextmenu)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| node | TreeNode | Selected row data. |

### Interfaces [\#](https://primevue.org/treetable/\#api.treetable.interfaces)

Defines the custom interfaces used by the module.

#### TreeTablePassThroughMethodOptions [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTablePassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TreeTableProps](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableProps) | null | Defines valid properties. |
| state | [TreeTableState](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableState) | null | Defines current inline state. |
| context | [TreeTableContext](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### TreeTableSharedPassThroughMethodOptions [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [TreeTableProps](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableProps) | null | Defines valid properties. |
| state | [TreeTableState](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableState) | null | Defines current inline state. |

#### TreeTableFilterMetaData [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableFilterMetaData)

Custom treetable filter metadata.

| name | type | default | description |
| --- | --- | --- | --- |
| value | any | null | Filter value |
| matchMode | undefined \| HintedString<"startsWith" \| "contains" \| "notContains" \| "endsWith" \| "equals" \| "notEquals" \| "in" \| "lt" \| "lte" \| "gt" \| "gte" \| "between" \| "dateIs" \| "dateIsNot" \| "dateBefore" \| "dateAfter"> | null | Filter match mode |

#### TreeTableOperatorFilterMetaData [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableOperatorFilterMetaData)

Custom operator filter metadata.

| name | type | default | description |
| --- | --- | --- | --- |
| operator | string | null | Filter operator |
| constraints | [TreeTableFilterMetaData\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMetaData[]) | null | Array of filter meta datas. |

#### TreeTableFilterMeta [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableFilterMeta)

Custom filter metadata.

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | string \| [TreeTableFilterMetaData](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMetaData) \| [TreeTableOperatorFilterMetaData](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableOperatorFilterMetaData) | null |  |

#### TreeTableSortMeta [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableSortMeta)

Custom sort metadata.

| name | type | default | description |
| --- | --- | --- | --- |
| field | string | null | Column field |
| order | undefined \| null \| 0 \| 1 \| -1 | null | Column sort order |

#### TreeTableExpandedKeys [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableExpandedKeys)

Custom expanded keys metadata.

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### TreeTableSelectionKeys [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableSelectionKeys)

Custom selection keys metadata.

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### TreeTablePassThroughOptions [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTablePassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| loading | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the loading wrapper's DOM element. |
| mask | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| loadingIcon | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the loading icon's DOM element. |
| header | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| pcPaginator | any | null | Used to pass attributes to the Paginator component. |
| tableContainer | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the table container's DOM element. |
| table | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the table's DOM element. |
| thead | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the thead's DOM element. |
| headerRow | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the header row's DOM element. |
| tbody | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the tbody's DOM element. |
| row | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the row's DOM element. |
| emptyMessage | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the empty message's DOM element. |
| emptyMessageCell | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the empty message cell's DOM element. |
| tfoot | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the tfoot's DOM element. |
| footerRow | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the footer row's DOM element. |
| footer | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| columnResizeIndicator | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the column resize indicator's DOM element. |
| column | any | null | Used to pass attributes to the Column helper components. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### TreeTablePassThroughAttributes [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTablePassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### TreeTableState [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableState)

Defines current inline state in TreeTable component.

| name | type | default | description |
| --- | --- | --- | --- |
| d\_first | number | null | Current index of first record as a number. |
| d\_rows | number | null | Current number of rows to display in new page as a number. |
| d\_sortField | undefined \| string \| Function | null | Current sort field. |
| d\_sortOrder | number | null | Current order to sort the data by default. |
| d\_multiSortMeta | [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | null | Current sortmeta objects to sort the data. |
| d\_groupRowsSortMeta | [TreeTableSortMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta) | null | Current group sortmeta objects to sort the data. |
| d\_selectionKeys | any\[\] | null | Current keys of selected rows. |
| d\_expandedRowKeys | any\[\] | null | Current keys of rows in expanded state. |
| d\_columnOrder | string\[\] | null | Current order of the columns. |
| d\_editingRowKeys | any | null | Current keys of editing rows. |
| d\_editingMeta | object | null | Current editing meta data. |
| d\_filters | [TreeTableFilterMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMeta) | null | Current filters object. |
| d\_editing | boolean | false | Current editing as a boolean. |

#### TreeTableContext [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableContext)

Defines current options in TreeTable component.

| name | type | default | description |
| --- | --- | --- | --- |
| node | TreeNode | null | Current node of the item. |
| index | number | null | Current index state of the item. |
| frozen | boolean | false | Current frozen state of the row as a boolean. |
| selectable | boolean | false | Current selectable state of the row as a boolean. |
| selected | boolean | false | Current selected state of the row as a boolean. |
| scrollable | boolean | false | Current horizontal and/or vertical scrolling state. |
| showGridlines | boolean | false | Current show gridlines state. |
| size | null \| string | null | Current size of the table. |
| checked | boolean | false | Current check state of the node as a boolean. |
| partialChecked | boolean | false | Current partial check state of the node as a boolean. |

## Types [\#](https://primevue.org/treetable/\#api.treetable.types)

Defines the custom types used by the module.

#### TreeTablePassThroughOptionType [\#](https://primevue.org/treetable/\#api.treetable.types.TreeTablePassThroughOptionType)

| values |
| --- |
| TreeTablePassThroughAttributes \| (options: TreeTablePassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### TreeTableEmits [\#](https://primevue.org/treetable/\#api.treetable.types.TreeTableEmits)

| values |
| --- |
| EmitFn<TreeTableEmitsOptions> |

## Column [\#](https://primevue.org/treetable/\#api.column)

Column component defines various options to specify corresponding features.
It is a helper component for DataTable and TreeTable.

### Props [\#](https://primevue.org/treetable/\#api.column.props)

Defines valid properties in Column component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| columnKey | string | null | Identifier of a column if field property is not defined. |  |
| field | string \| Function | null | Property represented by the column. |  |
| sortField | string \| Function | null | Property name to use in sorting, defaults to field. |  |
| filterField | string \| Function | null | Property name to use in filtering, defaults to field. |  |
| dataType | string | null | Type of data. It's value is related to PrimeVue.filterMatchModeOptions config. |  |
| sortable | boolean | false | Defines if a column is sortable. |  |
| header | string | null | Header content of the column. |  |
| footer | string | null | Footer content of the column. |  |
| style | any | null | Inline style of header, body and footer cells. |  |
| class | any | null | Style class of header, body and footer cells. |  |
| headerStyle | any | null | Inline style of the column header. |  |
| headerClass | any | null | Style class of the column header. |  |
| bodyStyle | any | null | Inline style of the column body. |  |
| bodyClass | any | null | Style class of the column body. |  |
| footerStyle | any | null | Inline style of the column footer. |  |
| footerClass | any | null | Style class of the column footer. |  |
| showFilterMenu | boolean | true | Whether to display the filter overlay. |  |
| showFilterOperator | boolean | true | When enabled, match all and match any operator selector is displayed. |  |
| showClearButton | boolean | false | Displays a button to clear the column filtering. |  |
| showApplyButton | boolean | true | Displays a button to apply the column filtering. |  |
| showFilterMatchModes | boolean | true | Whether to show the match modes selector. |  |
| showAddButton | boolean | true | When enabled, a button is displayed to add more rules. |  |
| filterMatchModeOptions | [ColumnFilterMatchModeOptions\[\]](https://primevue.org/treetable/#api.column.interfaces.ColumnFilterMatchModeOptions[]) | null | An array of label-value pairs to override the global match mode options. |  |
| maxConstraints | number | 2 | Maximum number of constraints for a column filter. |  |
| excludeGlobalFilter | boolean | false | Whether to exclude from global filtering or not. |  |
| filterHeaderStyle | any | null | Inline style of the column filter header in row filter display. |  |
| filterHeaderClass | any | null | Style class of the column filter header in row filter display. |  |
| filterMenuStyle | any | null | Inline style of the column filter overlay. |  |
| filterMenuClass | any | null | Style class of the column filter overlay. |  |
| selectionMode | HintedString<"single" \| "multiple"> | null | Defines column based selection mode. |  |
| expander | boolean | false | Displays an icon to toggle row expansion. |  |
| colspan | number | null | Number of columns to span for grouping. |  |
| rowspan | number | null | Number of rows to span for grouping. |  |
| rowReorder | boolean | false | Whether this column displays an icon to reorder the rows. |  |
| rowReorderIcon | string | null | Icon of the drag handle to reorder rows. |  |
| reorderableColumn | boolean | false | Defines if the column itself can be reordered with dragging. |  |
| rowEditor | boolean | false | When enabled, column displays row editor controls. |  |
| frozen | boolean | false | Whether the column is fixed in horizontal scrolling. |  |
| alignFrozen | HintedString<"left" \| "right"> | left | Position of a frozen column, valid values are left and right. |  |
| exportable | boolean | false | Whether the column is included in data export. |  |
| exportHeader | string | null | Custom export header of the column to be exported as CSV. |  |
| exportFooter | string | null | Custom export footer of the column to be exported as CSV. |  |
| filterMatchMode | string | null | Defines the filtering algorithm to use when searching the options. |  |
| hidden | boolean | false | Whether the column is rendered. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ColumnPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/treetable/\#api.column.slots)

Defines valid slots in Column component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| body | scope: {<br>data: any, // Row data.node: any, // Row node data.column: ColumnNode, // Column node.field: undefined, // Column field.index: number, // Row index.frozenRow: boolean, // Whether the row is frozen.editorInitCallback: (event: Event) â‡’ void, // Editor init callback functionrowTogglerCallback: (event: Event) â‡’ void, // Row toggler callback unction<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom body template for DataTable. |  |
| node | scope: {<br>data: any, // Row data.node: any, // Row node data.column: ColumnNode, // Column node.field: string, // Column field.index: number, // Row index.frozenRow: boolean, // Whether the row is frozen.editorInitCallback: (event: Event) â‡’ void, // Editor init callback functionrowTogglerCallback: (event: Event) â‡’ void, // Row toggler callback unction<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom body template for TreeTable. |  |
| header | scope: {<br>column: ColumnNode, // Column node.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer | scope: {<br>column: ColumnNode, // Column node.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| editor | scope: {<br>data: any, // Row data.column: ColumnNode, // Column node.field: string, // Column field.index: number, // Row index.frozenRow: boolean, // Whether the row is frozen.editorSaveCallback: (event: Event) â‡’ void, // Callback functioneditorCancelCallback: (event: Event) â‡’ void, // Callback function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom editor template. |  |
| filter | scope: {<br>field: string, // Column field.filterModel: ColumnFilterModelType, // Filter metadatafilterCallback: () â‡’ void, // Callback functionapplyFilter: () â‡’ void, // Callback function (closes the overlay)<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter template. |  |
| filterheader | scope: {<br>field: string, // Column field.filterModel: ColumnFilterModelType, // Filter metadatafilterCallback: () â‡’ void, // Callback function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter header template. |  |
| filterfooter | scope: {<br>field: string, // Column field.filterModel: ColumnFilterModelType, // Filter metadatafilterCallback: () â‡’ void, // Callback function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter footer template. |  |
| filterclear | scope: {<br>field: string, // Column field.filterModel: ColumnFilterModelType, // Filter metadatafilterCallback: () â‡’ void, // Callback function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter clear template. |  |
| filterapply | scope: {<br>field: string, // Column field.filterModel: ColumnFilterModelType, // Filter metadatafilterCallback: () â‡’ void, // Callback function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter apply template. |  |
| loading | scope: {<br>data: any, // Row data.column: ColumnNode, // Column node.field: string, // Column field.index: number, // Row index.frozenRow: boolean, // Whether the row is frozen.loadingOptions: ColumnLoadingOptions, // Loading options.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading template. |  |
| rowtogglericon | scope: {<br>class: string, // Style class of the row toggler icon.rowExpanded: boolean, // Current row expanded state.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| rowtoggleicon | scope: {<br>class: string, // Style class of the row toggler icon.rowExpanded: boolean, // Current row expanded state.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom row toggler icon template. |  |
| rowcheckboxicon | scope: {<br>checked: boolean, // Current check state.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom row checkbox icon template. |  |
| roweditoriniticon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom row editor init icon template. |  |
| roweditorsaveicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom row editor save icon template. |  |
| roweditorcancelicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom row editor cancel icon template. |  |
| filtericon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter icon template. |  |
| filterclearicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter clear icon template. |  |
| filterremoveicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter remove icon template. |  |
| filteraddicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter add icon template. |  |
| sorticon | scope: {<br>class: string, // Style class of the sort icon.sorted: boolean, // Current sort state.sortOrder: number, // Current sort order state.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom sort icon template. |  |
| headercheckboxicon | scope: {<br>checked: boolean, // Current check state.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header checkbox icon template. |  |
| rowreordericon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom row reorder icon template. |  |
| nodetogglericon |  | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| nodetoggleicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom node toggler icon template. |  |

### Interfaces [\#](https://primevue.org/treetable/\#api.column.interfaces)

Defines the custom interfaces used by the module.

#### ColumnPassThroughMethodOptions [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ColumnProps](https://primevue.org/treetable/#api.column.interfaces.ColumnProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| context | [ColumnContext](https://primevue.org/treetable/#api.column.interfaces.ColumnContext) | null | Defines current options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### ColumnSharedPassThroughMethodOptions [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [ColumnProps](https://primevue.org/treetable/#api.column.interfaces.ColumnProps) | null | Defines valid properties. |
| parent | DataTablePassThroughOptions | null | Defines parent instance. |

#### ColumnFilterModelType [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnFilterModelType)

Filter model metadata.

| name | type | default | description |
| --- | --- | --- | --- |
| value | any | null | Value of filterModel. |
| matchMode | string | null | Match mode of filterModel. |

#### ColumnFilterMatchModeOptions [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnFilterMatchModeOptions)

Filter match modes for specific columns.

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | string | null |  |

#### ColumnLoadingOptions [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnLoadingOptions)

Custom column loading metadata.

| name | type | default | description |
| --- | --- | --- | --- |
| cellIndex | number | null | Cell index |
| cellFirst | boolean | null | Whether the cell is first. |
| cellLast | boolean | null | Whether the cell is last. |
| cellEven | boolean | null | Whether the cell is even. |
| cellOdd | boolean | null | Whether the item is odd. |
| column | [ColumnNode](https://primevue.org/treetable/#api.column.interfaces.ColumnNode) | null | Column instance |
| field | string | null | Column field |

#### ColumnPassThroughOptions [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| headerCell | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the header cell's DOM element. |
| columnResizer | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the column resizer's DOM element. |
| columnHeaderContent | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the column header content's DOM element. |
| columnTitle | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the header title's DOM element. |
| sort | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the sort's DOM element. |
| sortIcon | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the sort icon's DOM element. |
| pcSortBadge | any | null | Used to pass attributes to the Badge component. |
| pcHeaderCheckbox | any | null | Used to pass attributes to the Checkbox component. |
| filter | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the column filter's DOM element. |
| filterElementContainer | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter element container's DOM element. |
| pcColumnFilterButton | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the column filter button's DOM element. |
| filterMenuIcon | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter menu icon's DOM element. |
| pcColumnFilterClearButton | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the column filter clear button's DOM element. |
| filterClearIcon | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter clear icon's DOM element. |
| filterOverlay | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter overlay's DOM element. |
| filterConstraintList | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter constraint list's DOM element. |
| filterConstraint | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter constraint's DOM element. |
| filterConstraintSeparator | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter constraint separator's DOM element. |
| filterOperator | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter operator's DOM element. |
| pcFilterOperatorDropdown | any | null | Used to pass attributes to the Select component. |
| filterRuleList | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter rule list' DOM element. |
| filterRule | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter rule's DOM element. |
| pcFilterConstraintDropdown | any | null | Used to pass attributes to the Select component. |
| filterRemove | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter remove button container's DOM element. |
| pcFilterRemoveRuleButton | any | null | Used to pass attributes to the Button component. |
| filterAddButtonContainer | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter add button container's DOM element. |
| pcFilterAddRuleButton | any | null | Used to pass attributes to the Button component. |
| filterButtonbar | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter buttonbar's DOM element. |
| pcFilterClearButton | any | null | Used to pass attributes to the Button component. |
| pcFilterApplyButton | any | null | Used to pass attributes to the Button component. |
| rowToggleButton | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the row toggler button's DOM element. |
| rowToggleIcon | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the row toggler icon's DOM element. |
| bodyCell | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the body cell's DOM element. |
| reorderableRowHandle | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the reorderable row handle's DOM element. |
| pcRowRadiobutton | any | null | Used to pass attributes to the radiobutton's DOM element. |
| pcRowCheckbox | any | null | Used to pass attributes to the checkbox's DOM element. |
| pcRowEditorInit | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the row editor init button's DOM element. |
| pcRowEditorSave | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the row editor save button's DOM element. |
| pcRowEditorCancel | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the row editor cancel button's DOM element. |
| footerCell | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the footer cell's DOM element. |
| columnFooter | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the footer content DOM element. |
| bodyCellContent | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the body cell content's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### ColumnPassThroughAttributes [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### ColumnState [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnState)

Defines current inline state in Column component.

| name | type | default | description |
| --- | --- | --- | --- |
| d\_editing | boolean | null |  |
| styleObject | object | null | Current style of the body cell. |
| overlayVisible | boolean | null | Current filter overlay visible as a boolean. |
| defaultMatchMode | string | null | Current filter match mode. |
| defaultOperator | string | null | Current filter operator. |
| focused | boolean | false | Current focused state as a boolean. |
| rowGroupHeaderStyleObject | object | null | Current style of the rowgroup header. |

#### ColumnContext [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnContext)

Defines current options in Column component.

| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Current index of the column. |
| checked | boolean | false | Current checked state of row as a boolean. |
| focused | boolean | false | Current focused state of row as a boolean. |
| disabled | boolean | false | Current disabled state of row as a boolean. |
| sorted | boolean | false | Current sort state of the column as a boolean. |
| frozen | boolean | false | Current frozen state of the column as a boolean. |
| resizable | boolean | false | Current resizable state of the column as a boolean. |
| size | string | null | Current size state of the table. |
| showGridlines | boolean | false | Current gridlines state of the table as a boolean. |
| highlighted | boolean | false | Current highlighted state of the filter row item as a boolean. |
| hidden | boolean | false | Current hidden state of the filter clear button of a column as a boolean. |
| overlayVisible | boolean | false | Current visible state of the filter menu of a column as a boolean. |
| active | boolean | false | Current active state of the filter menu of a column as a boolean. |

## Types [\#](https://primevue.org/treetable/\#api.column.types)

Defines the custom types used by the module.

#### ColumnPassThroughOptionType [\#](https://primevue.org/treetable/\#api.column.types.ColumnPassThroughOptionType)

| values |
| --- |
| ColumnPassThroughAttributes \| (options: ColumnPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### ColumnEmits [\#](https://primevue.org/treetable/\#api.column.types.ColumnEmits)

| values |
| --- |
| EmitFn<ColumnEmitsOptions> |

#### ColumnNode [\#](https://primevue.org/treetable/\#api.column.types.ColumnNode)

| values |
| --- |
| {<br> "props": "ColumnProps, "<br>} |

## TreeNode [\#](https://primevue.org/treetable/\#api.treenode)

PrimeVue tree components share a common api to specify the node.

### Options [\#](https://primevue.org/treetable/\#api.options.TreeNode)

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| key | string | null | Mandatory unique key of the node. |  |
| label | string | null | Label of the node. |  |
| data | any | null | Data represented by the node. |  |
| type | string | null | Type of the node to match a template. |  |
| icon | string | null | Icon of the node to display next to content. |  |
| children | TreeNode\[\] | null | An array of treenodes as children. |  |
| style | any | null | Inline style of the node. |  |
| styleClass | string | null | Style class of the node. |  |
| selectable | boolean | null | Whether the node is selectable when selection mode is enabled. |  |
| leaf | boolean | false | Specifies if the node has children. Used in lazy loading. |  |
| loading | boolean | null | Specifies the node loading. Used in Tree and TreeTable. |  |
| expandedIcon | string | null | Icon to use in expanded state. |  |
| collapsedIcon | string | null | Icon to use in collapsed state. |  |
| \[key: string\] | any | null |  |  |

- TreeTable

  - Props

  - Emits

  - Slots

  - Events

  - Interfaces

  - Types
- Column

  - Props

  - Slots

  - Interfaces

  - Types
- TreeNode

  - Options

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## CascadeSelect Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# CascadeSelect

CascadeSelect is a form component to select a value from a nested structure of options.

## Import [\#](https://primevue.org/cascadeselect/\#import)

```javascript

import CascadeSelect from 'primevue/cascadeselect';

```

Copy

## Basic [\#](https://primevue.org/cascadeselect/\#basic)

CascadeSelect is used with the _v-model_ property for two-way value binding along with the _options_ collection. To define the label of a group _optionGroupLabel_ property is needed and also _optionGroupChildren_ is required to define the property that refers to the children of a group. Note that order of the _optionGroupChildren_ matters as it should correspond to the data hierarchy.

Select a City

3 results are available

```markup

<CascadeSelect v-model="selectedCity" :options="countries" optionLabel="cname" optionGroupLabel="name"
    :optionGroupChildren="['states', 'cities']" class="w-56" placeholder="Select a City" />

```

Copy

## Forms [\#](https://primevue.org/cascadeselect/\#forms)

CascadeSelect integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.

Select a City

3 results are available

Submit

```markup

<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex justify-center flex-col gap-4">
    <div class="flex flex-col gap-1">
        <CascadeSelect name="city" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']" class="w-56" placeholder="Select a City" />
        <Message v-if="$form.city?.invalid" severity="error" size="small" variant="simple">{{ $form.city.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>

```

Copy

## Template [\#](https://primevue.org/cascadeselect/\#template)

CascadeSelect offers multiple slots for customization through templating.

Select a City

3 results are available

```markup

<CascadeSelect v-model="selectedCity" :options="countries" optionLabel="cname" optionGroupLabel="name"
    :optionGroupChildren="['states', 'cities']" class="w-56" placeholder="Select a City">
    <template #option="slotProps">
        <div class="flex items-center">
            <img v-if="slotProps.option.states" :alt="slotProps.option.name" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px"  />
            <i v-if="slotProps.option.cities" class="pi pi-compass mr-2"></i>
            <i v-if="slotProps.option.cname" class="pi pi-map-marker mr-2"></i>
            <span>{{ slotProps.option.cname || slotProps.option.name }}</span>
        </div>
    </template>
    <template #dropdownicon>
        <i class="pi pi-map" />
    </template>
    <template #header>
        <div class="font-medium px-3 py-2">Available Countries</div>
    </template>
    <template #footer>
        <div class="px-3 py-1">
            <Button label="Add New" fluid severity="secondary" text size="small" icon="pi pi-plus" />
        </div>
    </template>
</CascadeSelect>

```

Copy

## Loading State [\#](https://primevue.org/cascadeselect/\#loadingstate)

Loading state can be used _loading_ property.

Loading...

No results found

```markup

<CascadeSelect loading placeholder="Loading..." class="w-56" />

```

Copy

## Clear Icon [\#](https://primevue.org/cascadeselect/\#clearicon)

When _showClear_ is enabled, a clear icon is added to reset the CascadeSelect.

Select a City

3 results are available

```markup

<CascadeSelect v-model="selectedCity" :options="countries" optionLabel="cname" optionGroupLabel="name"
    :optionGroupChildren="['states', 'cities']" class="w-56" placeholder="Select a City" />

```

Copy

## Filled [\#](https://primevue.org/cascadeselect/\#filled)

Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.

Select a City

3 results are available

```markup

<CascadeSelect v-model="selectedCity" variant="filled" :options="countries" optionLabel="cname" optionGroupLabel="name"
    :optionGroupChildren="['states', 'cities']" class="w-56" placeholder="Select a City" />

```

Copy

## Float Label [\#](https://primevue.org/cascadeselect/\#floatlabel)

A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.

p-emptylabel

3 results are available
Over Label

p-emptylabel

3 results are available
In Label

p-emptylabel

3 results are available
On Label

```markup

<FloatLabel class="w-full md:w-56">
    <CascadeSelect v-model="value1" inputId="over_label" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']" class="w-full" />
    <label for="over_label">Over Label</label>
</FloatLabel>

<FloatLabel class="w-full md:w-56">
    <CascadeSelect v-model="value2" inputId="in_label" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']" class="w-full" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>

<FloatLabel class="w-full md:w-56">
    <CascadeSelect v-model="value3" inputId="on_label" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']" class="w-full" />
    <label for="on_label">On Label</label>
</FloatLabel>

```

Copy

## Ifta Label [\#](https://primevue.org/cascadeselect/\#iftalabel)

IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.

p-emptylabel

3 results are available
City

```markup

<IftaLabel class="w-full md:w-56">
    <CascadeSelect v-model="selectedCity" inputId="cs_city" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']" class="w-full" variant="filled" />
    <label for="cs_city">City</label>
</IftaLabel>

```

Copy

## Sizes [\#](https://primevue.org/cascadeselect/\#sizes)

CascadeSelect provides _small_ and _large_ sizes as alternatives to the base.

Small

3 results are available

Normal

3 results are available

Large

3 results are available

```markup

<CascadeSelect v-model="value1" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']"
    class="w-56" size="small" placeholder="Small" />
<CascadeSelect v-model="value2" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']"
    class="w-56" placeholder="Normal" />
<CascadeSelect v-model="value3" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']"
    class="w-56" size="large" placeholder="Large" />

```

Copy

## Invalid [\#](https://primevue.org/cascadeselect/\#invalid)

Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.

Select a City

3 results are available

Select a City

3 results are available

```markup

<div class="card flex flex-wrap justify-center gap-4">
    <CascadeSelect v-model="selectedCity1" :invalid="!selectedCity1" :options="countries" optionLabel="cname" optionGroupLabel="name"
        :optionGroupChildren="['states', 'cities']" class="w-full sm:w-56" placeholder="Select a City" />
    <CascadeSelect v-model="selectedCity2" :invalid="!selectedCity2" :options="countries" optionLabel="cname" optionGroupLabel="name"
        :optionGroupChildren="['states', 'cities']" class="w-full sm:w-56" placeholder="Select a City" variant="filled" />
</div>

```

Copy

## Disabled [\#](https://primevue.org/cascadeselect/\#disabled)

When _disabled_ is present, the element cannot be edited and focused.

Disabled

No results found

```markup

<CascadeSelect disabled placeholder="Disabled" class="w-56" />

```

Copy

## Accessibility [\#](https://primevue.org/cascadeselect/\#accessibility)

### Screen Reader

Value to describe the component can either be provided with _aria-labelledby_ or _aria-label_ props. The cascadeselect element has a _combobox_ role in addition to _aria-haspopup_ and _aria-expanded_ attributes. The relation between the combobox and the popup is created with _aria-controls_ that refers to the id of the popup.

The popup list has an id that refers to the _aria-controls_ attribute of the _combobox_ element and uses _tree_ as the role. Each list item has a _treeitem_ role along with _aria-label_, _aria-selected_ and _aria-expanded_ attributes. The container element of a treenode has the _group_ role. The _aria-setsize_, _aria-posinset_ and _aria-level_ attributes are calculated implicitly and added to each treeitem.

```markup

<span id="dd1"></span>Options</span>
<CascadeSelect aria-labelledby="dd1" />

<CascadeSelect aria-label="Options" />

```

Copy

### Closed State Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the cascadeselect element. |
| _space_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _enter_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _down arrow_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _up arrow_ | Opens the popup and moves visual focus to the selected option, if there is none then last option receives the focus. |
| _any printable character_ | Opens the popup and moves focus to the option whose label starts with the characters being typed, if there is none then first option receives the focus. |

### Popup Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Hides the popup and moves focus to the next tabbable element. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page. |
| _shift_ \+ _tab_ | Hides the popup and moves focus to the previous tabbable element. |
| _enter_ | Selects the focused option and closes the popup. |
| _space_ | Selects the focused option and closes the popup. |
| _escape_ | Closes the popup, moves focus to the cascadeselect element. |
| _down arrow_ | Moves focus to the next option. |
| _up arrow_ | Moves focus to the previous option. |
| _alt_ \+ _up arrow_ | Selects the focused option and closes the popup, then moves focus to the cascadeselect element. |
| _right arrow_ | If option is closed, opens the option otherwise moves focus to the first child option. |
| _left arrow_ | If option is open, closes the option otherwise moves focus to the parent option. |
| _home_ | Moves input cursor at the end, if not then moves focus to the first option. |
| _end_ | Moves input cursor at the beginning, if not then moves focus to the last option. |
| _any printable character_ | Moves focus to the option whose label starts with the characters being typed. |

- Import

- Basic

- Forms

- Template

- Loading State

- Clear Icon

- Filled

- Float Label

- Ifta Label

- Sizes

- Invalid

- Disabled

- Accessibility


# CascadeSelect API

API defines helper props, events and others for the PrimeVue CascadeSelect module.

## CascadeSelect [\#](https://primevue.org/cascadeselect/\#api.cascadeselect)

CascadeSelect is a form component to select a value from a nested structure of options.

### Props [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.props)

Defines valid properties in CascadeSelect component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| options | any\[\] | null | An array of selectitems to display as the available options. |  |
| optionLabel | string \| Function | null | Property name or getter function to use as the label of an option. |  |
| optionValue | string \| Function | null | Property name or getter function to use as the value of an option, defaults to the option itself when not defined. |  |
| optionDisabled | string \| Function | null | Property name or getter function to use as the disabled flag of an option, defaults to false when not defined. |  |
| optionGroupLabel | string \| Function | null | Property name or getter function to use as the label of an option group. |  |
| optionGroupChildren | string \| string\[\] \| Function | null | Property name or getter function to retrieve the items of a group. |  |
| placeholder | string | null | Default text to display when no option is selected. |  |
| breakpoint | string | 960px | The breakpoint to define the maximum width boundary. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| dataKey | string | null | A property to uniquely identify an option. |  |
| showClear | boolean | false | When enabled, a clear icon is displayed to clear the value. |  |
| clearIcon | string | null | Icon to display in clear button. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| inputProps | InputHTMLAttributes | null | Used to pass all properties of the HTMLInputElement to the focusable input element inside the component. |  |
| panelStyle | object | null |  |  |
| panelClass | string \| object | null |  |  |
| panelProps | HTMLAttributes | null |  |  |
| overlayStyle | object | null | Inline style of the overlay overlay. |  |
| overlayClass | string \| object | null | Style class of the overlay overlay. |  |
| overlayProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the overlay overlay inside the component. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself. |  |
| loading | boolean | false | Whether the dropdown is in loading state. |  |
| dropdownIcon | string | null | Icon to display in the dropdown. |  |
| loadingIcon | string | null | Icon to display in loading state. |  |
| optionGroupIcon | string | null | Icon to display in the option group. |  |
| autoOptionFocus | boolean | false | Whether to focus on the first visible or selected element when the overlay panel is shown. |  |
| selectOnFocus | boolean | false | When enabled, the focused option is selected/opened. |  |
| focusOnHover | boolean | true | When enabled, the focus is placed on the hovered option. |  |
| searchLocale | string | null | Locale to use in searching. The default locale is the host environment's current locale. |  |
| searchMessage | string | '{0} results are available' | Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration. |  |
| selectionMessage | string | '{0} items selected' | Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySelectionMessage | string | No selected item | Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySearchMessage | string | No results found | Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration. |  |
| emptyMessage | string | No available options | Text to be displayed when there are no options available. Defaults to value from PrimeVue locale configuration. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<CascadeSelectPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.emits)

Defines valid emits in CascadeSelect component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [CascadeSelectChangeEvent](https://primevue.org/cascadeselect/#api.cascadeselect.events.CascadeSelectChangeEvent) | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| click | event: Event | void | Callback to invoke on click. |  |
| group-change | event: [CascadeSelectGroupChangeEvent](https://primevue.org/cascadeselect/#api.cascadeselect.events.CascadeSelectGroupChangeEvent) | void | Callback to invoke when a group changes. |  |
| before-show |  | void | Callback to invoke before the overlay is shown. |  |
| before-hide |  | void | Callback to invoke before the overlay is hidden. |  |
| show |  | void | Callback to invoke when the overlay is shown. |  |
| hide |  | void | Callback to invoke when the overlay is hidden. |  |

### Slots [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.slots)

Defines valid slots in CascadeSelect component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| option | scope: {<br>option: any, // Option instanceselected: boolean, // Selection state<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each option. |  |
| value | scope: {<br>value: any, // Value of the componentplaceholder: string, // Placeholder text to show<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom value template. |  |
| dropdownicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom dropdown icon template. |  |
| loadingicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading icon template. |  |
| optiongroupicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option group icon template. |  |
| header | scope: {<br>value: any, // Current valueoptions: any, // Options of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer | scope: {<br>value: any, // Current valueoptions: any, // Options of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| clearicon | scope: {<br>clearCallback: (event: Event) â‡’ void, // Clear icon click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom clear icon template. |  |

### Events [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.events)

Defines the custom events used by the component's emit.

#### CascadeSelectChangeEvent [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.events.CascadeSelectChangeEvent)

Custom change event

See [change](https://primevue.org/cascadeselect/#api.cascadeselect.emitsoptions.change)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event. |
| value | any | Selected option value. |

#### CascadeSelectGroupChangeEvent [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.events.CascadeSelectGroupChangeEvent)

See [change](https://primevue.org/cascadeselect/#api.cascadeselect.emitsoptions.change)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event. |
| value | any | Selected option value. |

### Interfaces [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces)

Defines the custom interfaces used by the module.

#### CascadeSelectPassThroughMethodOptions [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [CascadeSelectProps](https://primevue.org/cascadeselect/#api.cascadeselect.interfaces.CascadeSelectProps) | null | Defines valid properties. |
| state | [CascadeSelectState](https://primevue.org/cascadeselect/#api.cascadeselect.interfaces.CascadeSelectState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| context | [CascadeSelectContext](https://primevue.org/cascadeselect/#api.cascadeselect.interfaces.CascadeSelectContext) | null | Defines current options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### CascadeSelectPassThroughOptions [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| input | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the input's DOM element. |
| label | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the label's DOM element. |
| clearIcon | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the label's DOM element. |
| dropdown | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the dropdown button's DOM element. |
| dropdownIcon | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the dropdown icon's DOM element. |
| loadingIcon | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the loading icon's DOM element. |
| overlay | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the overlay's DOM element. |
| listContainer | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the list container's DOM element. |
| list | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| option | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the option's DOM element. |
| optionContent | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the option content's DOM element. |
| optionText | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the option text's DOM element. |
| optionList | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the option list's DOM element. |
| groupIconContainer | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the group icon container's DOM element. |
| groupIcon | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the group icon's DOM element. |
| hiddenInputContainer | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the hidden input container's DOM element. |
| hiddenInput | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the hidden input's DOM element. |
| hiddenSelectedMessage | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the hidden selected message's DOM element. |
| hiddenSearchResult | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the search result message text aria's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [CascadeSelectPassThroughTransitionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughTransitionType) | null | Used to control Vue Transition API. |

#### CascadeSelectPassThroughAttributes [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### CascadeSelectFocusedOptionInfo [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectFocusedOptionInfo)

Defines focused item info

| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Active item index |
| level | number | null | Active item level |
| parentKey | string | null | Parent key info |

#### CascadeSelectState [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectState)

Defines current inline state in CascadeSelect component.

| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string |
| focused | boolean | false | Current focused state as a boolean. |
| focusedOptionInfo | [CascadeSelectFocusedOptionInfo](https://primevue.org/cascadeselect/#api.cascadeselect.interfaces.CascadeSelectFocusedOptionInfo) | null | Current focused item info. |
| activeOptionPath | any\[\] | false | Current focused state as a boolean. |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |

#### CascadeSelectContext [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectContext)

Defines current options in CascadeSelect component.

| name | type | default | description |
| --- | --- | --- | --- |
| option | any | null | Current option. |
| index | number | null | Index of the option. |
| level | number | null | Level of the option. |
| optionGroup | boolean | null | Current option group state of option as a boolean. |
| active | boolean | false | Current active state of option as a boolean. |
| focused | boolean | false | Current focused state of option as a boolean. |
| disabled | boolean | false | Current disabled state of option as a boolean. |

## Types [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.types)

Defines the custom types used by the module.

#### CascadeSelectPassThroughOptionType [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.types.CascadeSelectPassThroughOptionType)

| values |
| --- |
| CascadeSelectPassThroughAttributes \| (options: CascadeSelectPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### CascadeSelectPassThroughTransitionType [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.types.CascadeSelectPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: CascadeSelectPassThroughMethodOptions) => TransitionProps \| undefined |

#### CascadeSelectEmits [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.types.CascadeSelectEmits)

| values |
| --- |
| EmitFn<CascadeSelectEmitsOptions> |

- CascadeSelect

  - Props

  - Emits

  - Slots

  - Events

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Laravel Setup
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

# Install PrimeVue with Laravel

Setting up PrimeVue in a Laravel project.

## Download [\#](https://primevue.org/laravel/\#download)

PrimeVue is available for download on [npm registry](https://www.npmjs.com/package/primevue).

```markup

# Using npm
npm install primevue @primeuix/themes

# Using yarn
yarn add primevue @primeuix/themes

# Using pnpm
pnpm add primevue @primeuix/themes

```

Copy

## Plugin [\#](https://primevue.org/laravel/\#theme)

PrimeVue plugin is required to be installed as an application plugin to set up the default [configuration](https://primevue.org/configuration). The plugin is lightweight, and only utilized for configuration purposes.

```javascript

import { createApp } from 'vue';
import PrimeVue from 'primevue/config';

const app = createApp(App);
app.use(PrimeVue);

```

Copy

## Theme [\#](https://primevue.org/laravel/\#theme)

Configure PrimeVue to use a theme like Aura.

```javascript

import { createApp } from 'vue';
import PrimeVue from 'primevue/config';
import Aura from '@primeuix/themes/aura';

const app = createApp(App);
app.use(PrimeVue, {
    theme: {
        preset: Aura
    }
});

```

Copy

## Verify [\#](https://primevue.org/laravel/\#verify)

Verify your setup by adding a component such as [Button](https://primevue.org/button). Each component can be imported and registered individually so that you only include what you use for bundle optimization. Import path is available in the documentation of the corresponding component.

Verify

```javascript

import Button from "primevue/button"

const app = createApp(App);
app.component('Button', Button);

```

Copy

## Examples [\#](https://primevue.org/laravel/\#examples)

We've created various samples for the popular options in the Vue ecosystem. Visit the [primevue-examples](https://github.com/primefaces/primevue-examples) repository for more samples including [laravel-quickstart](https://github.com/primefaces/primevue-examples/tree/main/laravel-quickstart) and [inertia-quickstart](https://github.com/primefaces/primevue-examples/tree/main/inertia-quickstart).

## Next Steps [\#](https://primevue.org/laravel/\#nextsteps)

Welcome to the Prime UI Ecosystem! Once you have PrimeVue up and running, we recommend exploring the following resources to gain a deeper understanding of the library.

- [Global configuration](https://primevue.org/configuration)
- [Auto imports with tree-shaking](https://primevue.org/autoimport)
- [Customization of styles](https://primevue.org/theming/styled)
- [Pass through attributes](https://primevue.org/passthrough)
- [Getting support](https://primevue.org/support)

- Download

- Plugin

- Theme

- Verify

- Examples

- Next Steps


PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Tree Component
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Tree

Tree is used to display hierarchical data.

## Import [\#](https://primevue.org/tree/\#import)

```

import Tree from 'primevue/tree';

```

## Basic [\#](https://primevue.org/tree/\#basic)

Tree component requires an array of TreeNode objects as its _value_.

```

<Tree :value="nodes" class="w-full md:w-[30rem]"></Tree>

```

## Controlled [\#](https://primevue.org/tree/\#controlled)

Tree state can be controlled programmatically with the _expandedKeys_ property that defines the keys that are expanded. This property is a Map instance whose key is the key of a node and value is a boolean. Note that _expandedKeys_ also supports two-way binding with the v-model directive.

Expand AllCollapse All

```

<div class="flex flex-wrap gap-2 mb-6">
    <Button type="button" icon="pi pi-plus" label="Expand All" @click="expandAll" />
    <Button type="button" icon="pi pi-minus" label="Collapse All" @click="collapseAll" />
</div>
<Tree v-model:expandedKeys="expandedKeys" :value="nodes" class="w-full md:w-[30rem]"></Tree>

```

## Selection [\#](https://primevue.org/tree/\#selection)

### Single [\#](https://primevue.org/tree/\#single)

Single node selection is configured by setting _selectionMode_ as _single_ along with _selectionKeys_ property to manage the selection value binding.

```

<Tree v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="single" class="w-full md:w-[30rem]"></Tree>

```

### Multiple [\#](https://primevue.org/tree/\#multiple)

More than one node is selectable by setting _selectionMode_ to _multiple_. By default in multiple selection mode, metaKey press (e.g. _âŒ˜_) is not necessary to add to existing selections. When the optional _metaKeySelection_ is present, behavior is changed in a way that selecting a new node requires meta key to be present. Note that in touch enabled devices, Tree always ignores metaKey.

In multiple selection mode, value binding should be a key-value pair where key is the node key and value is a boolean to indicate selection.

MetaKey

```

<Tree v-model:selectionKeys="selectedKeys" :value="nodes"
    selectionMode="multiple" :metaKeySelection="checked"></Tree>

```

### Checkbox [\#](https://primevue.org/tree/\#checkbox)

Selection of multiple nodes via checkboxes is enabled by configuring _selectionMode_ as _checkbox_.

In checkbox selection mode, value binding should be a key-value pair where key is the node key and value is an object that has _checked_ and _partialChecked_ properties to represent the checked state of a node object to indicate selection.

```

<Tree v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="checkbox" class="w-full md:w-[30rem]"></Tree>

```

## Events [\#](https://primevue.org/tree/\#events)

An event is provided for each type of user interaction such as expand, collapse and selection.

```

<Tree v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="single" :metaKeySelection="false"
    @nodeSelect="onNodeSelect" @nodeUnselect="onNodeUnselect" @nodeExpand="onNodeExpand" @nodeCollapse="onNodeCollapse" class="w-full md:w-[30rem]"></Tree>

```

## Lazy [\#](https://primevue.org/tree/\#lazy)

Lazy loading is useful when dealing with huge datasets, in this example nodes are dynamically loaded on demand using _loading_ property and _node-expand_ method. Default value of _loadingMode_ is _mask_ and also _icon_ is available.

Mask Mode

Icon Mode

```

<Tree :value="nodes" @node-expand="onNodeExpand" :loading="loading" class="w-full md:w-[30rem]"></Tree>
<Tree :value="nodes2" @node-expand="onNodeExpand2" loadingMode="icon" class="w-full md:w-[30rem]"></Tree>

```

## Template [\#](https://primevue.org/tree/\#template)

Each node can have a distinct template by matching the _type_ property to the slot name.

- **Introduction**

- **Components In-Depth**


```

<Tree :value="nodes" class="w-full md:w-[30rem]">
    <template #default="slotProps">
        <b>{{ slotProps.node.label }}</b>
    </template>
    <template #url="slotProps">
        <a :href="slotProps.node.data">{{ slotProps.node.label }}</a>
    </template>
</Tree>

```

## Filter [\#](https://primevue.org/tree/\#filter)

Filtering is enabled by adding the _filter_ property, by default label property of a node is used to compare against the value in the text field, in order to customize which field(s) should be used during search define _filterBy_ property. In addition _filterMode_ specifies the filtering strategy. In _lenient_ mode when the query matches a node, children of the node are not searched further as all descendants of the node are included. On the other hand, in _strict_ mode when the query matches a node, filtering continues on all descendants.

```

<Tree :value="nodes" :filter="true" filterMode="lenient" class="w-full md:w-[30rem]"></Tree>
<Tree :value="nodes" :filter="true" filterMode="strict" class="w-full md:w-[30rem]"></Tree>

```

## Accessibility [\#](https://primevue.org/tree/\#accessibility)

### Screen Reader

Value to describe the component can either be provided with _aria-labelledby_ or _aria-label_ props. The root list element has a _tree_ role whereas each list item has a _treeitem_ role along with _aria-label_, _aria-selected_ and _aria-expanded_ attributes. In checkbox selection, _aria-checked_ is used instead of _aria-selected_. The container element of a treenode has the _group_ role. Checkbox and toggle icons are hidden from screen readers as their parent element with _treeitem_ role and attributes are used instead for readers and keyboard support. The _aria-setsize_, _aria-posinset_ and _aria-level_ attributes are calculated implicitly and added to each treeitem.

### Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the first selected node when focus enters the component, if there is none then first element receives the focus. If focus is already inside the component, moves focus to the next focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the last selected node when focus enters the component, if there is none then first element receives the focus. If focus is already inside the component, moves focus to the previous focusable element in the page tab sequence. |
| _enter_ | Selects the focused treenode. |
| _space_ | Selects the focused treenode. |
| _down arrow_ | Moves focus to the next treenode. |
| _up arrow_ | Moves focus to the previous treenode. |
| _right arrow_ | If node is closed, opens the node otherwise moves focus to the first child node. |
| _left arrow_ | If node is open, closes the node otherwise moves focus to the parent node. |

- Import

- Basic

- Controlled

- Selection

  - Single

  - Multiple

  - Checkbox
- Events

- Lazy

- Template

- Filter

- Accessibility


# Tree API

API defines helper props, events and others for the PrimeVue Tree module.

Theme Designer

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PickList Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# PickList

PickList is used to reorder items between different lists.

## Import [\#](https://primevue.org/picklist/\#import)

```javascript

import PickList from 'primevue/picklist';

```

Copy

## Basic [\#](https://primevue.org/picklist/\#basic)

PickList requires a multidimensional array as its value bound with the _v-model_ directive and a template for its content that gets the _option_ instance and the index via slotProps.

- Bamboo Watch
- Black Watch
- Blue Band
- Blue T-Shirt
- Bracelet
- Brown Purse
- Chakra Bracelet
- Galaxy Earrings
- Game Controller
- Gaming Set

No selected item

- No available options

No available optionsNo selected item

```markup

<PickList v-model="products" dataKey="id" breakpoint="1400px">
    <template #option="{ option  }">
        {{ option.name }}
    </template>
</PickList>

```

Copy

## Template [\#](https://primevue.org/picklist/\#template)

For custom content support define an _option_ template that gets the item instance as a parameter. In addition _sourceheader_ and _targetheader_ slots are provided for further customization.

- ![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)

Bamboo WatchAccessories

$65

- ![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)

Black WatchAccessories

$72

- ![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)

Blue BandFitness

$79

- ![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)

Blue T-ShirtClothing

$29

- ![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)

BraceletAccessories

$15

- ![Brown Purse](https://primefaces.org/cdn/primevue/images/product/brown-purse.jpg)

Brown PurseAccessories

$120

- ![Chakra Bracelet](https://primefaces.org/cdn/primevue/images/product/chakra-bracelet.jpg)

Chakra BraceletAccessories

$32

- ![Galaxy Earrings](https://primefaces.org/cdn/primevue/images/product/galaxy-earrings.jpg)

Galaxy EarringsAccessories

$34

- ![Game Controller](https://primefaces.org/cdn/primevue/images/product/game-controller.jpg)

Game ControllerElectronics

$99

- ![Gaming Set](https://primefaces.org/cdn/primevue/images/product/gaming-set.jpg)

Gaming SetElectronics

$299


No selected item

- No available options

No available optionsNo selected item

```markup

<PickList v-model="products" dataKey="id" breakpoint="1400px" scrollHeight="20rem>
    <template #option="{ option , selected }">
        <div class="flex flex-wrap p-1 items-center gap-4 w-full">
            <img class="w-12 shrink-0 rounded" :src="'https://primefaces.org/cdn/primevue/images/product/' + option.image" :alt="option.name" />
            <div class="flex-1 flex flex-col">
                <span class="font-medium text-sm">{{ option.name }}</span>
                <span :class="['text-sm', { 'text-surface-500 dark:text-surface-400': !selected, 'text-inherit': selected }]">{{ option.category }}</span>
            </div>
            <span class="font-bold">${{ option.price }}</span>
        </div>
    </template>
</PickList>

```

Copy

## Accessibility [\#](https://primevue.org/picklist/\#accessibility)

### Screen Reader

Value to describe the source listbox and target listbox can be provided with _sourceListProps_ and _targetListProps_ by passing _aria-labelledby_ or _aria-label_ props. The list elements has a _listbox_ role with the _aria-multiselectable_ attribute. Each list item has an _option_ role with _aria-selected_ as their attributes.

Controls buttons are _button_ elements with an _aria-label_ that refers to the _aria.moveTop_, _aria.moveUp_, _aria.moveDown_, _aria.moveBottom_, _aria.moveToTarget_, _aria.moveAllToTarget_, _aria.moveToSource_ and _aria.moveAllToSource_ properties of the [locale](https://primevue.org/configuration/#locale) API by default, alternatively you may use _moveTopButtonProps_, _moveUpButtonProps_, _moveDownButtonProps_, _moveToButtonProps_, _moveAllToButtonProps_, _moveFromButtonProps_, _moveFromButtonProps_ _moveAllFromButtonProps_ _moveToTargetProps_, _moveAllToTargetProps_, _moveToSourceProps_ and _moveAllToSourceProps_ to customize the buttons like overriding the default _aria-label_ attributes.

```markup

<span id="lb">Options</span>
<PickList aria-labelledby="lb" />

<PickList aria-label="City" />

```

Copy

### ListBox Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the first selected option, if there is none then first option receives the focus. |
| _up arrow_ | Moves focus to the previous option. |
| _down arrow_ | Moves focus to the next option. |
| _enter_ | Toggles the selected state of the focused option. |
| _space_ | Toggles the selected state of the focused option. |
| _home_ | Moves focus to the first option. |
| _end_ | Moves focus to the last option. |
| _shift_ \+ _down arrow_ | Moves focus to the next option and toggles the selection state. |
| _shift_ \+ _up arrow_ | Moves focus to the previous option and toggles the selection state. |
| _shift_ \+ _space_ | Selects the items between the most recently selected option and the focused option. |
| _control_ \+ _shift_ \+ _home_ | Selects the focused options and all the options up to the first one. |
| _control_ \+ _shift_ \+ _end_ | Selects the focused options and all the options down to the first one. |
| _control_ \+ _a_ | Selects all options. |

### Buttons Keyboard Support

| Key | Function |
| --- | --- |
| _enter_ | Executes button action. |
| _space_ | Executes button action. |

- Import

- Basic

- Template

- Accessibility


# PickList API

API defines helper props, events and others for the PrimeVue PickList module.

## PickList [\#](https://primevue.org/picklist/\#api.picklist)

PickList is used to reorder items between different lists.

### Props [\#](https://primevue.org/picklist/\#api.picklist.props)

Defines valid properties in PickList component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any\[\]\[\] | null | Value of the component as a multidimensional array. |  |
| selection | any\[\]\[\] | null | Selected items in the list as a multidimensional array. |  |
| dataKey | string | null | Name of the field that uniquely identifies the a record in the data. |  |
| metaKeySelection | boolean | false | Defines whether metaKey is requred or not for the selection.<br>When true metaKey needs to be pressed to select or unselect an item and<br>when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically. |  |
| autoOptionFocus | boolean | true | Whether to focus on the first visible or selected element. |  |
| focusOnHover | boolean | true | When enabled, the focus is placed on the hovered option. |  |
| listStyle | any | null | Inline style of the the list element. |  |
| responsive | boolean | true | Whether the list optimizes layout based on screen size. |  |
| breakpoint | string | 960px | The breakpoint to define the maximum width boundary when responsiveness is enabled. |  |
| scrollHeight | string | 14rem | Height of the viewport, a scrollbar is defined if height of list exceeds this value. |  |
| striped | boolean | false | Whether to displays rows with alternating colors. |  |
| showSourceControls | boolean | true | Whether to show buttons of source list. |  |
| showTargetControls | boolean | true | Whether to show buttons of target list. |  |
| buttonProps | object | null | Used to pass all properties of the ButtonProps to the move up button inside the component. |  |
| moveUpButtonProps | object | null | Used to pass all properties of the ButtonProps to the move up button inside the component. |  |
| moveTopButtonProps | object | null | Used to pass all properties of the ButtonProps to the move top button inside the component. |  |
| moveDownButtonProps | object | null | Used to pass all properties of the ButtonProps to the move down button inside the component. |  |
| moveBottomButtonProps | object | null | Used to pass all properties of the ButtonProps to the move bottom button inside the component. |  |
| moveToTargetProps | object | null | Used to pass all properties of the ButtonProps to the move to target button inside the component. |  |
| moveAllToTargetProps | object | null | Used to pass all properties of the ButtonProps to the move all to target button inside the component. |  |
| moveToSourceProps | object | null | Used to pass all properties of the ButtonProps to the move to source button inside the component. |  |
| moveAllToSourceProps | object | null | Used to pass all properties of the ButtonProps to the move all to source button inside the component. |  |
| tabindex | string \| number | null | Index of the list element in tabbing order. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<PickListPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/picklist/\#api.picklist.emits)

Defines valid emits in PickList component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any\[\]\[\] | void | Emitted when the value changes. |  |
| update:selection | value: any\[\]\[\] | void | Emitted when the selection changes. |  |
| reorder | event: [PickListReorderEvent](https://primevue.org/picklist/#api.picklist.events.PickListReorderEvent) | void | Callback to invoke when the list is reordered. |  |
| selection-change | event: [PickListSelectionChangeEvent](https://primevue.org/picklist/#api.picklist.events.PickListSelectionChangeEvent) | void | Callback to invoke when one or more items are moved to the other list. |  |
| move-to-target | event: [PickListMoveToTargetEvent](https://primevue.org/picklist/#api.picklist.events.PickListMoveToTargetEvent) | void | Callback to invoke when one or more items are moved to the target list. |  |
| move-all-to-target | event: [PickListMoveAllToTargetEvent](https://primevue.org/picklist/#api.picklist.events.PickListMoveAllToTargetEvent) | void | Callback to invoke when all items are moved to the target list. |  |
| move-to-source | event: [PickListMoveToSourceEvent](https://primevue.org/picklist/#api.picklist.events.PickListMoveToSourceEvent) | void | Callback to invoke when one or more items are moved to the source list. |  |
| move-all-to-source | event: [PickListMoveAllToSourceEvent](https://primevue.org/picklist/#api.picklist.events.PickListMoveAllToSourceEvent) | void | Callback to invoke when all items are moved to the source list. |  |

### Slots [\#](https://primevue.org/picklist/\#api.picklist.slots)

Defines valid slots in PickList component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| item | scope: {<br>item: any, // Item of the componentselected: boolean, // Selection stateindex: number, // Index of the item.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| option | scope: {<br>option: any, // Option of the componentselected: boolean, // Selection stateindex: number, // Index of the option.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option template. |  |
| sourceheader |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom source header template. |  |
| targetheader |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom target header template. |  |
| sourcecontrolsstart |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom source controls start template. |  |
| sourcecontrolsend |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom source controls end template. |  |
| movecontrolsstart |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move controls start template. |  |
| movecontrolsend |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move controls end template. |  |
| targetcontrolsstart |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom target controls start template. |  |
| targetcontrolsend |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom target controls end template. |  |
| moveupicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move up icon template. |  |
| movetopicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move top icon template. |  |
| movedownicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move down icon template. |  |
| movebottomicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move bottom icon template. |  |
| movetotargeticon | scope: {<br>viewChanged: boolean, // Whether view change.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom move to target icon template. |  |
| movealltotargeticon | scope: {<br>viewChanged: boolean, // Whether view change.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom move all to target icon template. |  |
| movetosourceicon | scope: {<br>viewChanged: boolean, // Whether view change.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom move to source icon template. |  |
| movealltosourceicon | scope: {<br>viewChanged: boolean, // Whether view change.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom move all to source icon template. |  |

### Events [\#](https://primevue.org/picklist/\#api.picklist.events)

Defines the custom events used by the component's emit.

#### PickListReorderEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListReorderEvent)

Custom reorder event.

See [reorder](https://primevue.org/picklist/#api.picklist.emitsoptions.reorder)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | any\[\] | Ordered list |
| direction | string | Direction of the change; 'up', 'down', 'bottom', 'top' |
| listIndex | number | Index of the list that is ordered, 0 represents the source and 1 represents the target list. |

#### PickListSelectionChangeEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListSelectionChangeEvent)

Custom selection change event.

See [selection-change](https://primevue.org/picklist/#api.picklist.emitsoptions.selection-change)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | any\[\] | Selected item |

#### PickListMoveToTargetEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListMoveToTargetEvent)

Custom move-to-target event.

See [move-to-target](https://primevue.org/picklist/#api.picklist.emitsoptions.move-to-target)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| items | any\[\] | Moved items |

#### PickListMoveAllToTargetEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListMoveAllToTargetEvent)

Custom move-all-to-target event.

See [move-all-to-target](https://primevue.org/picklist/#api.picklist.emitsoptions.move-all-to-target)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| items | any\[\] | Moved items |

#### PickListMoveToSourceEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListMoveToSourceEvent)

Custom move-to-source event.

See [move-all-to-target](https://primevue.org/picklist/#api.picklist.emitsoptions.move-all-to-target)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| items | any\[\] | Moved items |

#### PickListMoveAllToSourceEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListMoveAllToSourceEvent)

Custom move-all-to-source event.

See [move-all-to-target](https://primevue.org/picklist/#api.picklist.emitsoptions.move-all-to-target)

| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| items | any\[\] | Moved items |

### Interfaces [\#](https://primevue.org/picklist/\#api.picklist.interfaces)

Defines the custom interfaces used by the module.

#### PickListPassThroughMethodOptions [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [PickListProps](https://primevue.org/picklist/#api.picklist.interfaces.PickListProps) | null | Defines valid properties. |
| state | [PickListState](https://primevue.org/picklist/#api.picklist.interfaces.PickListState) | null | Defines current inline state. |
| context | [PickListContext](https://primevue.org/picklist/#api.picklist.interfaces.PickListContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### PickListSharedPassThroughMethodOptions [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [PickListProps](https://primevue.org/picklist/#api.picklist.interfaces.PickListProps) | null | Defines valid properties. |
| state | [PickListState](https://primevue.org/picklist/#api.picklist.interfaces.PickListState) | null | Defines current inline state. |

#### PickListPassThroughOptions [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| sourceControls | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the source controls' DOM element. |
| pcSourceMoveUpButton | any | null | Used to pass attributes to the Button component. |
| pcSourceMoveTopButton | any | null | Used to pass attributes to the Button component. |
| pcSourceMoveDownButton | any | null | Used to pass attributes to the Button component. |
| pcSourceMoveBottomButton | any | null | Used to pass attributes to the Button component. |
| pcListbox | any | null | Used to pass attributes to the Listbox component. |
| sourceListContainer | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the source list containerr's DOM element. |
| transferControls | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the transfer controls' DOM element. |
| pcMoveToTargetButton | any | null | Used to pass attributes to the Button component. |
| pcMoveAllToTargetButton | any | null | Used to pass attributes to the Button component. |
| pcMoveToSourceButton | any | null | Used to pass attributes to the Button component. |
| pcMoveAllToSourceButton | any | null | Used to pass attributes to the Button component. |
| targetListContainer | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the target list container's DOM element. |
| targetControls | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the target controls' DOM element. |
| pcTargetMoveUpButton | any | null | Used to pass attributes to the Button component. |
| pcTargetMoveTopButton | any | null | Used to pass attributes to the Button component. |
| pcTargetMoveDownButton | any | null | Used to pass attributes to the Button component. |
| pcTargetMoveBottomButton | any | null | Used to pass attributes to the Button component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [PickListPassThroughTransitionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughTransitionType) | null | Used to control Vue Transition API. |

#### PickListPassThroughAttributes [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### PickListFocusedState [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListFocusedState)

| name | type | default | description |
| --- | --- | --- | --- |
| sourceList | boolean | false | Current source list's focused state as a boolean. |
| targetList | boolean | false | Current target list's focused state as a boolean. |

#### PickListState [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListState)

Defines current inline state in PickList component.

| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| d\_selection | any\[\] | null | Current id state as a string. |
| viewChanged | boolean | false | Current view change state as a boolean. |

#### PickListContext [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListContext)

Defines current options in PickList component.

| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | false | Current active state of the item as a boolean. |
| focused | boolean | false | Current focus state of the item as a boolean. |

## Types [\#](https://primevue.org/picklist/\#api.picklist.types)

Defines the custom types used by the module.

#### PickListPassThroughOptionType [\#](https://primevue.org/picklist/\#api.picklist.types.PickListPassThroughOptionType)

| values |
| --- |
| PickListPassThroughAttributes \| (options: PickListPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### PickListPassThroughTransitionType [\#](https://primevue.org/picklist/\#api.picklist.types.PickListPassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: PickListPassThroughMethodOptions) => TransitionProps \| undefined |

#### PickListEmits [\#](https://primevue.org/picklist/\#api.picklist.types.PickListEmits)

| values |
| --- |
| EmitFn<PickListEmitsOptions> |

- PickList

  - Props

  - Emits

  - Slots

  - Events

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## DataView Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# DataView

DataView displays data in grid or list layout with pagination and sorting features.

## Import [\#](https://primevue.org/dataview/\#import)

```javascript

import DataView from 'primevue/dataview';

```

Copy

## Basic [\#](https://primevue.org/dataview/\#basic)

DataView requires a _value_ to display along with a _list_ slot for item content.

![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)

INSTOCK

Accessories

Bamboo Watch

5

$65

Buy Now

![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)

INSTOCK

Accessories

Black Watch

4

$72

Buy Now

![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)

LOWSTOCK

Fitness

Blue Band

3

$79

Buy Now

![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)

INSTOCK

Clothing

Blue T-Shirt

5

$29

Buy Now

![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)

INSTOCK

Accessories

Bracelet

4

$15

Buy Now

```markup

<DataView :value="products">
    <template #list="slotProps">
        <div class="flex flex-col">
            <div v-for="(item, index) in slotProps.items" :key="index">
                <div class="flex flex-col sm:flex-row sm:items-center p-6 gap-4" :class="{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }">
                    <div class="md:w-40 relative">
                        <img class="block xl:block mx-auto rounded w-full" :src="`https://primefaces.org/cdn/primevue/images/product/${item.image}`" :alt="item.name" />
                        <div class="absolute bg-black/70 rounded-border" style="left: 4px; top: 4px">
                            <Tag :value="item.inventoryStatus" :severity="getSeverity(item)"></Tag>
                        </div>
                    </div>
                    <div class="flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6">
                        <div class="flex flex-row md:flex-col justify-between items-start gap-2">
                            <div>
                                <span class="font-medium text-surface-500 dark:text-surface-400 text-sm">{{ item.category }}</span>
                                <div class="text-lg font-medium mt-2">{{ item.name }}</div>
                            </div>
                            <div class="bg-surface-100 p-1" style="border-radius: 30px">
                                <div class="bg-surface-0 flex items-center gap-2 justify-center py-1 px-2" style="border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)">
                                    <span class="text-surface-900 font-medium text-sm">{{ item.rating }}</span>
                                    <i class="pi pi-star-fill text-yellow-500"></i>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col md:items-end gap-8">
                            <span class="text-xl font-semibold">${{ item.price }}</span>
                            <div class="flex flex-row-reverse md:flex-row gap-2">
                                <Button icon="pi pi-heart" outlined></Button>
                                <Button icon="pi pi-shopping-cart" label="Buy Now" :disabled="item.inventoryStatus === 'OUTOFSTOCK'" class="flex-auto md:flex-initial whitespace-nowrap"></Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
</DataView>

```

Copy

## Pagination [\#](https://primevue.org/dataview/\#pagination)

Pagination is enabled with the _paginator_ and _rows_ properties. Refer to the [Paginator](https://primevue.org/paginator/) for more information about customizing the paginator.

![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)

INSTOCK

Accessories

Bamboo Watch

5

$65

Buy Now

![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)

INSTOCK

Accessories

Black Watch

4

$72

Buy Now

![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)

LOWSTOCK

Fitness

Blue Band

3

$79

Buy Now

![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)

INSTOCK

Clothing

Blue T-Shirt

5

$29

Buy Now

![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)

INSTOCK

Accessories

Bracelet

4

$15

Buy Now

```markup

<DataView :value="products" paginator :rows="5">
    <template #list="slotProps">
        <div class="flex flex-col">
            <div v-for="(item, index) in slotProps.items" :key="index">
                <div class="flex flex-col sm:flex-row sm:items-center p-6 gap-4" :class="{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }">
                    <div class="md:w-40 relative">
                        <img class="block xl:block mx-auto rounded w-full" :src="`https://primefaces.org/cdn/primevue/images/product/${item.image}`" :alt="item.name" />
                        <div class="absolute bg-black/70 rounded-border" style="left: 4px; top: 4px">
                            <Tag :value="item.inventoryStatus" :severity="getSeverity(item)"></Tag>
                        </div>
                    </div>
                    <div class="flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6">
                        <div class="flex flex-row md:flex-col justify-between items-start gap-2">
                            <div>
                                <span class="font-medium text-surface-500 dark:text-surface-400 text-sm">{{ item.category }}</span>
                                <div class="text-lg font-medium mt-2">{{ item.name }}</div>
                            </div>
                            <div class="bg-surface-100 p-1" style="border-radius: 30px">
                                <div class="bg-surface-0 flex items-center gap-2 justify-center py-1 px-2" style="border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)">
                                    <span class="text-surface-900 font-medium text-sm">{{ item.rating }}</span>
                                    <i class="pi pi-star-fill text-yellow-500"></i>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col md:items-end gap-8">
                            <span class="text-xl font-semibold">${{ item.price }}</span>
                            <div class="flex flex-row-reverse md:flex-row gap-2">
                                <Button icon="pi pi-heart" outlined></Button>
                                <Button icon="pi pi-shopping-cart" label="Buy Now" :disabled="item.inventoryStatus === 'OUTOFSTOCK'" class="flex-auto md:flex-initial whitespace-nowrap"></Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
</DataView>

```

Copy

## Sorting [\#](https://primevue.org/dataview/\#sorting)

Built-in sorting is controlled by bindings _sortField_ and _sortField_ properties from a custom UI.

Sort By Price

![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)

INSTOCK

Accessories

Bamboo Watch

5

$65

Buy Now

![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)

INSTOCK

Accessories

Black Watch

4

$72

Buy Now

![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)

LOWSTOCK

Fitness

Blue Band

3

$79

Buy Now

![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)

INSTOCK

Clothing

Blue T-Shirt

5

$29

Buy Now

![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)

INSTOCK

Accessories

Bracelet

4

$15

Buy Now

```markup

<DataView :value="products" :sortOrder="sortOrder" :sortField="sortField">
    <template #header>
        <Select v-model="sortKey" :options="sortOptions" optionLabel="label" placeholder="Sort By Price" @change="onSortChange($event)" />
    </template>
    <template #list="slotProps">
        <div class="flex flex-col">
            <div v-for="(item, index) in slotProps.items" :key="index">
                <div class="flex flex-col sm:flex-row sm:items-center p-6 gap-4" :class="{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }">
                    <div class="md:w-40 relative">
                        <img class="block xl:block mx-auto rounded w-full" :src="`https://primefaces.org/cdn/primevue/images/product/${item.image}`" :alt="item.name" />
                        <div class="absolute bg-black/70 rounded-border" style="left: 4px; top: 4px">
                            <Tag :value="item.inventoryStatus" :severity="getSeverity(item)"></Tag>
                        </div>
                    </div>
                    <div class="flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6">
                        <div class="flex flex-row md:flex-col justify-between items-start gap-2">
                            <div>
                                <span class="font-medium text-surface-500 dark:text-surface-400 text-sm">{{ item.category }}</span>
                                <div class="text-lg font-medium mt-2">{{ item.name }}</div>
                            </div>
                            <div class="bg-surface-100 p-1" style="border-radius: 30px">
                                <div class="bg-surface-0 flex items-center gap-2 justify-center py-1 px-2" style="border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)">
                                    <span class="text-surface-900 font-medium text-sm">{{ item.rating }}</span>
                                    <i class="pi pi-star-fill text-yellow-500"></i>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col md:items-end gap-8">
                            <span class="text-xl font-semibold">${{ item.price }}</span>
                            <div class="flex flex-row-reverse md:flex-row gap-2">
                                <Button icon="pi pi-heart" outlined></Button>
                                <Button icon="pi pi-shopping-cart" label="Buy Now" :disabled="item.inventoryStatus === 'OUTOFSTOCK'" class="flex-auto md:flex-initial whitespace-nowrap"></Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
</DataView>

```

Copy

## Layout [\#](https://primevue.org/dataview/\#layout)

DataView supports _list_ and _grid_ display modes defined with the _layout_ property. The _grid_ mode is not built-in for flexibility purposes and requires a library with CSS grid features like Tailwind.

![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)

INSTOCK

Accessories

Bamboo Watch

5

$65

Buy Now

![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)

INSTOCK

Accessories

Black Watch

4

$72

Buy Now

![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)

LOWSTOCK

Fitness

Blue Band

3

$79

Buy Now

![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)

INSTOCK

Clothing

Blue T-Shirt

5

$29

Buy Now

![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)

INSTOCK

Accessories

Bracelet

4

$15

Buy Now

![Brown Purse](https://primefaces.org/cdn/primevue/images/product/brown-purse.jpg)

OUTOFSTOCK

Accessories

Brown Purse

4

$120

Buy Now

![Chakra Bracelet](https://primefaces.org/cdn/primevue/images/product/chakra-bracelet.jpg)

LOWSTOCK

Accessories

Chakra Bracelet

3

$32

Buy Now

![Galaxy Earrings](https://primefaces.org/cdn/primevue/images/product/galaxy-earrings.jpg)

INSTOCK

Accessories

Galaxy Earrings

5

$34

Buy Now

![Game Controller](https://primefaces.org/cdn/primevue/images/product/game-controller.jpg)

LOWSTOCK

Electronics

Game Controller

4

$99

Buy Now

![Gaming Set](https://primefaces.org/cdn/primevue/images/product/gaming-set.jpg)

INSTOCK

Electronics

Gaming Set

3

$299

Buy Now

![Gold Phone Case](https://primefaces.org/cdn/primevue/images/product/gold-phone-case.jpg)

OUTOFSTOCK

Accessories

Gold Phone Case

4

$24

Buy Now

![Green Earbuds](https://primefaces.org/cdn/primevue/images/product/green-earbuds.jpg)

INSTOCK

Electronics

Green Earbuds

4

$89

Buy Now

```markup

<DataView :value="products" :layout="layout">
    <template #header>
        <div class="flex justify-end">
            <SelectButton v-model="layout" :options="options" :allowEmpty="false">
                <template #option="{ option }">
                    <i :class="[option === 'list' ? 'pi pi-bars' : 'pi pi-table']" />
                </template>
            </SelectButton>
        </div>
    </template>

    <template #list="slotProps">
        <div class="flex flex-col">
            <div v-for="(item, index) in slotProps.items" :key="index">
                <div class="flex flex-col sm:flex-row sm:items-center p-6 gap-4" :class="{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }">
                    <div class="md:w-40 relative">
                        <img class="block xl:block mx-auto rounded w-full" :src="`https://primefaces.org/cdn/primevue/images/product/${item.image}`" :alt="item.name" />
                        <div class="absolute bg-black/70 rounded-border" style="left: 4px; top: 4px">
                            <Tag :value="item.inventoryStatus" :severity="getSeverity(item)"></Tag>
                        </div>
                    </div>
                    <div class="flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6">
                        <div class="flex flex-row md:flex-col justify-between items-start gap-2">
                            <div>
                                <span class="font-medium text-surface-500 dark:text-surface-400 text-sm">{{ item.category }}</span>
                                <div class="text-lg font-medium mt-2">{{ item.name }}</div>
                            </div>
                            <div class="bg-surface-100 p-1" style="border-radius: 30px">
                                <div class="bg-surface-0 flex items-center gap-2 justify-center py-1 px-2" style="border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)">
                                    <span class="text-surface-900 font-medium text-sm">{{ item.rating }}</span>
                                    <i class="pi pi-star-fill text-yellow-500"></i>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col md:items-end gap-8">
                            <span class="text-xl font-semibold">${{ item.price }}</span>
                            <div class="flex flex-row-reverse md:flex-row gap-2">
                                <Button icon="pi pi-heart" outlined></Button>
                                <Button icon="pi pi-shopping-cart" label="Buy Now" :disabled="item.inventoryStatus === 'OUTOFSTOCK'" class="flex-auto md:flex-initial whitespace-nowrap"></Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>

    <template #grid="slotProps">
        <div class="grid grid-cols-12 gap-4">
            <div v-for="(item, index) in slotProps.items" :key="index" class="col-span-12 sm:col-span-6 md:col-span-4 xl:col-span-6 p-2">
                <div class="p-6 border border-surface-200 dark:border-surface-700 bg-surface-0 dark:bg-surface-900 rounded flex flex-col">
                    <div class="bg-surface-50 flex justify-center rounded p-4">
                        <div class="relative mx-auto">
                            <img class="rounded w-full" :src="`https://primefaces.org/cdn/primevue/images/product/${item.image}`" :alt="item.name" style="max-width: 300px"/>
                            <div class="absolute bg-black/70 rounded-border" style="left: 4px; top: 4px">
                                <Tag :value="item.inventoryStatus" :severity="getSeverity(item)"></Tag>
                            </div>
                        </div>
                    </div>
                    <div class="pt-6">
                        <div class="flex flex-row justify-between items-start gap-2">
                            <div>
                                <span class="font-medium text-surface-500 dark:text-surface-400 text-sm">{{ item.category }}</span>
                                <div class="text-lg font-medium mt-1">{{ item.name }}</div>
                            </div>
                            <div class="bg-surface-100 p-1" style="border-radius: 30px">
                                <div class="bg-surface-0 flex items-center gap-2 justify-center py-1 px-2" style="border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)">
                                    <span class="text-surface-900 font-medium text-sm">{{ item.rating }}</span>
                                    <i class="pi pi-star-fill text-yellow-500"></i>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col gap-6 mt-6">
                            <span class="text-2xl font-semibold">${{ item.price }}</span>
                            <div class="flex gap-2">
                                <Button icon="pi pi-shopping-cart" label="Buy Now" :disabled="item.inventoryStatus === 'OUTOFSTOCK'" class="flex-auto whitespace-nowrap"></Button>
                                <Button icon="pi pi-heart" outlined></Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
</DataView>

```

Copy

## Loading [\#](https://primevue.org/dataview/\#loading)

While data is being loaded, [Skeleton](https://primevue.org/skeleton/) component may be used to indicate the busy state.

```markup

<DataView :value="products" :layout="layout">
    <template #header>
        <div class="flex justify-end">
            <SelectButton v-model="layout" :options="options" :allowEmpty="false">
                <template #option="{ option }">
                    <i :class="[option === 'list' ? 'pi pi-bars' : 'pi pi-table']" />
                </template>
            </SelectButton>
        </div>
    </template>

    <template #list>
        <div class="flex flex-col">
            <div v-for="i in 6" :key="i">
                <div class="flex flex-col xl:flex-row xl:items-start p-6 gap-6" :class="{ 'border-t border-surface-200 dark:border-surface-700': i !== 0 }">
                    <Skeleton class="!w-9/12 sm:!w-64 xl:!w-40 !h-24 mx-auto" />
                    <div class="flex flex-col sm:flex-row justify-between items-center xl:items-start flex-1 gap-6">
                        <div class="flex flex-col items-center sm:items-start gap-4">
                            <Skeleton width="8rem" height="2rem" />
                            <Skeleton width="6rem" height="1rem" />

                            <div class="flex items-center gap-4">
                                <Skeleton width="6rem" height="1rem" />
                                <Skeleton width="3rem" height="1rem" />
                            </div>
                        </div>
                        <div class="flex sm:flex-col items-center sm:items-end gap-4 sm:gap-2">
                            <Skeleton width="4rem" height="2rem" />
                            <Skeleton size="3rem" shape="circle" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>

    <template #grid>
        <div class="grid grid-cols-12 gap-4">
            <div v-for="i in 6" :key="i" class="col-span-12 sm:col-span-6 xl:col-span-4 p-2">
                <div class="p-6 border border-surface-200 dark:border-surface-700 bg-surface-0 dark:bg-surface-900 rounded">
                    <div class="flex flex-wrap items-center justify-between gap-2">
                        <Skeleton width="6rem" height="2rem" />
                        <Skeleton width="3rem" height="1rem" />
                    </div>
                    <div class="flex flex-col items-center gap-4 py-8">
                        <Skeleton width="75%" height="10rem" />
                        <Skeleton width="8rem" height="2rem" />
                        <Skeleton width="6rem" height="1rem" />
                    </div>
                    <div class="flex items-center justify-between">
                        <Skeleton width="4rem" height="2rem" />
                        <Skeleton width="6rem" height="1rem" shape="circle" size="3rem" />
                    </div>
                </div>
            </div>
        </div>
    </template>
</DataView>

```

Copy

## Accessibility [\#](https://primevue.org/dataview/\#accessibility)

### Screen Reader

The container element that wraps the layout options buttons has a _group_ role whereas each button element uses _button_ role and _aria-pressed_ is updated depending on selection state. Values to describe the buttons are derived from the _aria.listView_ and _aria.gridView_ properties of the [locale](https://primevue.org/configuration/#locale) API respectively.

Refer to [paginator](https://primevue.org/paginator/) accessibility documentation for the paginator of the component.

### Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the buttons. |
| _space_ | Toggles the checked state of a button. |

- Import

- Basic

- Pagination

- Sorting

- Layout

- Loading

- Accessibility


# DataView API

API defines helper props, events and others for the PrimeVue DataView module.

## DataView [\#](https://primevue.org/dataview/\#api.dataview)

DataView displays data in grid or list layout with pagination and sorting features.

### Props [\#](https://primevue.org/dataview/\#api.dataview.props)

Defines valid properties in DataView component. In addition to these, all properties of HTMLDivElement can be used in this component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | any\[\] | null | An array of objects to display. |  |
| layout | HintedString<"list" \| "grid"> | list | Layout of the items, valid values are 'list' and 'grid'. |  |
| rows | number | 0 | Number of rows to display per page. |  |
| first | number | 0 | Index of the first record to render. |  |
| totalRecords | number | null | Number of total records, defaults to length of value when not defined. |  |
| paginator | boolean | false | When specified as true, enables the pagination. |  |
| paginatorPosition | HintedString<"top" \| "bottom" \| "both"> | bottom | Position of the paginator, options are 'top','bottom' or 'both'. |  |
| alwaysShowPaginator | boolean | true | Whether to show it even there is only one page. |  |
| paginatorTemplate | string | FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown | Template of the paginator. It can be customized using the template property using the predefined keys,<br>\- FirstPageLink<br>\- PrevPageLink<br>\- PageLinks<br>\- NextPageLink<br>\- LastPageLink<br>\- RowsPerPageDropdown<br>\- JumpToPageDropdown<br>\- JumpToPageInput<br>\- CurrentPageReport |  |
| pageLinkSize | number | 5 | Number of page links to display. |  |
| rowsPerPageOptions | number\[\] | null | Array of integer values to display inside rows per page dropdown. |  |
| currentPageReportTemplate | string | '({currentPage} of {totalPages})' | Template of the current page report element. It displays information about the pagination state.<br>\- {currentPage}<br>\- {totalPages}<br>\- {rows}<br>\- {first}<br>\- {last}<br>\- {totalRecords} |  |
| sortField | string \| Function | null | Property name or a getter function of data to use in sorting by default. |  |
| sortOrder | number | null | Order to sort the data by default. |  |
| lazy | boolean | false | Defines if data is loaded and interacted with in lazy manner. |  |
| dataKey | undefined \| string | null | Name of the data that uniquely identifies the a record in the data. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DataViewPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Emits [\#](https://primevue.org/dataview/\#api.dataview.emits)

Defines valid slots in DataView component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:first | value: number | void | Emitted when the first changes. |  |
| update:rows | value: number | void | Emitted when the rows changes. |  |
| page | event: [DataViewPageEvent](https://primevue.org/dataview/#api.dataview.events.DataViewPageEvent) | void | Callback to invoke when page changes, the event object contains information about the new state. |  |

### Slots [\#](https://primevue.org/dataview/\#api.dataview.slots)

Defines valid slots in DataView component.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| empty | scope: {<br>layout: string, // Layout of the items.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template. |  |
| paginatorcontainer | scope: {<br>first: number, // Index of first recordlast: number, // Index of last recordrows: number, // Number of rows to display in new pagepage: number, // New page numberpageCount: number, // Total number of pagespageLinks: number, // Direct page linkstotalRecords: number, // Total recordsfirstPageCallback: (event: Event) â‡’ void, // First page function.lastPageCallback: (event: Event) â‡’ void, // Last page function.prevPageCallback: (event: Event) â‡’ void, // Previous page function.nextPageCallback: (event: Event) â‡’ void, // Next page function.rowChangeCallback: (value: number) â‡’ void, // Row change function.changePageCallback: (value: number) â‡’ void, // Page change function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator container template. |  |
| paginatorstart |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator start template. |  |
| paginatorend |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator end template. |  |
| list | scope: {<br>items: any, // Value of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom list template. |  |
| grid | scope: {<br>items: any, // Value of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom list template. |  |

### Events [\#](https://primevue.org/dataview/\#api.dataview.events)

Defines the custom events used by the component's emit.

#### DataViewPageEvent [\#](https://primevue.org/dataview/\#api.dataview.events.DataViewPageEvent)

Custom page event.

See [page](https://primevue.org/dataview/#api.dataview.emitsoptions.page)

| name | type | description |
| --- | --- | --- |
| page | number | New page number |
| first | number | Index of first record |
| rows | number | Number of rows to display in new page |
| pageCount | number | Total number of pages |

### Interfaces [\#](https://primevue.org/dataview/\#api.dataview.interfaces)

Defines the custom interfaces used by the module.

#### DataViewPassThroughMethodOptions [\#](https://primevue.org/dataview/\#api.dataview.interfaces.DataViewPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DataViewProps](https://primevue.org/dataview/#api.dataview.interfaces.DataViewProps) | null | Defines valid properties. |
| state | [DataViewState](https://primevue.org/dataview/#api.dataview.interfaces.DataViewState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### DataViewSharedPassThroughMethodOptions [\#](https://primevue.org/dataview/\#api.dataview.interfaces.DataViewSharedPassThroughMethodOptions)

Custom shared passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| props | [DataViewProps](https://primevue.org/dataview/#api.dataview.interfaces.DataViewProps) | null | Defines valid properties. |
| state | [DataViewState](https://primevue.org/dataview/#api.dataview.interfaces.DataViewState) | null | Defines current inline state. |

#### DataViewPassThroughOptions [\#](https://primevue.org/dataview/\#api.dataview.interfaces.DataViewPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [DataViewPassThroughOptionType](https://primevue.org/dataview/#api.dataview.types.DataViewPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [DataViewPassThroughOptionType](https://primevue.org/dataview/#api.dataview.types.DataViewPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| pcPaginator | any | null | Used to pass attributes to the Paginator component. |
| content | [DataViewPassThroughOptionType](https://primevue.org/dataview/#api.dataview.types.DataViewPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| emptyMessage | [DataViewPassThroughOptionType](https://primevue.org/dataview/#api.dataview.types.DataViewPassThroughOptionType) | null | Used to pass attributes to the empty message's DOM element. |
| footer | [DataViewPassThroughOptionType](https://primevue.org/dataview/#api.dataview.types.DataViewPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### DataViewPassThroughAttributes [\#](https://primevue.org/dataview/\#api.dataview.interfaces.DataViewPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### DataViewState [\#](https://primevue.org/dataview/\#api.dataview.interfaces.DataViewState)

Defines current inline state in DataView component.

| name | type | default | description |
| --- | --- | --- | --- |
| d\_first | number | null | Current index of first record as a number. |
| d\_rows | number | null | Current number of rows to display in new page as a number. |

## Types [\#](https://primevue.org/dataview/\#api.dataview.types)

Defines the custom types used by the module.

#### DataViewPassThroughOptionType [\#](https://primevue.org/dataview/\#api.dataview.types.DataViewPassThroughOptionType)

| values |
| --- |
| DataViewPassThroughAttributes \| (options: DataViewPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### DataViewEmits [\#](https://primevue.org/dataview/\#api.dataview.types.DataViewEmits)

| values |
| --- |
| EmitFn<DataViewEmitsOptions> |

- DataView

  - Props

  - Emits

  - Slots

  - Events

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## PrimeVue Image Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# Image

Displays a single image with preview and tranformation options.

## Import [\#](https://primevue.org/image/\#import)

```javascript

import Image from 'primevue/image';

```

Copy

## Basic [\#](https://primevue.org/image/\#basic)

Image is used similar to the standard _img_ element.

![Image](https://primefaces.org/cdn/primevue/images/galleria/galleria10.jpg)

```markup

<Image src="/image.jpg" alt="Image" width="250" />

```

Copy

## Preview [\#](https://primevue.org/image/\#preview)

Enabling _preview_ mode displays a modal layer when the image is clicked to provide transformation options such as rotating and zooming.

![Image](https://primefaces.org/cdn/primevue/images/galleria/galleria10.jpg)

```markup

<Image src="/image.jpg" alt="Image" width="250" preview />

```

Copy

## Template [\#](https://primevue.org/image/\#template)

An eye icon is displayed by default when the image is hovered in preview mode, use the _previewicon_ slot for custom content. In addition, the _image_ and _preview_ slots are available to define the thumbnail and detailed image respectively.

![image](https://primefaces.org/cdn/primevue/images/galleria/galleria11.jpg)

```markup

<Image alt="Image" preview>
    <template #previewicon>
        <i class="pi pi-search"></i>
    </template>
    <template #image>
        <img src="/thumbnail.jpg" alt="image" />
    </template>
    <template #preview="slotProps">
        <img src="/image.jpg" alt="preview" :style="slotProps.style" @click="slotProps.onClick" />
    </template>
</Image>

```

Copy

## Accessibility [\#](https://primevue.org/image/\#accessibility)

### Screen Reader

The preview button is a native _button_ element with an _aria-label_ that refers to the _aria.zoomImage_ property of the [locale](https://primevue.org/configuration/#locale) API by default, with _previewButtonProps_ you may use your own aria roles and attributes as any valid attribute is passed to the button element implicitly.

When preview is active, _dialog_ role with _aria-modal_ is applied to the overlay image container.

Button controls use _aria.rotateRight_, _aria.rotateLeft_, _aria.zoomIn_, _aria.zoomOut_ and _aria.close_ from the [locale](https://primevue.org/configuration/#locale) API as _aria-label_.

### ButtonBar Keyboard Support

When preview is activated, close button receives the initial focus.

| Key | Function |
| --- | --- |
| _tab_ | Moves focus through button bar. |
| _enter_ | Activates the button. |
| _space_ | Activates the button. |
| _esc_ | Closes the image preview. |

- Import

- Basic

- Preview

- Template

- Accessibility


# Image API

API defines helper props, events and others for the PrimeVue Image module.

## Image [\#](https://primevue.org/image/\#api.image)

Displays an image with preview and tranformation options. For multiple image, see Galleria.

### Props [\#](https://primevue.org/image/\#api.image.props)

Defines valid properties in Image component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| src | string | null | Image url. |  |
| preview | boolean | false | Controls the preview functionality. |  |
| imageStyle | any | null | Inline style of the image element. |  |
| imageClass | any | null | Style class of the image element. |  |
| indicatorIcon | string | null | Custom indicator icon. |  |
| previewIcon | string | null | Custom indicator icon. |  |
| zoomInDisabled | boolean | false | Disable the zoom-in button |  |
| zoomOutDisabled | boolean | false | Disable the zoom-out button |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ImagePassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Slots [\#](https://primevue.org/image/\#api.image.slots)

Defines valid slots in Image slots.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| previewicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom indicator template. |  |
| indicatoricon |  | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| refresh |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom refresh template. |  |
| undo |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom undo template. |  |
| zoomout |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom zoomout template. |  |
| zoomin |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom zoomin template. |  |
| close |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom close template. |  |
| image | scope: {<br>class: any, // Style class of the image element.style: any, // Style of the image element.errorCallback: () â‡’ void, // Preview click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom image template. |  |
| preview | scope: {<br>class: any, // Style class of the preview image element.style: any, // Style of the preview image element.previewCallback: () â‡’ void, // Preview click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| original | scope: {<br>class: any, // Style class of the original image element.style: any, // Style of the original image element.previewCallback: () â‡’ void, // Preview click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom original template. |  |

### Methods [\#](https://primevue.org/image/\#api.image.methods)

Defines methods that can be accessed by the component's reference.

| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| show |  | void | Triggered when the preview overlay is shown. |  |
| hide |  | void | Triggered when the preview overlay is hidden. |  |
| error |  | void | Triggered when an error occurs while loading an image file. |  |

### Interfaces [\#](https://primevue.org/image/\#api.image.interfaces)

Defines the custom interfaces used by the module.

#### ImagePassThroughMethodOptions [\#](https://primevue.org/image/\#api.image.interfaces.ImagePassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ImageProps](https://primevue.org/image/#api.image.interfaces.ImageProps) | null | Ë†<br>Defines valid properties. |
| state | [ImageState](https://primevue.org/image/#api.image.interfaces.ImageState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### ImagePassThroughOptions [\#](https://primevue.org/image/\#api.image.interfaces.ImagePassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| image | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the image's DOM element. |
| previewMask | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the preview mask's DOM element. |
| previewIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the preview icon's DOM element. |
| mask | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| toolbar | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the toolbar's DOM element. |
| rotateRightButton | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the rotate right button's DOM element. |
| rotateRightIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the rotate right icon's DOM element. |
| rotateLeftButton | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the rotate left button's DOM element. |
| rotateLeftIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the rotate left icon's DOM element. |
| zoomOutButton | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the zoom out button's DOM element. |
| zoomOutIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the zoom out icon's DOM element. |
| zoomInButton | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the zoom in button's DOM element. |
| zoomInIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the zoom in icon's DOM element. |
| closeButton | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the close button's DOM element. |
| closeIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the close icon's DOM element. |
| originalContainer | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the original container's DOM element. |
| original | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the original's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [ImagePassThroughTransitionType](https://primevue.org/image/#api.image.types.ImagePassThroughTransitionType) | null | Used to control Vue Transition API. |

#### ImagePassThroughAttributes [\#](https://primevue.org/image/\#api.image.interfaces.ImagePassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### ImageState [\#](https://primevue.org/image/\#api.image.interfaces.ImageState)

Defines current inline state in Image component.

| name | type | default | description |
| --- | --- | --- | --- |
| maskVisible | boolean | false | Mask visible state as a boolean. |
| previewVisible | boolean | false | Preview visible state as a boolean. |
| rotate | number | 0 | Rotate state as a number. |
| scale | number | 1 | Scale state as a boolean. |

## Types [\#](https://primevue.org/image/\#api.image.types)

Defines the custom types used by the module.

#### ImagePassThroughOptionType [\#](https://primevue.org/image/\#api.image.types.ImagePassThroughOptionType)

| values |
| --- |
| ImagePassThroughAttributes \| (options: ImagePassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### ImagePassThroughTransitionType [\#](https://primevue.org/image/\#api.image.types.ImagePassThroughTransitionType)

| values |
| --- |
| TransitionProps \| (options: ImagePassThroughMethodOptions) => TransitionProps \| undefined |

#### ImageEmits [\#](https://primevue.org/image/\#api.image.types.ImageEmits)

| values |
| --- |
| EmitFn<ImageEmitsOptions> |

- Image

  - Props

  - Slots

  - Methods

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

## ScrollPanel Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)

[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)

- Search`` `K`

- Primary







Surface







Theme

AuraMaterialLaraNora









Ripple



















RTL

- v4


- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)

- FEATURES
- API
- THEMING
- PASS THROUGH

# ScrollPanel

ScrollPanel is a cross browser, lightweight and skinnable alternative to native browser scrollbar.

## Import [\#](https://primevue.org/scrollpanel/\#import)

```javascript

import ScrollPanel from 'primevue/scrollpanel';

```

Copy

## Basic [\#](https://primevue.org/scrollpanel/\#basic)

ScrollPanel is defined using dimensions for the scrollable viewport.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

Quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat

```markup

<ScrollPanel style="width: 100%; height: 200px">
    <p>
        Lorem ipsum dolor ...
    </p>
</ScrollPanel>


```

Copy

## Custom [\#](https://primevue.org/scrollpanel/\#custom)

Scrollbar visuals can be styled for a unified look across different platforms.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.

```markup

<ScrollPanel
    style="width: 100%; height: 200px"
    :dt="{
        bar: {
            background: '{primary.color}'
        }
    }"
>
    ...
</ScrollPanel>

```

Copy

## Accessibility [\#](https://primevue.org/scrollpanel/\#accessibility)

### Screen Reader

Scrollbars of the ScrollPanel has a _scrollbar_ role along with the _aria-controls_ attribute that refers to the id of the scrollable content container and the _aria-orientation_ to indicate the orientation of scrolling.

### Header Keyboard Support

| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the bar. |
| _down arrow_ | Scrolls content down when vertical scrolling is available. |
| _up arrow_ | Scrolls content up when vertical scrolling is available. |
| _left_ | Scrolls content left when horizontal scrolling is available. |
| _right_ | Scrolls content right when horizontal scrolling is available. |

- Import

- Basic

- Custom

- Accessibility


# ScrollPanel API

API defines helper props, events and others for the PrimeVue ScrollPanel module.

## ScrollPanel [\#](https://primevue.org/scrollpanel/\#api.scrollpanel)

ScrollPanel is a cross browser, lightweight and themable alternative to native browser scrollbar.

### Props [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.props)

Defines valid properties in ScrollPanel component.

| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| step | number | 5 | Step factor to scroll the content while pressing the arrow keys. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ScrollPanelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |

### Interfaces [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.interfaces)

Defines the custom interfaces used by the module.

#### ScrollPanelPassThroughMethodOptions [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.interfaces.ScrollPanelPassThroughMethodOptions)

Custom passthrough(pt) option method.

| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ScrollPanelProps](https://primevue.org/scrollpanel/#api.scrollpanel.interfaces.ScrollPanelProps) | null | Defines valid properties. |
| state | [ScrollPanelState](https://primevue.org/scrollpanel/#api.scrollpanel.interfaces.ScrollPanelState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |

#### ScrollPanelPassThroughOptions [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.interfaces.ScrollPanelPassThroughOptions)

Custom passthrough(pt) options.

| name | type | default | description |
| --- | --- | --- | --- |
| root | [ScrollPanelPassThroughOptionType](https://primevue.org/scrollpanel/#api.scrollpanel.types.ScrollPanelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| contentContainer | [ScrollPanelPassThroughOptionType](https://primevue.org/scrollpanel/#api.scrollpanel.types.ScrollPanelPassThroughOptionType) | null | Used to pass attributes to the content container's DOM element. |
| content | [ScrollPanelPassThroughOptionType](https://primevue.org/scrollpanel/#api.scrollpanel.types.ScrollPanelPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| barX | [ScrollPanelPassThroughOptionType](https://primevue.org/scrollpanel/#api.scrollpanel.types.ScrollPanelPassThroughOptionType) | null | Used to pass attributes to the horizontal panel's DOM element. |
| barY | [ScrollPanelPassThroughOptionType](https://primevue.org/scrollpanel/#api.scrollpanel.types.ScrollPanelPassThroughOptionType) | null | Used to pass attributes to the vertical panel's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |

#### ScrollPanelPassThroughAttributes [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.interfaces.ScrollPanelPassThroughAttributes)

Custom passthrough attributes for each DOM elements

| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |

#### ScrollPanelState [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.interfaces.ScrollPanelState)

Defines current inline state in Panel component.

| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| orientation | string | vertical | Current scrollpanel orientation. |
| lastScrollTop | number | 0 | Latest scroll top position. |
| lastScrollLeft | number | 0 | Latest scroll left position. |

## Types [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.types)

Defines the custom types used by the module.

#### ScrollPanelPassThroughOptionType [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.types.ScrollPanelPassThroughOptionType)

| values |
| --- |
| ScrollPanelPassThroughAttributes \| (options: ScrollPanelPassThroughMethodOptions) => undefined \| string \| null \| undefined |

#### ScrollPanelEmits [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.types.ScrollPanelEmits)

| values |
| --- |
| EmitFn<ScrollPanelEmitsOptions> |

- ScrollPanel

  - Props

  - Interfaces

  - Types

PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)

