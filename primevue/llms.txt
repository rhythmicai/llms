# https://primevue.org llms-full.txt
## PrimeVue UI Suite
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# The Next-Gen UI Suite for Vue.js
Enhance your web applications with PrimeVue's comprehensive suite of customizable, feature-rich UI components. With PrimeVue, turning your development vision into reality has never been easier.
[Get Started](https://primevue.org/setup/) [Give a Star](https://github.com/primefaces/primevue)
Overview
Chat
Inbox
Cards
Customers
Movies
![](https://www.primefaces.org/cdn/primevue/images/landing/apps/sampleshots/overview.jpg)
Prime
ãƒ»Overview
ãƒ»Chat
ãƒ»Inbox
ãƒ»Cards
ãƒ»Customers
ãƒ»Movies
ãƒ»Settings
![](https://www.primefaces.org/cdn/primevue/images/landing/apps/main-avatar.png)
Robin Jonas
hi@robin.xyz
Overview
Welcome to PrimeVue
WeeklyMonthlyYearly
Download
Crypto Analytics
Personal Wallet
Corporate Wallet
Investment Wallet
Transactions
| Id | Name | Coin | Date | Process | Amount |
| --- | --- | --- | --- | --- | --- |
| #1254 | AY<br>Amy Yelsner |  | May 5th | Buy | 3.005 BTC |
| #2355 | AF<br>Anna Fali |  | Mar 17th | Buy | 0.050 ETH |
| #1235 | SS<br>Stepen Shaw |  | May 24th | Sell | 3.050 BTC |
| #2355 | AF<br>Anna Fali |  | Mar 17th | Sell | 0.050 ETH |
| #2355 | AF<br>Anna Fali |  | Mar 17th | Sell | 0.050 ETH |
My Wallet
BTC (15%)
27.215
ETH (5%)
4.367
GBP (25%)
Â£ 147.562,32
EUR (11%)
â‚¬ 137.457,25
USD (29%)
$ 133.364,12
XAU (29%)
200 g
Show All
Features
PrimeVue is the most complete solution for your UI requirements.
![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-components.svg)
80+ UI Components
The ultimate set of UI Components to assist you with 80+ impressive Vue Components.
![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-theme.svg)
Styled or Unstyled
Choose from a variety of pre-built themes or implement your design systems with the CSS library of your choice like TailwindCSS.
![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-community.svg)
Community
Connect with the other open source community members, collaborate and have a voice in the project roadmap.
![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-accessibility.svg)
Accessibility
Compliant with the Web Content Accessibility Guidelines (WCAG 2.0).
![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-support.svg)
Enterprise Support
Exceptional support service featuring response within 1 business day and option to request enhancements and new features for the library.
![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-mobile.svg)
Mobile
First class support for responsive design led by touch optimized elements.
![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-productivity.svg)
Blocks
500+ pre-designed copy paste ready UI blocks to build spectacular apps in no time.
![components icon](https://primefaces.org/cdn/primevue/images/landing/features/icon-ts.svg)
Typescript
Top-notch support for Typescript with types and tooling assistance.
Who Uses
PrimeTek libraries have reached over 250 Million Downloads  on npm! Join the PrimeLand community and experience the difference yourself.
![fox-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/fox-dark.svg)
![airbus-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/airbus-dark.svg)
![mercedes-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/mercedes-dark.svg)
![ebay-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ebay-dark.svg)
![ford-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ford-dark.svg)
![vw-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/vw-dark.svg)
![fox-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/fox-dark.svg)
![airbus-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/airbus-dark.svg)
![mercedes-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/mercedes-dark.svg)
![ebay-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ebay-dark.svg)
![ford-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ford-dark.svg)
![vw-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/vw-dark.svg)
![fox-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/fox-dark.svg)
![airbus-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/airbus-dark.svg)
![mercedes-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/mercedes-dark.svg)
![ebay-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ebay-dark.svg)
![ford-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/ford-dark.svg)
![vw-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/vw-dark.svg)
![intel-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/intel-dark.svg)
![unicredit-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/unicredit-dark.svg)
![lufthansa-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/lufthansa-dark.svg)
![nvidia-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/nvidia-dark.svg)
![verizon-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/verizon-dark.svg)
![amex-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/amex-dark.svg)
![intel-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/intel-dark.svg)
![unicredit-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/unicredit-dark.svg)
![lufthansa-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/lufthansa-dark.svg)
![nvidia-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/nvidia-dark.svg)
![verizon-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/verizon-dark.svg)
![amex-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/amex-dark.svg)
![intel-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/intel-dark.svg)
![unicredit-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/unicredit-dark.svg)
![lufthansa-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/lufthansa-dark.svg)
![nvidia-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/nvidia-dark.svg)
![verizon-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/verizon-dark.svg)
![amex-dark](https://primefaces.org/cdn/primevue/images/landing/whouses/amex-dark.svg)
Components
The most complete UI component library for Vue.js based on a design-agnostic infrastructure.
Customers
|  | Name | Country | Agent | Date | Balance | Status | Activity |  |
| --- | --- | --- | --- | --- | --- | --- | --- | --- |
|  | James Butt | ![flag](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)Algeria | ![Ioni Bowcher](https://primefaces.org/cdn/primevue/images/avatar/ionibowcher.png)Ioni Bowcher | 09/12/2015 | $70,663.00 | unqualified |  |  |
|  | Josephine Darakjy | ![flag](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)Egypt | ![Amy Elsner](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)Amy Elsner | 02/08/2019 | $82,429.00 | negotiation |  |  |
|  | Art Venere | ![flag](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)Panama | ![Asiya Javayant](https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png)Asiya Javayant | 05/12/2017 | $28,334.00 | qualified |  |  |
|  | Lenna Paprocki | ![flag](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)Slovenia | ![Xuxue Feng](https://primefaces.org/cdn/primevue/images/avatar/xuxuefeng.png)Xuxue Feng | 09/14/2020 | $88,521.00 | new |  |  |
|  | Donette Foller | ![flag](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)South Africa | ![Asiya Javayant](https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png)Asiya Javayant | 05/19/2016 | $93,905.00 | negotiation |  |  |
Blocks
500+ ready to copy-paste UI blocks to build spectacular applications in no time.
[Explore All](https://primeblocks.org/)
![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-1.svg)
![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-1.svg)
26 %
6 %
62 %
39 %
![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-2.svg)
![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-1.svg)
![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-2.svg)
![block logo](https://primefaces.org/cdn/primevue/images/landing/blocks/logo-1.svg)
![question mark](https://primefaces.org/cdn/primevue/images/landing/blocks/question.svg)
Templates
Professionally designed highly customizable application templates to get started in style.
[Explore All](https://www.primefaces.org/store)
[Verona Preview](https://verona.primevue.org/)
[Freya Preview](https://freya.primevue.org/)
[Atlantis Preview](https://atlantis.primevue.org/)
![](https://primefaces.org/cdn/primevue/images/landing/templates/templates-text-noir-light.png)
[Apollo Preview](https://apollo.primevue.org/)
[Diamond Preview](https://diamond.primevue.org/)
[Ultima Preview](https://ultima.primevue.org/)
- General
- [Get Started](https://primevue.org/setup/)
- [Examples](https://github.com/primefaces/primevue-examples)
- Support
- [Forum](https://github.com/orgs/primefaces/discussions)
- [Discord](https://discord.gg/gzKFYnpmCY)
- [PRO Support](https://primevue.org/support/)
- Theming
- [Styled Mode](https://primevue.org/theming/styled/)
- [Unstyled Mode](https://primevue.org/theming/unstyled/)
- Resources
- [PrimeTV](https://www.youtube.com/channel/UCTgmp69aBOlLnPEqlUyetWw)
- [Store](https://www.primefaces.org/store/)
- [Source Code](https://github.com/primefaces/primevue)
- [Twitter](https://twitter.com/primevue)
- [Newsletter](https://www.primefaces.org/newsletter)
- [PrimeGear](https://gear.primefaces.org/)
- [Contact Us](mailto:contact@primetek.com.tr)
* * *
## PrimeVue Message Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Message
Message component is used to display inline messages.
## Import [\#](https://primevue.org/message/\#import)
```javascript
import Message from 'primevue/message';
```
Copy
## Basic [\#](https://primevue.org/message/\#basic)
Message component requires a content to display.
Message Content
```markup
<Message>Message Content</Message>
```
Copy
## Severity [\#](https://primevue.org/message/\#severity)
The _severity_ option specifies the type of the message.
Success Message
Info Message
Warn Message
Error Message
Secondary Message
Contrast Message
```markup
<Message severity="success">Success Message</Message>
<Message severity="info">Info Message</Message>
<Message severity="warn">Warn Message</Message>
<Message severity="error">Error Message</Message>
<Message severity="secondary">Secondary Message</Message>
<Message severity="contrast">Contrast Message</Message>
```
Copy
## Icon [\#](https://primevue.org/message/\#icon)
Icon property and the _icon_ slots are available to customize the icon of the message.
Info Message
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
How may I help you?
```markup
<Message severity="info" icon="pi pi-send">Info Message</Message>
<Message severity="success">
    <template #icon>
        <Avatar image="/images/avatar/amyelsner.png" shape="circle" />
    </template>
    <span class="ml-2">How may I help you?</span>
</Message>
```
Copy
## Outlined [\#](https://primevue.org/message/\#outlined)
Configure the _variant_ value as _outlined_ for messages with borders and no background.
Success Message
Info Message
Warn Message
Error Message
Secondary Message
Contrast Message
```markup
<Message severity="success" variant="outlined">Success Message</Message>
<Message severity="info" variant="outlined">Info Message</Message>
<Message severity="warn" variant="outlined">Warn Message</Message>
<Message severity="error" variant="outlined">Error Message</Message>
<Message severity="secondary" variant="outlined">Secondary Message</Message>
<Message severity="contrast" variant="outlined">Contrast Message</Message>
```
Copy
## Simple [\#](https://primevue.org/message/\#simple)
Configure the _variant_ value as _simple_ for messages without borders, backgrounds and paddings.
Success Message
Info Message
Warn Message
Error Message
Secondary Message
Contrast Message
```markup
<Message severity="success" variant="simple">Success Message</Message>
<Message severity="info" variant="simple">Info Message</Message>
<Message severity="warn" variant="simple">Warn Message</Message>
<Message severity="error" variant="simple">Error Message</Message>
<Message severity="secondary" variant="simple">Secondary Message</Message>
<Message severity="contrast" variant="simple">Contrast Message</Message>
```
Copy
## Sizes [\#](https://primevue.org/message/\#sizes)
Message provides _small_ and _large_ sizes as alternatives to the base.
Small Message
Normal Message
Large Message
```markup
<Message size="small" icon="pi pi-send">Small Message</Message>
<Message icon="pi pi-user">Normal Message</Message>
<Message size="large" icon="pi pi-check">Large Message</Message>
```
Copy
## Forms [\#](https://primevue.org/message/\#forms)
Validation errors in a form are displayed with the _error_ severity.
Validation error
Username is required
Email is not valid
```markup
<Message v-if="!username || !email" severity="error" icon="pi pi-times-circle" class="mb-2">Validation error</Message>
<Message v-if="username && email" severity="success" icon="pi pi-times-circle" class="mb-2">Form is valid</Message>
<div class="flex flex-col gap-1">
    <InputText v-model="username" placeholder="Username" aria-label="username" :invalid="!username" />
    <Message v-if="!username" severity="error" variant="simple" size="small">Username is required</Message>
</div>
<div class="flex flex-col gap-1">
    <InputText v-model="email" placeholder="Email" aria-label="email" :invalid="!email" />
    <Message v-if="!email" severity="error" variant="simple" size="small">Email is not valid</Message>
</div>
```
Copy
## Dynamic [\#](https://primevue.org/message/\#dynamic)
Multiple messages can be displayed using the standard v-for directive.
ShowClear
```markup
<Button label="Show" @click="addMessages()" />
<Button label="Clear" severity="secondary" class="ml-2" @click="clearMessages()" />
<transition-group name="p-message" tag="div" class="flex flex-col">
    <Message v-for="msg of messages" :key="msg.id" :severity="msg.severity" class="mt-4">{{ msg.content }}</Message>
</transition-group>
```
Copy
## Closable [\#](https://primevue.org/message/\#closable)
Enable _closable_ option to display an icon to remove a message.
Closable Message
```markup
<Message closable>Closable Message</Message>
```
Copy
## Life [\#](https://primevue.org/message/\#life)
Messages can disappear automatically by defined the _life_ in milliseconds.
Show
```markup
<Button label="Show" @click="showMessage" :disabled="visible" class="mb-4" />
<Message v-if="visible" severity="success" :life="3000">Auto Disappear Message</Message>
```
Copy
## Accessibility [\#](https://primevue.org/message/\#accessibility)
### Screen Reader
Message component uses _alert_ role that implicitly defines _aria-live_ as "assertive" and _aria-atomic_ as "true". Since any attribute is passed to the root element, attributes like _aria-labelledby_ and _aria-label_ can optionally be used as well.
Close element is a _button_ with an _aria-label_ that refers to the _aria.close_ property of the [locale](https://primevue.org/configuration/#locale) API by default, you may use _closeButtonProps_ to customize the element and override the default _aria-label_.
### Close Button Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Closes the message. |
| _space_ | Closes the message. |
- Import
- Basic
- Severity
- Icon
- Outlined
- Simple
- Sizes
- Forms
- Dynamic
- Closable
- Life
- Accessibility
# Message API
API defines helper props, events and others for the PrimeVue Message module.
## Message [\#](https://primevue.org/message/\#api.message)
Message groups a collection of contents in tabs.
### Props [\#](https://primevue.org/message/\#api.message.props)
Defines valid properties in Message component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| severity | HintedString<"error" \| "secondary" \| "info" \| "success" \| "warn" \| "contrast"> | info | Severity level of the message. |  |
| closable | boolean | false | Whether the message can be closed manually using the close icon. |  |
| sticky | boolean | true |  |  |
| life | number | null | Delay in milliseconds to close the message automatically. |  |
| icon | string | null | Display a custom icon for the message. |  |
| closeIcon | string | null | Icon to display in the message close button. |  |
| closeButtonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the close button. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<MessagePassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| variant | HintedString<"outlined" \| "simple"> | undefined | Specifies the variant of the component. |  |
### Emits [\#](https://primevue.org/message/\#api.message.emits)
Defines valid emits in Message component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| close | event: Event | void | Callback to invoke when a message is closed. |  |
| life-end |  | void | Callback to invoke when the message's timeout is over. |  |
### Slots [\#](https://primevue.org/message/\#api.message.slots)
Defines valid slots in Message slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default custom slot. |  |
| icon | scope: {<br>class: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom message icon template. |  |
| closeicon | scope: {<br>class: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close icon template. |  |
| container | scope: {<br>closeCallback: () â‡’ void, // Close message function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |
### Interfaces [\#](https://primevue.org/message/\#api.message.interfaces)
Defines the custom interfaces used by the module.
#### MessagePassThroughMethodOptions [\#](https://primevue.org/message/\#api.message.interfaces.MessagePassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [MessageProps](https://primevue.org/message/#api.message.interfaces.MessageProps) | null | Defines valid properties. |
| state | [MessageState](https://primevue.org/message/#api.message.interfaces.MessageState) | null | Defines current inline state. |
| parent | any | null | Defines parent instance. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### MessagePassThroughOptions [\#](https://primevue.org/message/\#api.message.interfaces.MessagePassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| content | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the content's DOM element. |
| icon | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the icon's DOM element. |
| text | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the text's DOM element. |
| closeButton | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the button's DOM element. |
| closeIcon | [MessagePassThroughOptionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the button icon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [MessagePassThroughTransitionType<T>](https://primevue.org/message/#api.message.types.MessagePassThroughTransitionType%3CT%3E) | null | Used to control Vue Transition API. |
#### MessagePassThroughAttributes [\#](https://primevue.org/message/\#api.message.interfaces.MessagePassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### MessageState [\#](https://primevue.org/message/\#api.message.interfaces.MessageState)
Defines current inline state in Message component.
| name | type | default | description |
| --- | --- | --- | --- |
| visible | boolean | false | Current visible state as a boolean. |
## Types [\#](https://primevue.org/message/\#api.message.types)
Defines the custom types used by the module.
#### MessagePassThroughOptionType [\#](https://primevue.org/message/\#api.message.types.MessagePassThroughOptionType)
| values |
| --- |
| MessagePassThroughAttributes \| (options: MessagePassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### MessagePassThroughTransitionType [\#](https://primevue.org/message/\#api.message.types.MessagePassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: MessagePassThroughMethodOptions) => TransitionProps \| undefined |
#### MessageEmits [\#](https://primevue.org/message/\#api.message.types.MessageEmits)
| values |
| --- |
| EmitFn<MessageEmitsOptions> |
- Message
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Listbox Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Listbox
Listbox is used to select one or more values from a list of items.
## Import [\#](https://primevue.org/listbox/\#import)
```javascript
import Listbox from 'primevue/listbox';
```
Copy
## Basic [\#](https://primevue.org/listbox/\#basic)
Listbox is used with the _v-model_ property for two-way value binding along with the _options_ collection. Label and value of an option are defined with the _optionLabel_ and _optionValue_ properties respectively. Note that, when options are simple primitive values such as a string array, no _optionLabel_ and _optionValue_ would be necessary.
- New York
- Rome
- London
- Istanbul
- Paris
No selected item
```markup
<Listbox v-model="selectedCity" :options="cities" optionLabel="name" class="w-full md:w-56" />
```
Copy
## Forms [\#](https://primevue.org/listbox/\#forms)
Listbox integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
- New York
- Rome
- London
- Istanbul
- Paris
1 items selected
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-56">
    <div class="flex flex-col gap-1">
        <Listbox name="city" :options="cities" optionLabel="name" fluid />
        <Message v-if="$form.city?.invalid" severity="error" size="small" variant="simple">{{ $form.city.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Checkmark [\#](https://primevue.org/listbox/\#checkmark)
An alternative way to highlight the selected option is displaying a checkmark instead.
- New York
- Rome
- London
- Istanbul
- Paris
No selected item
```markup
<Listbox v-model="selectedCity" :options="cities" optionLabel="name" checkmark :highlightOnSelect="false" class="w-full md:w-56" />
```
Copy
## Multiple [\#](https://primevue.org/listbox/\#multiple)
Listbox allows choosing a single item by default, enable _multiple_ property to choose more than one. When the optional _metaKeySelection_ is present, behavior is changed in a way that selecting a new item requires meta key to be present.
- New York
- Rome
- London
- Istanbul
- Paris
No selected item
```markup
<Listbox v-model="selectedCity" :options="cities" multiple optionLabel="name" class="w-full md:w-56" />
```
Copy
## Group [\#](https://primevue.org/listbox/\#group)
Options can be grouped when a nested data structures is provided. To define the label of a group _optionGroupLabel_ property is needed and also _optionGroupChildren_ is required to define the property that refers to the children of a group.
- ![](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
Germany
- Berlin
- Frankfurt
- Hamburg
- Munich
- ![](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
USA
- Chicago
- Los Angeles
- New York
- San Francisco
- ![](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
Japan
- Kyoto
- Osaka
- Tokyo
- Yokohama
No selected item
```markup
<Listbox v-model="selectedCity" :options="groupedCities" optionLabel="label" optionGroupLabel="label" optionGroupChildren="items" class="w-full md:w-56" listStyle="max-height:250px">
    <template #optiongroup="slotProps">
        <div class="flex items-center">
            <img :alt="slotProps.option.name" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px" />
            <div>{{ slotProps.option.label }}</div>
        </div>
    </template>
</Listbox>
```
Copy
## Filter [\#](https://primevue.org/listbox/\#filter)
Listbox provides built-in filtering that is enabled by adding the _filter_ property.
5 results are available
- New York
- Rome
- London
- Istanbul
- Paris
No selected item
```markup
<Listbox v-model="selectedCity" :options="cities" filter optionLabel="name" class="w-full md:w-56" />
```
Copy
## Template [\#](https://primevue.org/listbox/\#template)
Custom content for an option is displayed with the _option_ slot that takes an option as a parameter. Additional available templating sections are _filter_ and _optionGroup_.
- ![Australia](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
Australia
- ![Brazil](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
Brazil
- ![China](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
China
- ![Egypt](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
Egypt
- ![France](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
France
- ![Germany](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
Germany
- ![India](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
India
- ![Japan](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
Japan
- ![Spain](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
Spain
- ![United States](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)
United States
No selected item
```markup
<Listbox v-model="selectedCountry" :options="countries" optionLabel="name" class="w-full md:w-56" listStyle="max-height:250px">
    <template #option="slotProps">
        <div class="flex items-center">
            <img :alt="slotProps.option.name" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px" />
            <div>{{ slotProps.option.name }}</div>
        </div>
    </template>
</Listbox>
```
Copy
## Virtual Scroll [\#](https://primevue.org/listbox/\#virtualscroll)
VirtualScroller is used to render a long list of options efficiently like 100K records in this demo. The configuration is done with _virtualScrollerOptions_ property, refer to the [VirtualScroller](https://primevue.org/virtualscroller) for more information about the available options as it is used internally by Listbox.
- Item #0
- Item #1
- Item #2
- Item #3
- Item #4
- Item #5
- Item #6
- Item #7
- Item #8
- Item #9
- Item #10
- Item #11
- Item #12
- Item #13
- Item #14
No selected item
```markup
<Listbox v-model="selectedItem" :options="items" optionLabel="label" optionValue="value"
    :virtualScrollerOptions="{ itemSize: 38 }" class="w-full md:w-56" listStyle="height:250px" striped />
```
Copy
## Invalid [\#](https://primevue.org/listbox/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
- New York
- Rome
- London
- Istanbul
- Paris
No selected item
```markup
<Listbox v-model="selectedCity" :options="cities" optionLabel="name" :invalid="selectedCity === null"  class="w-full md:w-56" />
```
Copy
## Disabled [\#](https://primevue.org/listbox/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
- New York
- Rome
- London
- Istanbul
- Paris
No selected item
```markup
<Listbox v-model="selectedCity" disabled :options="cities" optionLabel="name" class="w-full md:w-56" />
```
Copy
## Accessibility [\#](https://primevue.org/listbox/\#accessibility)
### Screen Reader
Value to describe the component can be provided _aria-labelledby_ or _aria-label_ props. The list element has a _listbox_ role with the _aria-multiselectable_ attribute that sets to true when multiple selection is enabled. Each list item has an _option_ role with _aria-selected_ and _aria-disabled_ as their attributes.
If filtering is enabled, _filterInputProps_ can be defined to give _aria-\*_ props to the input element. Alternatively _filterPlaceholder_ is usually utilized by the screen readers as well.
```markup
<span id="lb"></span>Options</span>
<Listbox aria-labelledby="lb" />
<Listbox aria-label="City" />
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the first selected option, if there is none then first option receives the focus. |
| _up arrow_ | Moves focus to the previous option. |
| _down arrow_ | Moves focus to the next option. |
| _enter_ | Toggles the selected state of the focused option. |
| _space_ | Toggles the selected state of the focused option. |
| _home_ | Moves focus to the first option. |
| _end_ | Moves focus to the last option. |
| _shift_ \+ _down arrow_ | Moves focus to the next option and toggles the selection state. |
| _shift_ \+ _up arrow_ | Moves focus to the previous option and toggles the selection state. |
| _shift_ \+ _space_ | Selects the items between the most recently selected option and the focused option. |
| _control_ \+ _shift_ \+ _home_ | Selects the focused options and all the options up to the first one. |
| _control_ \+ _shift_ \+ _end_ | Selects the focused options and all the options down to the last one. |
| _control_ \+ _a_ | Selects all options. |
| _pageUp_ | Jumps visual focus to first option. |
| _pageDown_ | Jumps visual focus to last option. |
| _any printable character_ | Moves focus to the option whose label starts with the characters being typed. |
### Filter Input Keyboard Support
| Key | Function |
| --- | --- |
| _down arrow_ | Moves focus to the next option, if there is none then visual focus does not change. |
| _up arrow_ | Moves focus to the previous option, if there is none then visual focus does not change. |
| _left arrow_ | Removes the visual focus from the current option and moves input cursor to one character left. |
| _right arrow_ | Removes the visual focus from the current option and moves input cursor to one character right. |
| _home_ | Moves input cursor at the end, if not then moves focus to the first option. |
| _end_ | Moves input cursor at the beginning, if not then moves focus to the last option. |
| _enter_ | Closes the popup and moves focus to the multiselect element. |
| _escape_ | Closes the popup and moves focus to the multiselect element. |
| _tab_ | Moves focus to the next focusable element in the component. If there is none, moves focus to next element in page. |
- Import
- Basic
- Forms
- Checkmark
- Multiple
- Group
- Filter
- Template
- Virtual Scroll
- Invalid
- Disabled
- Accessibility
# Listbox API
API defines helper props, events and others for the PrimeVue Listbox module.
## Listbox [\#](https://primevue.org/listbox/\#api.listbox)
ListBox is used to select one or more values from a list of items.
### Props [\#](https://primevue.org/listbox/\#api.listbox.props)
Defines valid properties in Listbox component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| options | any\[\] | null | An array of selectitems to display as the available options. |  |
| optionLabel | string \| Function | null | Property name or getter function to use as the label of an option. |  |
| optionValue | string \| Function | null | Property name or getter function to use as the value of an option, defaults to the option itself when not defined. |  |
| optionDisabled | string \| Function | null | Property name or getter function to use as the disabled flag of an option, defaults to false when not defined. |  |
| optionGroupLabel | string \| Function | null | Property name or getter function to use as the label of an option group. |  |
| optionGroupChildren | string \| Function | null | Property name or getter function that refers to the children options of option group. |  |
| listStyle | string | null | Inline style of inner list element. |  |
| scrollHeight | string | 14rem | Height of the viewport, a scrollbar is defined if height of list exceeds this value. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When specified, disables the component. |  |
| dataKey | string | null | A property to uniquely identify an option. |  |
| multiple | boolean | false | When specified, allows selecting multiple values. |  |
| metaKeySelection | boolean | false | Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.<br>On touch enabled devices, metaKeySelection is turned off automatically. |  |
| filter | boolean | false | When specified, displays a filter input at header. |  |
| filterPlaceholder | string | null | Placeholder text to show when filter input is empty. |  |
| filterLocale | string | null | Locale to use in filtering. The default locale is the host environment's current locale. |  |
| filterMatchMode | HintedString<"startsWith" \| "contains" \| "endsWith"> | contains | Defines the filtering algorithm to use when searching the options. |  |
| filterFields | string\[\] | null | Fields used when filtering the options, defaults to optionLabel. |  |
| virtualScrollerOptions | any | null | Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it. |  |
| autoOptionFocus | boolean | false | Whether to focus on the first visible or selected element. |  |
| selectOnFocus | boolean | false | When enabled, the focused option is selected. |  |
| focusOnHover | boolean | true | When enabled, the focus is placed on the hovered option. |  |
| highlightOnSelect | boolean | true | Whether the selected option will be add highlight class. |  |
| checkmark | boolean | false | Whether the selected option will be shown with a check mark. |  |
| filterMessage | string | '{0} results are available' | Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration. |  |
| selectionMessage | string | '{0} items selected' | Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySelectionMessage | string | No selected item | Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration. |  |
| emptyFilterMessage | string | No results found | Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration. |  |
| emptyMessage | string | No available options | Text to display when there are no options available. Defaults to value from PrimeVue locale configuration. |  |
| striped | boolean | false | Whether to displays rows with alternating colors. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| filterIcon | string | null | Icon to display in filter input. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying input element. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ListboxPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/listbox/\#api.listbox.emits)
Defines valid emits in Listbox component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [ListboxChangeEvent](https://primevue.org/listbox/#api.listbox.events.ListboxChangeEvent) | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| filter | event: [ListboxFilterEvent](https://primevue.org/listbox/#api.listbox.events.ListboxFilterEvent) | void | Callback to invoke on filter input. |  |
| item-dblclick | event: [ListboxOptionDblClickEvent](https://primevue.org/listbox/#api.listbox.events.ListboxOptionDblClickEvent) | void | Callback to invoke on option double click. |  |
| option-dblclick | event: [ListboxOptionDblClickEvent](https://primevue.org/listbox/#api.listbox.events.ListboxOptionDblClickEvent) | void | Callback to invoke on option double click. |  |
### Slots [\#](https://primevue.org/listbox/\#api.listbox.slots)
Defines valid slots in Listbox component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header | scope: {<br>value: any, // Value of the componentoptions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer | scope: {<br>value: any, // Value of the componentoptions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| option | scope: {<br>option: any, // Option instanceselected: boolean, // Selection stateindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option template. |  |
| optiongroup | scope: {<br>option: any, // Option instanceindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom optiongroup template. |  |
| emptyfilter |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom emptyfilter template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template. |  |
| content | scope: {<br>items: any, // An array of objects to display for virtualscrollerstyleClass: string, // Style class of the componentcontentRef: (el: any) â‡’ void, // Referance of the contentgetItemOptions: (index: number) â‡’ VirtualScrollerItemOptions, // Options of the items<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| loader | scope: {<br>options: any, // Options of the loader items for virtualscroller<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loader template. |  |
| filtericon | scope: {<br>class: any, // Style class of the filter icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter icon template. |  |
### Events [\#](https://primevue.org/listbox/\#api.listbox.events)
Defines the custom events used by the component's emit.
#### ListboxChangeEvent [\#](https://primevue.org/listbox/\#api.listbox.events.ListboxChangeEvent)
Custom change event.
See [change](https://primevue.org/listbox/#api.listbox.emitsoptions.change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event |
| value | any | Selected option value |
#### ListboxOptionDblClickEvent [\#](https://primevue.org/listbox/\#api.listbox.events.ListboxOptionDblClickEvent)
Custom double click event.
See [\['item-dblclick'\]](https://primevue.org/listbox/#api.listbox.listboxemitsoptions.['item-dblclick'])
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event |
| value | any | Selected option value |
#### ListboxFilterEvent [\#](https://primevue.org/listbox/\#api.listbox.events.ListboxFilterEvent)
Custom filter event.
See [filter](https://primevue.org/listbox/#api.listbox.emitsoptions.filter)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event |
| value | string | Filter value |
| filterValue | any\[\] | Filtered options |
### Interfaces [\#](https://primevue.org/listbox/\#api.listbox.interfaces)
Defines the custom interfaces used by the module.
#### ListboxPassThroughMethodOptions [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ListboxProps](https://primevue.org/listbox/#api.listbox.interfaces.ListboxProps) | null | Defines valid properties. |
| state | [ListboxState](https://primevue.org/listbox/#api.listbox.interfaces.ListboxState) | null | Defines current inline state. |
| context | [ListboxContext](https://primevue.org/listbox/#api.listbox.interfaces.ListboxContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ListboxSharedPassThroughMethodOptions [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [ListboxProps](https://primevue.org/listbox/#api.listbox.interfaces.ListboxProps) | null | Defines valid properties. |
| state | [ListboxState](https://primevue.org/listbox/#api.listbox.interfaces.ListboxState) | null | Defines current inline state. |
#### ListboxPassThroughOptions [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| header | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header's DOM element. |
| pcFilterContainer | any | null | Used to pass attributes to the IconField component. |
| pcFilter | any | null | Used to pass attributes to the InputText component. |
| pcFilterIconContainer | any | null | Used to pass attributes to the InputIcon component. |
| filterIcon | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the filter icon's DOM element. |
| listContainer | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the list container's DOM element. |
| virtualScroller | any | null | Used to pass attributes to the VirtualScroller component. |
| list | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the list's DOM element. |
| optionGroup | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option group's DOM element. |
| option | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option's DOM element. |
| optionCheckIcon | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option check icon's DOM element. |
| optionBlankIcon | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option blank icon's DOM element. |
| emptyMessage | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the emptyMessage's DOM element. |
| hiddenFirstFocusableEl | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden first focusable element's DOM element. |
| hiddenFilterResult | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden filter result's DOM element. |
| hiddenSelectedMessage | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden selected message's DOM element. |
| hiddenLastFocusableEl | [ListboxPassThroughOptionType<T>](https://primevue.org/listbox/#api.listbox.types.ListboxPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden last focusable element's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ListboxPassThroughAttributes [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ListboxState [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxState)
Defines current inline state in Listbox component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| focused | boolean | false | Current focused state as a boolean. |
| filterValue | string | null | Current filter value state as a string. |
| focusedOptionIndex | number | -1 | Current focused item index as a number. |
#### ListboxContext [\#](https://primevue.org/listbox/\#api.listbox.interfaces.ListboxContext)
Defines current options in Listbox component.
| name | type | default | description |
| --- | --- | --- | --- |
| selected | boolean | false | Current selection state of the item as a boolean. |
| focused | boolean | false | Current focus state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |
## Types [\#](https://primevue.org/listbox/\#api.listbox.types)
Defines the custom types used by the module.
#### ListboxPassThroughOptionType [\#](https://primevue.org/listbox/\#api.listbox.types.ListboxPassThroughOptionType)
| values |
| --- |
| ListboxPassThroughAttributes \| (options: ListboxPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ListboxEmits [\#](https://primevue.org/listbox/\#api.listbox.types.ListboxEmits)
| values |
| --- |
| EmitFn<ListboxEmitsOptions> |
- Listbox
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Toast Component Overview
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Toast
Toast is used to display messages in an overlay.
## Import [\#](https://primevue.org/toast/\#import)
```javascript
import Toast from 'primevue/toast';
```
Copy
## Toast Service [\#](https://primevue.org/toast/\#toast-service)
Toast component is controlled via the _ToastService_ that needs to be installed as an application plugin.
```javascript
import {createApp} from 'vue';
import ToastService from 'primevue/toastservice';
const app = createApp(App);
app.use(ToastService);
```
Copy
The service is available with the _useToast_ function for Composition API or using the _$toast_ property of the application for Options API.
```javascript
import { useToast } from 'primevue/usetoast';
const toast = useToast();
```
Copy
## Basic [\#](https://primevue.org/toast/\#basic)
Ideal location of a Toast is the main application template so that it can be used by any component within the application. A single message is represented by the Message interface that defines properties such as severity, summary and detail.
Show
```markup
<Toast />
<Button label="Show" @click="show()" />
```
Copy
## Severity [\#](https://primevue.org/toast/\#severity)
The _severity_ option specifies the type of the message.
SuccessInfoWarnErrorSecondaryContrast
```markup
<Toast />
<Button label="Success" severity="success" @click="showSuccess" />
<Button label="Info" severity="info" @click="showInfo" />
<Button label="Warn" severity="warn" @click="showWarn" />
<Button label="Error" severity="danger" @click="showError" />
<Button label="Secondary" severity="secondary" @click="showSecondary" />
<Button label="Contrast" severity="contrast" @click="showContrast" />
```
Copy
## Position [\#](https://primevue.org/toast/\#position)
A message can be targeted to a certain Toast component by matching the _group_ keys whereas location is customized with the _position_.
Top LeftBottom LeftBottom Right
```markup
<Toast position="top-left" group="tl" />
<Toast position="bottom-left" group="bl" />
<Toast position="bottom-right" group="br" />
<Button label="Top Left" @click="showTopLeft" />
<Button label="Bottom Left" @click="showBottomLeft" />
<Button label="Bottom Right" @click="showBottomRight" />
```
Copy
## Multiple [\#](https://primevue.org/toast/\#multiple)
Multiple messages are displayed by passing an array to the _show_ method.
Multiple
```markup
<Toast />
<Button label="Multiple" @click="showMultiple()" />
```
Copy
## Sticky [\#](https://primevue.org/toast/\#sticky)
A message disappears after the number of milliseconds defined in the _life_ option. Omit the _life_ option to make the message sticky.
StickyClear
```markup
<Toast />
<Button @click="showSticky" label="Sticky" />
<Button label="Clear" severity="secondary" @click="clear()" />
```
Copy
## Template [\#](https://primevue.org/toast/\#template)
Custom content inside a message is defined with the _message_ template.
View
```markup
<Toast position="bottom-center" group="bc" @close="onClose">
    <template #message="slotProps">
        <div class="flex flex-col items-start flex-auto">
            <div class="flex items-center gap-2">
                <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" shape="circle" />
                <span class="font-bold">Amy Elsner</span>
            </div>
            <div class="font-medium text-lg my-4">{{ slotProps.message.summary }}</div>
            <Button size="small" label="Reply" severity="success" @click="onReply()"></Button>
        </div>
    </template>
</Toast>
<Button @click="showTemplate" label="View" />
```
Copy
## Headless [\#](https://primevue.org/toast/\#headless)
Headless mode is enabled by defining a _container_ slot that lets you implement entire toast UI instead of the default elements.
View
```markup
<Toast position="top-center" group="headless" @close="visible = false">
    <template #container="{ message, closeCallback }">
        <section class="flex flex-col p-4 gap-4 w-full bg-primary/70 rounded-xl">
            <div class="flex items-center gap-5">
                <i class="pi pi-cloud-upload text-white dark:text-black text-2xl"></i>
                <span class="font-bold text-base text-white dark:text-black">{{ message.summary }}</span>
            </div>
            <div class="flex flex-col gap-2">
                <ProgressBar :value="progress" :showValue="false" :style="{ height: '4px' }" pt:value:class="!bg-primary-50 dark:!bg-primary-900" class="!bg-primary/80"></ProgressBar>
                <label class="text-sm font-bold text-white dark:text-black">{{ progress }}% uploaded</label>
            </div>
            <div class="flex gap-4 mb-4 justify-end">
                <Button label="Another Upload?" size="small" @click="closeCallback"></Button>
                <Button label="Cancel" size="small" @click="closeCallback"></Button>
            </div>
        </section>
    </template>
</Toast>
<Button @click="show" label="View" />
```
Copy
## Accessibility [\#](https://primevue.org/toast/\#accessibility)
### Screen Reader
Toast component use _alert_ role that implicitly defines _aria-live_ as "assertive" and _aria-atomic_ as "true".
Close element is a _button_ with an _aria-label_ that refers to the _aria.close_ property of the [locale](https://primevue.org/configuration/#locale) API by default, you may use _closeButtonProps_ to customize the element and override the default _aria-label_.
### Close Button Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Closes the message. |
| _space_ | Closes the message. |
- Import
- Toast Service
- Basic
- Severity
- Position
- Multiple
- Sticky
- Template
- Headless
- Accessibility
# Toast API
API defines helper props, events and others for the PrimeVue Toast module.
## Toast [\#](https://primevue.org/toast/\#api.toast)
Toast is used to display messages in an overlay.
### Props [\#](https://primevue.org/toast/\#api.toast.props)
Defines valid properties in Toast component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| group | string | null | Unique identifier of a message group. |  |
| position | "center" \| "top-left" \| "top-center" \| "top-right" \| "bottom-left" \| "bottom-center" \| "bottom-right" | top-right | Position of the toast in viewport. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| breakpoints | [ToastBreakpointsType](https://primevue.org/toast/#api.toast.types.ToastBreakpointsType) | null | Object literal to define styles per screen size. |  |
| closeIcon | string | null | Icon to display in the toast close button. |  |
| infoIcon | string | null | Icon to display in the toast with info severity. |  |
| warnIcon | string | null | Icon to display in the toast with warn severity. |  |
| errorIcon | string | null | Icon to display in the toast with error severity. |  |
| successIcon | string | null | Icon to display in the toast with success severity. |  |
| closeButtonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the close button. |  |
| message | [ToastMessageOptions](https://primevue.org/toast/#api.toast.interfaces.ToastMessageOptions) | null | Used to access message options. |  |
| onMouseEnter | Function | null | Used to specify a callback function to be run when the mouseenter event is fired on the message component. |  |
| onMouseLeave | Function | null | Used to specify a callback function to be run when the mouseleave event is fired on the message component. |  |
| onClick | Function | null | Used to specify a callback function to be run when the click event is fired on the message component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ToastPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/toast/\#api.toast.emits)
Defines valid emits in Toast component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| close | message: [ToastMessageOptions](https://primevue.org/toast/#api.toast.interfaces.ToastMessageOptions) | void | Callback to invoke when the toast is closed. |  |
| life-end | message: [ToastMessageOptions](https://primevue.org/toast/#api.toast.interfaces.ToastMessageOptions) | void | Callback to invoke when the toast's timeout is over. |  |
### Slots [\#](https://primevue.org/toast/\#api.toast.slots)
Defines valid slot in Toast component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| message | scope: {<br>message: any, // Message of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom message template. |  |
| icon | scope: {<br>class: any, // Style class of the message icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| messageicon | scope: {<br>class: any, // Style class of the icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom message icon template. |  |
| closeicon | scope: {<br>class: any, // Style class of the close icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close icon template. |  |
| container | scope: {<br>message: any, // Message of the componentcloseCallback: () â‡’ void, // Close sidebar function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |
### Interfaces [\#](https://primevue.org/toast/\#api.toast.interfaces)
Defines the custom interfaces used by the module.
#### ToastPassThroughMethodOptions [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ToastProps](https://primevue.org/toast/#api.toast.interfaces.ToastProps) | null | Defines valid properties. |
| state | [ToastState](https://primevue.org/toast/#api.toast.interfaces.ToastState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ToastPassThroughOptions [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| message | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the message's DOM element. |
| messageContent | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the message content's DOM element. |
| messageIcon | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the message icon's DOM element. |
| messageText | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the message text's DOM element. |
| summary | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the summary's DOM element. |
| detail | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the detail's DOM element. |
| buttonContainer | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the button container's DOM element. |
| closeButton | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the button's DOM element. |
| closeIcon | [ToastPassThroughOptionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughOptionType) | null | Used to pass attributes to the button icon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [ToastPassThroughTransitionType](https://primevue.org/toast/#api.toast.types.ToastPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### ToastPassThroughAttributes [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ToastMessageOptions [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastMessageOptions)
Defines message options in Toast component.
| name | type | default | description |
| --- | --- | --- | --- |
| severity | HintedString<"error" \| "secondary" \| "info" \| "success" \| "warn" \| "contrast"> | info | Severity level of the message. |
| summary | string | null | Summary content of the message. |
| detail | any | null | Detail content of the message. |
| closable | boolean | true | Whether the message can be closed manually using the close icon. |
| life | number | null | Delay in milliseconds to close the message automatically. |
| group | string | null | Key of the Toast to display the message. |
| styleClass | any | null | Style class of the message. |
| contentStyleClass | any | null | Style class of the content. |
#### ToastBreakpointsType [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastBreakpointsType)
Defines breakpoints type in Toast component.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ToastState [\#](https://primevue.org/toast/\#api.toast.interfaces.ToastState)
Defines current inline state in Toast component.
| name | type | default | description |
| --- | --- | --- | --- |
| messages | any\[\] | null | Current messages. |
## Types [\#](https://primevue.org/toast/\#api.toast.types)
Defines the custom types used by the module.
#### ToastPassThroughOptionType [\#](https://primevue.org/toast/\#api.toast.types.ToastPassThroughOptionType)
| values |
| --- |
| ToastPassThroughAttributes \| (options: ToastPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ToastPassThroughTransitionType [\#](https://primevue.org/toast/\#api.toast.types.ToastPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: ToastPassThroughMethodOptions) => TransitionProps \| undefined |
#### ToastEmits [\#](https://primevue.org/toast/\#api.toast.types.ToastEmits)
| values |
| --- |
| EmitFn<ToastEmitsOptions> |
## ToastService-UseToast [\#](https://primevue.org/toast/\#api.toastservice-usetoast)
### Services [\#](https://primevue.org/toast/\#api.toastservice-usetoast.services)
Toast Service methods.
| name | parameters | returnType | description |
| --- | --- | --- | --- |
| add | message: [ToastMessageOptions](https://primevue.org/toast/#api.toast.interfaces.ToastMessageOptions) | void | Displays the message in a suitable Toast component. |
| remove | message: [ToastMessageOptions](https://primevue.org/toast/#api.toast.interfaces.ToastMessageOptions) | void | Clears the message. |
| removeGroup | group: string | void | Clears the messages that belongs to the group. |
| removeAllGroups |  | void | Clears all the messages. |
- Toast
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
- ToastService-UseToast
  - Services
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Accordion Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Accordion
Accordion groups a collection of contents in panels.
## Import [\#](https://primevue.org/accordion/\#import)
```javascript
import Accordion from 'primevue/accordion';
import AccordionPanel from 'primevue/accordionpanel';
import AccordionHeader from 'primevue/accordionheader';
import AccordionContent from 'primevue/accordioncontent';
```
Copy
## Basic [\#](https://primevue.org/accordion/\#basic)
Accordion is defined using _AccordionPanel_, _AccordionHeader_ and _AccordionContent_ components. Each AccordionPanel must contain a unique _value_ property to specify the active item.
Header I
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Header II
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
Header III
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
```markup
<Accordion value="0">
    <AccordionPanel value="0">
        <AccordionHeader>Header I</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="1">
        <AccordionHeader>Header II</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="2">
        <AccordionHeader>Header III</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </AccordionContent>
    </AccordionPanel>
</Accordion>
```
Copy
## Dynamic [\#](https://primevue.org/accordion/\#dynamic)
AccordionPanel can be generated dynamically using the standard _v-for_ directive.
Title 1
Content 1
Title 2
Content 2
Title 3
Content 3
```markup
<Accordion value="0">
    <AccordionPanel v-for="tab in tabs" :key="tab.title" :value="tab.value">
        <AccordionHeader>{{ tab.title }}</AccordionHeader>
        <AccordionContent>
            <p class="m-0">{{ tab.content }}</p>
        </AccordionContent>
    </AccordionPanel>
</Accordion>
```
Copy
## Multiple [\#](https://primevue.org/accordion/\#multiple)
Only one tab at a time can be active by default, enabling _multiple_ property changes this behavior to allow multiple panels. In this case _value_ needs to be an array.
Header I
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Header II
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
Header III
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
```markup
<Accordion :value="['0']" multiple>
    <AccordionPanel value="0">
        <AccordionHeader>Header I</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="1">
        <AccordionHeader>Header II</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="2">
        <AccordionHeader>Header III</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </AccordionContent>
    </AccordionPanel>
</Accordion>
```
Copy
## Disabled [\#](https://primevue.org/accordion/\#disabled)
Enabling _disabled_ property of an AccordionPanel prevents user interaction.
Header I
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Header II
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
Header III
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
Header IV
```markup
<Accordion :value="['0']" multiple>
    <AccordionPanel value="0">
        <AccordionHeader>Header I</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="1">
        <AccordionHeader>Header II</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="2">
        <AccordionHeader>Header III</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="3" disabled>
        <AccordionHeader>Header IV</AccordionHeader>
    </AccordionPanel>
</Accordion>
```
Copy
## Controlled [\#](https://primevue.org/accordion/\#controlled)
Panels can be controlled programmatically using _value_ property as a model.
123
Header I
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Header II
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
Header III
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
```markup
<div class="flex mb-4 gap-2 justify-end">
    <Button @click="active = '0'" rounded label="1" class="w-8 h-8 p-0" :outlined="active !== '0'" />
    <Button @click="active = '1'" rounded label="2" class="w-8 h-8 p-0" :outlined="active !== '1'" />
    <Button @click="active = '2'" rounded label="3" class="w-8 h-8 p-0" :outlined="active !== '2'" />
</div>
<Accordion v-model:value="active">
    <AccordionPanel value="0">
        <AccordionHeader>Header I</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="1">
        <AccordionHeader>Header II</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="2">
        <AccordionHeader>Header III</AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </AccordionContent>
    </AccordionPanel>
</Accordion>
```
Copy
## Template [\#](https://primevue.org/accordion/\#template)
Custom content for a header is defined with the default slot. The optional _as_ property controls the default container element of a header, for example setting it to a _div_ renders a div for the header instead of a button. The _asChild_ option enables the headless mode for further customization by passing callbacks and properties to implement your own header.
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
Amy Elsner3
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
![](https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png)
Onyama Limba4
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
![](https://primefaces.org/cdn/primevue/images/avatar/ionibowcher.png)
Ioni Bowcher2
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
```markup
<Accordion value="0" expandIcon="pi pi-plus" collapseIcon="pi pi-minus">
    <AccordionPanel value="0">
        <AccordionHeader>
            <span class="flex items-center gap-2 w-full">
                <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" shape="circle" />
                <span class="font-bold whitespace-nowrap">Amy Elsner</span>
                <Badge value="3" class="ml-auto mr-2" />
            </span>
        </AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="1">
        <AccordionHeader>
            <span class="flex items-center gap-2 w-full">
                <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png" shape="circle" />
                <span class="font-bold whitespace-nowrap">Onyama Limba</span>
                <Badge value="4" class="ml-auto mr-2" />
            </span>
        </AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </AccordionContent>
    </AccordionPanel>
    <AccordionPanel value="2">
        <AccordionHeader>
            <span class="flex items-center gap-2 w-full">
                <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/ionibowcher.png" shape="circle" />
                <span class="font-bold whitespace-nowrap">Ioni Bowcher</span>
                <Badge value="2" class="ml-auto mr-2" />
            </span>
        </AccordionHeader>
        <AccordionContent>
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </AccordionContent>
    </AccordionPanel>
</Accordion>
```
Copy
## Accessibility [\#](https://primevue.org/accordion/\#accessibility)
### Screen Reader
Accordion header elements is a _button_ element and use _aria-controls_ to define the id of the content section along with _aria-expanded_ for the visibility state. The value to read a header element defaults to the value of the _header_ property and can be customized by defining an _aria-label_ or _aria-labelledby_ via the _pt_ property.
The content uses _region_ role, defines an id that matches the _aria-controls_ of the header and _aria-labelledby_ referring to the id of the header.
### Header Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous focusable element in the page tab sequence. |
| _enter_ | Toggles the visibility of the content. |
| _space_ | Toggles the visibility of the content. |
| _down arrow_ | Moves focus to the next header. If focus is on the last header, moves focus to the first header. |
| _up arrow_ | Moves focus to the previous header. If focus is on the first header, moves focus to the last header. |
| _home_ | Moves focus to the first header. |
| _end_ | Moves focus to the last header. |
- Import
- Basic
- Dynamic
- Multiple
- Disabled
- Controlled
- Template
- Accessibility
# Accordion API
API defines helper props, events and others for the PrimeVue Accordion module.
## Accordion [\#](https://primevue.org/accordion/\#api.accordion)
Accordion groups a collection of contents in tabs.
### Props [\#](https://primevue.org/accordion/\#api.accordion.props)
Defines valid properties in Accordion component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | null \| string \| number \| string\[\] \| number\[\] | null | Value of the active panel or an array of values in multiple mode. |  |
| multiple | boolean | false | When enabled, multiple tabs can be activated at the same time. |  |
| activeIndex | null \| number \| number\[\] | null | Index of the active tab or an array of indexes in multiple mode. |  |
| lazy | boolean | false | When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css. |  |
| expandIcon | string | null | Icon of a collapsed tab. |  |
| collapseIcon | string | null | Icon of an expanded tab. |  |
| tabindex | number | 0 | Index of the element in tabbing order. |  |
| selectOnFocus | boolean | false | When enabled, the focused tab is activated. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AccordionPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/accordion/\#api.accordion.emits)
Defines valid emits in Accordion component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:value | value: undefined \| null \| string \| string\[\] | void | Emitted when the active panel changes. |  |
| update:activeIndex | value: undefined \| number | void | Emitted when the active tab changes. |  |
| tab-open | event: [AccordionTabOpenEvent](https://primevue.org/accordion/#api.accordion.events.AccordionTabOpenEvent) | void | Callback to invoke when a tab gets expanded. |  |
| tab-close | event: [AccordionTabCloseEvent](https://primevue.org/accordion/#api.accordion.events.AccordionTabCloseEvent) | void | Callback to invoke when an active tab is collapsed by clicking on the header. |  |
| tab-click | event: [AccordionClickEvent](https://primevue.org/accordion/#api.accordion.events.AccordionClickEvent) | void | Callback to invoke when an active tab is clicked. |  |
### Slots [\#](https://primevue.org/accordion/\#api.accordion.slots)
Defines valid slots in Accordion slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default slot to detect AccordionTab components. |  |
| collapseicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom collapse icon template. |  |
| expandicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom expand icon template. |  |
### Events [\#](https://primevue.org/accordion/\#api.accordion.events)
Defines the custom events used by the component's emit.
#### AccordionTabOpenEvent [\#](https://primevue.org/accordion/\#api.accordion.events.AccordionTabOpenEvent)
Custom tab open event.
See [tab-open](https://primevue.org/accordion/#api.accordion.emitsoptions.tab-open)
| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event. |
| index | number | Opened tab index. |
#### AccordionTabCloseEvent [\#](https://primevue.org/accordion/\#api.accordion.events.AccordionTabCloseEvent)
Custom tab close event.
See [tab-close](https://primevue.org/accordion/#api.accordion.emitsoptions.tab-close)
| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event. |
| index | number | Opened tab index. |
#### AccordionClickEvent [\#](https://primevue.org/accordion/\#api.accordion.events.AccordionClickEvent)
Custom tab open event.
See [tab-open](https://primevue.org/accordion/#api.accordion.emitsoptions.tab-open)
| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event. |
| index | number | Opened tab index. |
### Interfaces [\#](https://primevue.org/accordion/\#api.accordion.interfaces)
Defines the custom interfaces used by the module.
#### AccordionPassThroughMethodOptions [\#](https://primevue.org/accordion/\#api.accordion.interfaces.AccordionPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AccordionProps](https://primevue.org/accordion/#api.accordion.interfaces.AccordionProps) | null | Defines valid properties. |
| state | [AccordionState](https://primevue.org/accordion/#api.accordion.interfaces.AccordionState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### AccordionPassThroughOptions [\#](https://primevue.org/accordion/\#api.accordion.interfaces.AccordionPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [AccordionPassThroughOptionType](https://primevue.org/accordion/#api.accordion.types.AccordionPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### AccordionPassThroughAttributes [\#](https://primevue.org/accordion/\#api.accordion.interfaces.AccordionPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### AccordionState [\#](https://primevue.org/accordion/\#api.accordion.interfaces.AccordionState)
Defines current inline state in Accordion component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string |
| d\_value | string \| string\[\] | null | Current active value state. |
## Types [\#](https://primevue.org/accordion/\#api.accordion.types)
Defines the custom types used by the module.
#### AccordionPassThroughOptionType [\#](https://primevue.org/accordion/\#api.accordion.types.AccordionPassThroughOptionType)
| values |
| --- |
| AccordionPassThroughAttributes \| (options: AccordionPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### AccordionEmits [\#](https://primevue.org/accordion/\#api.accordion.types.AccordionEmits)
| values |
| --- |
| EmitFn<AccordionEmitsOptions> |
## AccordionPanel [\#](https://primevue.org/accordion/\#api.accordionpanel)
AccordionPanel is a helper component for Accordion component.
### Props [\#](https://primevue.org/accordion/\#api.accordionpanel.props)
Defines valid properties in AccordionPanel component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | undefined \| string \| number | null | Unique value of item. |  |
| disabled | boolean | false | Whether the item is disabled. |  |
| as | string \| Component | DIV | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AccordionPanelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/accordion/\#api.accordionpanel.slots)
Defines valid slots in AccordionPanel slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
### Interfaces [\#](https://primevue.org/accordion/\#api.accordionpanel.interfaces)
Defines the custom interfaces used by the module.
#### AccordionPanelPassThroughMethodOptions [\#](https://primevue.org/accordion/\#api.accordionpanel.interfaces.AccordionPanelPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AccordionPanelProps](https://primevue.org/accordion/#api.accordionpanel.interfaces.AccordionPanelProps) | null | Defines valid properties. |
| context | [AccordionPanelContext](https://primevue.org/accordion/#api.accordionpanel.interfaces.AccordionPanelContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### AccordionPanelPassThroughOptions [\#](https://primevue.org/accordion/\#api.accordionpanel.interfaces.AccordionPanelPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [AccordionPanelPassThroughOptionType](https://primevue.org/accordion/#api.accordionpanel.types.AccordionPanelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### AccordionPanelPassThroughAttributes [\#](https://primevue.org/accordion/\#api.accordionpanel.interfaces.AccordionPanelPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### AccordionPanelContext [\#](https://primevue.org/accordion/\#api.accordionpanel.interfaces.AccordionPanelContext)
Defines current options in AccordionPanel component.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/accordion/\#api.accordionpanel.types)
Defines the custom types used by the module.
#### AccordionPanelPassThroughOptionType [\#](https://primevue.org/accordion/\#api.accordionpanel.types.AccordionPanelPassThroughOptionType)
| values |
| --- |
| AccordionPanelPassThroughAttributes \| (options: AccordionPanelPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### AccordionPanelEmits [\#](https://primevue.org/accordion/\#api.accordionpanel.types.AccordionPanelEmits)
| values |
| --- |
| EmitFn<AccordionPanelEmitsOptions> |
## AccordionHeader [\#](https://primevue.org/accordion/\#api.accordionheader)
AccordionHeader is a helper component for Accordion component.
### Props [\#](https://primevue.org/accordion/\#api.accordionheader.props)
Defines valid properties in AccordionHeader component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| as | string \| Component | BUTTON | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AccordionHeaderPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/accordion/\#api.accordionheader.slots)
Defines valid slots in AccordionHeader slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| toggleicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom toggleicon template. |  |
### Interfaces [\#](https://primevue.org/accordion/\#api.accordionheader.interfaces)
Defines the custom interfaces used by the module.
#### AccordionHeaderPassThroughMethodOptions [\#](https://primevue.org/accordion/\#api.accordionheader.interfaces.AccordionHeaderPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AccordionHeaderProps](https://primevue.org/accordion/#api.accordionheader.interfaces.AccordionHeaderProps) | null | Defines valid properties. |
| context | [AccordionHeaderContext](https://primevue.org/accordion/#api.accordionheader.interfaces.AccordionHeaderContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### AccordionHeaderPassThroughOptions [\#](https://primevue.org/accordion/\#api.accordionheader.interfaces.AccordionHeaderPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [AccordionHeaderPassThroughOptionType](https://primevue.org/accordion/#api.accordionheader.types.AccordionHeaderPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| toggleicon | [AccordionHeaderPassThroughOptionType](https://primevue.org/accordion/#api.accordionheader.types.AccordionHeaderPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### AccordionHeaderPassThroughAttributes [\#](https://primevue.org/accordion/\#api.accordionheader.interfaces.AccordionHeaderPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### AccordionHeaderContext [\#](https://primevue.org/accordion/\#api.accordionheader.interfaces.AccordionHeaderContext)
Defines current options in AccordionHeader component.
| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | null | Whether the item is active. |
## Types [\#](https://primevue.org/accordion/\#api.accordionheader.types)
Defines the custom types used by the module.
#### AccordionHeaderPassThroughOptionType [\#](https://primevue.org/accordion/\#api.accordionheader.types.AccordionHeaderPassThroughOptionType)
| values |
| --- |
| AccordionHeaderPassThroughAttributes \| (options: AccordionHeaderPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### AccordionHeaderEmits [\#](https://primevue.org/accordion/\#api.accordionheader.types.AccordionHeaderEmits)
| values |
| --- |
| EmitFn<AccordionHeaderEmitsOptions> |
## AccordionContent [\#](https://primevue.org/accordion/\#api.accordioncontent)
AccordionContent is a helper component for Accordion component.
### Props [\#](https://primevue.org/accordion/\#api.accordioncontent.props)
Defines valid properties in AccordionContent component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| as | string \| Component | DIV | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AccordionContentPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/accordion/\#api.accordioncontent.slots)
Defines valid slots in AccordionContent slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
### Interfaces [\#](https://primevue.org/accordion/\#api.accordioncontent.interfaces)
Defines the custom interfaces used by the module.
#### AccordionContentPassThroughMethodOptions [\#](https://primevue.org/accordion/\#api.accordioncontent.interfaces.AccordionContentPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AccordionContentProps](https://primevue.org/accordion/#api.accordioncontent.interfaces.AccordionContentProps) | null | Defines valid properties. |
| context | [AccordionContentContext](https://primevue.org/accordion/#api.accordioncontent.interfaces.AccordionContentContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### AccordionContentPassThroughOptions [\#](https://primevue.org/accordion/\#api.accordioncontent.interfaces.AccordionContentPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [AccordionContentPassThroughOptionType](https://primevue.org/accordion/#api.accordioncontent.types.AccordionContentPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| transition | [AccordionContentPassThroughOptionType](https://primevue.org/accordion/#api.accordioncontent.types.AccordionContentPassThroughOptionType) | null | Used to pass attributes to the transition's DOM element. |
| content | [AccordionContentPassThroughOptionType](https://primevue.org/accordion/#api.accordioncontent.types.AccordionContentPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### AccordionContentPassThroughAttributes [\#](https://primevue.org/accordion/\#api.accordioncontent.interfaces.AccordionContentPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### AccordionContentContext [\#](https://primevue.org/accordion/\#api.accordioncontent.interfaces.AccordionContentContext)
Defines current options in AccordionContent component.
| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | null | Whether the item is active. |
## Types [\#](https://primevue.org/accordion/\#api.accordioncontent.types)
Defines the custom types used by the module.
#### AccordionContentPassThroughOptionType [\#](https://primevue.org/accordion/\#api.accordioncontent.types.AccordionContentPassThroughOptionType)
| values |
| --- |
| AccordionContentPassThroughAttributes \| (options: AccordionContentPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### AccordionContentEmits [\#](https://primevue.org/accordion/\#api.accordioncontent.types.AccordionContentEmits)
| values |
| --- |
| EmitFn<AccordionContentEmitsOptions> |
- Accordion
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
- AccordionPanel
  - Props
  - Slots
  - Interfaces
  - Types
- AccordionHeader
  - Props
  - Slots
  - Interfaces
  - Types
- AccordionContent
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Password Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Password
Password displays strength indicator for password fields.
## Import [\#](https://primevue.org/password/\#import)
```javascript
import Password from 'primevue/password';
```
Copy
## Basic [\#](https://primevue.org/password/\#basic)
Password is used with the _v-model_ property for two-way value binding.
Enter a password
```markup
<Password v-model="value" :feedback="false" />
```
Copy
## Forms [\#](https://primevue.org/password/\#forms)
InputText is used with the _v-model_ property.
Enter a password
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-64">
    <div class="flex flex-col gap-1">
        <Password name="password" placeholder="Password" :feedback="false" fluid />
        <template v-if="$form.password?.invalid">
            <Message v-for="(error, index) of $form.password.errors" :key="index" severity="error" size="small" variant="simple">{{ error.message }}</Message>
        </template>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Meter [\#](https://primevue.org/password/\#meter)
Strength meter is displayed as a popup while a value is being entered.
Enter a password
```markup
<Password v-model="value" />
```
Copy
## Locale [\#](https://primevue.org/password/\#locale)
Labels are translated at component level by _promptLabel_, _weakLabel_, _mediumLabel_ and _strongLabel_ properties. In order to apply global translations for all Password components in the application, refer to the [locale](https://primevue.org/configuration/#locale).
Choose a password
```markup
<Password v-model="value" promptLabel="Choose a password" weakLabel="Too simple" mediumLabel="Average complexity" strongLabel="Complex password" />
```
Copy
## ToggleMask [\#](https://primevue.org/password/\#togglemask)
When _toggleMask_ is present, an icon is displayed to show the value as plain text.
Enter a password
```markup
<Password v-model="value" toggleMask />
```
Copy
## Template [\#](https://primevue.org/password/\#template)
3 slots are included to customize the overlay. These are _header_, _content_ and _footer_. Note that content overrides the default meter.
Enter a password
```markup
<Password v-model="value">
    <template #header>
        <div class="font-semibold text-xm mb-4">Pick a password</div>
    </template>
    <template #footer>
        <Divider />
        <ul class="pl-2 my-0 leading-normal">
            <li>At least one lowercase</li>
            <li>At least one uppercase</li>
            <li>At least one numeric</li>
            <li>Minimum 8 characters</li>
        </ul>
    </template>
</Password>
```
Copy
## Filled [\#](https://primevue.org/password/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
Enter a password
```markup
<Password v-model="value" :feedback="false" variant="filled" />
```
Copy
## Float Label [\#](https://primevue.org/password/\#floatlabel)
A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
Enter a password
Over Label
Enter a password
In Label
Enter a password
On Label
```markup
<FloatLabel>
    <Password v-model="value1" inputId="over_label" />
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel variant="in">
    <Password v-model="value2" inputId="in_label" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel variant="on">
    <Password v-model="value3" inputId="on_label" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/password/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
Enter a password
Password
```markup
<IftaLabel>
    <Password v-model="value" inputId="password" variant="filled" />
    <label for="password">Password</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/password/\#sizes)
Password provides _small_ and _large_ sizes as alternatives to the base.
Enter a password
Enter a password
Enter a password
```markup
<div class="card flex flex-col items-center gap-4">
    <Password v-model="value1" size="small" placeholder="Small" />
    <Password v-model="value2" placeholder="Normal" />
    <Password v-model="value3" size="large" placeholder="Large" />
</div>
```
Copy
## Invalid [\#](https://primevue.org/password/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
Enter a password
Enter a password
```markup
<Password v-model="value1" :invalid="!value1" placeholder="Password" />
<Password v-model="value2" :invalid="!value2" variant="filled" placeholder="Password" />
```
Copy
## Disabled [\#](https://primevue.org/password/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
Enter a password
```markup
<Password disabled placeholder="Disabled" />
```
Copy
## Accessibility [\#](https://primevue.org/password/\#accessibility)
### Screen Reader
Value to describe the component can either be provided via _label_ tag combined with _id_ prop or using _aria-labelledby_, _aria-label_ props. Screen reader is notified about the changes to the strength of the password using a section that has _aria-live_ while typing.
```markup
<label for="pwd1">Password</label>
<Password inputId="pwd1" />
<span id="pwd2">Password</span>
<Password aria-labelledby="pwd2" />
<Password aria-label="Password"/>
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the input. |
| _escape_ | Hides the strength meter if open. |
- Import
- Basic
- Forms
- Meter
- Locale
- ToggleMask
- Template
- Filled
- Float Label
- Ifta Label
- Sizes
- Invalid
- Disabled
- Accessibility
# Password API
API defines helper props, events and others for the PrimeVue Password module.
## Password [\#](https://primevue.org/password/\#api.password)
Password displays strength indicator for password fields.
### Props [\#](https://primevue.org/password/\#api.password.props)
Defines valid properties in Password component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | Nullable<string> | null | Value of the component. |  |
| defaultValue | Nullable<string> | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| promptLabel | string | null | Text to prompt password entry. Defaults to PrimeVue Locale configuration. |  |
| mediumRegex | string \| RegExp | ^(((?=.\*\[a-z\])(?=.\*\[A-Z\]))\|((?=.\*\[a-z\])(?=.\*\[0-9\]))\|((?=.\*\[A-Z\])(?=.\*\[0-9\])))(?=.{6,}) | Regex for a medium level password. |  |
| strongRegex | string \| RegExp | ^(?=.\*\[a-z\])(?=.\*\[A-Z\])(?=.\*\[0-9\])(?=.{8,}) | Regex for a strong level password. |  |
| weakLabel | string | null | Text for a weak password. Defaults to PrimeVue Locale configuration. |  |
| mediumLabel | string | null | Text for a medium password. Defaults to PrimeVue Locale configuration. |  |
| strongLabel | string | null | Text for a strong password. Defaults to PrimeVue Locale configuration. |  |
| feedback | boolean | true | Whether to show the strength indicator or not. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. |  |
| toggleMask | boolean | false | Whether to show an icon to display the password as plain text. |  |
| maskIcon | string | null | Icon to hide displaying the password as plain text. |  |
| unmaskIcon | string | null | Icon to show displaying the password as plain text. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| placeholder | string | null | Placeholder text for the input. |  |
| required | boolean | false | When present, it specifies that an input field must be filled out before submitting the form. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| autofocus | boolean | null | When present, it specifies that an input element should automatically get focus when the page loads. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| inputProps | InputHTMLAttributes | null | Used to pass all properties of the HTMLInputElement to the focusable input element inside the component. |  |
| panelId | string | null | Identifier of the underlying overlay panel element. |  |
| panelClass | string \| object | null | Style class of the overlay panel. |  |
| panelStyle | object | null | Inline style of the overlay panel. |  |
| panelProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the overlay panel inside the component. |  |
| overlayId | string | null | Identifier of the underlying overlay element. |  |
| overlayClass | string \| object | null | Style class of the overlay. |  |
| overlayStyle | object | null | Inline style of the overlay. |  |
| overlayProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the overlay inside the component. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<PasswordPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/password/\#api.password.emits)
Defines valid emits in Password component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: string | void | Emitted when the value changes. |  |
| value-change | value: string | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: Event | void | Callback to invoke on value change. |  |
### Slots [\#](https://primevue.org/password/\#api.password.slots)
Defines valid slots in Password component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| content |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| hideicon | scope: {<br>toggleCallback: () â‡’ void, // Mask icon click event<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| maskicon | scope: {<br>toggleCallback: () â‡’ void, // Mask icon click event<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom hide icon template. |  |
| showicon | scope: {<br>toggleCallback: () â‡’ void, // Unmask icon click event<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| unmaskicon | scope: {<br>toggleCallback: () â‡’ void, // Unmask icon click event<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom unmask icon template. |  |
### Interfaces [\#](https://primevue.org/password/\#api.password.interfaces)
Defines the custom interfaces used by the module.
#### PasswordPassThroughMethodOptions [\#](https://primevue.org/password/\#api.password.interfaces.PasswordPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [PasswordProps](https://primevue.org/password/#api.password.interfaces.PasswordProps) | null | Defines valid properties. |
| state | [PasswordState](https://primevue.org/password/#api.password.interfaces.PasswordState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### PasswordSharedPassThroughMethodOptions [\#](https://primevue.org/password/\#api.password.interfaces.PasswordSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [PasswordProps](https://primevue.org/password/#api.password.interfaces.PasswordProps) | null | Defines valid properties. |
| state | [PasswordState](https://primevue.org/password/#api.password.interfaces.PasswordState) | null | Defines current inline state. |
#### PasswordPassThroughOptions [\#](https://primevue.org/password/\#api.password.interfaces.PasswordPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcInputText | any | null | Used to pass attributes to the InputText component. |
| maskIcon | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the mask icon's DOM element. |
| unmaskIcon | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the unmask icon's DOM element. |
| overlay | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the overlay's DOM element. |
| content | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the overlay's content DOM element. |
| meter | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the meter's DOM element. |
| meterLabel | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the meter label's DOM element. |
| meterText | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the meter text's DOM element. |
| hiddenAccesible | [PasswordPassThroughOptionType](https://primevue.org/password/#api.password.types.PasswordPassThroughOptionType) | null | Used to pass attributes to the hidden accessible DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [PasswordPassThroughTransitionType](https://primevue.org/password/#api.password.types.PasswordPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### PasswordPassThroughAttributes [\#](https://primevue.org/password/\#api.password.interfaces.PasswordPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### PasswordState [\#](https://primevue.org/password/\#api.password.interfaces.PasswordState)
Defines current inline state in Password component.
| name | type | default | description |
| --- | --- | --- | --- |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |
| meter | [PasswordMeterStateOptions](https://primevue.org/password/#api.password.interfaces.PasswordMeterStateOptions) | null | Current overlay visible state as a boolean. |
| infoText | string | null | Current info test state as a string. |
| focused | boolean | false | Current focused state as a boolean. |
| unmasked | boolean | false | Current unmasked state as a boolean. |
#### PasswordMeterStateOptions [\#](https://primevue.org/password/\#api.password.interfaces.PasswordMeterStateOptions)
| name | type | default | description |
| --- | --- | --- | --- |
| strength | string | null | Current strength of the meter state as a string. |
| width | string | null | Current width of the meter state as a string. |
## Types [\#](https://primevue.org/password/\#api.password.types)
Defines the custom types used by the module.
#### PasswordPassThroughOptionType [\#](https://primevue.org/password/\#api.password.types.PasswordPassThroughOptionType)
| values |
| --- |
| PasswordPassThroughAttributes \| (options: PasswordPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### PasswordPassThroughTransitionType [\#](https://primevue.org/password/\#api.password.types.PasswordPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: PasswordPassThroughMethodOptions) => TransitionProps \| undefined |
#### PasswordEmits [\#](https://primevue.org/password/\#api.password.types.PasswordEmits)
| values |
| --- |
| EmitFn<PasswordEmitsOptions> |
- Password
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## TreeSelect Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# TreeSelect
TreeSelect is a form component to choose from hierarchical data.
## Import [\#](https://primevue.org/treeselect/\#import)
```javascript
import TreeSelect from 'primevue/treeselect';
```
Copy
## Basic [\#](https://primevue.org/treeselect/\#basic)
TreeSelect is used with the _v-model_ property for two-way value binding along with the _options_ collection. Internally [Tree](https://primevue.org/tree/) component is used so the options model is based on TreeNode API.
In single selection mode, value binding should be the _key_ value of a node.
Select Item
```markup
<TreeSelect v-model="selectedValue" :options="nodes" placeholder="Select Item" class="md:w-80 w-full" />
```
Copy
## Forms [\#](https://primevue.org/treeselect/\#forms)
TreeSelect is used with the _v-model_ property.
Select Item
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-full md:w-80">
    <div class="flex flex-col gap-1">
        <TreeSelect name="node" :options="nodes" placeholder="Select Item" fluid />
        <Message v-if="$form.node?.invalid" severity="error" size="small" variant="simple">{{ $form.node.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Multiple [\#](https://primevue.org/treeselect/\#multiple)
More than one node is selectable by setting _selectionMode_ to _multiple_. By default in multiple selection mode, metaKey press (e.g. _âŒ˜_) is not necessary to add to existing selections. When the optional _metaKeySelection_ is present, behavior is changed in a way that selecting a new node requires meta key to be present. Note that in touch enabled devices, TreeSelect always ignores metaKey.
In multiple selection mode, value binding should be a key-value pair where key is the node key and value is a boolean to indicate selection.
```javascript
{
    '0-0': true,
    '0-1-0': true
}
```
Copy
Select Items
```markup
<TreeSelect v-model="selectedValue" :options="nodes" selectionMode="multiple" display="chip" :maxSelectedLabels="3" placeholder="Select Items" class="md:w-80 w-full" />
```
Copy
## Checkbox [\#](https://primevue.org/treeselect/\#checkbox)
Selection of multiple nodes via checkboxes is enabled by configuring _selectionMode_ as _checkbox_.
In checkbox selection mode, value binding should be a key-value pair where key is the node key and value is an object that has _checked_ and _partialChecked_ properties to represent the checked state of a node object to indicate selection.
```javascript
{
    '0-0': {
        partialChecked: false,
        checked: true
    }
}
```
Copy
Select Items
```markup
<TreeSelect v-model="selectedValue" :options="nodes" selectionMode="checkbox" placeholder="Select Item" class="md:w-80 w-full" />
```
Copy
## Lazy [\#](https://primevue.org/treeselect/\#lazy)
Lazy loading is useful when dealing with huge datasets, in this example nodes are dynamically loaded on demand using _loading_ property and _node-expand_ method. Default value of _loadingMode_ is _mask_ and also _icon_ is available.
Select Item
Select Item
```markup
<TreeSelect v-model="selectedValue" :loading="loading" :options="nodes" @node-expand="onNodeExpand" placeholder="Select Item" class="md:w-80 w-full" />
<TreeSelect v-model="selectedValue2" loadingMode="icon" :options="nodes2" @node-expand="onNodeExpand2" placeholder="Select Item" class="md:w-80 w-full" />
```
Copy
## Filter [\#](https://primevue.org/treeselect/\#filter)
Filtering is enabled by adding the _filter_ property, by default label property of a node is used to compare against the value in the text field, in order to customize which field(s) should be used during search define _filterBy_ property. In addition _filterMode_ specifies the filtering strategy. In _lenient_ mode when the query matches a node, children of the node are not searched further as all descendants of the node are included. On the other hand, in _strict_ mode when the query matches a node, filtering continues on all descendants.
Select Item
Select Item
```markup
<TreeSelect v-model="selectedValue" filter filterMode="lenient" :options="nodes" placeholder="Select Item" class="md:w-80 w-full" />
<TreeSelect v-model="selectedValue" filter filterMode="strict" :options="nodes" placeholder="Select Item" class="md:w-80 w-full" />
```
Copy
## Clear Icon [\#](https://primevue.org/treeselect/\#clearicon)
When _showClear_ is enabled, a clear icon is added to reset the TreeSelect.
Select Item
```markup
<TreeSelect v-model="selectedValue" :options="nodes" placeholder="Select Item" class="md:w-80 w-full" />
```
Copy
## Template [\#](https://primevue.org/treeselect/\#template)
TreeSelect offers multiple slots for customization through templating.
Select Item
```markup
<TreeSelect v-model="selectedValue" :options="nodes" placeholder="Select Item" class="md:w-80 w-full">
    <template #dropdownicon>
        <i class="pi pi-search" />
    </template>
    <template #header>
        <div class="font-medium px-3 py-2">Available Files</div>
    </template>
    <template #footer>
        <div class="px-3 pt-1 pb-2 flex justify-between">
            <Button label="Add New" severity="secondary" text size="small" icon="pi pi-plus" />
            <Button label="Remove All" severity="danger" text size="small" icon="pi pi-plus" />
        </div>
    </template>
</TreeSelect>
```
Copy
## Filled [\#](https://primevue.org/treeselect/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
Select Item
```markup
<TreeSelect v-model="selectedValue" variant="filled" :options="nodes" placeholder="Select Item" class="md:w-80 w-full" />
```
Copy
## Float Label [\#](https://primevue.org/treeselect/\#floatlabel)
A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
empty
Over Label
empty
In Label
empty
On Label
```markup
<FloatLabel class="w-full md:w-80">
    <TreeSelect v-model="value1" inputId="over_label" :options="nodes" class="w-full" />
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel class="w-full md:w-80" variant="in">
    <TreeSelect v-model="value2" inputId="in_label" :options="nodes" class="w-full" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel class="w-full md:w-80" variant="on">
    <TreeSelect v-model="value3" inputId="on_label" :options="nodes" class="w-full" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/treeselect/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
empty
File
```markup
<IftaLabel class="w-full md:w-80">
    <TreeSelect v-model="selectedValue" inputId="t_file" :options="nodes" class="w-full" variant="filled" />
    <label for="t_file">File</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/treeselect/\#sizes)
TreeSelect provides _small_ and _large_ sizes as alternatives to the base.
Small
Normal
Large
```markup
<TreeSelect v-model="value1" :options="nodes" size="small" placeholder="Small" class="md:w-80 w-full" />
<TreeSelect v-model="value2" :options="nodes" placeholder="Normal" class="md:w-80 w-full" />
<TreeSelect v-model="value3" :options="nodes" size="large" placeholder="Large" class="md:w-80 w-full" />
```
Copy
## Invalid [\#](https://primevue.org/treeselect/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
TreeSelect
TreeSelect
```markup
<TreeSelect v-model="selectedValue1" :invalid="Object.keys(selectedValue1).length === 0" class="md:w-80 w-full" :options="nodes" placeholder="TreeSelect" />
<TreeSelect v-model="selectedValue2" :invalid="Object.keys(selectedValue2).length === 0" class="md:w-80 w-full" :options="nodes" placeholder="TreeSelect" variant="filled" />
```
Copy
## Disabled [\#](https://primevue.org/treeselect/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
TreeSelect
```markup
<TreeSelect v-model="selectedValue" disabled class="md:w-80 w-full" :options="nodes" placeholder="TreeSelect" />
```
Copy
## Accessibility [\#](https://primevue.org/treeselect/\#accessibility)
### Screen Reader
Value to describe the component can either be provided with _aria-labelledby_ or _aria-label_ props. The treeselect element has a _combobox_ role in addition to _aria-haspopup_ and _aria-expanded_ attributes. The relation between the combobox and the popup is created with _aria-controls_ that refers to the id of the popup.
The popup list has an id that refers to the _aria-controls_ attribute of the _combobox_ element and uses _tree_ as the role. Each list item has a _treeitem_ role along with _aria-label_, _aria-selected_ and _aria-expanded_ attributes. In checkbox selection, _aria-checked_ is used instead of _aria-selected_. Checkbox and toggle icons are hidden from screen readers as their parent element with _treeitem_ role and attributes are used instead for readers and keyboard support. The container element of a treenode has the _group_ role. The _aria-setsize_, _aria-posinset_ and _aria-level_ attributes are calculated implicitly and added to each treeitem.
```markup
<span id="dd1">Options</span>
<TreeSelect aria-labelledby="dd1" />
<TreeSelect aria-label="Options" />
```
Copy
### Closed State Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the treeselect element. |
| _space_ | Opens the popup and moves visual focus to the selected treenode, if there is none then first treenode receives the focus. |
| _down arrow_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
### Popup Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous focusable element in the page tab sequence. |
| _enter_ | Selects the focused option, closes the popup if selection mode is single. |
| _space_ | Selects the focused option, closes the popup if selection mode is single. |
| _escape_ | Closes the popup, moves focus to the treeselect element. |
| _down arrow_ | Moves focus to the next treenode. |
| _up arrow_ | Moves focus to the previous treenode. |
| _right arrow_ | If node is closed, opens the node otherwise moves focus to the first child node. |
| _left arrow_ | If node is open, closes the node otherwise moves focus to the parent node. |
- Import
- Basic
- Forms
- Multiple
- Checkbox
- Lazy
- Filter
- Clear Icon
- Template
- Filled
- Float Label
- Ifta Label
- Sizes
- Invalid
- Disabled
- Accessibility
# TreeSelect API
API defines helper props, events and others for the PrimeVue TreeSelect module.
## TreeSelect [\#](https://primevue.org/treeselect/\#api.treeselect)
TreeSelect is a form component to choose from hierarchical data.
### Props [\#](https://primevue.org/treeselect/\#api.treeselect.props)
Defines valid properties in TreeSelect component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| options | TreeNode\[\] | null | An array of treenodes. |  |
| expandedKeys | any | null | A map of keys to represent the expansion state in controlled mode. |  |
| showClear | boolean | false | When enabled, a clear icon is displayed to clear the value. |  |
| clearIcon | string | null | Icon to display in clear button. |  |
| scrollHeight | string | 20rem | Height of the viewport, a scrollbar is defined if height of list exceeds this value. |  |
| selectionMode | HintedString<"single" \| "multiple" \| "checkbox"> | null | Defines the selection mode. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. |  |
| display | HintedString<"comma" \| "chip"> | comma | Defines how the selected items are displayed. |  |
| selectedItemsLabel | string | null | Label to display after exceeding max selected labels. |  |
| maxSelectedLabels | number | null | Decides how many selected item labels to show at most. |  |
| metaKeySelection | boolean | false | Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.<br>On touch enabled devices, metaKeySelection is turned off automatically. |  |
| loading | boolean | false | Whether to display loading indicator. |  |
| loadingIcon | string | null | Icon to display when tree is loading. |  |
| loadingMode | HintedString<"mask" \| "icon"> | mask | Loading mode display. |  |
| filter | boolean | false | When specified, displays an input field to filter the items. |  |
| filterBy | string \| Function | label | When filtering is enabled, filterBy decides which field or fields (comma separated) to search against. A callable taking a TreeNode can be provided instead of a list of field names. |  |
| filterMode | HintedString<"lenient" \| "strict"> | lenient | Mode for filtering. |  |
| filterPlaceholder | string | null | Placeholder text to show when filter input is empty. |  |
| filterLocale | string | null | Locale to use in filtering. The default locale is the host environment's current locale. |  |
| emptyMessage | string | No available options | Text to display when there are no options available. Defaults to value from PrimeVue locale configuration. |  |
| placeholder | string | null | Label to display when there are no selections. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| tabindex | string | null | Index of the element in tabbing order. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| inputProps | InputHTMLAttributes | null | Used to pass all properties of the HTMLInputElement to the focusable input element inside the component. |  |
| panelClass | any | null | Style class of the overlay panel. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TreeSelectPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/treeselect/\#api.treeselect.emits)
Defines valid emits in TreeSelect component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| update:expandedKeys | value: TreeExpandedKeys | void | Emitted when the expanded keys change. |  |
| change | value: string\[\] | void | Callback to invoke on value change. |  |
| before-show |  | void | Callback to invoke before the overlay is shown. |  |
| before-hide |  | void | Callback to invoke before the overlay is hidden. |  |
| show |  | void | Callback to invoke when the overlay is shown. |  |
| hide |  | void | Callback to invoke when the overlay is hidden. |  |
| node-select | node: TreeNode | void | Callback to invoke when a node is selected. |  |
| node-unselect | node: TreeNode | void | Callback to invoke when a node is unselected. |  |
| node-expand | node: TreeNode | void | Callback to invoke when a node is expanded. |  |
| node-collapse | node: TreeNode | void | Callback to invoke when a node is collapsed. |  |
### Slots [\#](https://primevue.org/treeselect/\#api.treeselect.slots)
Defines valid slots in TreeSelect component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| value | scope: {<br>value: any, // Selected valueplaceholder: string, // Placeholder<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom value template. |  |
| option | scope: {<br>node: any, // Current nodeselected: boolean, // Selection stateexpanded: boolean, // Expanded state<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option template. |  |
| header | scope: {<br>value: any, // Selected valueoptions: TreeNode, // An array of treenodes.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer | scope: {<br>value: any, // Selected valueoptions: TreeNode, // An array of treenodes.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template. |  |
| triggericon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| dropdownicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom indicator template. |  |
| itemtogglericon | scope: {<br>node: any, // Node instanceexpanded: TreeNode, // Expanded state of the node<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| itemtoggleicon | scope: {<br>node: any, // Node instanceexpanded: TreeNode, // Expanded state of the node<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item toggle icon template. |  |
| itemcheckboxicon | scope: {<br>checked: boolean, // Check state of the nodepartialChecked: boolean, // Partial check state of the node<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item checkbox icon template. |  |
| clearicon | scope: {<br>clearCallback: (event: Event) â‡’ void, // Clear icon click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom clear icon template. |  |
### Interfaces [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces)
Defines the custom interfaces used by the module.
#### TreeSelectPassThroughMethodOptions [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces.TreeSelectPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TreeSelectProps](https://primevue.org/treeselect/#api.treeselect.interfaces.TreeSelectProps) | null | Defines valid properties. |
| state | [TreeSelectState](https://primevue.org/treeselect/#api.treeselect.interfaces.TreeSelectState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TreeSelectSharedPassThroughMethodOptions [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces.TreeSelectSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [TreeSelectProps](https://primevue.org/treeselect/#api.treeselect.interfaces.TreeSelectProps) | null | Defines valid properties. |
| state | [TreeSelectState](https://primevue.org/treeselect/#api.treeselect.interfaces.TreeSelectState) | null | Defines current inline state. |
#### TreeSelectPassThroughOptions [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces.TreeSelectPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| labelContainer | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the label container's DOM element. |
| label | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the label's DOM element. |
| clearIcon | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the clear icon's DOM element. |
| chipItem | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the chip's DOM element. |
| pcChip | any | null | Used to pass attributes to the Chip. |
| dropdown | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the dropdown's DOM element. |
| dropdownIcon | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the dropdown icon's DOM element. |
| panel | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the panel's DOM element. |
| treeContainer | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the tree container's DOM element. |
| pcTree | any | null | Used to pass attributes to Tree component. |
| emptyMessage | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the empty message's DOM element. |
| hiddenInputContainer | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the hidden input container's DOM element. |
| hiddenInput | [TreeSelectPassThroughOptionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughOptionType) | null | Used to pass attributes to the hidden input's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [TreeSelectPassThroughTransitionType](https://primevue.org/treeselect/#api.treeselect.types.TreeSelectPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### TreeSelectPassThroughAttributes [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces.TreeSelectPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TreeSelectState [\#](https://primevue.org/treeselect/\#api.treeselect.interfaces.TreeSelectState)
Defines current inline state in TreeSelect component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| focused | boolean | false | Current focused state as a boolean. |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |
| expandedKeys | TreeExpandedKeys | null | Current expanded keys state. |
## Types [\#](https://primevue.org/treeselect/\#api.treeselect.types)
Defines the custom types used by the module.
#### TreeSelectPassThroughOptionType [\#](https://primevue.org/treeselect/\#api.treeselect.types.TreeSelectPassThroughOptionType)
| values |
| --- |
| TreeSelectPassThroughAttributes \| (options: TreeSelectPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TreeSelectPassThroughTransitionType [\#](https://primevue.org/treeselect/\#api.treeselect.types.TreeSelectPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: TreeSelectPassThroughMethodOptions) => TransitionProps \| undefined |
#### TreeSelectEmits [\#](https://primevue.org/treeselect/\#api.treeselect.types.TreeSelectEmits)
| values |
| --- |
| EmitFn<TreeSelectEmitsOptions> |
## TreeNode [\#](https://primevue.org/treeselect/\#api.treenode)
PrimeVue tree components share a common api to specify the node.
### Options [\#](https://primevue.org/treeselect/\#api.options.TreeNode)
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| key | string | null | Mandatory unique key of the node. |  |
| label | string | null | Label of the node. |  |
| data | any | null | Data represented by the node. |  |
| type | string | null | Type of the node to match a template. |  |
| icon | string | null | Icon of the node to display next to content. |  |
| children | TreeNode\[\] | null | An array of treenodes as children. |  |
| style | any | null | Inline style of the node. |  |
| styleClass | string | null | Style class of the node. |  |
| selectable | boolean | null | Whether the node is selectable when selection mode is enabled. |  |
| leaf | boolean | false | Specifies if the node has children. Used in lazy loading. |  |
| loading | boolean | null | Specifies the node loading. Used in Tree and TreeTable. |  |
| expandedIcon | string | null | Icon to use in expanded state. |  |
| collapsedIcon | string | null | Icon to use in collapsed state. |  |
| \[key: string\] | any | null |  |  |
- TreeSelect
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
- TreeNode
  - Options
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Splitter Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Splitter
Splitter is utilized to separate and resize panels.
## Import [\#](https://primevue.org/splitter/\#import)
```javascript
import Splitter from 'primevue/splitter';
import SplitterPanel from 'primevue/splitterpanel';
```
Copy
## Horizontal [\#](https://primevue.org/splitter/\#horizontal)
Splitter requires two SplitterPanel components as children which are displayed horizontally by default.
Panel 1
Panel 2
```markup
<Splitter style="height: 300px" class="mb-8">
    <SplitterPanel class="flex items-center justify-center"> Panel 1 </SplitterPanel>
    <SplitterPanel class="flex items-center justify-center"> Panel 2 </SplitterPanel>
</Splitter>
```
Copy
## Size [\#](https://primevue.org/splitter/\#size)
Initial dimension of a panel is percentage based and defined using the _size_ property. In addition, _minSize_ is provided to set a minimum value during a resize.
Panel 1
Panel 2
```markup
<Splitter style="height: 300px">
    <SplitterPanel class="flex items-center justify-center" :size="25" :minSize="10"> Panel 1 </SplitterPanel>
    <SplitterPanel class="flex items-center justify-center" :size="75"> Panel 2 </SplitterPanel>
</Splitter>
```
Copy
## Vertical [\#](https://primevue.org/splitter/\#vertical)
Panels are displayed as stacked by setting the _layout_ to _vertical_.
Panel 1
Panel 2
```markup
<Splitter style="height: 300px" layout="vertical">
    <SplitterPanel class="flex items-center justify-center"> Panel 1 </SplitterPanel>
    <SplitterPanel class="flex items-center justify-center"> Panel 2 </SplitterPanel>
</Splitter>
```
Copy
## Nested [\#](https://primevue.org/splitter/\#nested)
Splitters can be combined to create advanced layouts.
Panel 1
Panel 2
Panel 3
Panel 4
```markup
<Splitter style="height: 300px">
    <SplitterPanel class="flex items-center justify-center" :size="20" :minSize="10"> Panel 1 </SplitterPanel>
    <SplitterPanel :size="80">
        <Splitter layout="vertical">
            <SplitterPanel class="flex items-center justify-center" :size="15"> Panel 2 </SplitterPanel>
            <SplitterPanel :size="85">
                <Splitter>
                    <SplitterPanel class="flex items-center justify-center" :size="20"> Panel 3 </SplitterPanel>
                    <SplitterPanel class="flex items-center justify-center" :size="80"> Panel 4 </SplitterPanel>
                </Splitter>
            </SplitterPanel>
        </Splitter>
    </SplitterPanel>
</Splitter>
```
Copy
## Accessibility [\#](https://primevue.org/splitter/\#accessibility)
### Screen Reader
Splitter bar defines _separator_ as the role with _aria-orientation_ set to either horizontal or vertical.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the splitter bar. |
| _down arrow_ | Moves a vertical splitter down. |
| _up arrow_ | Moves a vertical splitter up. |
| _left arrow_ | Moves a horizontal splitter to the left. |
| _right arrow_ | Moves a horizontal splitter to the right. |
- Import
- Horizontal
- Size
- Vertical
- Nested
- Accessibility
# Splitter API
API defines helper props, events and others for the PrimeVue Splitter module.
## Splitter [\#](https://primevue.org/splitter/\#api.splitter)
Splitter is utilized to separate and resize panels.
### Props [\#](https://primevue.org/splitter/\#api.splitter.props)
Defines valid properties in Splitter component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| layout | HintedString<"horizontal" \| "vertical"> | horizontal | Orientation of the panels. |  |
| gutterSize | number | 4 | Size of the divider in pixels. |  |
| stateKey | string | null | Storage identifier of a stateful Splitter. |  |
| stateStorage | HintedString<"session" \| "local"> | session | Defines where a stateful splitter keeps its state, valid values are 'session' for sessionStorage and 'local' for localStorage. |  |
| step | number | 1 | Step factor to increment/decrement the size of the panels while pressing the arrow keys. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SplitterPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/splitter/\#api.splitter.emits)
Defines valid emits in Splitter component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| resizestart | event: [SplitterResizeStartEvent](https://primevue.org/splitter/#api.splitter.events.SplitterResizeStartEvent) | void | Callback to invoke when resize starts. |  |
| resize | event: [SplitterResizeEvent](https://primevue.org/splitter/#api.splitter.events.SplitterResizeEvent) | void | Callback to invoke during the resizing process. |  |
| resizeend | event: [SplitterResizeEndEvent](https://primevue.org/splitter/#api.splitter.events.SplitterResizeEndEvent) | void | Callback to invoke when resize ends. |  |
### Slots [\#](https://primevue.org/splitter/\#api.splitter.slots)
Defines valid slots in Splitter slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default slot to detect SplitterPanel components. |  |
### Methods [\#](https://primevue.org/splitter/\#api.splitter.methods)
Defines methods that can be accessed by the component's reference.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| resetState |  | void | This method resizes all panels by either using the stored state in the case of a stateful Splitter, the size property of each SplitterPanel, or by resetting them to their default values. |  |
### Events [\#](https://primevue.org/splitter/\#api.splitter.events)
Defines the custom events used by the component's emit.
#### SplitterResizeStartEvent [\#](https://primevue.org/splitter/\#api.splitter.events.SplitterResizeStartEvent)
Custom resize start event.
See [resizestart](https://primevue.org/splitter/#api.splitter.emitsoptions.resizestart)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| sizes | number\[\] | Sizes of the panels |
#### SplitterResizeEvent [\#](https://primevue.org/splitter/\#api.splitter.events.SplitterResizeEvent)
Custom resize event.
See [resize](https://primevue.org/splitter/#api.splitter.emitsoptions.resize)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| sizes | number\[\] | Sizes of the panels |
#### SplitterResizeEndEvent [\#](https://primevue.org/splitter/\#api.splitter.events.SplitterResizeEndEvent)
Custom resize end event.
See [resizeend](https://primevue.org/splitter/#api.splitter.emitsoptions.resizeend)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| sizes | number\[\] | Sizes of the panels |
### Interfaces [\#](https://primevue.org/splitter/\#api.splitter.interfaces)
Defines the custom interfaces used by the module.
#### SplitterPassThroughMethodOptions [\#](https://primevue.org/splitter/\#api.splitter.interfaces.SplitterPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SplitterProps](https://primevue.org/splitter/#api.splitter.interfaces.SplitterProps) | null | Defines valid properties. |
| state | [SplitterState](https://primevue.org/splitter/#api.splitter.interfaces.SplitterState) | null | Defines current inline state. |
| context | [SplitterContext](https://primevue.org/splitter/#api.splitter.interfaces.SplitterContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### SplitterPassThroughOptions [\#](https://primevue.org/splitter/\#api.splitter.interfaces.SplitterPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [SplitterPassThroughOptionType](https://primevue.org/splitter/#api.splitter.types.SplitterPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| gutter | [SplitterPassThroughOptionType](https://primevue.org/splitter/#api.splitter.types.SplitterPassThroughOptionType) | null | Used to pass attributes to the gutter's DOM element. |
| gutterHandle | [SplitterPassThroughOptionType](https://primevue.org/splitter/#api.splitter.types.SplitterPassThroughOptionType) | null | Used to pass attributes to the gutter handle's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### SplitterPassThroughAttributes [\#](https://primevue.org/splitter/\#api.splitter.interfaces.SplitterPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### SplitterState [\#](https://primevue.org/splitter/\#api.splitter.interfaces.SplitterState)
Defines current inline state in Panel component.
| name | type | default | description |
| --- | --- | --- | --- |
| prevSize | number | null | Previous size state as a number. |
#### SplitterContext [\#](https://primevue.org/splitter/\#api.splitter.interfaces.SplitterContext)
Defines options in Splitter component.
| name | type | default | description |
| --- | --- | --- | --- |
| nested | boolean | null | Current nested state of the component. |
## Types [\#](https://primevue.org/splitter/\#api.splitter.types)
Defines the custom types used by the module.
#### SplitterPassThroughOptionType [\#](https://primevue.org/splitter/\#api.splitter.types.SplitterPassThroughOptionType)
| values |
| --- |
| SplitterPassThroughAttributes \| (options: SplitterPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### SplitterEmits [\#](https://primevue.org/splitter/\#api.splitter.types.SplitterEmits)
| values |
| --- |
| EmitFn<SplitterEmitsOptions> |
## SplitterPanel [\#](https://primevue.org/splitter/\#api.splitterpanel)
SplitterPanel is a helper component for Splitter component.
### Props [\#](https://primevue.org/splitter/\#api.splitterpanel.props)
Defines valid properties in SplitterPanel component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| size | number | null | Size of the element relative to 100%. |  |
| minSize | number | null | Minimum size of the element relative to 100%. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SplitterPanelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Interfaces [\#](https://primevue.org/splitter/\#api.splitterpanel.interfaces)
Defines the custom interfaces used by the module.
#### SplitterPanelPassThroughMethodOptions [\#](https://primevue.org/splitter/\#api.splitterpanel.interfaces.SplitterPanelPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SplitterPanelProps](https://primevue.org/splitter/#api.splitterpanel.interfaces.SplitterPanelProps) | null | Defines valid properties. |
| context | [SplitterPanelContext](https://primevue.org/splitter/#api.splitterpanel.interfaces.SplitterPanelContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### SplitterPanelPassThroughOptions [\#](https://primevue.org/splitter/\#api.splitterpanel.interfaces.SplitterPanelPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [SplitterPanelPassThroughOptionType](https://primevue.org/splitter/#api.splitterpanel.types.SplitterPanelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### SplitterPanelPassThroughAttributes [\#](https://primevue.org/splitter/\#api.splitterpanel.interfaces.SplitterPanelPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### SplitterPanelContext [\#](https://primevue.org/splitter/\#api.splitterpanel.interfaces.SplitterPanelContext)
Defines options in SplitterPanel component.
| name | type | default | description |
| --- | --- | --- | --- |
| nested | boolean | null | Current nested state of the panel. |
## Types [\#](https://primevue.org/splitter/\#api.splitterpanel.types)
Defines the custom types used by the module.
#### SplitterPanelPassThroughOptionType [\#](https://primevue.org/splitter/\#api.splitterpanel.types.SplitterPanelPassThroughOptionType)
| values |
| --- |
| SplitterPanelPassThroughAttributes \| (options: SplitterPanelPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### SplitterPanelEmits [\#](https://primevue.org/splitter/\#api.splitterpanel.types.SplitterPanelEmits)
| values |
| --- |
| EmitFn<SplitterPanelEmitsOptions> |
- Splitter
  - Props
  - Emits
  - Slots
  - Methods
  - Events
  - Interfaces
  - Types
- SplitterPanel
  - Props
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Auto Import
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Auto Import
On-demand PrimeVue components with auto imports and tree-shaking.
## Overview [\#](https://primevue.org/autoimport/\#overview)
PrimeVue components need to be imported and configured individually. In the next section, we'll cleanup the code using auto imports.
```javascript
import { createApp } from "vue";
import PrimeVue from "primevue/config";
import InputText from 'primevue/inputtext';
import Button from 'primevue/button';
import App from './App.vue'
const app = createApp(App);
app.use(PrimeVue);
app.component('InputText', InputText);
app.component('Button', Button);
```
Copy
## Unplugin [\#](https://primevue.org/autoimport/\#unplugin)
The [unplugin-vue-components](https://github.com/unplugin/unplugin-vue-components) library can automatically import and register PrimeVue components with the help of _@primevue/auto-import-resolver_. Begin with installing the packages as dev dependencies.
```javascript
npm i unplugin-vue-components -D
npm i @primevue/auto-import-resolver -D
```
Copy
Next step would be adding the _PrimeVueResolver_ at vite.config using the _Components_ plugin.
```javascript
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import Components from 'unplugin-vue-components/vite';
import {PrimeVueResolver} from '@primevue/auto-import-resolver';
// https://vitejs.dev/config/
export default defineConfig({
  plugins: [\
    vue(),\
    Components({\
      resolvers: [\
        PrimeVueResolver()\
      ]\
    })]
})
```
Copy
That's it, now the initialization code can be refactored as the following. For configuration like namespacing, visit the [official documentation](https://github.com/unplugin/unplugin-vue-components?tab=readme-ov-file#configuration).
```javascript
import { createApp } from "vue";
import PrimeVue from "primevue/config";
import App from './App.vue'
const app = createApp(App);
app.use(PrimeVue);
```
Copy
## Example [\#](https://primevue.org/autoimport/\#example)
A complete example using PrimeVue with auto imports is available at the [playground](https://primevue.org/playground).
- Overview
- Unplugin
- Example
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## InputText Component Overview
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# InputText
InputText is an extension to standard input element with theming.
## Import [\#](https://primevue.org/inputtext/\#import)
```javascript
import InputText from 'primevue/inputtext';
```
Copy
## Basic [\#](https://primevue.org/inputtext/\#basic)
InputText is used with the _v-model_ property for two-way value binding.
```markup
<InputText type="text" v-model="value" />
```
Copy
## Forms [\#](https://primevue.org/inputtext/\#forms)
InputText integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex justify-center flex-col gap-4">
    <div class="flex flex-col gap-1">
        <InputText name="username" type="text" placeholder="Username" />
        <Message v-if="$form.username?.invalid" severity="error" size="small" variant="simple">{{ $form.username.error?.message }}</Message>
    </div>
    <div class="flex flex-col gap-1">
        <InputText name="email" type="text" placeholder="Email" />
        <Message v-if="$form.email?.invalid" severity="error" size="small" variant="simple">{{ $form.email.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Filled [\#](https://primevue.org/inputtext/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
```markup
<InputText type="text" v-model="value" variant="filled" />
```
Copy
## Float Label [\#](https://primevue.org/inputtext/\#floatlabel)
FloatLabel visually integrates a label with its form element. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
Over LabelIn LabelOn Label
```markup
<FloatLabel>
    <InputText id="over_label" v-model="value1" />
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel variant="in">
    <InputText id="in_label" v-model="value2" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel variant="on">
    <InputText id="on_label" v-model="value3" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/inputtext/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
Username
```markup
<IftaLabel>
    <InputText id="username" v-model="value" variant="filled" />
    <label for="username">Username</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/inputtext/\#sizes)
InputText provides _small_ and _large_ sizes as alternatives to the base.
```markup
<InputText v-model="value1" type="text" size="small" placeholder="Small" />
<InputText v-model="value2" type="text" placeholder="Normal" />
<InputText v-model="value3" type="text" size="large" placeholder="Large" />
```
Copy
## Help Text [\#](https://primevue.org/inputtext/\#helptext)
An advisory text can be defined with the [Message](https://primevue.org/message) component.
Username
Enter your username to reset your password.
```markup
<div class="flex flex-col gap-2">
    <label for="username">Username</label>
    <InputText id="username" v-model="value" aria-describedby="username-help" />
    <Message size="small" severity="secondary" variant="simple">Enter your username to reset your password.</Message>
</div>
```
Copy
## Invalid [\#](https://primevue.org/inputtext/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
```markup
<InputText v-model="value1" :invalid="!value1" placeholder="Name" />
<InputText v-model="value2" :invalid="!value2" variant="filled" placeholder="Name" />
```
Copy
## Disabled [\#](https://primevue.org/inputtext/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
```markup
<InputText v-model="value" disabled placeholder="Disabled" />
```
Copy
## Accessibility [\#](https://primevue.org/inputtext/\#accessibility)
### Screen Reader
InputText component renders a native input element that implicitly includes any passed prop. Value to describe the component can either be provided via _label_ tag combined with _id_ prop or using _aria-labelledby_, _aria-label_ props.
```markup
<label for="firstname">Firstname</label>
<InputText id="firstname" />
<span id="lastname">Lastname</span>
<InputText aria-labelledby="lastname" />
<InputText aria-label="Age"/>
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the input. |
- Import
- Basic
- Forms
- Filled
- Float Label
- Ifta Label
- Sizes
- Help Text
- Invalid
- Disabled
- Accessibility
# InputText API
API defines helper props, events and others for the PrimeVue InputText module.
## InputText [\#](https://primevue.org/inputtext/\#api.inputtext)
InputText renders a text field to enter data.
### Props [\#](https://primevue.org/inputtext/\#api.inputtext.props)
Defines valid properties in InputText component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | Nullable<string> | null | Value of the component. |  |
| defaultValue | Nullable<string> | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| size | null \| HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | null \| boolean | false | When present, it specifies that the component should have invalid state style. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| fluid | null \| boolean | null | Spans 100% width of the container when enabled. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<InputTextPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/inputtext/\#api.inputtext.emits)
Defines valid emits in InputText component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: undefined \| string | void | Emitted when the value changes. |  |
| value-change | value: undefined \| string | void | Emitted when the value changes in uncontrolled mode. |  |
### Interfaces [\#](https://primevue.org/inputtext/\#api.inputtext.interfaces)
Defines the custom interfaces used by the module.
#### InputTextPassThroughMethodOptions [\#](https://primevue.org/inputtext/\#api.inputtext.interfaces.InputTextPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [InputTextProps](https://primevue.org/inputtext/#api.inputtext.interfaces.InputTextProps) | null | Defines valid properties. |
| context | [InputTextContext](https://primevue.org/inputtext/#api.inputtext.interfaces.InputTextContext) | null | Defines current options. |
| parent | any | null | Defines parent instance. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### InputTextPassThroughOptions [\#](https://primevue.org/inputtext/\#api.inputtext.interfaces.InputTextPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [InputTextPassThroughOptionType<T>](https://primevue.org/inputtext/#api.inputtext.types.InputTextPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### InputTextPassThroughAttributes [\#](https://primevue.org/inputtext/\#api.inputtext.interfaces.InputTextPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### InputTextContext [\#](https://primevue.org/inputtext/\#api.inputtext.interfaces.InputTextContext)
Defines current options in InputText component.
| name | type | default | description |
| --- | --- | --- | --- |
| filled | boolean | false | Current filled state of the component as a boolean. |
| disabled | boolean | false | Current disabled state of the component as a boolean. |
## Types [\#](https://primevue.org/inputtext/\#api.inputtext.types)
Defines the custom types used by the module.
#### InputTextPassThroughOptionType [\#](https://primevue.org/inputtext/\#api.inputtext.types.InputTextPassThroughOptionType)
| values |
| --- |
| InputTextPassThroughAttributes \| (options: InputTextPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### InputTextEmits [\#](https://primevue.org/inputtext/\#api.inputtext.types.InputTextEmits)
| values |
| --- |
| EmitFn<InputTextEmitsOptions> |
- InputText
  - Props
  - Emits
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue AutoComplete Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# AutoComplete
AutoComplete is an input component that provides real-time suggestions when being typed.
## Import [\#](https://primevue.org/autocomplete/\#import)
```javascript
import AutoComplete from 'primevue/autocomplete';
```
Copy
## Basic [\#](https://primevue.org/autocomplete/\#basic)
AutoComplete is used with the _v-model_ property for two-way value binding. In addition, _suggestions_ property and a _complete_ method are required to query the results.
No results found
```markup
<AutoComplete v-model="value" :suggestions="items" @complete="search" />
```
Copy
## Objects [\#](https://primevue.org/autocomplete/\#objects)
AutoComplete can work with objects using the _optionLabel_ property that defines the label to display as a suggestion. The value passed to the model would still be the object instance of a suggestion. Here is an example with a Country object that has name and code fields such as _{name: "United States", code:"USA"}_.
No results found
```markup
<AutoComplete v-model="selectedCountry" optionLabel="name" :suggestions="filteredCountries" @complete="search" />
```
Copy
## Forms [\#](https://primevue.org/autocomplete/\#forms)
AutoComplete integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
No results found
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex justify-center flex-col gap-4 w-full md:w-56">
    <div class="flex flex-col gap-1">
        <AutoComplete name="country.name" optionLabel="name" :suggestions="filteredCountries" @complete="search" />
        <Message v-if="$form.country?.name?.invalid" severity="error" size="small" variant="simple">{{ $form.country.name.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Dropdown [\#](https://primevue.org/autocomplete/\#dropdown)
Enabling _dropdown_ property displays a button next to the input field where click behavior of the button is defined using _dropdownMode_ property that takes **blank** or **current** as possible values. _blank_ is the default mode to send a query with an empty string whereas _current_ setting sends a query with the current value of the input.
No results found
```markup
<AutoComplete v-model="value" dropdown :suggestions="items" @complete="search" />
```
Copy
## Template [\#](https://primevue.org/autocomplete/\#template)
AutoComplete offers multiple slots for customization through templating.
No results found
```markup
<AutoComplete v-model="selectedCountry" optionLabel="name" :suggestions="filteredCountries" @complete="search">
    <template #option="slotProps">
        <div class="flex items-center">
            <img :alt="slotProps.option.name" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px" />
            <div>{{ slotProps.option.name }}</div>
        </div>
    </template>
    <template #header>
        <div class="font-medium px-3 py-2">Available Countries</div>
    </template>
    <template #footer>
        <div class="px-3 py-3">
            <Button label="Add New" fluid severity="secondary" text size="small" icon="pi pi-plus" />
        </div>
    </template>
</AutoComplete>
```
Copy
## Group [\#](https://primevue.org/autocomplete/\#group)
Option groups are specified with the _optionGroupLabel_ and _optionGroupChildren_ properties.
No results found
```markup
<AutoComplete v-model="selectedCity" :suggestions="filteredCities" @complete="search" optionLabel="label" optionGroupLabel="label" optionGroupChildren="items" placeholder="Hint: type 'a'">
    <template #optiongroup="slotProps">
        <div class="flex items-center country-item">
            <img :alt="slotProps.option.label" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px" />
            <div>{{ slotProps.option.label }}</div>
        </div>
    </template>
</AutoComplete>
```
Copy
## Force Selection [\#](https://primevue.org/autocomplete/\#forceselection)
ForceSelection mode validates the manual input to check whether it also exists in the suggestions list, if not the input value is cleared to make sure the value passed to the model is always one of the suggestions. Simply enable _forceSelection_ to enforce that input is always from the suggestion list.
No results found
```markup
<AutoComplete v-model="selectedCountry" forceSelection optionLabel="name" :suggestions="filteredCountries" @complete="search" />
```
Copy
## Virtual Scroll [\#](https://primevue.org/autocomplete/\#virtualscroll)
Virtual Scrolling is a performant way to render large lists. Configuration of the scroll behavior is defined with _virtualScrollerOptions_ that requires _itemSize_ as the mandatory value to set the height of an item. Visit [VirtualScroller](https://primevue.org/virtualscroller/) documentation for more information about the configuration API.
No results found
```markup
<AutoComplete v-model="selectedItem" :suggestions="filteredItems" @complete="searchItems"
    :virtualScrollerOptions="{ itemSize: 38 }" optionLabel="label" dropdown />
```
Copy
## Filled [\#](https://primevue.org/autocomplete/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
No results found
```markup
<AutoComplete v-model="value" :suggestions="items" @complete="search" variant="filled" />
```
Copy
## Float Label [\#](https://primevue.org/autocomplete/\#floatlabel)
A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
No results found
Over Label
No results found
In Label
No results found
On Label
```markup
<FloatLabel>
    <AutoComplete v-model="value1" inputId="over_label" :suggestions="items" @complete="search" />
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel variant="in">
    <AutoComplete v-model="value2" inputId="in_label" :suggestions="items" @complete="search" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel variant="on">
    <AutoComplete v-model="value3" inputId="on_label" :suggestions="items" @complete="search" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/autocomplete/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
No results found
Identifier
```markup
<IftaLabel>
    <AutoComplete v-model="value" inputId="ac" :suggestions="items" @complete="search" variant="filled" />
    <label for="ac">Identifier</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/autocomplete/\#sizes)
AutoComplete provides _small_ and _large_ sizes as alternatives to the base.
No results found
No results found
No results found
```markup
<AutoComplete v-model="value1" :suggestions="items" @complete="search" size="small" placeholder="Small" dropdown />
<AutoComplete v-model="value2" :suggestions="items" @complete="search" placeholder="Normal" dropdown />
<AutoComplete v-model="value3" :suggestions="items" @complete="search" size="large" placeholder="Large" dropdown />
```
Copy
## Multiple [\#](https://primevue.org/autocomplete/\#multiple)
Multiple mode is enabled using _multiple_ property used to select more than one value from the autocomplete. In this case, value reference should be an array.
With Typeahead
No results found
Without Typeahead
```markup
<label for="multiple-ac-1" class="font-bold mb-2 block">With Typeahead</label>
<AutoComplete v-model="value1" inputId="multiple-ac-1" multiple fluid :suggestions="items" @complete="search" />
<label for="multiple-ac-2" class="font-bold mt-8 mb-2 block">Without Typeahead</label>
<AutoComplete v-model="value2" inputId="multiple-ac-2" multiple fluid @complete="search" :typeahead="false" />
```
Copy
## Invalid [\#](https://primevue.org/autocomplete/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
No results found
No results found
```markup
<AutoComplete v-model="value1" :suggestions="items" @complete="search" :invalid="!value1" placeholder="Code" />
<AutoComplete v-model="value2" :suggestions="items" @complete="search" :invalid="!value2" variant="filled" placeholder="Code" />
```
Copy
## Disabled [\#](https://primevue.org/autocomplete/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
No results found
```markup
<AutoComplete disabled placeholder="Disabled" />
```
Copy
## Accessibility [\#](https://primevue.org/autocomplete/\#accessibility)
### Screen Reader
Value to describe the component can either be provided via _label_ tag combined with _inputId_ prop or using _aria-labelledby_, _aria-label_ props. The input element has _combobox_ role in addition to _aria-autocomplete_, _aria-haspopup_ and _aria-expanded_ attributes. The relation between the input and the popup is created with _aria-controls_ and _aria-activedescendant_ attribute is used to instruct screen reader which option to read during keyboard navigation within the popup list.
In multiple mode, chip list uses _listbox_ role with _aria-orientation_ set to horizontal whereas each chip has the _option_ role with _aria-label_ set to the label of the chip.
The popup list has an id that refers to the _aria-controls_ attribute of the input element and uses _listbox_ as the role. Each list item has _option_ role and an id to match the _aria-activedescendant_ of the input element.
```markup
<label for="ac1">;Username</label>
<AutoComplete inputId="ac1" />
<span id="ac2">Email</span>
<AutoComplete aria-labelledby="ac2" />
<AutoComplete aria-label="City" />
```
Copy
### Closed State Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the autocomplete element. |
| _any printable character_ | Opens the popup and moves focus to the first option. |
### Popup Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next focusable element in the popup. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page. |
| _shift_ \+ _tab_ | Moves focus to the previous focusable element in the popup. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page. |
| _enter_ | Selects the focused option and closes the popup, then moves focus to the autocomplete element. |
| _space_ | Selects the focused option and closes the popup, then moves focus to the autocomplete element. |
| _escape_ | Closes the popup, then moves focus to the autocomplete element. |
| _down arrow_ | Moves focus to the next option, if there is none then visual focus does not change. |
| _up arrow_ | Moves focus to the previous option, if there is none then visual focus does not change. |
| _alt_ \+ _up arrow_ | Selects the focused option and closes the popup, then moves focus to the autocomplete element. |
| _left arrow_ | Removes the visual focus from the current option and moves input cursor to one character left. |
| _right arrow_ | Removes the visual focus from the current option and moves input cursor to one character right. |
| _home_ | Moves input cursor at the end, if not then moves focus to the first option. |
| _end_ | Moves input cursor at the beginning, if not then moves focus to the last option. |
| _pageUp_ | Jumps visual focus to first option. |
| _pageDown_ | Jumps visual focus to last option. |
| _shift_ \+ _down arrow_ | Moves focus to the next option and toggles the selection state. |
| _shift_ \+ _up arrow_ | Moves focus to the previous option and toggles the selection state. |
| _shift_ \+ _space_ | Selects the items between the most recently selected option and the focused option. |
| _control_ \+ _shift_ \+ _home_ | Selects the focused options and all the options up to the first one. |
| _control_ \+ _shift_ \+ _end_ | Selects the focused options and all the options down to the last one. |
### Chips Input Keyboard Support
| Key | Function |
| --- | --- |
| _backspace_ | Deletes the previous chip if the input field is empty. |
| _left arrow_ | Moves focus to the previous chip if available and input field is empty. |
### Chip Keyboard Support
| Key | Function |
| --- | --- |
| _left arrow_ | Moves focus to the previous chip if available. |
| _right arrow_ | Moves focus to the next chip, if there is none then input field receives the focus. |
| _backspace_ | Deletes the chips and adds focus to the input field. |
- Import
- Basic
- Objects
- Forms
- Dropdown
- Template
- Group
- Force Selection
- Virtual Scroll
- Filled
- Float Label
- Ifta Label
- Sizes
- Multiple
- Invalid
- Disabled
- Accessibility
# AutoComplete API
API defines helper props, events and others for the PrimeVue AutoComplete module.
## AutoComplete [\#](https://primevue.org/autocomplete/\#api.autocomplete)
AutoComplete is an input component that provides real-time suggestions while being typed.
### Props [\#](https://primevue.org/autocomplete/\#api.autocomplete.props)
Defines valid properties in AutoComplete component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| suggestions | any\[\] | null | An array of suggestions to display. |  |
| optionLabel | string \| Function | null | Property name or getter function to use as the label of an option. |  |
| optionDisabled | string \| Function | null | Property name or getter function to use as the disabled flag of an option, defaults to false when not defined. |  |
| optionGroupLabel | string \| Function | null | Property name or getter function to use as the label of an option group. |  |
| optionGroupChildren | string \| Function | null | Property name or getter function that refers to the children options of option group. |  |
| typeahead | boolean | true | whether typeahead is active or not. |  |
| scrollHeight | string | 14rem | Maximum height of the suggestions overlay. |  |
| dropdown | boolean | false | Displays a button next to the input field when enabled. |  |
| dropdownMode | HintedString<"blank" \| "current"> | blank | Specifies the behavior dropdown button. Default 'blank' mode sends an empty string and 'current' mode sends the input value. |  |
| multiple | boolean | false | Specifies if multiple values can be selected. |  |
| placeholder | string | null | Default text to display when no option is selected. |  |
| loading | boolean | false | Whether the autocomplete is in loading state. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| dataKey | string | null | A property to uniquely identify an option. |  |
| minLength | number | 1 | Minimum number of characters to initiate a search. |  |
| delay | number | 300 | Delay between keystrokes to wait before sending a query. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached.<br>Special keywords are 'body' for document body and 'self' for the element itself. |  |
| forceSelection | boolean | false | When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions. |  |
| completeOnFocus | boolean | false | Whether to run a query when input receives focus. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| panelStyle | object | null | Inline style of the overlay. |  |
| panelClass | string \| object | null | Style class of the overlay. |  |
| overlayStyle | object | null | Inline style of the overlay overlay. |  |
| overlayClass | string \| object | null | Style class of the overlay overlay. |  |
| dropdownIcon | string | null | Icon to display in the dropdown. |  |
| dropdownClass | string \| object | null | Style class of the dropdown button. |  |
| loadingIcon | string | null | Icon to display in loading state. |  |
| loader | string | null | Icon to display in loading state. |  |
| removeTokenIcon | string | null | Icon to display in chip remove action. |  |
| chipIcon | string | null | Icon to display in chip remove action. |  |
| virtualScrollerOptions | any | null | Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it. |  |
| autoOptionFocus | boolean | false | Whether to focus on the first visible or selected element when the overlay is shown. |  |
| selectOnFocus | boolean | false | When enabled, the focused option is selected. |  |
| focusOnHover | boolean | true | When enabled, the focus is placed on the hovered option. |  |
| searchLocale | string | null | Locale to use in searching. The default locale is the host environment's current locale. |  |
| searchMessage | string | '{0} results are available' | Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration. |  |
| selectionMessage | string | '{0} items selected' | Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySelectionMessage | string | No selected item | Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySearchMessage | string | No results found | Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration. |  |
| showEmptyMessage | boolean | true | When enabled, empty search message will be visible. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying input element. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AutoCompletePassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/autocomplete/\#api.autocomplete.emits)
Defines valid emits in AutoComplete component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [AutoCompleteChangeEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteChangeEvent) | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| item-select | event: [AutoCompleteOptionSelectEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteOptionSelectEvent) | void |  |  |
| item-unselect | event: [AutoCompleteOptionUnselectEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteOptionUnselectEvent) | void |  |  |
| option-select | event: [AutoCompleteOptionSelectEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteOptionSelectEvent) | void | Callback to invoke when a suggestion is selected. |  |
| option-unselect | event: [AutoCompleteOptionUnselectEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteOptionUnselectEvent) | void | Callback to invoke when a selected value is removed. |  |
| dropdown-click | event: [AutoCompleteDropdownClickEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteDropdownClickEvent) | void | Callback to invoke to when dropdown button is clicked. |  |
| clear |  | void | Callback to invoke when input is cleared by the user. |  |
| complete | event: [AutoCompleteCompleteEvent](https://primevue.org/autocomplete/#api.autocomplete.events.AutoCompleteCompleteEvent) | void | Callback to invoke to search for suggestions. |  |
| before-show |  | void | Callback to invoke before the overlay is shown. |  |
| before-hide |  | void | Callback to invoke before the overlay is hidden. |  |
| show |  | void | Callback to invoke when the overlay is shown. |  |
| hide |  | void | Callback to invoke when the overlay is hidden. |  |
### Slots [\#](https://primevue.org/autocomplete/\#api.autocomplete.slots)
Defines valid slots in AutoComplete component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| chip | scope: {<br>value: any, // A value in the selectionindex: number, // Index of the token.removeCallback: (event: Event) â‡’ void, // Remove token icon function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom chip template. |  |
| header | scope: {<br>value: any, // Value of the componentsuggestions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template of panel. |  |
| footer | scope: {<br>value: any, // Value of the componentsuggestions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template of panel. |  |
| option | scope: {<br>option: any, // Option instanceindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option template. |  |
| optiongroup | scope: {<br>option: any, // Option instanceindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option group template. |  |
| content | scope: {<br>items: any, // An array of objects to display for virtualscrollerstyleClass: string, // Style class of the componentcontentRef: (el: any) â‡’ void, // Referance of the contentgetItemOptions: (index: number) â‡’ VirtualScrollerItemOptions, // Options of the items<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| loader | scope: {<br>options: any, // Options of the loader items for virtualscroller<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loader template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template when there is no data to display. |  |
| dropdownicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom dropdown icon template. |  |
| removetokenicon | scope: {<br>class: string, // Style class of the icon.index: number, // Index of the token.removeCallback: (event: Event, index: number) â‡’ void, // Remove token icon function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| chipicon | scope: {<br>class: string, // Style class of the icon.index: number, // Index of the token.removeCallback: (event: Event, index: number) â‡’ void, // Remove token icon function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom chip icon template in multiple mode. |  |
| loadingicon | scope: {<br>class: string, // Style class of the loader.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| dropdownbutton | scope: {<br>toggleCallback: (event: Event) â‡’ void, // Toggle function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| dropdown | scope: {<br>toggleCallback: (event: Event) â‡’ void, // Toggle function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom dropdown template. |  |
### Events [\#](https://primevue.org/autocomplete/\#api.autocomplete.events)
Defines the custom events used by the component's emit.
#### AutoCompleteChangeEvent [\#](https://primevue.org/autocomplete/\#api.autocomplete.events.AutoCompleteChangeEvent)
Custom change event.
See [change](https://primevue.org/autocomplete/#api.autocomplete.emitsoptions.change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| value | any | Selected option value |
#### AutoCompleteOptionSelectEvent [\#](https://primevue.org/autocomplete/\#api.autocomplete.events.AutoCompleteOptionSelectEvent)
Custom item select event.
See [item-select](https://primevue.org/autocomplete/#api.autocomplete.emitsoptions.item-select)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | any | Selected item |
#### AutoCompleteOptionUnselectEvent [\#](https://primevue.org/autocomplete/\#api.autocomplete.events.AutoCompleteOptionUnselectEvent)
Custom item unselect event.
See [item-unselect](https://primevue.org/autocomplete/#api.autocomplete.emitsoptions.item-unselect)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | any | Selected item |
#### AutoCompleteDropdownClickEvent [\#](https://primevue.org/autocomplete/\#api.autocomplete.events.AutoCompleteDropdownClickEvent)
Custom dropdown click event.
See [dropdown-click](https://primevue.org/autocomplete/#api.autocomplete.emitsoptions.dropdown-click)
| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event |
| query | string | Current value of the input field |
#### AutoCompleteCompleteEvent [\#](https://primevue.org/autocomplete/\#api.autocomplete.events.AutoCompleteCompleteEvent)
Custom complete event.
See [complete](https://primevue.org/autocomplete/#api.autocomplete.emitsoptions.complete)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| query | string | Value to search with |
### Interfaces [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces)
Defines the custom interfaces used by the module.
#### AutoCompletePassThroughMethodOptions [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompletePassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AutoCompleteProps](https://primevue.org/autocomplete/#api.autocomplete.interfaces.AutoCompleteProps) | null | Defines valid properties. |
| state | [AutoCompleteState](https://primevue.org/autocomplete/#api.autocomplete.interfaces.AutoCompleteState) | null | Defines current inline state. |
| context | [AutoCompleteContext](https://primevue.org/autocomplete/#api.autocomplete.interfaces.AutoCompleteContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### AutoCompleteSharedPassThroughMethodOptions [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompleteSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [AutoCompleteProps](https://primevue.org/autocomplete/#api.autocomplete.interfaces.AutoCompleteProps) | null | Defines valid properties. |
| state | [AutoCompleteState](https://primevue.org/autocomplete/#api.autocomplete.interfaces.AutoCompleteState) | null | Defines current inline state. |
#### AutoCompletePassThroughOptions [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompletePassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcInputText | any | null | Used to pass attributes to the InputText component. |
| inputMultiple | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the input multiple's DOM element. |
| chipItem | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the chip's DOM element. |
| pcChip | any | null | Used to pass attributes to the Chip. |
| chipIcon | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the chip icon's DOM element. |
| inputChip | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the input chip's DOM element. |
| loader | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the loader's DOM element. |
| dropdown | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the dropdown's DOM element. |
| dropdownIcon | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the dropdown icon's DOM element. |
| overlay | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the overlay's DOM element. |
| virtualScroller | any | null | Used to pass attributes to the VirtualScroller component. |
| listContainer | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the list container's DOM element. |
| list | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| optionGroup | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the option group's DOM element. |
| option | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the option's DOM element. |
| emptyMessage | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the empty message's DOM element. |
| searchResultMessage | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the search result message's DOM element. |
| selectedMessage | [AutoCompletePassThroughOptionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughOptionType) | null | Used to pass attributes to the selected message's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [AutoCompletePassThroughTransitionType](https://primevue.org/autocomplete/#api.autocomplete.types.AutoCompletePassThroughTransitionType) | null | Used to control Vue Transition API. |
#### AutoCompletePassThroughAttributes [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompletePassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### AutoCompleteState [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompleteState)
Defines current inline state in AutoComplete component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| focused | boolean | false | Current focused state as a boolean. |
| focusedOptionIndex | number | -1 | Current focused item index as a number. |
| focusedMultipleOptionIndex | number | -1 | Current focused item index as a number. |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |
| searching | boolean | false | Current search state as a boolean. |
| multipleInputValue | Nullable<string> | null | Value of the token input as a string. |
#### AutoCompleteContext [\#](https://primevue.org/autocomplete/\#api.autocomplete.interfaces.AutoCompleteContext)
Defines current options in AutoComplete component.
| name | type | default | description |
| --- | --- | --- | --- |
| option | any | null | Current option. |
| index | number | null | Index of the current option. |
| selected | boolean | false | Current selection state of the item as a boolean. |
| focused | boolean | false | Current focus state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |
## Types [\#](https://primevue.org/autocomplete/\#api.autocomplete.types)
Defines the custom types used by the module.
#### AutoCompletePassThroughOptionType [\#](https://primevue.org/autocomplete/\#api.autocomplete.types.AutoCompletePassThroughOptionType)
| values |
| --- |
| AutoCompletePassThroughAttributes \| (options: AutoCompletePassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### AutoCompletePassThroughTransitionType [\#](https://primevue.org/autocomplete/\#api.autocomplete.types.AutoCompletePassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: AutoCompletePassThroughMethodOptions) => TransitionProps \| undefined |
#### AutoCompleteEmits [\#](https://primevue.org/autocomplete/\#api.autocomplete.types.AutoCompleteEmits)
| values |
| --- |
| EmitFn<AutoCompleteEmitsOptions> |
- AutoComplete
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## ProgressSpinner Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# ProgressSpinner
ProgressSpinner is a process status indicator.
## import [\#](https://primevue.org/progressspinner/\#import)
```javascript
import ProgressSpinner from 'primevue/progressspinner';
```
Copy
## Basic [\#](https://primevue.org/progressspinner/\#basic)
An infinite spin animation is displayed by default.
```markup
<ProgressSpinner />
```
Copy
## Custom [\#](https://primevue.org/progressspinner/\#custom)
ProgressSpinner can be customized with styling property like _style_, _strokeWidth_ _fill_ and _animationDuration_.
```markup
<ProgressSpinner style="width: 50px; height: 50px" strokeWidth="8" fill="transparent"
    animationDuration=".5s" aria-label="Custom ProgressSpinner" />
```
Copy
## Accessibility [\#](https://primevue.org/progressspinner/\#accessibility)
### Screen Reader
ProgressSpinner components uses _progressbar_ role. Value to describe the component can be defined using _aria-labelledby_ and _aria-label_ props.
```markup
<ProgressSpinner aria-label="Loading" />
```
Copy
### Keyboard Support
Component does not include any interactive elements.
- import
- Basic
- Custom
- Accessibility
# ProgressSpinner API
API defines helper props, events and others for the PrimeVue ProgressSpinner module.
## ProgressSpinner [\#](https://primevue.org/progressspinner/\#api.progressspinner)
ProgressSpinner is a process status indicator.
### Props [\#](https://primevue.org/progressspinner/\#api.progressspinner.props)
Defines valid properties in ProgressSpinner component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| strokeWidth | string | 2 | Width of the circle stroke. |  |
| fill | string | null | Color for the background of the circle. |  |
| animationDuration | string | 2s | Duration of the rotate animation. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ProgressSpinnerPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Interfaces [\#](https://primevue.org/progressspinner/\#api.progressspinner.interfaces)
Defines the custom interfaces used by the module.
#### ProgressSpinnerPassThroughMethodOptions [\#](https://primevue.org/progressspinner/\#api.progressspinner.interfaces.ProgressSpinnerPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ProgressSpinnerProps](https://primevue.org/progressspinner/#api.progressspinner.interfaces.ProgressSpinnerProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ProgressSpinnerPassThroughOptions [\#](https://primevue.org/progressspinner/\#api.progressspinner.interfaces.ProgressSpinnerPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ProgressSpinnerPassThroughOptionType](https://primevue.org/progressspinner/#api.progressspinner.types.ProgressSpinnerPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| spin | [ProgressSpinnerPassThroughOptionType](https://primevue.org/progressspinner/#api.progressspinner.types.ProgressSpinnerPassThroughOptionType) | null | Used to pass attributes to the spinner's DOM element. |
| circle | [ProgressSpinnerPassThroughOptionType](https://primevue.org/progressspinner/#api.progressspinner.types.ProgressSpinnerPassThroughOptionType) | null | Used to pass attributes to the circle's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ProgressSpinnerPassThroughAttributes [\#](https://primevue.org/progressspinner/\#api.progressspinner.interfaces.ProgressSpinnerPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/progressspinner/\#api.progressspinner.types)
Defines the custom types used by the module.
#### ProgressSpinnerPassThroughOptionType [\#](https://primevue.org/progressspinner/\#api.progressspinner.types.ProgressSpinnerPassThroughOptionType)
| values |
| --- |
| ProgressSpinnerPassThroughAttributes \| (options: ProgressSpinnerPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ProgressSpinnerEmits [\#](https://primevue.org/progressspinner/\#api.progressspinner.types.ProgressSpinnerEmits)
| values |
| --- |
| EmitFn<ProgressSpinnerEmitsOptions> |
- ProgressSpinner
  - Props
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Team
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Meet the Team
[PrimeTek](https://www.primetek.com.tr/) is a world renowned vendor of popular UI Component suites including [PrimeFaces](https://primefaces.org/), [PrimeNG](https://primeng.org/), [PrimeReact](https://primereact.org/) and [PrimeVue](https://primevue.org/) . All the members in our team are full time employees of PrimeTek who share the same passion and vision for open source to create awesome UI libraries.
![Cagatay Civici](https://primefaces.org/cdn/primevue/images/team/cagatay.jpg)Ã‡aÄŸatay Ã‡iviciFounder
![Mert Sincan](https://primefaces.org/cdn/primevue/images/team/mert.jpg)Mert SincanCTO
![Onur ÅžentÃ¼re](https://primefaces.org/cdn/primevue/images/team/onur.jpg)Onur ÅžentÃ¼reDesign Lead
![Dilara Can](https://primefaces.org/cdn/primevue/images/team/dilara.jpg)Dilara GÃ¼ngenciBusiness Administration
![Ã‡etin Ã‡akÄ±roÄŸlu](https://primefaces.org/cdn/primevue/images/team/cetin.jpg)Ã‡etin Ã‡akÄ±roÄŸluFront-End Developer
![TuÄŸÃ§e KÃ¼Ã§Ã¼koÄŸlu](https://primefaces.org/cdn/primevue/images/team/tugce.jpg)TuÄŸÃ§e KÃ¼Ã§Ã¼koÄŸluFront-End Developer
![Atakan Tepe](https://primefaces.org/cdn/primevue/images/team/atakan.jpg)Atakan TepeFront-End Developer
![Ãœmit Ã‡elik](https://primefaces.org/cdn/primevue/images/team/umit.jpg)Ãœmit Ã‡elikUI/UX Designer
![Mehmet Ã‡etin](https://primefaces.org/cdn/primevue/images/team/mehmet.jpg)Mehmet Ã‡etinFront-End Developer
![Taner Engin](https://primefaces.org/cdn/primevue/images/team/taner.jpg)Taner EnginFront-End Developer
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Rating Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Rating
Rating component is a star based selection input.
## Import [\#](https://primevue.org/rating/\#import)
```javascript
import Rating from 'primevue/rating';
```
Copy
## Basic [\#](https://primevue.org/rating/\#basic)
Rating is used with the _v-model_ property for two-way value binding.
```markup
<Rating v-model="value" />
```
Copy
## Forms [\#](https://primevue.org/rating/\#forms)
Rating integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-40">
    <div class="flex flex-col items-center gap-2">
        <Rating name="rating" />
        <Message v-if="$form.rating?.invalid" severity="error" size="small" variant="simple">{{ $form.rating.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Number of Stars [\#](https://primevue.org/rating/\#numberofstars)
Number of stars to display is defined with _stars_ property.
```markup
<Rating v-model="value" :stars="10" />
```
Copy
## Template [\#](https://primevue.org/rating/\#template)
Custom icons are used to override the default icons with _onicon_, _officon_ and _cancelicon_ slots.
![](https://primefaces.org/cdn/primevue/images/rating/custom-officon.png)
![](https://primefaces.org/cdn/primevue/images/rating/custom-officon.png)
![](https://primefaces.org/cdn/primevue/images/rating/custom-officon.png)
![](https://primefaces.org/cdn/primevue/images/rating/custom-officon.png)
![](https://primefaces.org/cdn/primevue/images/rating/custom-officon.png)
```markup
<Rating v-model="value">
    <template #onicon>
        <img src="/images/rating/custom-onicon.png" height="24" width="24" />
    </template>
    <template #officon>
        <img src="/images/rating/custom-officon.png" height="24" width="24" />
    </template>
</Rating>
```
Copy
## ReadOnly [\#](https://primevue.org/rating/\#readonly)
When _readOnly_ present, value cannot be edited.
```markup
<Rating v-model="value" readonly />
```
Copy
## Disabled [\#](https://primevue.org/rating/\#disabled)
When _disabled_ is present, a visual hint is applied to indicate that the Knob cannot be interacted with.
```markup
<Rating v-model="value" disabled />
```
Copy
## Accessibility [\#](https://primevue.org/rating/\#accessibility)
### Screen Reader
Rating component internally uses radio buttons that are only visible to screen readers. The value to read for item is retrieved from the [locale](https://primevue.org/configuration/#locale) API via _star_ and _stars_ of the _aria_ property.
### Keyboard Support
Keyboard interaction is derived from the native browser handling of radio buttons in a group.
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the star representing the value, if there is none then first star receives the focus. |
| _left arrow_ _up arrow_ | Moves focus to the previous star, if there is none then last radio button receives the focus. |
| _right arrow_ _down arrow_ | Moves focus to the next star, if there is none then first star receives the focus. |
| _space_ | If the focused star does not represent the value, changes the value to the star value. |
- Import
- Basic
- Forms
- Number of Stars
- Template
- ReadOnly
- Disabled
- Accessibility
# Rating API
API defines helper props, events and others for the PrimeVue Rating module.
## Rating [\#](https://primevue.org/rating/\#api.rating)
Rating component is a star based selection input.
### Props [\#](https://primevue.org/rating/\#api.rating.props)
Defines valid properties in Rating component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | number | null | Value of the rating. |  |
| defaultValue | number | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | Name of the element. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the element should be disabled. |  |
| readonly | boolean | false | When present, it specifies that component is read-only. |  |
| stars | number | 5 | Number of stars. |  |
| onIcon | string | null | Icon for the on state. |  |
| offIcon | string | null | Icon for the off state. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<RatingPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/rating/\#api.rating.emits)
Defines valid emits in Rating component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: number | void | Emitted when the value changes. |  |
| value-change | value: number | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [RatingChangeEvent](https://primevue.org/rating/#api.rating.events.RatingChangeEvent) | void | Callback to invoke when a suggestion is selected. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
### Slots [\#](https://primevue.org/rating/\#api.rating.slots)
Defines valid slots in Rating component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| onicon | scope: {<br>value: number, // Option valueclass: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom on icon template. |  |
| officon | scope: {<br>value: number, // Option valueclass: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom off icon template. |  |
### Events [\#](https://primevue.org/rating/\#api.rating.events)
Defines the custom events used by the component's emit.
#### RatingChangeEvent [\#](https://primevue.org/rating/\#api.rating.events.RatingChangeEvent)
Custom change event.
See [change](https://primevue.org/rating/#api.rating.emitsoptions.change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | number | Selected option value |
### Interfaces [\#](https://primevue.org/rating/\#api.rating.interfaces)
Defines the custom interfaces used by the module.
#### RatingPassThroughMethodOptions [\#](https://primevue.org/rating/\#api.rating.interfaces.RatingPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [RatingProps](https://primevue.org/rating/#api.rating.interfaces.RatingProps) | null | Defines valid properties. |
| state | [RatingState](https://primevue.org/rating/#api.rating.interfaces.RatingState) | null | Defines current inline state. |
| context | [RatingContext](https://primevue.org/rating/#api.rating.interfaces.RatingContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### RatingPassThroughOptions [\#](https://primevue.org/rating/\#api.rating.interfaces.RatingPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| option | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the option's DOM element. |
| onIcon | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the on icon's DOM element. |
| offIcon | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the off icon's DOM element. |
| hiddenOptionInputContainer | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the hidden option input container's DOM element. |
| hiddenOptionInput | [RatingPassThroughOptionType](https://primevue.org/rating/#api.rating.types.RatingPassThroughOptionType) | null | Used to pass attributes to the hidden option input's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### RatingPassThroughAttributes [\#](https://primevue.org/rating/\#api.rating.interfaces.RatingPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### RatingState [\#](https://primevue.org/rating/\#api.rating.interfaces.RatingState)
Defines current inline state in Rating component.
| name | type | default | description |
| --- | --- | --- | --- |
| name | string | null | name state as a number. |
| focusedOptionIndex | number | null | focusedOptionIndex state as a number. |
#### RatingContext [\#](https://primevue.org/rating/\#api.rating.interfaces.RatingContext)
Defines current options in Rating component.
| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | false | Current active state of the option as a boolean. |
| focused | boolean | false | Current focused state of option as a boolean. |
## Types [\#](https://primevue.org/rating/\#api.rating.types)
Defines the custom types used by the module.
#### RatingPassThroughOptionType [\#](https://primevue.org/rating/\#api.rating.types.RatingPassThroughOptionType)
| values |
| --- |
| RatingPassThroughAttributes \| (options: RatingPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### RatingEmits [\#](https://primevue.org/rating/\#api.rating.types.RatingEmits)
| values |
| --- |
| EmitFn<RatingEmitsOptions> |
- Rating
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Badge Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Badge
Badge is a small status indicator for another element.
## Import [\#](https://primevue.org/badge/\#import)
```javascript
// import as component
import Badge from 'primevue/badge';
import OverlayBadge from 'primevue/overlaybadge';
```
Copy
## Basic [\#](https://primevue.org/badge/\#basic)
Content to display is defined with the _value_ property or the default slot.
210
```markup
<Badge value="2"></Badge>
<Badge>10</Badge>
```
Copy
## Severity [\#](https://primevue.org/badge/\#severity)
Severity defines the variant of a badge.
2684935
```markup
<Badge value="2"></Badge>
<Badge value="6" severity="secondary"></Badge>
<Badge value="8" severity="success"></Badge>
<Badge value="4" severity="info"></Badge>
<Badge value="9" severity="warn"></Badge>
<Badge value="3" severity="danger"></Badge>
<Badge value="5" severity="contrast"></Badge>
```
Copy
## Size [\#](https://primevue.org/badge/\#size)
Use the _size_ property to customize the dimensions of a Badge.
8642
```markup
<Badge value="8" size="xlarge" severity="success"></Badge>
<Badge value="6" size="large" severity="warn"></Badge>
<Badge value="4" severity="info"></Badge>
<Badge value="2" size="small"></Badge>
```
Copy
## Overlay [\#](https://primevue.org/badge/\#overlay)
A badge can be added to any element by encapsulating the content with the _OverlayBadge_ component.
2
4
```markup
<OverlayBadge value="2">
    <i class="pi pi-bell" style="font-size: 2rem" />
</OverlayBadge>
<OverlayBadge value="4" severity="danger">
    <i class="pi pi-calendar" style="font-size: 2rem" />
</OverlayBadge>
<OverlayBadge severity="danger">
    <i class="pi pi-envelope" style="font-size: 2rem" />
</OverlayBadge>
```
Copy
## Button [\#](https://primevue.org/badge/\#button)
Buttons have built-in support for badges to display a badge inline.
Notifications2Inbox2
```markup
<Button type="button" label="Notifications" icon="pi pi-bell" badge="2" />
<Button type="button" label="Inbox" icon="pi pi-inbox" badge="2" badgeSeverity="contrast" outlined />
```
Copy
## Accessibility [\#](https://primevue.org/badge/\#accessibility)
### Screen Reader
Badge does not include any roles and attributes by default, any attribute is passed to the root element so aria roles and attributes can be added if required. If the badges are dynamic, _aria-live_ may be utilized as well. In case badges need to be tabbable, _tabindex_ can be added to implement custom key handlers.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Severity
- Size
- Overlay
- Button
- Accessibility
# Badge API
API defines helper props, events and others for the PrimeVue Badge module.
## Badge [\#](https://primevue.org/badge/\#api.badge)
Badge represents people using icons, labels and images.
### Props [\#](https://primevue.org/badge/\#api.badge.props)
Defines valid properties in Badge component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | string \| number | null | Value to display inside the badge. |  |
| severity | null \| HintedString<"secondary" \| "info" \| "success" \| "warn" \| "danger" \| "contrast"> | null | Severity type of the badge. |  |
| size | null \| HintedString<"small" \| "large" \| "xlarge"> | null | Size of the badge, valid options are 'small', 'large', and 'xlarge'. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<BadgePassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/badge/\#api.badge.slots)
Defines valid slots in Badge component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Content can easily be customized with the default slot instead of using the built-in display. |  |
### Interfaces [\#](https://primevue.org/badge/\#api.badge.interfaces)
Defines the custom interfaces used by the module.
#### BadgePassThroughMethodOptions [\#](https://primevue.org/badge/\#api.badge.interfaces.BadgePassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [BadgeProps](https://primevue.org/badge/#api.badge.interfaces.BadgeProps) | null | Defines valid properties. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
| parent | any | null | Defines parent instance. |
#### BadgePassThroughAttributes [\#](https://primevue.org/badge/\#api.badge.interfaces.BadgePassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### BadgePassThroughOptions [\#](https://primevue.org/badge/\#api.badge.interfaces.BadgePassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [BadgePassThroughOptionType<T>](https://primevue.org/badge/#api.badge.types.BadgePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
## Types [\#](https://primevue.org/badge/\#api.badge.types)
Defines the custom types used by the module.
#### BadgePassThroughOptionType [\#](https://primevue.org/badge/\#api.badge.types.BadgePassThroughOptionType)
| values |
| --- |
| BadgePassThroughAttributes \| (options: BadgePassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### BadgeEmits [\#](https://primevue.org/badge/\#api.badge.types.BadgeEmits)
| values |
| --- |
| EmitFn<BadgeEmitsOptions> |
## OverlayBadge [\#](https://primevue.org/badge/\#api.overlaybadge)
OverlayBadge represents people using icon, label, image and badge.
### Props [\#](https://primevue.org/badge/\#api.overlaybadge.props)
Defines valid properties in OverlayBadge component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | string \| number | null | Value to display inside the badge. |  |
| severity | null \| HintedString<"secondary" \| "info" \| "success" \| "warn" \| "danger" \| "contrast"> | null | Severity type of the badge. |  |
| size | null \| HintedString<"small" \| "large" \| "xlarge"> | null | Size of the badge, valid options are 'small', 'large', and 'xlarge'. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<OverlayBadgePassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/badge/\#api.overlaybadge.slots)
Defines valid slots in OverlayBadge component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Content can easily be customized with the default slot instead of using the built-in display. |  |
### Interfaces [\#](https://primevue.org/badge/\#api.overlaybadge.interfaces)
Defines the custom interfaces used by the module.
#### OverlayBadgePassThroughMethodOptions [\#](https://primevue.org/badge/\#api.overlaybadge.interfaces.OverlayBadgePassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [OverlayBadgeProps](https://primevue.org/badge/#api.overlaybadge.interfaces.OverlayBadgeProps) | null | Defines valid properties. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
| parent | any | null | Defines parent instance. |
#### OverlayBadgeSharedPassThroughMethodOptions [\#](https://primevue.org/badge/\#api.overlaybadge.interfaces.OverlayBadgeSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [OverlayBadgeProps](https://primevue.org/badge/#api.overlaybadge.interfaces.OverlayBadgeProps) | null | Defines valid properties. |
#### OverlayBadgePassThroughAttributes [\#](https://primevue.org/badge/\#api.overlaybadge.interfaces.OverlayBadgePassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### OverlayBadgePassThroughOptions [\#](https://primevue.org/badge/\#api.overlaybadge.interfaces.OverlayBadgePassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [OverlayBadgePassThroughOptionType<T>](https://primevue.org/badge/#api.overlaybadge.types.OverlayBadgePassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| pcBadge | any | null | Used to pass attributes to the Badge. |
| hooks | any | null | Used to manage all lifecycle hooks. |
## Types [\#](https://primevue.org/badge/\#api.overlaybadge.types)
Defines the custom types used by the module.
#### OverlayBadgePassThroughOptionType [\#](https://primevue.org/badge/\#api.overlaybadge.types.OverlayBadgePassThroughOptionType)
| values |
| --- |
| OverlayBadgePassThroughAttributes \| (options: OverlayBadgePassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### OverlayBadgeEmits [\#](https://primevue.org/badge/\#api.overlaybadge.types.OverlayBadgeEmits)
| values |
| --- |
| EmitFn<OverlayBadgeEmitsOptions> |
- Badge
  - Props
  - Slots
  - Interfaces
  - Types
- OverlayBadge
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Button Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Button
Button is an extension to standard input element with icons and theming.
## Import [\#](https://primevue.org/button/\#import)
```javascript
import Button from 'primevue/button';
```
Copy
## Basic [\#](https://primevue.org/button/\#basic)
Text to display on a button is defined with the _label_ property.
Submit
```markup
<Button label="Submit" />
```
Copy
## Icons [\#](https://primevue.org/button/\#icons)
Icon of a button is specified with _icon_ property and position is configured using _iconPos_ attribute.
ProfileSave
SearchUpdate
```markup
<Button icon="pi pi-home" aria-label="Save" />
<Button label="Profile" icon="pi pi-user" />
<Button label="Save" icon="pi pi-check" iconPos="right" />
<Button label="Search" icon="pi pi-search" iconPos="top" />
<Button label="Update" icon="pi pi-refresh" iconPos="bottom" />
```
Copy
## Loading [\#](https://primevue.org/button/\#loading)
Busy state is controlled with the _loading_ property.
Search
```markup
<Button type="button" label="Search" icon="pi pi-search" :loading="loading" @click="load" />
```
Copy
## Link [\#](https://primevue.org/button/\#link)
The button element can be displayed as a link element visually when the _link_ property is present. If you need to customize the rendering, use the _as_ to change the element or _asChild_ for advanced templating.
Link [External](https://vuejs.org/) [Router](https://primevue.org/)
```markup
<Button label="Link" variant="link" />
<Button as="a" label="External" href="https://vuejs.org/" target="_blank" rel="noopener" />
<Button asChild v-slot="slotProps">
    <RouterLink to="/" :class="slotProps.class">Router</RouterLink>
</Button>
```
Copy
## Severity [\#](https://primevue.org/button/\#severity)
The _severity_ property defines the variant of a button.
PrimarySecondarySuccessInfoWarnHelpDangerContrast
```markup
<Button label="Primary" />
<Button label="Secondary" severity="secondary" />
<Button label="Success" severity="success" />
<Button label="Info" severity="info" />
<Button label="Warn" severity="warn" />
<Button label="Help" severity="help" />
<Button label="Danger" severity="danger" />
<Button label="Contrast" severity="contrast" />
```
Copy
## Disabled [\#](https://primevue.org/button/\#disabled)
When _disabled_ is present, the element cannot be used.
Submit
```markup
<Button label="Submit" disabled />
```
Copy
## Raised [\#](https://primevue.org/button/\#raised)
Raised buttons display a shadow to indicate elevation.
PrimarySecondarySuccessInfoWarnHelpDangerContrast
```markup
<Button label="Primary" raised />
<Button label="Secondary" severity="secondary" raised />
<Button label="Success" severity="success" raised />
<Button label="Info" severity="info" raised />
<Button label="Warn" severity="warn" raised />
<Button label="Help" severity="help" raised />
<Button label="Danger" severity="danger" raised />
<Button label="Contrast" severity="contrast" raised />
```
Copy
## Rounded [\#](https://primevue.org/button/\#rounded)
Rounded buttons have a circular border radius.
PrimarySecondarySuccessInfoWarnHelpDangerContrast
```markup
<Button label="Primary" rounded />
<Button label="Secondary" severity="secondary" rounded />
<Button label="Success" severity="success" rounded />
<Button label="Info" severity="info" rounded />
<Button label="Warn" severity="warn" rounded />
<Button label="Help" severity="help" rounded />
<Button label="Danger" severity="danger" rounded />
<Button label="Contrast" severity="contrast" rounded />
```
Copy
## Text [\#](https://primevue.org/button/\#text)
Text buttons are displayed as textual elements.
PrimarySecondarySuccessInfoWarnHelpDangerContrast
```markup
<Button label="Primary" variant="text" />
<Button label="Secondary" severity="secondary" variant="text" />
<Button label="Success" severity="success" variant="text" />
<Button label="Info" severity="info" variant="text" />
<Button label="Warn" severity="warn" variant="text" />
<Button label="Help" severity="help" variant="text" />
<Button label="Danger" severity="danger" variant="text" />
<Button label="Contrast" severity="contrast" variant="text" />
```
Copy
## Raised Text [\#](https://primevue.org/button/\#raisedtext)
Text buttons can be displayed elevated with the _raised_ option.
PrimarySecondarySuccessInfoWarnHelpDangerContrast
```markup
<Button label="Primary" variant="text" raised />
<Button label="Secondary" severity="secondary" variant="text" raised />
<Button label="Success" severity="success" variant="text" raised />
<Button label="Info" severity="info" variant="text" raised />
<Button label="Warn" severity="warn" variant="text" raised />
<Button label="Help" severity="help" variant="text" raised />
<Button label="Danger" severity="danger" variant="text" raised />
<Button label="Contrast" severity="contrast" variant="text" raised />
```
Copy
## Outlined [\#](https://primevue.org/button/\#outlined)
Outlined buttons display a border without a transparent background.
PrimarySecondarySuccessInfoWarnHelpDangerContrast
```markup
<Button label="Primary" variant="outlined" />
<Button label="Secondary" severity="secondary" variant="outlined" />
<Button label="Success" severity="success" variant="outlined" />
<Button label="Info" severity="info" variant="outlined" />
<Button label="Warn" severity="warn" variant="outlined" />
<Button label="Help" severity="help" variant="outlined" />
<Button label="Danger" severity="danger" variant="outlined" />
<Button label="Contrast" severity="contrast" variant="outlined" />
```
Copy
## Icon Only [\#](https://primevue.org/button/\#icononly)
Buttons can have icons without labels.
SmallNormalLarge
```markup
<Button icon="pi pi-check" aria-label="Filter" />
<Button icon="pi pi-bookmark" severity="secondary" aria-label="Bookmark" />
<Button icon="pi pi-search" severity="success" aria-label="Search" />
<Button icon="pi pi-user" severity="info" aria-label="User" />
<Button icon="pi pi-bell" severity="warn" aria-label="Notification" />
<Button icon="pi pi-heart" severity="help" aria-label="Favorite" />
<Button icon="pi pi-times" severity="danger" aria-label="Cancel" />
<Button icon="pi pi-star" severity="contrast" aria-label="Star" />
<Button icon="pi pi-check" rounded aria-label="Filter" />
<Button icon="pi pi-bookmark" severity="secondary" rounded aria-label="Bookmark" />
<Button icon="pi pi-search" severity="success" rounded aria-label="Search" />
<Button icon="pi pi-user" severity="info" rounded aria-label="User" />
<Button icon="pi pi-bell" severity="warn" rounded aria-label="Notification" />
<Button icon="pi pi-heart" severity="help" rounded aria-label="Favorite" />
<Button icon="pi pi-times" severity="danger" rounded aria-label="Cancel" />
<Button icon="pi pi-star" severity="contrast" rounded aria-label="Star" />
<Button icon="pi pi-check" rounded variant="outlined" aria-label="Filter" />
<Button icon="pi pi-bookmark" severity="secondary" rounded variant="outlined" aria-label="Bookmark" />
<Button icon="pi pi-search" severity="success" rounded variant="outlined" aria-label="Search" />
<Button icon="pi pi-user" severity="info" rounded variant="outlined" aria-label="User" />
<Button icon="pi pi-bell" severity="warn" rounded variant="outlined" aria-label="Notification" />
<Button icon="pi pi-heart" severity="help" rounded variant="outlined" aria-label="Favorite" />
<Button icon="pi pi-times" severity="danger" rounded variant="outlined" aria-label="Cancel" />
<Button icon="pi pi-star" severity="contrast" rounded variant="outlined" aria-label="Star" />
<Button icon="pi pi-check" variant="text" raised rounded aria-label="Filter" />
<Button icon="pi pi-bookmark" severity="secondary" variant="text" raised rounded aria-label="Bookmark" />
<Button icon="pi pi-search" severity="success" variant="text" raised rounded aria-label="Search" />
<Button icon="pi pi-user" severity="info" variant="text" raised rounded aria-label="User" />
<Button icon="pi pi-bell" severity="warn" variant="text" raised rounded aria-label="Notification" />
<Button icon="pi pi-heart" severity="help" variant="text" raised rounded aria-label="Favorite" />
<Button icon="pi pi-times" severity="danger" variant="text" raised rounded aria-label="Cancel" />
<Button icon="pi pi-star" severity="contrast" variant="text" raised rounded aria-label="Star" />
<Button icon="pi pi-check" variant="text" rounded aria-label="Filter" />
<Button icon="pi pi-bookmark" severity="secondary" variant="text" rounded aria-label="Bookmark" />
<Button icon="pi pi-search" severity="success" variant="text" rounded aria-label="Search" />
<Button icon="pi pi-user" severity="info" variant="text" rounded aria-label="User" />
<Button icon="pi pi-bell" severity="warn" variant="text" rounded aria-label="Notification" />
<Button icon="pi pi-heart" severity="help" variant="text" rounded aria-label="Favorite" />
<Button icon="pi pi-times" severity="danger" variant="text" rounded aria-label="Cancel" />
<Button icon="pi pi-star" severity="contrast" variant="text" rounded aria-label="Star" />
```
Copy
## Badge [\#](https://primevue.org/button/\#badge)
Buttons have built-in badge support with _badge_ and _badgeSeverity_ properties.
Emails2Messages2
```markup
<Button type="button" label="Emails" badge="2" />
<Button type="button" label="Messages" icon="pi pi-users" badge="2" badgeSeverity="contrast" variant="outlined"  />
```
Copy
## Button Group [\#](https://primevue.org/button/\#buttongroup)
Multiple buttons are grouped when wrapped inside an element with _ButtonGroup_ component.
SaveDeleteCancel
```markup
<ButtonGroup>
    <Button label="Save" icon="pi pi-check" />
    <Button label="Delete" icon="pi pi-trash" />
    <Button label="Cancel" icon="pi pi-times" />
</ButtonGroup>
```
Copy
## Sizes [\#](https://primevue.org/button/\#sizes)
Button provides _small_ and _large_ sizes as alternatives to the base.
SmallNormalLarge
```markup
<Button label="Small" icon="pi pi-check" size="small" />
<Button label="Normal" icon="pi pi-check" />
<Button label="Large" icon="pi pi-check" size="large" />
```
Copy
## Template [\#](https://primevue.org/button/\#template)
Custom content inside a button is defined as children.
```markup
<Button variant="outlined" class="!border-2">
    <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="..." fill="var(--p-primary-color)" />
        <path d="..." fill="var(--p-text-color)" />
    </svg>
</Button>
```
Copy
## Headless [\#](https://primevue.org/button/\#headless)
Headless mode is enabled by adding the _asChild_ property and defining your own UI element with the available bindings.
SIGN UP
```markup
<Button v-slot="slotProps" asChild>
    <button
        v-bind="slotProps.a11yAttrs"
        class="rounded-lg bg-gradient-to-br from-primary-400 to-primary-700 active:from-primary-700 active:to-primary-900 text-white border-none px-6 py-3 font-bold hover:ring-2 cursor-pointer ring-offset-2 ring-offset-surface-0 dark:ring-offset-surface-900 ring-primary transition-all"
    >
        SIGN UP
    </button>
</Button>
```
Copy
## Accessibility [\#](https://primevue.org/button/\#accessibility)
### Screen Reader
Button component renders a native button element that implicitly includes any passed prop. Text to describe the button is defined with the _aria-label_ prop, if not present _label_ prop is used as the value. If the button is icon only or custom templating is used, it is recommended to use _aria-label_ so that screen readers would be able to read the element properly.
```markup
<Button icon="pi pi-check" aria-label="Submit" />
<Button icon="pi pi-check" label="Submit" />
<Button class="youtube p-0" aria-label="Youtube">
    <i class="pi pi-youtube px-2"></i>
    <span class="px-4">Youtube</span>
</Button>
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the button. |
| _enter_ | Activates the button. |
| _space_ | Activates the button. |
- Import
- Basic
- Icons
- Loading
- Link
- Severity
- Disabled
- Raised
- Rounded
- Text
- Raised Text
- Outlined
- Icon Only
- Badge
- Button Group
- Sizes
- Template
- Headless
- Accessibility
# Button API
API defines helper props, events and others for the PrimeVue Button module.
## Button [\#](https://primevue.org/button/\#api.button)
Button is an extension to standard button element with icons and theming.
### Props [\#](https://primevue.org/button/\#api.button.props)
Defines valid properties in Button component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| aria-activedescendant | string | null | Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. |  |
| aria-atomic | Booleanish | null | Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. |  |
| aria-autocomplete | "none" \| "inline" \| "list" \| "both" | null | Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be<br>presented if they are made. |  |
| aria-busy | Booleanish | null | Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. |  |
| aria-checked | Booleanish \| "mixed" | null | Indicates the current "checked" state of checkboxes, radio buttons, and other widgets. |  |
| aria-colcount | Numberish | null | Defines the total number of columns in a table, grid, or treegrid. |  |
| aria-colindex | Numberish | null | Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. |  |
| aria-colspan | Numberish | null | Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. |  |
| aria-controls | string | null | Identifies the element (or elements) whose contents or presence are controlled by the current element. |  |
| aria-current | Booleanish \| "page" \| "step" \| "location" \| "date" \| "time" | null | Indicates the element that represents the current item within a container or set of related elements. |  |
| aria-describedby | string | null | Identifies the element (or elements) that describes the object. |  |
| aria-details | string | null | Identifies the element that provides a detailed, extended description for the object. |  |
| aria-disabled | Booleanish | null | Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. |  |
| aria-dropeffect | "link" \| "none" \| "copy" \| "execute" \| "move" \| "popup" | null | Indicates what functions can be performed when a dragged object is released on the drop target. |  |
| aria-errormessage | string | null | Identifies the element that provides an error message for the object. |  |
| aria-expanded | Booleanish | null | Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. |  |
| aria-flowto | string | null | Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,<br>allows assistive technology to override the general default of reading in document source order. |  |
| aria-grabbed | Booleanish | null | Indicates an element's "grabbed" state in a drag-and-drop operation. |  |
| aria-haspopup | Booleanish \| "menu" \| "listbox" \| "tree" \| "grid" \| "dialog" | null | Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. |  |
| aria-hidden | Booleanish | null | Indicates whether the element is exposed to an accessibility API. |  |
| aria-invalid | Booleanish \| "grammar" \| "spelling" | null | Indicates the entered value does not conform to the format expected by the application. |  |
| aria-keyshortcuts | string | null | Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. |  |
| aria-label | string | null | Defines a string value that labels the current element. |  |
| aria-labelledby | string | null | Identifies the element (or elements) that labels the current element. |  |
| aria-level | Numberish | null | Defines the hierarchical level of an element within a structure. |  |
| aria-live | "off" \| "assertive" \| "polite" | null | Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. |  |
| aria-modal | Booleanish | null | Indicates whether an element is modal when displayed. |  |
| aria-multiline | Booleanish | null | Indicates whether a text box accepts multiple lines of input or only a single line. |  |
| aria-multiselectable | Booleanish | null | Indicates that the user may select more than one item from the current selectable descendants. |  |
| aria-orientation | "horizontal" \| "vertical" | null | Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. |  |
| aria-owns | string | null | Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship<br>between DOM elements where the DOM hierarchy cannot be used to represent the relationship. |  |
| aria-placeholder | string | null | Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.<br>A hint could be a sample value or a brief description of the expected format. |  |
| aria-posinset | Numberish | null | Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. |  |
| aria-pressed | Booleanish \| "mixed" | null | Indicates the current "pressed" state of toggle buttons. |  |
| aria-readonly | Booleanish | null | Indicates that the element is not editable, but is otherwise operable. |  |
| aria-relevant | "text" \| "additions" \| "additions removals" \| "additions text" \| "all" \| "removals" \| "removals additions" \| "removals text" \| "text additions" \| "text removals" | null | Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. |  |
| aria-required | Booleanish | null | Indicates that user input is required on the element before a form may be submitted. |  |
| aria-roledescription | string | null | Defines a human-readable, author-localized description for the role of an element. |  |
| aria-rowcount | Numberish | null | Defines the total number of rows in a table, grid, or treegrid. |  |
| aria-rowindex | Numberish | null | Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. |  |
| aria-rowspan | Numberish | null | Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. |  |
| aria-selected | Booleanish | null | Indicates the current "selected" state of various widgets. |  |
| aria-setsize | Numberish | null | Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. |  |
| aria-sort | "none" \| "ascending" \| "descending" \| "other" | null | Indicates if items in a table or grid are sorted in ascending or descending order. |  |
| aria-valuemax | Numberish | null | Defines the maximum allowed value for a range widget. |  |
| aria-valuemin | Numberish | null | Defines the minimum allowed value for a range widget. |  |
| aria-valuenow | Numberish | null | Defines the current value for a range widget. |  |
| aria-valuetext | string | null | Defines the human readable text alternative of aria-valuenow for a range widget. |  |
| innerHTML | string | null |  |  |
| accesskey | string | null |  |  |
| contenteditable | Booleanish \| "inherit" \| "plaintext-only" | null |  |  |
| contextmenu | string | null |  |  |
| dir | string | null |  |  |
| draggable | Booleanish | null |  |  |
| hidden | "" \| Booleanish \| "hidden" \| "until-found" | null |  |  |
| id | string | null |  |  |
| inert | Booleanish | null |  |  |
| lang | string | null |  |  |
| placeholder | string | null |  |  |
| spellcheck | Booleanish | null |  |  |
| tabindex | Numberish | null |  |  |
| title | string | null |  |  |
| translate | "yes" \| "no" | null |  |  |
| radiogroup | string | null |  |  |
| role | string | null |  |  |
| about | string | null |  |  |
| datatype | string | null |  |  |
| inlist | any | null |  |  |
| prefix | string | null |  |  |
| property | string | null |  |  |
| resource | string | null |  |  |
| typeof | string | null |  |  |
| vocab | string | null |  |  |
| autocapitalize | string | null |  |  |
| autocorrect | string | null |  |  |
| autosave | string | null |  |  |
| color | string | null |  |  |
| itemprop | string | null |  |  |
| itemscope | Booleanish | null |  |  |
| itemtype | string | null |  |  |
| itemid | string | null |  |  |
| itemref | string | null |  |  |
| results | Numberish | null |  |  |
| security | string | null |  |  |
| unselectable | "on" \| "off" | null |  |  |
| inputmode | "text" \| "none" \| "tel" \| "url" \| "email" \| "numeric" \| "decimal" \| "search" | null | Hints at the type of data that might be entered by the user while editing the element or its contents |  |
| is | string | null | Specify that a standard HTML element should behave like a defined custom built-in element |  |
| autofocus | Booleanish | null |  |  |
| disabled | Booleanish | null |  |  |
| form | string | null |  |  |
| formaction | string | null |  |  |
| formenctype | string | null |  |  |
| formmethod | string | null |  |  |
| formnovalidate | Booleanish | null |  |  |
| formtarget | string | null |  |  |
| name | string | null |  |  |
| type | "submit" \| "reset" \| ["button"](https://primevue.org/button/#api.button.interfaces.%22button%22) | null |  |  |
| value | string \| number \| readonly string\[\] | null |  |  |
| onCopy | Function | null |  |  |
| onCut | Function | null |  |  |
| onPaste | Function | null |  |  |
| onCompositionend | Function | null |  |  |
| onCompositionstart | Function | null |  |  |
| onCompositionupdate | Function | null |  |  |
| onDrag | Function | null |  |  |
| onDragend | Function | null |  |  |
| onDragenter | Function | null |  |  |
| onDragexit | Function | null |  |  |
| onDragleave | Function | null |  |  |
| onDragover | Function | null |  |  |
| onDragstart | Function | null |  |  |
| onDrop | Function | null |  |  |
| onFocus | Function | null |  |  |
| onFocusin | Function | null |  |  |
| onFocusout | Function | null |  |  |
| onBlur | Function | null |  |  |
| onChange | Function | null |  |  |
| onBeforeinput | Function | null |  |  |
| onInput | Function | null |  |  |
| onReset | Function | null |  |  |
| onSubmit | Function | null |  |  |
| onInvalid | Function | null |  |  |
| onLoad | Function | null |  |  |
| onError | Function | null |  |  |
| onKeydown | Function | null |  |  |
| onKeypress | Function | null |  |  |
| onKeyup | Function | null |  |  |
| onAuxclick | Function | null |  |  |
| onClick | Function | null |  |  |
| onContextmenu | Function | null |  |  |
| onDblclick | Function | null |  |  |
| onMousedown | Function | null |  |  |
| onMouseenter | Function | null |  |  |
| onMouseleave | Function | null |  |  |
| onMousemove | Function | null |  |  |
| onMouseout | Function | null |  |  |
| onMouseover | Function | null |  |  |
| onMouseup | Function | null |  |  |
| onAbort | Function | null |  |  |
| onCanplay | Function | null |  |  |
| onCanplaythrough | Function | null |  |  |
| onDurationchange | Function | null |  |  |
| onEmptied | Function | null |  |  |
| onEncrypted | Function | null |  |  |
| onEnded | Function | null |  |  |
| onLoadeddata | Function | null |  |  |
| onLoadedmetadata | Function | null |  |  |
| onLoadstart | Function | null |  |  |
| onPause | Function | null |  |  |
| onPlay | Function | null |  |  |
| onPlaying | Function | null |  |  |
| onProgress | Function | null |  |  |
| onRatechange | Function | null |  |  |
| onSeeked | Function | null |  |  |
| onSeeking | Function | null |  |  |
| onStalled | Function | null |  |  |
| onSuspend | Function | null |  |  |
| onTimeupdate | Function | null |  |  |
| onVolumechange | Function | null |  |  |
| onWaiting | Function | null |  |  |
| onSelect | Function | null |  |  |
| onScroll | Function | null |  |  |
| onScrollend | Function | null |  |  |
| onTouchcancel | Function | null |  |  |
| onTouchend | Function | null |  |  |
| onTouchmove | Function | null |  |  |
| onTouchstart | Function | null |  |  |
| onPointerdown | Function | null |  |  |
| onPointermove | Function | null |  |  |
| onPointerup | Function | null |  |  |
| onPointercancel | Function | null |  |  |
| onPointerenter | Function | null |  |  |
| onPointerleave | Function | null |  |  |
| onPointerover | Function | null |  |  |
| onPointerout | Function | null |  |  |
| onWheel | Function | null |  |  |
| onAnimationstart | Function | null |  |  |
| onAnimationend | Function | null |  |  |
| onAnimationiteration | Function | null |  |  |
| onTransitionend | Function | null |  |  |
| onTransitionstart | Function | null |  |  |
| style | any | null | Inline style of the button. |  |
| class | any | null | Style class of the button. |  |
| label | string | null | Text of the button. |  |
| icon | string | null | Name of the icon. |  |
| iconPos | HintedString<"left" \| "right" \| "top" \| "bottom"> | left | Position of the icon. |  |
| iconClass | string \| object | null | Style class of the icon. |  |
| badge | string | null | Value of the badge. |  |
| badgeClass | string \| object | null | Style class of the badge. |  |
| badgeSeverity | null \| HintedString<"secondary" \| "info" \| "success" \| "warn" \| "danger" \| "contrast"> | null | Severity type of the badge. |  |
| loading | boolean | false | Whether the button is in loading state. |  |
| loadingIcon | string | null | Icon to display in loading state. |  |
| as | string \| Component | BUTTON | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| link | boolean | false | Add a link style to the button. |  |
| severity | HintedString<"secondary" \| "info" \| "success" \| "warn" \| "danger" \| "contrast" \| "help"> | null | Defines the style of the button. |  |
| raised | boolean | false | Add a shadow to indicate elevation. |  |
| rounded | boolean | false | Add a circular border radius to the button. |  |
| text | boolean | false | Add a textual class to the button without a background initially. |  |
| outlined | boolean | false | Add a border class without a background initially. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the button. |  |
| variant | HintedString<"outlined" \| "text" \| "link"> | undefined | Specifies the variant of the component. |  |
| plain | boolean | false | Add a plain textual class to the button without a background initially. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ButtonPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/button/\#api.button.slots)
Defines valid slots in Button component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default | scope: {<br>a11yAttrs: Record, // Object containing the accessibility attributes.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content such as icons, images and text can be placed inside the button via the default slot. Note that when slot is used, label, icon and badge properties are not included. |  |
| icon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| loadingicon | scope: {<br>class: string, // Style class of the loading icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading icon template. |  |
### Interfaces [\#](https://primevue.org/button/\#api.button.interfaces)
Defines the custom interfaces used by the module.
#### ButtonPassThroughMethodOptions [\#](https://primevue.org/button/\#api.button.interfaces.ButtonPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ButtonProps](https://primevue.org/button/#api.button.interfaces.ButtonProps) | null | Defines valid properties. |
| context | [ButtonContext](https://primevue.org/button/#api.button.interfaces.ButtonContext) | null | Defines current options. |
| parent | any | null | Defines parent instance. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ButtonPassThroughOptions [\#](https://primevue.org/button/\#api.button.interfaces.ButtonPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ButtonPassThroughOptionType<T>](https://primevue.org/button/#api.button.types.ButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| loadingIcon | [ButtonPassThroughOptionType<T>](https://primevue.org/button/#api.button.types.ButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the loading icon's DOM element. |
| icon | [ButtonPassThroughOptionType<T>](https://primevue.org/button/#api.button.types.ButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the icon's DOM element. |
| label | [ButtonPassThroughOptionType<T>](https://primevue.org/button/#api.button.types.ButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the label's DOM element. |
| pcBadge | [ButtonPassThroughOptionType<T>](https://primevue.org/button/#api.button.types.ButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the Badge component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ButtonPassThroughAttributes [\#](https://primevue.org/button/\#api.button.interfaces.ButtonPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ButtonContext [\#](https://primevue.org/button/\#api.button.interfaces.ButtonContext)
Defines current options in Button component.
| name | type | default | description |
| --- | --- | --- | --- |
| disabled | boolean | false | Current disabled state of the element as a boolean. |
## Types [\#](https://primevue.org/button/\#api.button.types)
Defines the custom types used by the module.
#### ButtonPassThroughOptionType [\#](https://primevue.org/button/\#api.button.types.ButtonPassThroughOptionType)
| values |
| --- |
| ButtonPassThroughAttributes \| (options: ButtonPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ButtonEmits [\#](https://primevue.org/button/\#api.button.types.ButtonEmits)
| values |
| --- |
| EmitFn<ButtonEmitsOptions> |
## ButtonGroup [\#](https://primevue.org/button/\#api.buttongroup)
A set of Buttons can be displayed together using the ButtonGroup component.
### Props [\#](https://primevue.org/button/\#api.buttongroup.props)
Defines valid properties in ButtonGroup component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ButtonGroupPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/button/\#api.buttongroup.slots)
Defines valid slots in ButtonGroup component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default slot to detect Button components. |  |
### Interfaces [\#](https://primevue.org/button/\#api.buttongroup.interfaces)
Defines the custom interfaces used by the module.
#### ButtonGroupPassThroughMethodOptions [\#](https://primevue.org/button/\#api.buttongroup.interfaces.ButtonGroupPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ButtonGroupProps](https://primevue.org/button/#api.buttongroup.interfaces.ButtonGroupProps) | null | Defines valid properties. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ButtonGroupPassThroughOptions [\#](https://primevue.org/button/\#api.buttongroup.interfaces.ButtonGroupPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ButtonGroupPassThroughOptionType](https://primevue.org/button/#api.buttongroup.types.ButtonGroupPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ButtonGroupPassThroughAttributes [\#](https://primevue.org/button/\#api.buttongroup.interfaces.ButtonGroupPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/button/\#api.buttongroup.types)
Defines the custom types used by the module.
#### ButtonGroupPassThroughOptionType [\#](https://primevue.org/button/\#api.buttongroup.types.ButtonGroupPassThroughOptionType)
| values |
| --- |
| ButtonGroupPassThroughAttributes \| (options: ButtonGroupPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ButtonGroupEmits [\#](https://primevue.org/button/\#api.buttongroup.types.ButtonGroupEmits)
| values |
| --- |
| EmitFn<ButtonGroupEmitsOptions> |
- Button
  - Props
  - Slots
  - Interfaces
  - Types
- ButtonGroup
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Skeleton Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Skeleton
Skeleton is a placeholder to display instead of the actual content.
## Import [\#](https://primevue.org/skeleton/\#import)
```javascript
import Skeleton from 'primevue/skeleton';
```
Copy
## Shapes [\#](https://primevue.org/skeleton/\#shapes)
Various shapes and sizes can be created using styling properties like _shape_, _width_, _height_, _borderRadius_ and _class_.
##### Rectangle
##### Rounded
##### Square
##### Circle
```markup
<h5>Rectangle</h5>
<Skeleton class="mb-2"></Skeleton>
<Skeleton width="10rem" class="mb-2"></Skeleton>
<Skeleton width="5rem" class="mb-2"></Skeleton>
<Skeleton height="2rem" class="mb-2"></Skeleton>
<Skeleton width="10rem" height="4rem"></Skeleton>
<h5>Rounded</h5>
<Skeleton class="mb-2" borderRadius="16px"></Skeleton>
<Skeleton width="10rem" class="mb-2" borderRadius="16px"></Skeleton>
<Skeleton width="5rem" borderRadius="16px" class="mb-2"></Skeleton>
<Skeleton height="2rem" class="mb-2" borderRadius="16px"></Skeleton>
<Skeleton width="10rem" height="4rem" borderRadius="16px"></Skeleton>
<h5 class="mt-4">Square</h5>
<Skeleton size="2rem" class="mr-2"></Skeleton>
<Skeleton size="3rem" class="mr-2"></Skeleton>
<Skeleton size="4rem" class="mr-2"></Skeleton>
<Skeleton size="5rem"></Skeleton>
<h5 class="mt-4">Circle</h5>
<Skeleton shape="circle" size="2rem" class="mr-2"></Skeleton>
<Skeleton shape="circle" size="3rem" class="mr-2"></Skeleton>
<Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
<Skeleton shape="circle" size="5rem"></Skeleton>
```
Copy
## Card [\#](https://primevue.org/skeleton/\#card)
Sample Card implementation using different Skeleton components and Tailwind CSS utilities.
```markup
<div class="rounded border border-surface-200 dark:border-surface-700 p-6 bg-surface-0 dark:bg-surface-900">
    <div class="flex mb-4">
        <Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
        <div>
            <Skeleton width="10rem" class="mb-2"></Skeleton>
            <Skeleton width="5rem" class="mb-2"></Skeleton>
            <Skeleton height=".5rem"></Skeleton>
        </div>
    </div>
    <Skeleton width="100%" height="150px"></Skeleton>
    <div class="flex justify-between mt-4">
        <Skeleton width="4rem" height="2rem"></Skeleton>
        <Skeleton width="4rem" height="2rem"></Skeleton>
    </div>
</div>
```
Copy
## List [\#](https://primevue.org/skeleton/\#list)
Sample List implementation using different Skeleton components and Tailwind CSS utilities.
```markup
<div class="rounded border border-surface-200 dark:border-surface-700 p-6 bg-surface-0 dark:bg-surface-900">
    <ul class="m-0 p-0 list-none">
        <li class="mb-4">
            <div class="flex">
                <Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
                <div class="self-center" style="flex: 1">
                    <Skeleton width="100%" class="mb-2"></Skeleton>
                    <Skeleton width="75%"></Skeleton>
                </div>
            </div>
        </li>
        <li class="mb-4">
            <div class="flex">
                <Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
                <div class="self-center" style="flex: 1">
                    <Skeleton width="100%" class="mb-2"></Skeleton>
                    <Skeleton width="75%"></Skeleton>
                </div>
            </div>
        </li>
        <li class="mb-4">
            <div class="flex">
                <Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
                <div class="self-center" style="flex: 1">
                    <Skeleton width="100%" class="mb-2"></Skeleton>
                    <Skeleton width="75%"></Skeleton>
                </div>
            </div>
        </li>
        <li>
            <div class="flex">
                <Skeleton shape="circle" size="4rem" class="mr-2"></Skeleton>
                <div class="self-center" style="flex: 1">
                    <Skeleton width="100%" class="mb-2"></Skeleton>
                    <Skeleton width="75%"></Skeleton>
                </div>
            </div>
        </li>
    </ul>
</div>
```
Copy
## DataTable [\#](https://primevue.org/skeleton/\#datatable)
Sample DataTable implementation using different Skeleton components and Tailwind CSS utilities.
| Code | Name | Category | Quantity |
| --- | --- | --- | --- |
|  |  |  |  |
|  |  |  |  |
|  |  |  |  |
|  |  |  |  |
```markup
<DataTable :value="products">
    <Column field="code" header="Code">
        <template #body>
            <Skeleton></Skeleton>
        </template>
    </Column>
    <Column field="name" header="Name">
        <template #body>
            <Skeleton></Skeleton>
        </template>
    </Column>
    <Column field="category" header="Category">
        <template #body>
            <Skeleton></Skeleton>
        </template>
    </Column>
    <Column field="quantity" header="Quantity">
        <template #body>
            <Skeleton></Skeleton>
        </template>
    </Column>
</DataTable>
```
Copy
## Accessibility [\#](https://primevue.org/skeleton/\#accessibility)
### Screen Reader
Skeleton uses _aria-hidden_ as "true" so that it gets ignored by screen readers, any valid attribute is passed to the root element so you may customize it further if required. If multiple skeletons are grouped inside a container, you may use _aria-busy_ on the container element as well to indicate the loading process.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Shapes
- Card
- List
- DataTable
- Accessibility
# Skeleton API
API defines helper props, events and others for the PrimeVue Skeleton module.
## Skeleton [\#](https://primevue.org/skeleton/\#api.skeleton)
Skeleton is a placeholder to display instead of the actual content.
### Props [\#](https://primevue.org/skeleton/\#api.skeleton.props)
Defines valid properties in Skeleton component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| shape | HintedString<"circle" \| "rectangle"> | rectangle | Shape of the element. |  |
| size | string | null | Size of the Circle or Square. |  |
| width | string | 100% | Width of the element. |  |
| height | string | 1rem | Height of the element. |  |
| borderRadius | string | null | Border radius of the element, defaults to value from theme. |  |
| animation | HintedString<"none" \| "wave"> | wave | Type of the animation. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SkeletonPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Interfaces [\#](https://primevue.org/skeleton/\#api.skeleton.interfaces)
Defines the custom interfaces used by the module.
#### SkeletonPassThroughMethodOptions [\#](https://primevue.org/skeleton/\#api.skeleton.interfaces.SkeletonPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SkeletonProps](https://primevue.org/skeleton/#api.skeleton.interfaces.SkeletonProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### SkeletonPassThroughOptions [\#](https://primevue.org/skeleton/\#api.skeleton.interfaces.SkeletonPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [SkeletonPassThroughOptionType](https://primevue.org/skeleton/#api.skeleton.types.SkeletonPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### SkeletonPassThroughAttributes [\#](https://primevue.org/skeleton/\#api.skeleton.interfaces.SkeletonPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/skeleton/\#api.skeleton.types)
Defines the custom types used by the module.
#### SkeletonPassThroughOptionType [\#](https://primevue.org/skeleton/\#api.skeleton.types.SkeletonPassThroughOptionType)
| values |
| --- |
| SkeletonPassThroughAttributes \| (options: SkeletonPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### SkeletonEmits [\#](https://primevue.org/skeleton/\#api.skeleton.types.SkeletonEmits)
| values |
| --- |
| EmitFn<SkeletonEmitsOptions> |
- Skeleton
  - Props
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Support Options
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
Community Support
[Forum](https://github.com/orgs/primefaces/discussions) and [Discord](https://discord.gg/gzKFYnpmCY) are where the community users gather to seek support, post topics and discuss the technology. GitHub issue is the channel for the community users to create tickets however PrimeTek does not guarantee a response time although they are monitored and maintained by our staff. If you need to secure a response, you may consider PRO support instead.
Professional Support
With PRO support, it's easy to support, tune, and add features to PrimeVue as an in-house library. With the exclusive services of a PRO account, you no longer need to post questions in the community forum and the community issue tracker at GitHub. Service is delivered via a private issue tracker based on a one-business-day response time.
Service Features
200$/h
- Private Issue Tracker
- Response within 1 business day
- Unlimited Number of Tickets
- Hourly Support Model
- 1 year term
- Minimum 25 Hours for initiation
- Shared account per organization
- Maintenance for Any Version
- New Features
- POC implementations of a requirement
[Buy Now](mailto:primetek.com.tr?subject=PrimeVue%20PRO%20Support)
How It Works
- 1\. Purchase PRO Support
Contact [PrimeTek](mailto:contact@primetek.com.tr) to purchase support.
- 2\. Setup
An account is created for you in our exclusive JIRA issue tracker.
- 3\. Request Support
Create a ticket with a description of the issue and receive a reply within 1 business day.
- 4\. Estimate and Approval
An estimate is provided to resolve the issue, upon your approval the PrimeTek team commences work.
- 5\. Resolution
Issue is resolved and the approved hours are deducted from your account.
- 6\. Delivery
If the issue requires an update in the library, it gets published to npm by as part of the public PrimeVue package. A patch update on an older version can also be requested if you are not using the latest version.
Consulting
Unlock the full potential of your software projects in addition to PRO Support with the premier consulting services of our partners. The team of seasoned consultants is available to provide tailored expertise and guidance, ensuring your software development initiatives are successful, efficient, and innovative.
Deep Expertise
Our consultants are experts with extensive experience in various aspects of software development, including design, architecture, coding, testing, and deployment. They bring a wealth of knowledge and best practices to your project.
Customized Solutions
We understand that every project is unique. Our consultants work closely with you to understand your specific requirements and challenges, delivering solutions that are perfectly aligned with your business goals..
Scalable Engagements
Whether you need short-term advice for a specific problem or long-term strategic guidance, our consulting services are flexible and scalable to meet your needs.
We are proud to collaborate with [EpicMax](https://www.epicmax.co/contacts) and [Virtua](https://virtua.tech/) that share our commitment to excellence and open source values.
[Get a Quote](https://www.epicmax.co/contacts)
[Get a Quote](https://virtua.tech/contact)
Frequently Asked Questions
How many issue tracker accounts do we get?
We provide 1 shared account per organization.
What is the duration of the service?
Service ends either when all support hours are used or after 1 year.
What happens if we extend after 1 year and we have unused hours?
Unused hours expire and are not transferred to the new term.
What are hours used for?
Hours are utilized when creating tickets, filing defects, requesting enhancements, POC implementations of a use case and questions.
Are the changes delivered with a custom build?
No, changes become part of the PrimeVue core and pushed to the public npm package on next update.
Who provides the support service?
Support service is provided by the PrimeVue team at PrimeTek.
Is there a minimum hour requirement?
At least 25 hours are required to initiate the service.
What happens if the issue takes longer or shorter than the approved estimate?
The confirmed estimate is still used even if it takes longer to resolve the issue.
Can we request new features and enhancements?
Yes, initially the request needs to be approved by PrimeTek based on project roadmap fit. As a result, not all requests may be accepted.
What are the payment terms?
Payment in advance is required to initiate the service.
What payment methods are available?
Credit card and bank wire transfers are the available options.
We are a reseller, can we purchase this support for our client?
That is possible, the service will be provided to your client even if you are the contact in purchase process.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## File Upload Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# File Upload
FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.
## Import [\#](https://primevue.org/fileupload/\#import)
```javascript
import FileUpload from 'primevue/fileupload';
```
Copy
## Basic [\#](https://primevue.org/fileupload/\#basic)
FileUpload basic _mode_ provides a simpler UI as an alternative to default advanced mode.
ChooseNo file chosen
Upload
```markup
<FileUpload ref="fileupload" mode="basic" name="demo[]" url="/api/upload" accept="image/*" :maxFileSize="1000000" @upload="onUpload" />
<Button label="Upload" @click="upload" severity="secondary" />
```
Copy
## Auto [\#](https://primevue.org/fileupload/\#auto)
When _auto_ property is enabled, a file gets uploaded instantly after selection.
Browse
```markup
<FileUpload mode="basic" name="demo[]" url="/api/upload" accept="image/*" :maxFileSize="1000000" @upload="onUpload" :auto="true" chooseLabel="Browse" />
```
Copy
## Advanced [\#](https://primevue.org/fileupload/\#advanced)
FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.
ChooseUploadCancel
Drag and drop files to here to upload.
```markup
<FileUpload name="demo[]" url="/api/upload" @upload="onAdvancedUpload($event)" :multiple="true" accept="image/*" :maxFileSize="1000000">
    <template #empty>
        <span>Drag and drop files to here to upload.</span>
    </template>
</FileUpload>
```
Copy
## Template [\#](https://primevue.org/fileupload/\#template)
Uploader UI can be customized with templating.
Drag and drop files to here to upload.
```markup
<FileUpload name="demo[]" url="/api/upload" @upload="onTemplatedUpload($event)" :multiple="true" accept="image/*" :maxFileSize="1000000" @select="onSelectedFiles">
    <template #header="{ chooseCallback, uploadCallback, clearCallback, files }">
        <div class="flex flex-wrap justify-between items-center flex-1 gap-4">
            <div class="flex gap-2">
                <Button @click="chooseCallback()" icon="pi pi-images" rounded outlined severity="secondary"></Button>
                <Button @click="uploadEvent(uploadCallback)" icon="pi pi-cloud-upload" rounded outlined severity="success" :disabled="!files || files.length === 0"></Button>
                <Button @click="clearCallback()" icon="pi pi-times" rounded outlined severity="danger" :disabled="!files || files.length === 0"></Button>
            </div>
            <ProgressBar :value="totalSizePercent" :showValue="false" class="md:w-20rem h-1 w-full md:ml-auto">
                <span class="whitespace-nowrap">{{ totalSize }}B / 1Mb</span>
            </ProgressBar>
        </div>
    </template>
    <template #content="{ files, uploadedFiles, removeUploadedFileCallback, removeFileCallback, messages }">
        <div class="flex flex-col gap-8 pt-4">
            <Message v-for="message of messages" :key="message" :class="{ 'mb-8': !files.length && !uploadedFiles.length}" severity="error">
                {{ message }}
            </Message>
            <div v-if="files.length > 0">
                <h5>Pending</h5>
                <div class="flex flex-wrap gap-4">
                    <div v-for="(file, index) of files" :key="file.name + file.type + file.size" class="p-8 rounded-border flex flex-col border border-surface items-center gap-4">
                        <div>
                            <img role="presentation" :alt="file.name" :src="file.objectURL" width="100" height="50" />
                        </div>
                        <span class="font-semibold text-ellipsis max-w-60 whitespace-nowrap overflow-hidden">{{ file.name }}</span>
                        <div>{{ formatSize(file.size) }}</div>
                        <Badge value="Pending" severity="warn" />
                        <Button icon="pi pi-times" @click="onRemoveTemplatingFile(file, removeFileCallback, index)" outlined rounded severity="danger" />
                    </div>
                </div>
            </div>
            <div v-if="uploadedFiles.length > 0">
                <h5>Completed</h5>
                <div class="flex flex-wrap gap-4">
                    <div v-for="(file, index) of uploadedFiles" :key="file.name + file.type + file.size" class="p-8 rounded-border flex flex-col border border-surface items-center gap-4">
                        <div>
                            <img role="presentation" :alt="file.name" :src="file.objectURL" width="100" height="50" />
                        </div>
                        <span class="font-semibold text-ellipsis max-w-60 whitespace-nowrap overflow-hidden">{{ file.name }}</span>
                        <div>{{ formatSize(file.size) }}</div>
                        <Badge value="Completed" class="mt-4" severity="success" />
                        <Button icon="pi pi-times" @click="removeUploadedFileCallback(index)" outlined rounded severity="danger" />
                    </div>
                </div>
            </div>
        </div>
    </template>
    <template #empty>
        <div class="flex items-center justify-center flex-col">
            <i class="pi pi-cloud-upload !border-2 !rounded-full !p-8 !text-4xl !text-muted-color" />
            <p class="mt-6 mb-0">Drag and drop files to here to upload.</p>
        </div>
    </template>
</FileUpload>
```
Copy
## Custom Upload [\#](https://primevue.org/fileupload/\#custom-upload)
Uploading implementation can be overridden by enabling _customUpload_ property. This sample, displays the image on the client side with a grayscale filter.
Choose
```markup
<FileUpload mode="basic" @select="onFileSelect" customUpload auto severity="secondary" class="p-button-outlined" />
<img v-if="src" :src="src" alt="Image" class="shadow-md rounded-xl w-full sm:w-64" style="filter: grayscale(100%)" />
```
Copy
## Accessibility [\#](https://primevue.org/fileupload/\#accessibility)
### Screen Reader
FileUpload uses a hidden native _input_ element with _type="file"_ for screen readers.
### Keyboard Support
Interactive elements of the uploader are buttons, visit the [Button](https://primevue.org/button/#accessibility) accessibility section for more information.
- Import
- Basic
- Auto
- Advanced
- Template
- Custom Upload
- Accessibility
# File Upload API
API defines helper props, events and others for the PrimeVue File Upload module.
## FileUpload [\#](https://primevue.org/fileupload/\#api.fileupload)
FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.
### Props [\#](https://primevue.org/fileupload/\#api.fileupload.props)
Defines valid properties in FileUpload component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| name | string | null | Name of the request parameter to identify the files at backend. |  |
| url | string | null | Remote url to upload the files. |  |
| mode | HintedString<"advanced" \| "basic"> | advanced | Defines the UI of the component, possible values are 'advanced' and 'basic'. |  |
| multiple | boolean | false | Used to select multiple files at once from file dialog. |  |
| accept | string | null | Pattern to restrict the allowed file types such as 'image/\*'. |  |
| disabled | boolean | false | Disables the upload functionality. |  |
| auto | boolean | false | When enabled, upload begins automatically after selection is completed. |  |
| maxFileSize | number | null | Maximum file size allowed in bytes. |  |
| invalidFileSizeMessage | string | : Invalid file size, file size should be smaller than {1.} | Message of the invalid fize size. |  |
| invalidFileLimitMessage | string | Maximum number of files to be uploaded is {0.} | Message to display when number of files to be uploaded exceeeds the limit. |  |
| invalidFileTypeMessage | string | '{0}: Invalid file type.' | Message of the invalid fize type. |  |
| fileLimit | number | null | Maximum number of files that can be uploaded. |  |
| withCredentials | boolean | false | Cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates. |  |
| previewWidth | number | 50 | Width of the image thumbnail in pixels. |  |
| chooseLabel | string | null | Label of the choose button. Defaults to PrimeVue Locale configuration. |  |
| uploadLabel | string | null | Label of the upload button. Defaults to PrimeVue Locale configuration. |  |
| cancelLabel | string | Cancel | Label of the cancel button. Defaults to PrimeVue Locale configuration. |  |
| customUpload | boolean | null | Whether to use the default upload or a manual implementation defined in uploadHandler callback. Defaults to PrimeVue Locale configuration. |  |
| showUploadButton | boolean | true | Whether to show the upload button. |  |
| showCancelButton | boolean | true | Whether to show the cancel button. |  |
| chooseIcon | string | null | Icon of the choose button. |  |
| uploadIcon | string | null | Icon of the upload button. |  |
| cancelIcon | string | null | Icon of the cancel button. |  |
| style | any | null | Inline style of the component. |  |
| class | any | null | Style class of the component. |  |
| chooseButtonProps | object | null | Used to pass all properties of the ButtonProps to the choose button inside the component. |  |
| uploadButtonProps | object | null | Used to pass all properties of the ButtonProps to the upload button inside the component. |  |
| cancelButtonProps | object | null | Used to pass all properties of the ButtonProps to the cancel button inside the component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<FileUploadPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/fileupload/\#api.fileupload.emits)
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| select | event: [FileUploadSelectEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadSelectEvent) | void | Callback to invoke when files are selected. |  |
| before-upload | event: [FileUploadBeforeUploadEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadBeforeUploadEvent) | void | Callback to invoke before file upload begins to customize the request such as post parameters before the files. |  |
| progress | event: [FileUploadProgressEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadProgressEvent) | void | Callback to invoke when files are being uploaded. |  |
| upload | event: [FileUploadUploadEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadUploadEvent) | void | Callback to invoke when file upload is complete. |  |
| uploader | event: [FileUploadUploaderEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadUploaderEvent) | void | Callback to invoke to implement a custom upload. |  |
| error | event: [FileUploadErrorEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadErrorEvent) | void | Callback to invoke if file upload fails. |  |
| before-send | event: [FileUploadBeforeSendEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadBeforeSendEvent) | void | Callback to invoke before file send begins to customize the request such as adding headers. |  |
| clear |  | void | Callback to invoke when files in queue are removed without uploading. |  |
| remove | event: [FileUploadRemoveEvent](https://primevue.org/fileupload/#api.fileupload.events.FileUploadRemoveEvent) | void | Callback to invoke when a singe file is removed from the list. |  |
| removeUploadedFile | event: [FileUploadRemoveUploadedFile](https://primevue.org/fileupload/#api.fileupload.interfaces.FileUploadRemoveUploadedFile) | void | Callback to invoke when a single uploaded file is removed from the uploaded file list. |  |
### Slots [\#](https://primevue.org/fileupload/\#api.fileupload.slots)
Defines valid slots in FileUpload slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header | scope: {<br>files: File, // Files to upload.uploadedFiles: File, // Uploaded files.chooseCallback: () â‡’ void, // Choose functionuploadCallback: () â‡’ void, // Upload functionclearCallback: () â‡’ void, // Clear function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header content template. |  |
| content | scope: {<br>files: File, // Files to upload.uploadedFiles: File, // Uploaded files.removeUploadedFileCallback: (index: number) â‡’ void, // Function to remove an uploaded file.removeFileCallback: (index: number) â‡’ void, // Function to remove a file.progress: number, // Uploaded progress as number.messages: undefined, // Status messages about upload process.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom uploaded content template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content when there is no selected file. |  |
| chooseicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom choose icon template. |  |
| uploadicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom upload icon template. |  |
| cancelicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom cancel icon template. |  |
| fileremoveicon | scope: {<br>file: File, // File to upload.index: number, // The index of file<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom remove icon template for each file. |  |
| filelabel | scope: {<br>files: File, // File to upload.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom file label template. |  |
### Methods [\#](https://primevue.org/fileupload/\#api.fileupload.methods)
Defines methods that can be accessed by the component's reference.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| upload |  | void | Upload file. |  |
### Events [\#](https://primevue.org/fileupload/\#api.fileupload.events)
Defines the custom events used by the component's emit.
#### FileUploadSelectEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadSelectEvent)
Custom select event.
See [select](https://primevue.org/fileupload/#api.fileupload.emitsoptions.select)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| files | any | List of selected files. |
#### FileUploadBeforeUploadEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadBeforeUploadEvent)
Custom before upload event.
See [before-upload](https://primevue.org/fileupload/#api.fileupload.emitsoptions.before-upload)
| name | type | description |
| --- | --- | --- |
| xhr | XMLHttpRequest | XmlHttpRequest instance. |
| formData | FormData | FormData object. |
#### FileUploadProgressEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadProgressEvent)
Custom progress event.
See [progress](https://primevue.org/fileupload/#api.fileupload.emitsoptions.progress)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| progress | number | Calculated progress value. |
#### FileUploadUploadEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadUploadEvent)
Custom upload event.
See [upload](https://primevue.org/fileupload/#api.fileupload.emitsoptions.upload)
| name | type | description |
| --- | --- | --- |
| xhr | XMLHttpRequest | XmlHttpRequest instance. |
| files | File \| File\[\] | Files that are not uploaded. |
#### FileUploadUploaderEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadUploaderEvent)
Custom uploader event.
See [uploader](https://primevue.org/fileupload/#api.fileupload.emitsoptions.uploader)
| name | type | description |
| --- | --- | --- |
| files | File \| File\[\] | List of selected files. |
#### FileUploadErrorEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadErrorEvent)
Custom error event.
See [error](https://primevue.org/fileupload/#api.fileupload.emitsoptions.error)
| name | type | description |
| --- | --- | --- |
| xhr | XMLHttpRequest | XmlHttpRequest instance. |
| files | File \| File\[\] | Files that are not uploaded. |
#### FileUploadBeforeSendEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadBeforeSendEvent)
Custom before send event.
See [before-send](https://primevue.org/fileupload/#api.fileupload.emitsoptions.before-send)
| name | type | description |
| --- | --- | --- |
| xhr | XMLHttpRequest | XmlHttpRequest instance. |
| formData | FormData | FormData object. |
#### FileUploadRemoveEvent [\#](https://primevue.org/fileupload/\#api.fileupload.events.FileUploadRemoveEvent)
Custom remove event.
See [remove](https://primevue.org/fileupload/#api.fileupload.emitsoptions.remove)
| name | type | description |
| --- | --- | --- |
| file | File | Removed file. |
| files | File\[\] | Remaining files to be uploaded. |
### Interfaces [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces)
Defines the custom interfaces used by the module.
#### FileUploadPassThroughMethodOptions [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces.FileUploadPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [FileUploadProps](https://primevue.org/fileupload/#api.fileupload.interfaces.FileUploadProps) | null | Defines valid properties. |
| state | [FileUploadState](https://primevue.org/fileupload/#api.fileupload.interfaces.FileUploadState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### FileUploadRemoveUploadedFile [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces.FileUploadRemoveUploadedFile)
Custom remove upload file event.
| name | type | default | description |
| --- | --- | --- | --- |
| file | File | null | Removed file. |
| files | File\[\] | null | Remaining files to be uploaded. |
#### FileUploadPassThroughOptions [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces.FileUploadPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| input | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the input's DOM element. |
| header | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| pcChooseButton | any | null | Used to pass attributes to the choose Button component. |
| pcUploadButton | any | null | Used to pass attributes to the upload Button component. |
| pcCancelButton | any | null | Used to pass attributes to the cancel Button component. |
| content | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| pcProgressBar | any | null | Used to pass attributes to the ProgressBar component. |
| pcMessage | any | null | Used to pass attributes to the message's DOM element. |
| file | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the file's DOM element. |
| fileThumbnail | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the file thumbnail's DOM element. |
| fileInfo | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the file info's DOM element. |
| fileName | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the fileName's DOM element. |
| fileSize | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the fileSize's DOM element. |
| pcFileBadge | any | null | Used to pass attributes to the Badge component. |
| fileActions | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the file actions' DOM element. |
| pcFileRemoveButton | any | null | Used to pass attributes to the file remove button's DOM element. |
| empty | [FileUploadPassThroughOptionType](https://primevue.org/fileupload/#api.fileupload.types.FileUploadPassThroughOptionType) | null | Used to pass attributes to the empty's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### FileUploadPassThroughAttributes [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces.FileUploadPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### FileUploadState [\#](https://primevue.org/fileupload/\#api.fileupload.interfaces.FileUploadState)
Defines current inline state in FileUpload component.
| name | type | default | description |
| --- | --- | --- | --- |
| uploadedFileCount | number | 0 | Current uploaded file count state as a number. |
| files | any\[\] | null | Current files. |
| messages | null \| string\[\] | null | Current messages. |
| progress | number | null | Current progress state as a number. |
| uploadedFiles | any\[\] | null | Current uploaded files. |
## Types [\#](https://primevue.org/fileupload/\#api.fileupload.types)
Defines the custom types used by the module.
#### FileUploadPassThroughOptionType [\#](https://primevue.org/fileupload/\#api.fileupload.types.FileUploadPassThroughOptionType)
| values |
| --- |
| FileUploadPassThroughAttributes \| (options: FileUploadPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### FileUploadEmits [\#](https://primevue.org/fileupload/\#api.fileupload.types.FileUploadEmits)
| values |
| --- |
| EmitFn<FileUploadEmitsOptions> |
- FileUpload
  - Props
  - Emits
  - Slots
  - Methods
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Volt UI Component Suite
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![PrimeVue Figma UI Kit](https://primefaces.org/cdn/primevue/images/uikit/primeone-cover-light.jpeg)
![PrimeVue UI Kit](https://primefaces.org/cdn/primevue/images/uikit/uikit-figma.png)
UP-TO-DATE
Best Features of Figma
PrimeOne for Figma uses the latest powerful features like components, variants, auto layout, styles, variables and interactive components. It'll always follow the best practices.
- Auto Layout
- Variants
- Variables and Styles
- Interactive Components
- Boolean, Instance Swap and Text Properties
- Nested Instances
ENTERPRISE GRADE
Powerful System
Save countless hours on every project with a carefully designed system that uses Prime UI Suite components. Start producing design results in no time.
- Numerous Components
- Icon Library
- Easy Customization
- Atomic Approach
![PrimeVue Designer](https://primefaces.org/cdn/primevue/images/uikit/uikit-system.png)
![PrimeVue Designer](https://primefaces.org/cdn/primevue/images/uikit/uikit-themes.png)
DARK MODE
Two Themes
PrimeOne is designed based on Aura Light and Aura Dark themes. Easily change the themes of your designs using Figma's Swap Library feature or Tokens Studio Sets.
- Aura Light
- Aura Dark
TOKENS STUDIO
Tokens Support
Empower yourself with unprecedented control over your designs. Tokens Studio integration unlocks a whole new level of flexibility, allowing you to create and manage design tokens seamlessly.
- Countless Design Tokens
- Light and Dark Sets
- Well Documented
- Primitive, Semantic and Component Tokens
![Tokens Support](https://primefaces.org/cdn/primevue/images/uikit/uikit-tokens.png)
![PrimeVue Designer](https://primefaces.org/cdn/designer/feature-2.png)
AUTOMATED
Figma to Theme
_This feature requires a [Theme Designer](https://primevue.org/designer) subscription._
Bridge the gap between design and development with our powerful Figma sync technology. Fully integrated with the PrimeVue Figma UI Kit, get started in no time by importing your design token file. Save countless hours in your workflow by eliminating manual theme creation from Figma designs.
- Automatic Mapping
- Eliminate Handoff
- Maintain Perfect Fidelity
- Verify Synchorization
[Preview Light![Figma Light](https://primefaces.org/cdn/primevue/images/uikit/logo-figma-light.svg)](https://www.figma.com/design/JRSFCni27PU4TrqOjoWeOA/Preview-%7C%20PrimeOne-|-3.1.0?node-id=806-36648&t=CpfshQ7laurr043o-1) [Preview Dark![Figma Dark](https://primefaces.org/cdn/primevue/images/uikit/logo-figma-dark.svg)](https://www.figma.com/design/ybRv6Rx2vGo9vQR0KRRt6G/Preview-%7C-Dark-%7C%20PrimeOne-|-3.1.0?node-id=6738-55117&t=XXwVln6ycpiKPlSS-1)
Pricing
Choose the right plan for your business. Whether you are an individual or a member of a team, UI Kit is available for affordable prices.
[View License Details](https://www.primefaces.org/uikit/licenses)
Single Designer
For individual designers
* * *
$249
* * *
- 1 Designer
- Auto Layout & Variants
- Interactive Components
- Tokens Studio Support
- 1 Year Free Updates
- Use on Unlimited Projects
* * *
[Buy Now](https://www.primefaces.org/store/uikit.xhtml)
Team
For small teams
* * *
$990
* * *
- Up to 5 Designers
- Auto Layout & Variants
- Interactive Components
- Tokens Studio Support
- 1 Year Free Updates
- Use on Unlimited Projects
* * *
[Buy Now](https://www.primefaces.org/store/uikit.xhtml)
Enterprise
For large teams
* * *
EXCLUSIVE DEALS
* * *
- Custom Team Size
- Auto Layout & Variants
- Interactive Components
- Tokens Studio Support
- 1 Year Free Updates
- Use on Unlimited Projects
* * *
[Contact Us](mailto:contact@primetek.com.tr)
Frequently Asked Questions
What do I get when I purchase a license?
You'll be able to download two Figma files for light and dark themes.
Is there a recurring fee or is the license perpetual?
UI Kit license is perpetual so requires one time payment with 1 year free updates, not subscription based.
Can I use UI Kit license for commercial projects?
Yes, your license allows you to sell your projects that utilize the UI Kit implementations.
Can I create multiple projects for multiple clients?
There is no limit, you are able to use UI Kit in multiple projects for multiple clients.
What Does "Free Updates" Mean?
All updates are completely free for the first year after your purchase. After this one-year period, you will no longer have access to newer versions. However, all versions released within the first year from your purchase date will remain accessible to you indefinitely.
How Can I Extend My Access to Updates After One Year?
At PrimeStore, you have the option to purchase an additional update term. This will grant you access to all existing versions and updates for another year.
How can I get support?
PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and [Forum](https://github.com/orgs/primefaces/discussions/categories/figma-ui-kit).
Does the enterprise license include contractors within the organization?
Yes, contractors are also able to use the UI Kit within your company within the custom team limit.
Can subsidiary company of a larger organization share the enterprise license?
No, enterprise license is per company so each subsidiary company needs to purchase a separate license.
Can I include UI Kit in an open source project?
Due to the license, it is not possible to use the UI Kit in an open source project where the design files are publicly available.
We're a reseller, are we able to purchase a license on behalf of our client?
Yes, after the purchase, please [contact us](mailto:contact@primetek.com.tr) so we can transfer the license to your client.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Divider Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Divider
Divider is used to separate contents.
## Import [\#](https://primevue.org/divider/\#import)
```javascript
import Divider from 'primevue/divider';
```
Copy
## Basic [\#](https://primevue.org/divider/\#basic)
Divider is basically placed between the items to separate.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.
```markup
<p class="m-0">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis
    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</p>
<Divider />
<p class="m-0">
    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam
    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
</p>
<Divider />
<p class="m-0">
    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia
    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
</p>
<Divider />
<p class="m-0">
    Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus
    maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.
</p>
```
Copy
## Type [\#](https://primevue.org/divider/\#type)
Style of the border is configured with the _type_ property that can either be _solid_, _dotted_ or _dashed_.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.
```markup
<p class="m-0">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis
    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</p>
<Divider type="solid" />
<p class="m-0">
    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam
    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
</p>
<Divider type="dotted" />
<p class="m-0">
    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia
    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
</p>
<Divider type="dashed" />
<p class="m-0">
    Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus
    maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.
</p>
```
Copy
## Vertical [\#](https://primevue.org/divider/\#vertical)
Vertical divider is enabled by setting the _layout_ property as _vertical_.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
```markup
<p class="m-0">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis
    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</p>
<Divider layout="vertical" />
<p class="m-0">
    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam
    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
</p>
<Divider layout="vertical" />
<p class="m-0">
    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia
    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
</p>
```
Copy
## Content [\#](https://primevue.org/divider/\#content)
Children are rendered within the boundaries of the divider where location of the content is configured with the _align_ property. In horizontal layout, alignment options are _left_, _center_ and _right_ whereas vertical mode supports _top_, _center_ and _bottom_.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
**Left**
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
**Center**
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
**Right**
Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.
```markup
<p class="m-0">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis
    aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</p>
<Divider align="left" type="solid">
    <b>Left</b>
</Divider>
<p class="m-0">
    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam
    voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
</p>
<Divider align="center" type="dotted">
    <b>Center</b>
</Divider>
<p class="m-0">
    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia
    deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
</p>
<Divider align="right" type="dashed">
    <b>Right</b>
</Divider>
<p class="m-0">
    Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus
    maiores alias consequatur aut perferendis doloribus asperiores repellat. Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien. Morbi dapibus luctus odio.
</p>
```
Copy
## Login [\#](https://primevue.org/divider/\#login)
Sample implementation of a login form using a divider with content.
Username
Password
Login
**OR**
**OR**
Sign Up
```markup
<div class="flex flex-col md:flex-row">
    <div class="w-full md:w-5/12 flex flex-col items-center justify-center gap-3 py-5">
        <div class="flex flex-col gap-2">
            <label for="username">Username</label>
            <InputText id="username" type="text" />
        </div>
        <div class="flex flex-col gap-2">
            <label for="password">Password</label>
            <InputText id="password" type="password" />
        </div>
        <div class="flex">
            <Button label="Login" icon="pi pi-user" class="w-full max-w-[17.35rem] mx-auto"></Button>
        </div>
    </div>
    <div class="w-full md:w-2/12">
        <Divider layout="vertical" class="!hidden md:!flex"><b>OR</b></Divider>
        <Divider layout="horizontal" class="!flex md:!hidden" align="center"><b>OR</b></Divider>
    </div>
    <div class="w-full md:w-5/12 flex items-center justify-center py-5">
        <Button label="Sign Up" icon="pi pi-user-plus" severity="success" class="w-full max-w-[17.35rem] mx-auto"></Button>
    </div>
</div>
```
Copy
## Accessibility [\#](https://primevue.org/divider/\#accessibility)
### Screen Reader
Divider uses a _separator_ role with _aria-orientation_ set to either "horizontal" or "vertical".
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Type
- Vertical
- Content
- Login
- Accessibility
# Divider API
API defines helper props, events and others for the PrimeVue Divider module.
## Divider [\#](https://primevue.org/divider/\#api.divider)
Divider is used to separate contents.
### Props [\#](https://primevue.org/divider/\#api.divider.props)
Defines valid properties in Divider component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| align | HintedString<"left" \| "right" \| "top" \| "bottom" \| "center"> | null | Alignment of the content. |  |
| layout | HintedString<"horizontal" \| "vertical"> | horizontal | Specifies the orientation, valid values are 'horizontal' and 'vertical'. |  |
| type | HintedString<"solid" \| "dashed" \| "dotted"> | solid | Border style type. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DividerPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/divider/\#api.divider.slots)
Defines valid slots in Divider slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default content slot. |  |
### Interfaces [\#](https://primevue.org/divider/\#api.divider.interfaces)
Defines the custom interfaces used by the module.
#### DividerPassThroughMethodOptions [\#](https://primevue.org/divider/\#api.divider.interfaces.DividerPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DividerProps](https://primevue.org/divider/#api.divider.interfaces.DividerProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### DividerPassThroughOptions [\#](https://primevue.org/divider/\#api.divider.interfaces.DividerPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [DividerPassThroughOptionType](https://primevue.org/divider/#api.divider.types.DividerPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| content | [DividerPassThroughOptionType](https://primevue.org/divider/#api.divider.types.DividerPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### DividerPassThroughAttributes [\#](https://primevue.org/divider/\#api.divider.interfaces.DividerPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/divider/\#api.divider.types)
Defines the custom types used by the module.
#### DividerPassThroughOptionType [\#](https://primevue.org/divider/\#api.divider.types.DividerPassThroughOptionType)
| values |
| --- |
| DividerPassThroughAttributes \| (options: DividerPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### DividerEmits [\#](https://primevue.org/divider/\#api.divider.types.DividerEmits)
| values |
| --- |
| EmitFn<DividerEmitsOptions> |
- Divider
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue RadioButton Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# RadioButton
RadioButton is an extension to standard radio button element with theming.
## Import [\#](https://primevue.org/radiobutton/\#import)
```javascript
import RadioButton from 'primevue/radiobutton';
```
Copy
## Group [\#](https://primevue.org/radiobutton/\#group)
RadioButton is used with the _v-model_ property for two-way value binding.
Cheese
Mushroom
Pepper
Onion
```markup
<div class="flex flex-wrap gap-4">
    <div class="flex items-center gap-2">
        <RadioButton v-model="ingredient" inputId="ingredient1" name="pizza" value="Cheese" />
        <label for="ingredient1">Cheese</label>
    </div>
    <div class="flex items-center gap-2">
        <RadioButton v-model="ingredient" inputId="ingredient2" name="pizza" value="Mushroom" />
        <label for="ingredient2">Mushroom</label>
    </div>
    <div class="flex items-center gap-2">
        <RadioButton v-model="ingredient" inputId="ingredient3" name="pizza" value="Pepper" />
        <label for="ingredient3">Pepper</label>
    </div>
    <div class="flex items-center gap-2">
        <RadioButton v-model="ingredient" inputId="ingredient4" name="pizza" value="Onion" />
        <label for="ingredient4">Onion</label>
    </div>
</div>
```
Copy
## Forms [\#](https://primevue.org/radiobutton/\#forms)
RadioButton integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Cheese
Mushroom
Pepper
Onion
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col gap-2">
        <RadioButtonGroup name="ingredient" class="flex flex-wrap gap-4">
            <div class="flex items-center gap-2">
                <RadioButton inputId="cheese" value="Cheese" />
                <label for="cheese">Cheese</label>
            </div>
            <div class="flex items-center gap-2">
                <RadioButton inputId="mushroom" value="Mushroom" />
                <label for="mushroom">Mushroom</label>
            </div>
            <div class="flex items-center gap-2">
                <RadioButton inputId="pepper" value="Pepper" />
                <label for="pepper">Pepper</label>
            </div>
            <div class="flex items-center gap-2">
                <RadioButton inputId="onion" value="Onion" />
                <label for="onion">Onion</label>
            </div>
        </RadioButtonGroup>
        <Message v-if="$form.ingredient?.invalid" severity="error" size="small" variant="simple">{{ $form.ingredient.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Dynamic [\#](https://primevue.org/radiobutton/\#dynamic)
RadioButtons can be generated using a list of values.
Accounting
Marketing
Production
Research
```markup
<div v-for="category in categories" :key="category.key" class="flex items-center gap-2">
    <RadioButton v-model="selectedCategory" :inputId="category.key" name="dynamic" :value="category.name" />
    <label :for="category.key">{{ category.name }}</label>
</div>
```
Copy
## Filled [\#](https://primevue.org/radiobutton/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
```markup
<RadioButton v-model="value" value="1" variant="filled" />
```
Copy
## Sizes [\#](https://primevue.org/radiobutton/\#sizes)
RadioButton provides _small_ and _large_ sizes as alternatives to the base.
Small
Normal
Large
```markup
<div class="flex flex-wrap gap-4">
    <div class="flex items-center gap-2">
        <RadioButton v-model="size" inputId="size_small" name="size" value="Small" size="small" />
        <label for="size_small" class="text-sm">Small</label>
    </div>
    <div class="flex items-center gap-2">
        <RadioButton v-model="size" inputId="size_normal" name="size" value="Normal" />
        <label for="size_normal">Normal</label>
    </div>
    <div class="flex items-center gap-2">
        <RadioButton v-model="size" inputId="size_large" name="size" value="Large" size="large" />
        <label for="size_large" class="text-lg">Large</label>
    </div>
</div>
```
Copy
## Invalid [\#](https://primevue.org/radiobutton/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
```markup
<RadioButton v-model="value" value="1" :invalid="value === null" />
```
Copy
## Disabled [\#](https://primevue.org/radiobutton/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
```markup
<RadioButton v-model="value" :value="1" disabled />
<RadioButton v-model="value" :value="2" disabled />
```
Copy
## Accessibility [\#](https://primevue.org/radiobutton/\#accessibility)
### Screen Reader
RadioButton component uses a hidden native radio button element internally that is only visible to screen readers. Value to describe the component can either be provided via _label_ tag combined with _id_ prop or using _aria-labelledby_, _aria-label_ props.
```markup
<label for="rb1">One</label>
<RadioButton inputId="rb1" />
<span id="rb2">Two</span>
<RadioButton aria-labelledby="rb2" />
<RadioButton aria-label="Three" />
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the checked radio button, if there is none within the group then first radio button receives the focus. |
| _left arrow_ _up arrow_ | Moves focus to the previous radio button, if there is none then last radio button receives the focus. |
| _right arrow_ _down arrow_ | Moves focus to the next radio button, if there is none then first radio button receives the focus. |
| _space_ | If the focused radio button is unchecked, changes the state to checked. |
- Import
- Group
- Forms
- Dynamic
- Filled
- Sizes
- Invalid
- Disabled
- Accessibility
# RadioButton API
API defines helper props, events and others for the PrimeVue RadioButton module.
## RadioButton [\#](https://primevue.org/radiobutton/\#api.radiobutton)
RadioButton is an extension to standard radio button element with theming.
### Props [\#](https://primevue.org/radiobutton/\#api.radiobutton.props)
Defines valid properties in RadioButton component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | any | null | Value of the checkbox. |  |
| modelValue | any | null | Value binding of the checkbox. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | Name of the input element. |  |
| binary | boolean | null | Allows to select a boolean value. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| readonly | boolean | null | When present, it specifies that an input field is read-only. |  |
| tabindex | number | null | Index of the element in tabbing order. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<RadioButtonPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/radiobutton/\#api.radiobutton.emits)
Defines valid emits in RadioButton component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: Event | void | Callback to invoke on radio button value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
### Interfaces [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces)
Defines the custom interfaces used by the module.
#### RadioButtonPassThroughMethodOptions [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces.RadioButtonPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [RadioButtonProps](https://primevue.org/radiobutton/#api.radiobutton.interfaces.RadioButtonProps) | null | Defines valid properties. |
| state | [RadioButtonState](https://primevue.org/radiobutton/#api.radiobutton.interfaces.RadioButtonState) | null | Defines current inline state. |
| context | [RadioButtonContext](https://primevue.org/radiobutton/#api.radiobutton.interfaces.RadioButtonContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### RadioButtonPassThroughOptions [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces.RadioButtonPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [RadioButtonPassThroughOptionType](https://primevue.org/radiobutton/#api.radiobutton.types.RadioButtonPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| input | [RadioButtonPassThroughOptionType](https://primevue.org/radiobutton/#api.radiobutton.types.RadioButtonPassThroughOptionType) | null | Used to pass attributes to the input's DOM element. |
| box | [RadioButtonPassThroughOptionType](https://primevue.org/radiobutton/#api.radiobutton.types.RadioButtonPassThroughOptionType) | null | Used to pass attributes to the box's DOM element. |
| icon | [RadioButtonPassThroughOptionType](https://primevue.org/radiobutton/#api.radiobutton.types.RadioButtonPassThroughOptionType) | null | Used to pass attributes to the icon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### RadioButtonPassThroughAttributes [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces.RadioButtonPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### RadioButtonState [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces.RadioButtonState)
Defines current inline state in RadioButton component.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### RadioButtonContext [\#](https://primevue.org/radiobutton/\#api.radiobutton.interfaces.RadioButtonContext)
Defines current options in RadioButton component.
| name | type | default | description |
| --- | --- | --- | --- |
| checked | boolean | false | Current checked state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |
## Types [\#](https://primevue.org/radiobutton/\#api.radiobutton.types)
Defines the custom types used by the module.
#### RadioButtonPassThroughOptionType [\#](https://primevue.org/radiobutton/\#api.radiobutton.types.RadioButtonPassThroughOptionType)
| values |
| --- |
| RadioButtonPassThroughAttributes \| (options: RadioButtonPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### RadioButtonEmits [\#](https://primevue.org/radiobutton/\#api.radiobutton.types.RadioButtonEmits)
| values |
| --- |
| EmitFn<RadioButtonEmitsOptions> |
- RadioButton
  - Props
  - Emits
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Menubar Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Menubar
Menubar also known as Navbar, is a horizontal menu component.
## Import [\#](https://primevue.org/menubar/\#import)
```javascript
import Menubar from 'primevue/menubar';
```
Copy
## Basic [\#](https://primevue.org/menubar/\#basic)
Menubar requires a collection of menuitems as its _model_.
- Home
- Features
- Projects
  - Components
  - Blocks
  - UI Kit
  - Templates
    - Apollo
    - Ultima
- Contact
```markup
<Menubar :model="items" />
```
Copy
## Advanced [\#](https://primevue.org/menubar/\#advanced)
Menubar is a simple horizontal navigation component, for advanced use cases consider [Marketing](https://primeblocks.org/marketing/navbar) and [Application](https://primeblocks.org/application/navbar) NavBars in PrimeBlocks or [templates](https://primevue.org/templates) with horizontal menus in application templates.
## Template [\#](https://primevue.org/menubar/\#template)
Menubar offers item customization with the _item_ template that receives the menuitem instance from the model as a parameter. Additional slots named _start_ and _end_ are provided to embed content before or after the menu.
- Home
- Projects3
  - CoreâŒ˜+S
  - BlocksâŒ˜+B
  - UI KitâŒ˜+U
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
```markup
<Menubar :model="items">
    <template #start>
        <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-8">
            <path d="..." fill="var(--p-primary-color)" />
            <path d="..." fill="var(--p-text-color)" />
        </svg>
    </template>
    <template #item="{ item, props, hasSubmenu, root }">
        <a v-ripple class="flex items-center" v-bind="props.action">
            <span>{{ item.label }}</span>
            <Badge v-if="item.badge" :class="{ 'ml-auto': !root, 'ml-2': root }" :value="item.badge" />
            <span v-if="item.shortcut" class="ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1">{{ item.shortcut }}</span>
            <i v-if="hasSubmenu" :class="['pi pi-angle-down ml-auto', { 'pi-angle-down': root, 'pi-angle-right': !root }]"></i>
        </a>
    </template>
    <template #end>
        <div class="flex items-center gap-2">
            <InputText placeholder="Search" type="text" class="w-32 sm:w-auto" />
            <Avatar image="/images/avatar/amyelsner.png" shape="circle" />
        </div>
    </template>
</Menubar>
```
Copy
## Command [\#](https://primevue.org/menubar/\#command)
The _command_ property defines the callback to run when an item is activated by click or a key event.
- File
  - New
  - Print
- Search
- Sync
  - Import
  - Export
```markup
<Menubar :model="items" />
<Toast />
```
Copy
## Router [\#](https://primevue.org/menubar/\#router)
Items with navigation are defined with templating to be able to use a router link component, an external link or programmatic navigation.
- Router
  - [Styled](https://primevue.org/theming/styled)
  - [Unstyled](https://primevue.org/theming/unstyled)
- Programmatic
- External
  - [Vue.js](https://vuejs.org/)
  - [Vite.js](https://vitejs.dev/)
```markup
<Menubar :model="items">
    <template #item="{ item, props, hasSubmenu }">
        <router-link v-if="item.route" v-slot="{ href, navigate }" :to="item.route" custom>
            <a v-ripple :href="href" v-bind="props.action" @click="navigate">
                <span :class="item.icon" />
                <span>{{ item.label }}</span>
            </a>
        </router-link>
        <a v-else v-ripple :href="item.url" :target="item.target" v-bind="props.action">
            <span :class="item.icon" />
            <span>{{ item.label }}</span>
            <span v-if="hasSubmenu" class="pi pi-fw pi-angle-down" />
        </a>
    </template>
</Menubar>
```
Copy
## Accessibility [\#](https://primevue.org/menubar/\#accessibility)
### Screen Reader
Menubar component uses the _menubar_ role and the value to describe the menu can either be provided with _aria-labelledby_ or _aria-label_ props. Each list item has a _menuitem_ role with _aria-label_ referring to the label of the item and _aria-disabled_ defined if the item is disabled. A submenu within a MenuBar uses the _menu_ role with an _aria-labelledby_ defined as the id of the submenu root menuitem label. In addition, menuitems that open a submenu have _aria-haspopup_, _aria-expanded_ and _aria-controls_ to define the relation between the item and the submenu.
In mobile viewports, a menu icon appears with a _button_ role along with _aria-haspopup_, _aria-expanded_ and _aria-controls_ to manage the relation between the overlay menubar and the button. The value to describe the button can be defined _aria-label_ or _aria-labelledby_ specified using _buttonProps_, by default _navigation_ key of the _aria_ property from the [locale](https://primevue.org/configuration/#locale) API as the _aria-label_.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Add focus to the first item if focus moves in to the menu. If the focus is already within the menu, focus moves to the next focusable item in the page tab sequence. |
| _shift_ \+ _tab_ | Add focus to the first item if focus moves in to the menu. If the focus is already within the menu, focus moves to the previous focusable item in the page tab sequence. |
| _enter_ | If menuitem has a submenu, toggles the visibility of the submenu otherwise activates the menuitem and closes all open overlays. |
| _space_ | If menuitem has a submenu, toggles the visibility of the submenu otherwise activates the menuitem and closes all open overlays. |
| _escape_ | If focus is inside a popup submenu, closes the submenu and moves focus to the root item of the closed submenu. |
| _down arrow_ | If focus is on a root element, open a submenu and moves focus to the first element in the submenu otherwise moves focus to the next menuitem within the submenu. |
| _up arrow_ | If focus is on a root element, opens a submenu and moves focus to the last element in the submenu otherwise moves focus to the previous menuitem within the submenu. |
| _right arrow_ | If focus is on a root element, moves focus to the next menuitem otherwise opens a submenu if there is one available and moves focus to the first item. |
| _left arrow_ | If focus is on a root element, moves focus to the previous menuitem otherwise closes a submenu and moves focus to the root item of the closed submenu. |
| _home_ | Moves focus to the first menuitem within the submenu. |
| _end_ | Moves focus to the last menuitem within the submenu. |
| _any printable character_ | Moves focus to the menuitem whose label starts with the characters being typed. |
- Import
- Basic
- Advanced
- Template
- Command
- Router
- Accessibility
# Menubar API
API defines helper props, events and others for the PrimeVue Menubar module.
## Menubar [\#](https://primevue.org/menubar/\#api.menubar)
Menubar is a horizontal menu component.
### Props [\#](https://primevue.org/menubar/\#api.menubar.props)
Defines valid properties in Menubar component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | MenuItem\[\] | null | An array of menuitems. |  |
| breakpoint | string | 960px | The breakpoint to define the maximum width boundary. |  |
| buttonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the menu button. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying input element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<MenubarPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/menubar/\#api.menubar.slots)
Defines valid slots in Menubar component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| start |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom start template. |  |
| end |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom end template. |  |
| item | scope: {<br>item: MenuItem, // Menuitem instancelabel: undefined, // Label property of the menuitemprops: MenubarRouterBindProps, // Binding properties of the menuitemroot: boolean, // State of the roothasSubmenu: boolean, // Whether or not there is a submenu<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item template. |  |
| menubutton | scope: {<br>id: string, // Current id state as a stringclass: string, // Style class of componenttoggleCallback: () â‡’ void, // Toggle event<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| button | scope: {<br>id: string, // Current id state as a stringclass: string, // Style class of componenttoggleCallback: () â‡’ void, // Toggle event<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom menu button template on responsive mode. |  |
| menubuttonicon |  | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| buttonicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom menu button icon template on responsive mode. |  |
| submenuicon | scope: {<br>root: boolean, // Whether item is rootactive: boolean, // Whether item is active<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom submenu icon template. |  |
| itemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item icon template. |  |
### Interfaces [\#](https://primevue.org/menubar/\#api.menubar.interfaces)
Defines the custom interfaces used by the module.
#### MenubarPassThroughMethodOptions [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [MenubarProps](https://primevue.org/menubar/#api.menubar.interfaces.MenubarProps) | null | Defines valid properties. |
| state | [MenubarState](https://primevue.org/menubar/#api.menubar.interfaces.MenubarState) | null | Defines current inline state. |
| context | [MenubarContext](https://primevue.org/menubar/#api.menubar.interfaces.MenubarContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### MenubarPassThroughOptions [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| rootList | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the root list's DOM element. |
| item | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| itemContent | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the item content's DOM element. |
| itemLink | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the item link's DOM element. |
| itemIcon | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the item icon's DOM element. |
| itemLabel | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the item label's DOM element. |
| submenuIcon | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the submenu icon's DOM element. |
| separator | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the separator's DOM element. |
| button | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the mobile menu button's DOM element. |
| buttonIcon | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the mobile menu button icon's DOM element. |
| submenu | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the submenu's DOM element. |
| start | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the start of the component. |
| end | [MenubarPassThroughOptionType](https://primevue.org/menubar/#api.menubar.types.MenubarPassThroughOptionType) | null | Used to pass attributes to the end of the component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### MenubarPassThroughAttributes [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### MenubarFocusedItemInfo [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarFocusedItemInfo)
Defines focused item info
| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Active item index |
| level | number | null | Active item level |
| parentKey | string | null | Parent key info |
#### MenubarState [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarState)
Defines current inline state in Menubar component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| mobileActive | boolean | false | Current mobile menu active state as a boolean. |
| focused | boolean | false | Current focus state as a boolean. |
| focusedItemInfo | [MenubarFocusedItemInfo](https://primevue.org/menubar/#api.menubar.interfaces.MenubarFocusedItemInfo) | null | Current focused item info. |
| activeItemPath | [MenubarFocusedItemInfo\[\]](https://primevue.org/menubar/#api.menubar.interfaces.MenubarFocusedItemInfo[]) | null | Active item path. |
#### MenubarContext [\#](https://primevue.org/menubar/\#api.menubar.interfaces.MenubarContext)
Defines current options in Menubar component.
| name | type | default | description |
| --- | --- | --- | --- |
| item | any | null | Current menuitem |
| index | number | null | Current index of the menuitem. |
| active | boolean | false | Current active state of menuitem as a boolean. |
| focused | boolean | false | Current focused state of menuitem as a boolean. |
| disabled | boolean | false | Current disabled state of menuitem as a boolean. |
| level | number | null | Current level of the menuitem. |
## Types [\#](https://primevue.org/menubar/\#api.menubar.types)
Defines the custom types used by the module.
#### MenubarPassThroughOptionType [\#](https://primevue.org/menubar/\#api.menubar.types.MenubarPassThroughOptionType)
| values |
| --- |
| MenubarPassThroughAttributes \| (options: MenubarPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### MenubarEmits [\#](https://primevue.org/menubar/\#api.menubar.types.MenubarEmits)
| values |
| --- |
| EmitFn<MenubarEmitsOptions> |
## MenuItem [\#](https://primevue.org/menubar/\#api.menuitem)
PrimeVue menu components share a common api to specify the menuitems and submenus.
### Events [\#](https://primevue.org/menubar/\#api.menuitem.events)
Defines the custom events used by the component's emit.
#### MenuItemCommandEvent [\#](https://primevue.org/menubar/\#api.menuitem.events.MenuItemCommandEvent)
Custom command event.
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| item | [MenuItem](https://primevue.org/menubar/#api.options.MenuItem) | Menuitem instance. |
| \[key: string\] | any |  |
### Options [\#](https://primevue.org/menubar/\#api.options.MenuItem)
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string \| Function | null | Property name or getter function to use as the label of an item. |  |
| icon | string | null | Icon of the item. |  |
| command | Function | null |  |  |
| url | string | null | External link to navigate when item is clicked. |  |
| items | MenuItem\[\] | null | An array of children menuitems. |  |
| disabled | boolean \| Function | false | A boolean or a function to return a boolean to specify if the item is disabled. |  |
| visible | boolean \| Function | true | A boolean or a function to return a boolean to specify if the item is visible. |  |
| target | string | null | Specifies where to open the linked document. |  |
| separator | boolean | false | Defines the item as a separator. |  |
| style | any | null | Inline style of the menuitem. |  |
| class | any | null | Style class of the menuitem. |  |
| key | string | null | Unique identifier of an item. |  |
| \[key: string\] | any | null |  |  |
- Menubar
  - Props
  - Slots
  - Interfaces
  - Types
- MenuItem
  - Events
  - Options
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Speed Dial Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Speed Dial
When pressed, a floating action button can display multiple primary actions that can be performed on a page.
## Import [\#](https://primevue.org/speeddial/\#import)
```javascript
import SpeedDial from 'primevue/speeddial';
```
Copy
## Linear [\#](https://primevue.org/speeddial/\#linear)
SpeedDial items are defined with the _model_ property based on MenuModel API. Default orientation of the items is linear and _direction_ property is used to define the position of the items related to the button.
```markup
<SpeedDial :model="items" direction="up" style="position: absolute; left: calc(50% - 2rem); bottom: 0" />
<SpeedDial :model="items" direction="down" style="position: absolute; left: calc(50% - 2rem); top: 0" />
<SpeedDial :model="items" direction="left" style="position: absolute; top: calc(50% - 2rem); right: 0" />
<SpeedDial :model="items" direction="right" style="position: absolute; top: calc(50% - 2rem); left: 0" />
```
Copy
## Circle [\#](https://primevue.org/speeddial/\#circle)
Items can be displayed around the button when _type_ is set to _circle_. Additional _radius_ property defines the radius of the circle.
```markup
<SpeedDial :model="items" :radius="80" type="circle" :style="{ position: 'absolute' }" :buttonProps="{ severity: 'warn', rounded: true }" />
```
Copy
## Semi Circle [\#](https://primevue.org/speeddial/\#semi-circle)
When _type_ is defined as _semi-circle_, items are displayed in a half-circle around the button.
```markup
<SpeedDial :model="items" :radius="80" type="semi-circle" direction="up" style="position: absolute; left: calc(50% - 2rem); bottom: 0" />
<SpeedDial :model="items" :radius="80" type="semi-circle" direction="down" style="position: absolute; left: calc(50% - 2rem); top: 0" />
<SpeedDial :model="items" :radius="80" type="semi-circle" direction="left" style="position: absolute; top: calc(50% - 2rem); right: 0" />
<SpeedDial :model="items" :radius="80" type="semi-circle" direction="right" style="position: absolute; top: calc(50% - 2rem); left: 0" />
```
Copy
## Quarter Circle [\#](https://primevue.org/speeddial/\#quarter-circle)
Setting _type_ as _quarter-circle_ displays the items at one of four corners of a button based on the _direction_.
```markup
<SpeedDial :model="items" :radius="120" type="quarter-circle" direction="up-left" :style="{ position: 'absolute', right: 0, bottom: 0 }" />
<SpeedDial :model="items" :radius="120" type="quarter-circle" direction="up-right" :style="{ position: 'absolute', left: 0, bottom: 0 }" />
<SpeedDial :model="items" :radius="120" type="quarter-circle" direction="down-left" :style="{ position: 'absolute', right: 0, top: 0 }" />
<SpeedDial :model="items" :radius="120" type="quarter-circle" direction="down-right" :style="{ position: 'absolute', left: 0, top: 0 }" />
```
Copy
## Tooltip [\#](https://primevue.org/speeddial/\#tooltip)
Items display a tooltip on hover when a standalone [Tooltip](https://primevue.org/tooltip/) is present with a target that matches the items.
```markup
<SpeedDial :model="items" direction="up" :style="{ position: 'absolute', right: 0, bottom: 0 }" :buttonProps="{ severity: 'help', rounded: true }" :tooltipOptions="{ position: 'left' }" />
<SpeedDial :model="items" direction="up" :style="{ position: 'absolute', left: 0, bottom: 0 }" :buttonProps="{ severity: 'danger', rounded: true }" :tooltipOptions="{ position: 'right' }" />
```
Copy
## Mask [\#](https://primevue.org/speeddial/\#mask)
Adding _mask_ property displays a modal layer behind the popup items.
```markup
<SpeedDial :model="items" direction="up" mask :style="{ position: 'absolute', right: '1rem', bottom: '1rem' }" />
```
Copy
## Template [\#](https://primevue.org/speeddial/\#template)
SpeedDial offers item customization with the _item_ template that receives the menuitem instance from the model as a parameter. The button has its own _button_ template, additional slot named _icon_ is provided to embed icon content for default button.
- Add
- Update
- Delete
- Upload
- Website
```markup
<SpeedDial :model="items" direction="up" :transitionDelay="80" :style="{ position: 'absolute' }" pt:menuitem="m-2">
    <template #button="{ toggleCallback }">
        <Button outlined class="border" @click="toggleCallback">
            <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="..." fill="var(--p-primary-color)" />
                <path d="..." fill="var(--p-text-color)" />
            </svg>
        </Button>
    </template>
    <template #item="{ item, toggleCallback }">
        <div class="flex flex-col items-center justify-between gap-2 p-2 border rounded border-surface-200 dark:border-surface-700 w-20 cursor-pointer" @click="toggleCallback">
            <span :class="item.icon" />
            <span>
                {{ item.label }}
            </span>
        </div>
    </template>
</SpeedDial>
```
Copy
## Accessibility [\#](https://primevue.org/speeddial/\#accessibility)
### Screen Reader
SpeedDial component renders a native button element that implicitly includes any passed prop. Text to describe the button can be defined with the _aria-labelledby_ or _aria-label_ props. Addititonally the button includes includes _aria-haspopup_, _aria-expanded_ for states along with _aria-controls_ to define the relation between the popup and the button.
The popup overlay uses _menu_ role on the list and each action item has a _menuitem_ role with an _aria-label_ as the menuitem label. The id of the menu refers to the _aria-controls_ of the button.
```markup
<SpeedDial aria-label="Options" />
```
Copy
### Menu Button Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Toggles the visibility of the menu. |
| _space_ | Toggles the visibility of the menu. |
| _down arrow_ | Opens the menu and moves focus to the first item. |
| _up arrow_ | Opens the menu and moves focus to the last item. |
| _right arrow_ | Opens the menu and moves focus to the last item. |
| _left arrow_ | Opens the menu and moves focus to the first item. |
| _escape_ | Closes the menu. |
### Menu Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Actives the menuitem, closes the menu and sets focus on the menu button. |
| _space_ | Actives the menuitem, closes the menu and sets focus on the menu button. |
| _escape_ | Closes the menu and sets focus on the menu button. |
| _arrow keys_ | Navigates between the menu items. |
| _home_ | Moves focus to the first item. |
| _end_ | Moves focus to the last item. |
- Import
- Linear
- Circle
- Semi Circle
- Quarter Circle
- Tooltip
- Mask
- Template
- Accessibility
# Speed Dial API
API defines helper props, events and others for the PrimeVue Speed Dial module.
## SpeedDial [\#](https://primevue.org/speeddial/\#api.speeddial)
When pressed, a floating action button can display multiple primary actions that can be performed on a page.
### Props [\#](https://primevue.org/speeddial/\#api.speeddial.props)
Defines valid properties in SpeedDial component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | MenuItem\[\] | null | MenuModel instance to define the action items. |  |
| visible | boolean | false | Specifies the visibility of the overlay. |  |
| direction | HintedString<"left" \| "right" \| "up" \| "down" \| "up-left" \| "up-right" \| "down-left" \| "down-right"> | up | Specifies the opening direction of actions. |  |
| transitionDelay | number | 30 | Transition delay step for each action item. |  |
| type | HintedString<"circle" \| "linear" \| "semi-circle" \| "quarter-circle"> | linear | Specifies the opening type of actions. |  |
| radius | number | 0 | Radius for \*circle types. |  |
| mask | boolean | false | Whether to show a mask element behind the speeddial. |  |
| disabled | boolean | false | Whether the component is disabled. |  |
| hideOnClickOutside | boolean | true | Whether the actions close when clicked outside. |  |
| buttonClass | any | null | Style class of the button element. |  |
| maskStyle | any | null | Inline style of the mask element. |  |
| maskClass | string | null | Style class of the mask element. |  |
| showIcon | string | null | Show icon of the button element. |  |
| hideIcon | string | null | Hide icon of the button element. |  |
| rotateAnimation | boolean | true | Defined to rotate showIcon when hideIcon is not present. |  |
| class | any | null | Style class of the element. |  |
| style | any | null | Inline style of the element. |  |
| tooltipOptions | [SpeedDialTooltipOptions](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialTooltipOptions) | null | Whether to display the tooltip on items. The modifiers of Tooltip can be used like an object in it. Valid keys are 'event' and 'position'. |  |
| buttonProps | object | null | Used to pass all properties of the ButtonProps to the button component. |  |
| actionButtonProps | object | null | Used to pass all properties of the ButtonProps to the item component. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive list element. |  |
| ariaLabelledby | string | null | Identifier of the underlying list element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SpeedDialPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/speeddial/\#api.speeddial.emits)
Defines valid emits in SpeedDial component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| click | event: Event | void | Fired when the button element clicked. |  |
| show |  | void | Fired when the actions are visible. |  |
| hide |  | void | Fired when the actions are hidden. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
### Slots [\#](https://primevue.org/speeddial/\#api.speeddial.slots)
Defines valid slots in SpeedDial component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| item | scope: {<br>item: MenuItem, // Menuitem instanceonClick: (event: Event) â‡’ void, // Item click functiontoggleCallback: (event: Event) â‡’ void, // Button click function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each item. |  |
| button | scope: {<br>visible: boolean, // Visible state of the itemtoggleCallback: (event: Event) â‡’ void, // Button click function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom button template. |  |
| icon | scope: {<br>visible: boolean, // Visible state of the item<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| itemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the icon template<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
### Interfaces [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces)
Defines the custom interfaces used by the module.
#### SpeedDialPassThroughMethodOptions [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SpeedDialProps](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialProps) | null | Defines valid properties. |
| state | [SpeedDialState](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialState) | null | Defines current inline state. |
| context | [SpeedDialContext](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### SpeedDialSharedPassThroughMethodOptions [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [SpeedDialProps](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialProps) | null | Defines valid properties. |
| state | [SpeedDialState](https://primevue.org/speeddial/#api.speeddial.interfaces.SpeedDialState) | null | Defines current inline state. |
#### SpeedDialPassThroughOptions [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [SpeedDialPassThroughOptionType](https://primevue.org/speeddial/#api.speeddial.types.SpeedDialPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcButton | any | null | Used to pass attributes to the Button component. |
| list | [SpeedDialPassThroughOptionType](https://primevue.org/speeddial/#api.speeddial.types.SpeedDialPassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| item | [SpeedDialPassThroughOptionType](https://primevue.org/speeddial/#api.speeddial.types.SpeedDialPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| pcAction | any | null | Used to pass attributes to the action's Button component. |
| actionIcon | [SpeedDialPassThroughOptionType](https://primevue.org/speeddial/#api.speeddial.types.SpeedDialPassThroughOptionType) | null | Used to pass attributes to the action icon's DOM element. |
| mask | [SpeedDialPassThroughOptionType](https://primevue.org/speeddial/#api.speeddial.types.SpeedDialPassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### SpeedDialPassThroughAttributes [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### SpeedDialState [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialState)
Defines current inline state in SpeedDial component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | List of items' id. |
| d\_visible | boolean | false | Current visible state as a boolean. |
| isItemClicked | boolean | false | Current click state of component as a boolean. |
| focused | boolean | false | Current focus state as a boolean. |
| focusedOptionIndex | number | -1 | Current focused option index as a number. |
#### SpeedDialContext [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialContext)
Defines current options in SpeedDial component.
| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | false | Current active state of menuitem as a boolean. |
| hidden | boolean | false | Current hidden state of menuitem as a boolean. |
#### SpeedDialTooltipOptions [\#](https://primevue.org/speeddial/\#api.speeddial.interfaces.SpeedDialTooltipOptions)
Defines tooltip options.
| name | type | default | description |
| --- | --- | --- | --- |
| event | undefined \| HintedString<"focus" \| "hover"> | null | Event to show the tooltip, valid values are hover and focus. |
| position | undefined \| HintedString<"left" \| "right" \| "top" \| "bottom"> | bottom | Position of element. |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/speeddial/\#api.speeddial.types)
Defines the custom types used by the module.
#### SpeedDialPassThroughOptionType [\#](https://primevue.org/speeddial/\#api.speeddial.types.SpeedDialPassThroughOptionType)
| values |
| --- |
| SpeedDialPassThroughAttributes \| (options: SpeedDialPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### SpeedDialEmits [\#](https://primevue.org/speeddial/\#api.speeddial.types.SpeedDialEmits)
| values |
| --- |
| EmitFn<SpeedDialEmitsOptions> |
- SpeedDial
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Drawer Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Drawer
Drawer is a container component displayed as an overlay.
## Import [\#](https://primevue.org/drawer/\#import)
```javascript
import Drawer from 'primevue/drawer';
```
Copy
## Basic [\#](https://primevue.org/drawer/\#basic)
Drawer is used as a container and visibility is controlled with a binding to _visible_.
```markup
<div class="card flex justify-center">
    <Drawer v-model:visible="visible" header="Drawer">
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
    </Drawer>
    <Button icon="pi pi-arrow-right" @click="visible = true" />
</div>
```
Copy
## Position [\#](https://primevue.org/drawer/\#position)
Drawer location is configured with the _position_ property that can take _left_, _right_, _top_ and _bottom_ as valid values.
```markup
<div class="flex gap-2 justify-center">
    <Button icon="pi pi-arrow-right" @click="visibleLeft = true" />
    <Button icon="pi pi-arrow-left" @click="visibleRight = true" />
    <Button icon="pi pi-arrow-down" @click="visibleTop = true" />
    <Button icon="pi pi-arrow-up" @click="visibleBottom = true" />
</div>
<Drawer v-model:visible="visibleLeft" header="Left Drawer">
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
</Drawer>
<Drawer v-model:visible="visibleRight" header="Right Drawer" position="right">
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
</Drawer>
<Drawer v-model:visible="visibleTop" header="Top Drawer" position="top" style="height: auto">
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
</Drawer>
<Drawer v-model:visible="visibleBottom" header="Bottom Drawer" position="bottom" style="height: auto">
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
</Drawer>
```
Copy
## Size [\#](https://primevue.org/drawer/\#size)
Drawer dimension can be defined with _style_ or _class_ properties, this responsive example utilizes Tailwind.
```markup
<div class="card flex justify-center">
    <Drawer v-model:visible="visible" header="Drawer" class="!w-full md:!w-80 lg:!w-[30rem]">
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
    </Drawer>
    <Button icon="pi pi-arrow-right" @click="visible = true" />
</div>
```
Copy
## Full Screen [\#](https://primevue.org/drawer/\#fullscreen)
The full screen mode is enabled when _position_ property is set as _full_.
```markup
<div class="card flex justify-center">
    <Drawer v-model:visible="visible" header="Drawer" position="full">
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
    </Drawer>
    <Button icon="pi pi-window-maximize" @click="visible = true" />
</div>
```
Copy
## Template [\#](https://primevue.org/drawer/\#template)
Custom content at the header and footer sections is displayed with templating.
```markup
<Drawer v-model:visible="visible">
    <template #header>
        <div class="flex items-center gap-2">
            <Avatar image="/images/avatar/amyelsner.png" shape="circle" />
            <span class="font-bold">Amy Elsner</span>
        </div>
    </template>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
    <template #footer>
        <div class="flex items-center gap-2">
            <Button label="Account" icon="pi pi-user" class="flex-auto" outlined></Button>
            <Button label="Logout" icon="pi pi-sign-out" class="flex-auto" severity="danger" text></Button>
        </div>
    </template>
</Drawer>
<Button icon="pi pi-plus" @click="visible = true" />
```
Copy
## Headless [\#](https://primevue.org/drawer/\#headless)
Headless mode is enabled by defining a _container_ slot that lets you implement entire UI instead of the default elements.
```markup
<Drawer v-model:visible="visible">
    <template #container="{ closeCallback }">
        <div class="flex flex-col h-full">
            <div class="flex items-center justify-between px-6 pt-4 shrink-0">
                <span class="inline-flex items-center gap-2">
                    <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="..." fill="var(--p-primary-color)" />
                        <path d="..." fill="var(--p-text-color)" />
                    </svg>
                    <span class="font-semibold text-2xl text-primary">Your Logo</span>
                </span>
                <span>
                    <Button type="button" @click="closeCallback" icon="pi pi-times" rounded outlined></Button>
                </span>
            </div>
            <div class="overflow-y-auto">
                <ul class="list-none p-4 m-0">
                    <li>
                        <div
                            v-ripple
                            v-styleclass="{
                                selector: '@next',
                                enterFromClass: 'hidden',
                                enterActiveClass: 'animate-slidedown',
                                leaveToClass: 'hidden',
                                leaveActiveClass: 'animate-slideup'
                            }"
                            class="p-4 flex items-center justify-between text-surface-500 dark:text-surface-400 cursor-pointer p-ripple"
                        >
                            <span class="font-medium">FAVORITES</span>
                            <i class="pi pi-chevron-down"></i>
                        </div>
                        <ul class="list-none p-0 m-0 overflow-hidden">
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-home mr-2"></i>
                                    <span class="font-medium">Dashboard</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-bookmark mr-2"></i>
                                    <span class="font-medium">Bookmarks</span>
                                </a>
                            </li>
                            <li>
                                <a
                                    v-ripple
                                    v-styleclass="{
                                        selector: '@next',
                                        enterFromClass: 'hidden',
                                        enterActiveClass: 'animate-slidedown',
                                        leaveToClass: 'hidden',
                                        leaveActiveClass: 'animate-slideup'
                                    }"
                                    class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple"
                                >
                                    <i class="pi pi-chart-line mr-2"></i>
                                    <span class="font-medium">Reports</span>
                                    <i class="pi pi-chevron-down ml-auto"></i>
                                </a>
                                <ul class="list-none py-0 pl-4 pr-0 m-0 hidden overflow-y-hidden transition-all duration-[400ms] ease-in-out">
                                    <li>
                                        <a
                                            v-ripple
                                            v-styleclass="{
                                                selector: '@next',
                                                enterFromClass: 'hidden',
                                                enterActiveClass: 'animate-slidedown',
                                                leaveToClass: 'hidden',
                                                leaveActiveClass: 'animate-slideup'
                                            }"
                                            class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple"
                                        >
                                            <i class="pi pi-chart-line mr-2"></i>
                                            <span class="font-medium">Revenue</span>
                                            <i class="pi pi-chevron-down ml-auto"></i>
                                        </a>
                                        <ul class="list-none py-0 pl-4 pr-0 m-0 hidden overflow-y-hidden transition-all duration-[400ms] ease-in-out">
                                            <li>
                                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                                    <i class="pi pi-table mr-2"></i>
                                                    <span class="font-medium">View</span>
                                                </a>
                                            </li>
                                            <li>
                                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                                    <i class="pi pi-search mr-2"></i>
                                                    <span class="font-medium">Search</span>
                                                </a>
                                            </li>
                                        </ul>
                                    </li>
                                    <li>
                                        <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                            <i class="pi pi-chart-line mr-2"></i>
                                            <span class="font-medium">Expenses</span>
                                        </a>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-users mr-2"></i>
                                    <span class="font-medium">Team</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-comments mr-2"></i>
                                    <span class="font-medium">Messages</span>
                                    <span class="inline-flex items-center justify-center ml-auto bg-primary text-primary-contrast rounded-full" style="min-width: 1.5rem; height: 1.5rem">3</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-calendar mr-2"></i>
                                    <span class="font-medium">Calendar</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-cog mr-2"></i>
                                    <span class="font-medium">Settings</span>
                                </a>
                            </li>
                        </ul>
                    </li>
                </ul>
                <ul class="list-none p-4 m-0">
                    <li>
                        <div
                            v-ripple
                            v-styleclass="{
                                selector: '@next',
                                enterFromClass: 'hidden',
                                enterActiveClass: 'animate-slidedown',
                                leaveToClass: 'hidden',
                                leaveActiveClass: 'animate-slideup'
                            }"
                            class="p-4 flex items-center justify-between text-surface-500 dark:text-surface-400 cursor-pointer p-ripple"
                        >
                            <span class="font-medium">APPLICATION</span>
                            <i class="pi pi-chevron-down"></i>
                        </div>
                        <ul class="list-none p-0 m-0 overflow-hidden">
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-folder mr-2"></i>
                                    <span class="font-medium">Projects</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-chart-bar mr-2"></i>
                                    <span class="font-medium">Performance</span>
                                </a>
                            </li>
                            <li>
                                <a v-ripple class="flex items-center cursor-pointer p-4 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                                    <i class="pi pi-cog mr-2"></i>
                                    <span class="font-medium">Settings</span>
                                </a>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
            <div class="mt-auto">
                <hr class="mb-4 mx-4 border-t border-0 border-surface-200 dark:border-surface-700" />
                <a v-ripple class="m-4 flex items-center cursor-pointer p-4 gap-2 rounded text-surface-700 hover:bg-surface-100 dark:text-surface-0 dark:hover:bg-surface-800 duration-150 transition-colors p-ripple">
                    <Avatar image="/images/avatar/amyelsner.png" shape="circle" />
                    <span class="font-bold">Amy Elsner</span>
                </a>
            </div>
        </div>
    </template>
</Drawer>
<Button icon="pi pi-bars" @click="visible = true" />
```
Copy
## Accessibility [\#](https://primevue.org/drawer/\#accessibility)
### Screen Reader
Drawer component uses _complementary_ role by default, since any attribute is passed to the root element aria role can be changed depending on your use case and additional attributes like _aria-labelledby_ can be added. In addition _aria-modal_ is added since focus is kept within the drawer when opened.
Trigger element also requires _aria-expanded_ and _aria-controls_ to be handled explicitly.
```markup
<Button label="Show" icon="pi pi-external-link" @click="visible = true" :aria-controls="visible ? 'sbar' : null" :aria-expanded="visible"/>
<Drawer id="sbar" v-model:visible="visible" role="region" >
    <p>Content</p>
</Drawer>
```
Copy
### Overlay Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element within the drawer. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element within the drawer. |
| _escape_ | Closes the dialog. |
### Close Button Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Closes the drawer. |
| _space_ | Closes the drawer. |
- Import
- Basic
- Position
- Size
- Full Screen
- Template
- Headless
- Accessibility
# Drawer API
API defines helper props, events and others for the PrimeVue Drawer module.
## Drawer [\#](https://primevue.org/drawer/\#api.drawer)
Drawer is a panel component displayed as an overlay at the edges of the screen.
### Props [\#](https://primevue.org/drawer/\#api.drawer.props)
Defines valid properties in Drawer component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| visible | boolean | false | Specifies the visibility of the dialog. |  |
| position | HintedString<"left" \| "right" \| "top" \| "bottom" \| "full"> | left | Specifies the position of the drawer. |  |
| header | string | null | Title content of the dialog. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| dismissable | boolean | true | Whether clicking outside closes the panel. |  |
| showCloseIcon | boolean | true | Whether to display a close icon inside the panel. |  |
| closeButtonProps | object | null | Used to pass the custom value to read for the button inside the component. |  |
| closeIcon | string | null | Icon to display in the drawer close button. |  |
| modal | boolean | true | Whether to a modal layer behind the drawer. |  |
| blockScroll | boolean | false | Whether background scroll should be blocked when drawer is visible. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DrawerPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/drawer/\#api.drawer.emits)
Defines valid emits in Drawer component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:visible | value: boolean | void | Emitted when the value changes. |  |
| show |  | void | Callback to invoke when drawer is shown. |  |
| before-hide |  | void | Callback to invoke before drawer gets hidden. |  |
| hide |  | void | Callback to invoke when drawer gets hidden. |  |
| after-hide |  | void | Callback to invoke after drawer is hidden. |  |
| after-show |  | void | Callback to invoke after drawer is shown. |  |
### Slots [\#](https://primevue.org/drawer/\#api.drawer.slots)
Defines valid slots in Drawer component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| header | scope: {<br>class: any, // Style class of the header title<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| closebutton | scope: {<br>closeCallback: () â‡’ void, // Close function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close button template. |  |
| closeicon | scope: {<br>class: any, // Style class of the close icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close icon template. |  |
| container | scope: {<br>closeCallback: () â‡’ void, // Close drawer function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
### Interfaces [\#](https://primevue.org/drawer/\#api.drawer.interfaces)
Defines the custom interfaces used by the module.
#### DrawerPassThroughMethodOptions [\#](https://primevue.org/drawer/\#api.drawer.interfaces.DrawerPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DrawerProps](https://primevue.org/drawer/#api.drawer.interfaces.DrawerProps) | null | Defines valid properties. |
| state | [DrawerState](https://primevue.org/drawer/#api.drawer.interfaces.DrawerState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### DrawerSharedPassThroughMethodOptions [\#](https://primevue.org/drawer/\#api.drawer.interfaces.DrawerSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [DrawerProps](https://primevue.org/drawer/#api.drawer.interfaces.DrawerProps) | null | Defines valid properties. |
| state | [DrawerState](https://primevue.org/drawer/#api.drawer.interfaces.DrawerState) | null | Defines current inline state. |
#### DrawerPassThroughOptions [\#](https://primevue.org/drawer/\#api.drawer.interfaces.DrawerPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| title | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the header content's DOM element. |
| pcCloseButton | any | null | Used to pass attributes to the close button's DOM element. |
| content | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| footer | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| mask | [DrawerPassThroughOptionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [DrawerPassThroughTransitionType](https://primevue.org/drawer/#api.drawer.types.DrawerPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### DrawerPassThroughAttributes [\#](https://primevue.org/drawer/\#api.drawer.interfaces.DrawerPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### DrawerState [\#](https://primevue.org/drawer/\#api.drawer.interfaces.DrawerState)
Defines current inline state in Drawer component.
| name | type | default | description |
| --- | --- | --- | --- |
| containerVisible | boolean | false | Current container visible state as a boolean. |
## Types [\#](https://primevue.org/drawer/\#api.drawer.types)
Defines the custom types used by the module.
#### DrawerPassThroughOptionType [\#](https://primevue.org/drawer/\#api.drawer.types.DrawerPassThroughOptionType)
| values |
| --- |
| DrawerPassThroughAttributes \| (options: DrawerPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### DrawerPassThroughTransitionType [\#](https://primevue.org/drawer/\#api.drawer.types.DrawerPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: DrawerPassThroughMethodOptions) => TransitionProps \| undefined |
#### DrawerEmits [\#](https://primevue.org/drawer/\#api.drawer.types.DrawerEmits)
| values |
| --- |
| EmitFn<DrawerEmitsOptions> |
- Drawer
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Inplace Editing Component
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Inplace
Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.
## Import [\#](https://primevue.org/inplace/\#import)
```
import Inplace from 'primevue/inplace';
```
## Basic [\#](https://primevue.org/inplace/\#basic)
_Inplace_ component requires _display_ and _content_ templates to define the content of each state.
View Content
```
<Inplace>
    <template #display> View Content </template>
    <template #content>
        <p class="m-0">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        </p>
    </template>
</Inplace>
```
## Input [\#](https://primevue.org/inplace/\#input)
The _closeCallback_ switches the state back to display mode when called from an event.
Click to Edit
```
<Inplace>
    <template #display>
        {{ text || 'Click to Edit' }}
    </template>
    <template #content="{ closeCallback }">
        <span class="inline-flex items-center gap-2">
            <InputText v-model="text" autofocus />
            <Button icon="pi pi-times" text severity="danger" @click="closeCallback" />
        </span>
    </template>
</Inplace>
```
## Image [\#](https://primevue.org/inplace/\#image)
Any content such as an image can be placed inside an Inplace.
View Photo
```
<Inplace>
    <template #display>
        <span class="inline-flex items-center gap-2">
            <span class="pi pi-image"></span>
            <span>View Photo</span>
        </span>
    </template>
    <template #content>
        <img class="w-full sm:w-80 shadow-md" alt="Nature" src="https://primefaces.org/cdn/primevue/images/nature/nature8.jpg" />
    </template>
</Inplace>
```
## Lazy [\#](https://primevue.org/inplace/\#lazy)
The _open_ event is used to initialize the content such as loading data in a lazy manner.
View Data
```
<Inplace @open="loadData">
    <template #display> View Data </template>
    <template #content>
        <DataTable :value="products">
            <Column field="code" header="Code"></Column>
            <Column field="name" header="Name"></Column>
            <Column field="category" header="Category"></Column>
            <Column field="quantity" header="Quantity"></Column>
        </DataTable>
    </template>
</Inplace>
```
## Accessibility [\#](https://primevue.org/inplace/\#accessibility)
### Screen Reader
Inplace component defines _aria-live_ as "polite" by default, since any valid attribute is passed to the main container aria roles and attributes of the root element can be customized easily.
### View Mode Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Switches to content. |
- Import
- Basic
- Input
- Image
- Lazy
- Accessibility
# Inplace API
API defines helper props, events and others for the PrimeVue Inplace module.
Theme Designer
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Chip Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Chip
Chip represents entities using icons, labels and images.
## Import [\#](https://primevue.org/chip/\#import)
```javascript
import Chip from 'primevue/chip';
```
Copy
## Basic [\#](https://primevue.org/chip/\#basic)
A basic chip with a text is created with the _label_ property. In addition when _removable_ is added, a delete icon is displayed to remove a chip.
Action
Comedy
Mystery
Thriller
```markup
<Chip label="Action" />
<Chip label="Comedy" />
<Chip label="Mystery" />
<Chip label="Thriller" removable />
```
Copy
## Icon [\#](https://primevue.org/chip/\#icon)
A font icon next to the label can be displayed with the _icon_ property.
Apple
Facebook
Google
Microsoft
GitHub
```markup
<Chip label="Apple" icon="pi pi-apple" />
<Chip label="Facebook" icon="pi pi-facebook" />
<Chip label="Google" icon="pi pi-google" />
<Chip label="Microsoft" icon="pi pi-microsoft" removable />
<Chip label="GitHub" icon="pi pi-github" removable>
    <template #removeicon="{ removeCallback, keydownCallback }">
        <i class="pi pi-minus-circle" @click="removeCallback" @keydown="keydownCallback" />
    </template>
</Chip>
```
Copy
## Image [\#](https://primevue.org/chip/\#image)
The _image_ property is used to display an image like an avatar.
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
Amy Elsner
![](https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png)
Asiya Javayant
![](https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png)
Onyama Limba
![](https://primefaces.org/cdn/primevue/images/avatar/xuxuefeng.png)
Xuxue Feng
```markup
<Chip label="Amy Elsner" image="/images/avatar/amyelsner.png" />
<Chip label="Asiya Javayant" image="/images/avatar/asiyajavayant.png" />
<Chip label="Onyama Limba" image="/images/avatar/onyamalimba.png" />
<Chip label="Xuxue Feng" image="/images/avatar/xuxuefeng.png" removable />
```
Copy
## Template [\#](https://primevue.org/chip/\#templatedoc)
The default slot allows displaying custom content inside a chip.
PPRIME
```markup
<Chip class="py-0 pl-0 pr-4">
    <span class="bg-primary text-primary-contrast rounded-full w-8 h-8 flex items-center justify-center">P</span>
    <span class="ml-2 font-medium">PRIME</span>
</Chip>
```
Copy
## Accessibility [\#](https://primevue.org/chip/\#accessibility)
### Screen Reader
Chip uses the _label_ property as the default _aria-label_, since any attribute is passed to the root element _aria-labelledby_ or _aria-label_ can be used to override the default behavior. Removable chips have a _tabindex_ and focusable with the tab key.
### Keyboard Support
| Key | Function |
| --- | --- |
| _backspace_ | Hides removable. |
| _enter_ | Hides removable. |
- Import
- Basic
- Icon
- Image
- Template
- Accessibility
# Chip API
API defines helper props, events and others for the PrimeVue Chip module.
## Chip [\#](https://primevue.org/chip/\#api.chip)
Chip represents people using icons, labels and images.
### Props [\#](https://primevue.org/chip/\#api.chip.props)
Defines valid properties in Chip component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string \| number | null | Defines the text to display. |  |
| icon | string | null | Defines the icon to display. |  |
| image | string | null | Defines the image to display. |  |
| removable | boolean | false | Whether to display a remove icon. |  |
| removeIcon | string | null | Icon of the remove element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ChipPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/chip/\#api.chip.emits)
Defines valid properties in Chip component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| remove | event: Event | void | Callback to invoke when a chip is removed. |  |
### Slots [\#](https://primevue.org/chip/\#api.chip.slots)
Defines valid slots in Chip component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Content can easily be customized with the default slot instead of using the built-in modes. |  |
| icon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| removeicon | scope: {<br>removeCallback: (event: Event) â‡’ void, // Remove icon click eventkeydownCallback: (event: Event) â‡’ void, // Remove icon keydown event<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom remove icon template of chip component. |  |
### Interfaces [\#](https://primevue.org/chip/\#api.chip.interfaces)
Defines the custom interfaces used by the module.
#### ChipPassThroughMethodOptions [\#](https://primevue.org/chip/\#api.chip.interfaces.ChipPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ChipProps](https://primevue.org/chip/#api.chip.interfaces.ChipProps) | null | Defines valid properties. |
| state | [ChipState](https://primevue.org/chip/#api.chip.interfaces.ChipState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ChipPassThroughOptions [\#](https://primevue.org/chip/\#api.chip.interfaces.ChipPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ChipPassThroughOptionType<T>](https://primevue.org/chip/#api.chip.types.ChipPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| image | [ChipPassThroughOptionType<T>](https://primevue.org/chip/#api.chip.types.ChipPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the image's DOM element. |
| icon | [ChipPassThroughOptionType<T>](https://primevue.org/chip/#api.chip.types.ChipPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the icon's DOM element. |
| label | [ChipPassThroughOptionType<T>](https://primevue.org/chip/#api.chip.types.ChipPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the label' DOM element. |
| removeIcon | [ChipPassThroughOptionType<T>](https://primevue.org/chip/#api.chip.types.ChipPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the removeIcon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ChipPassThroughAttributes [\#](https://primevue.org/chip/\#api.chip.interfaces.ChipPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ChipState [\#](https://primevue.org/chip/\#api.chip.interfaces.ChipState)
Defines current inline state in Chip component.
| name | type | default | description |
| --- | --- | --- | --- |
| visible | boolean | true | Current visible state as a boolean. |
## Types [\#](https://primevue.org/chip/\#api.chip.types)
Defines the custom types used by the module.
#### ChipPassThroughOptionType [\#](https://primevue.org/chip/\#api.chip.types.ChipPassThroughOptionType)
| values |
| --- |
| ChipPassThroughAttributes \| (options: ChipPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ChipEmits [\#](https://primevue.org/chip/\#api.chip.types.ChipEmits)
| values |
| --- |
| EmitFn<ChipEmitsOptions> |
- Chip
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Dynamic Dialog Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Dynamic Dialog
Dialogs can be created dynamically with any component as the content using a DialogService.
## Import [\#](https://primevue.org/dynamicdialog/\#import)
```javascript
import DynamicDialog from 'primevue/dynamicdialog';
```
Copy
## Dialog Service [\#](https://primevue.org/dynamicdialog/\#dialogservice)
A single shared dialog instance is required in the application, ideal location would be defining it once at the main application template.
```markup
<DynamicDialog />
```
Copy
A dynamic dialog is controlled via the _DialogService_ that needs to be installed as an application plugin.
```javascript
import {createApp} from 'vue';
import DialogService from 'primevue/dialogservice';
const app = createApp(App);
app.use(DialogService);
```
Copy
The service is available with the _useDialog_ function for Composition API or using the _$dialog_ property of the application for Options API.
```javascript
/* Composition API */
import { useDialog } from 'primevue/usedialog';
const dialog = useDialog();
/* Options API */
const dialog = this.$dialog;
```
Copy
## Open [\#](https://primevue.org/dynamicdialog/\#open)
The _open_ function of the _DialogService_ is used to open a Dialog. First parameter is the component to load and second one is the configuration object to customize the Dialog.
```javascript
import ProductListDemo from './ProductListDemo';
import { useDialog } from 'primevue/usedialog';
const dialog = useDialog();
const showProducts = () => {
    dialog.open(ProductListDemo, {});
}
```
Copy
The component can also be loaded asynchronously, this approach is useful in conditional cases and to improve initial load times as well.
```javascript
import { useDialog } from 'primevue/usedialog';
const dialog = useDialog();
const dynamicComponent = defineAsyncComponent(() => import('./ProductListDemo.vue'));
const showProducts = () => {
    dialog.open(dynamicComponent, {});
}
```
Copy
## Customization [\#](https://primevue.org/dynamicdialog/\#customization)
DynamicDialog uses the Dialog component internally, visit [dialog](https://primevue.org/dialog) for more information about the available props.
```javascript
import ProductListDemo from './ProductListDemo';
import { useDialog } from 'primevue/usedialog';
const dialog = useDialog();
const showProducts = () => {
    dialog.open(ProductListDemo, {
        props: {
            header: 'Product List',
            style: {
                width: '50vw',
            },
            breakpoints:{
                '960px': '75vw',
                '640px': '90vw'
            },
            modal: true
        }
    });
}
```
Copy
## Close [\#](https://primevue.org/dynamicdialog/\#close)
The _close_ function is available through a _dialogRef_ that is injected to the component loaded by the dialog.
```javascript
import { inject } from "vue";
const dialogRef = inject('dialogRef');
const closeDialog = () => {
    dialogRef.value.close();
}
```
Copy
## Passing Data [\#](https://primevue.org/dynamicdialog/\#passingdata)
Use the _data_ property to pass parameters when opening a Dialog, the internal component can later access this data using _dialogRef_.
```javascript
const dialog = useDialog();
const showProducts = () => {
    dialog.open(ProductListDemo, {
        data: {
            user: 'primetime'
        }
    });
}
```
Copy
```javascript
import { inject, onMounted } from "vue";
const dialogRef = inject('dialogRef');
onMounted(() => {
    const params = dialogRef.value.data; // {user: 'primetime'}
})
```
Copy
Similarly when hiding a Dialog, any parameter passed to the _close_ function is received from the _onClose_ callback.
```javascript
const dialog = useDialog();
const showProducts = () => {
    dialog.open(ProductListDemo, {
        onClose: (opt) => {
            const callbackParams = opt.data; // {selectedId: 12}
        }
    });
}
```
Copy
```javascript
import { inject } from "vue";
const dialogRef = inject('dialogRef');
const closeDialog = () => {
    dialogRef.value.close({
        selectedId: 12
    });
}
```
Copy
## Events [\#](https://primevue.org/dynamicdialog/\#events)
The _emits_ object defines callbacks to handle events emitted by the component within the Dialog.
```javascript
import ProductListDemo from './ProductListDemo';
import { useDialog } from 'primevue/usedialog';
const dialog = useDialog();
const showProducts = () => {
    dialog.open(ProductListDemo, {
        onCancel: (e) => {
            console.log(e);      // {user: 'primetime'}
        },
        emits: {
            onSave: (e) => {
                console.log(e);  // {user: 'primetime'}
            }
        }
    });
}
```
Copy
```javascript
<script setup>
/* ProductListDemo.vue */
const emit = defineEmits(['cancel', 'save'])
function buttonClick() {
    emit('cancel', {user: 'primetime'});
}
function saveButtonClick() {
    emit('save', {user: 'primetime'});
}
</script>
```
Copy
## Example [\#](https://primevue.org/dynamicdialog/\#example)
A sample implementation to demonstrate loading components asynchronously, nested content and passing data.
Select a Product
```markup
<Button label="Select a Product" icon="pi pi-search" @click="showProducts" />
<DynamicDialog />
```
Copy
## Accessibility [\#](https://primevue.org/dynamicdialog/\#accessibility)
Visit accessibility section of [dialog](https://primevue.org/dialog/#accessibility) component for more information.
- Import
- Dialog Service
- Open
- Customization
- Close
- Passing Data
- Events
- Example
- Accessibility
# Dynamic Dialog API
API defines helper props, events and others for the PrimeVue Dynamic Dialog module.
## DynamicDialog [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialog)
DynamicDialogs can be created dynamically with any component as the content using a DialogService.
### Props [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialog.props)
Defines valid properties in DynamicDialog component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
## Types [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialog.types)
Defines the custom types used by the module.
#### DynamicDialogEmits [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialog.types.DynamicDialogEmits)
| values |
| --- |
| EmitFn<DynamicDialogEmitsOptions> |
## Dialog [\#](https://primevue.org/dynamicdialog/\#api.dialog)
Dialog is a container to display content in an overlay window.
### Props [\#](https://primevue.org/dynamicdialog/\#api.dialog.props)
Defines valid properties in Dialog component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| header | string | null | Title content of the dialog. |  |
| footer | string | null | Footer content of the dialog. |  |
| visible | boolean | false | Specifies the visibility of the dialog. |  |
| modal | boolean | false | Defines if background should be blocked when dialog is displayed. |  |
| contentStyle | any | null | Style of the content section. |  |
| contentClass | any | null | Style class of the content section. |  |
| contentProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the overlay Dialog inside the component. |  |
| closable | boolean | true | Adds a close icon to the header to hide the dialog. |  |
| dismissableMask | boolean | false | Specifies if clicking the modal background should hide the dialog. |  |
| closeOnEscape | boolean | true | Specifies if pressing escape key should hide the dialog. |  |
| showHeader | boolean | true | Whether to show the header or not. |  |
| blockScroll | boolean | false | Whether background scroll should be blocked when dialog is visible. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| position | HintedString<"left" \| "right" \| "top" \| "bottom" \| "center" \| "topleft" \| "topright" \| "bottomleft" \| "bottomright"> | center | Position of the dialog. |  |
| maximizable | boolean | false | Whether the dialog can be displayed full screen. |  |
| breakpoints | [DialogBreakpoints](https://primevue.org/dynamicdialog/#api.dialog.interfaces.DialogBreakpoints) | null | Object literal to define widths per screen size. |  |
| draggable | boolean | true | Enables dragging to change the position using header. |  |
| keepInViewport | boolean | true | Keeps dialog in the viewport when dragging. |  |
| minX | number | 0. | Minimum value for the left coordinate of dialog in dragging. |  |
| minY | number | 0 | Minimum value for the top coordinate of dialog in dragging. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the dialog gets attached. |  |
| style | any | null | Style of the dynamic dialog. |  |
| closeIcon | string | null | Icon to display in the dialog close button. |  |
| maximizeIcon | string | null | Icon to display in the dialog maximize button when dialog is not maximized. |  |
| minimizeIcon | string | null | Icon to display in the dialog maximize button when dialog is minimized. |  |
| closeButtonProps | object | null | Used to pass all properties of the ButtonProps to the Button component. |  |
| maximizeButtonProps | object | null | Used to pass all properties of the ButtonProps to the Button component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DialogPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/dynamicdialog/\#api.dialog.emits)
Defines valid emits in Dialog component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:visible | value: boolean | void | Emitted when the visible changes. |  |
| hide |  | void | Callback to invoke when dialog is hidden. |  |
| after-hide |  | void | Callback to invoke after dialog is hidden. |  |
| show |  | void | Callback to invoke when dialog is shown. |  |
| maximize | event: Event | void | Fired when a dialog gets maximized. |  |
| unmaximize | event: Event | void | Fired when a dialog gets unmaximized. |  |
| dragstart | event: Event | void | Fired when a dialog drag begins. |  |
| dragend | event: Event | void | Fired when a dialog drag completes. |  |
### Slots [\#](https://primevue.org/dynamicdialog/\#api.dialog.slots)
Defines valid slots in Dialog component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default content slot. |  |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| closebutton | scope: {<br>closeCallback: () â‡’ void, // Close function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close button template. |  |
| closeicon | scope: {<br>class: any, // Style class of the close icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close icon template. |  |
| maximizebutton | scope: {<br>maximized: boolean, // Maximized state as a booleanmaximizeCallback: (event: Event) â‡’ void, // Toggle maximize function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom maximize button template. |  |
| maximizeicon | scope: {<br>maximized: boolean, // Maximized state as a booleanclass: any, // Style class of the maximize icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom maximize icon template of dialog. |  |
| container | scope: {<br>closeCallback: () â‡’ void, // Close dialog function.maximizeCallback: (event: Event) â‡’ void, // Maximize/minimize dialog function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |
### Interfaces [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces)
Defines the custom interfaces used by the module.
#### DialogPassThroughMethodOptions [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DialogProps](https://primevue.org/dynamicdialog/#api.dialog.interfaces.DialogProps) | null | Defines valid properties. |
| state | [DialogState](https://primevue.org/dynamicdialog/#api.dialog.interfaces.DialogState) | null | Defines current inline state. |
| parent | any | null | Defines parent instance. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### DialogSharedPassThroughMethodOptions [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [DialogProps](https://primevue.org/dynamicdialog/#api.dialog.interfaces.DialogProps) | null | Defines valid properties. |
| state | [DialogState](https://primevue.org/dynamicdialog/#api.dialog.interfaces.DialogState) | null | Defines current inline state. |
#### DialogPassThroughOptions [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| header | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header's DOM element. |
| title | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header title's DOM element. |
| headerActions | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header actions' DOM element. |
| pcMaximizeButton | any | null | Used to pass attributes to the maximize Button component. |
| pcCloseButton | any | null | Used to pass attributes to the close Button component. |
| content | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the content's DOM element. |
| footer | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the footer's DOM element. |
| mask | [DialogPassThroughOptionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the mask's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [DialogPassThroughTransitionType<T>](https://primevue.org/dynamicdialog/#api.dialog.types.DialogPassThroughTransitionType%3CT%3E) | null | Used to control Vue Transition API. |
#### DialogPassThroughAttributes [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### DialogState [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogState)
Defines current inline state in Dialog component.
| name | type | default | description |
| --- | --- | --- | --- |
| containerVisible | boolean | false | Current visible state of the container as a boolean. |
| maximized | boolean | false | Current maximized state as a boolean. |
#### DialogBreakpoints [\#](https://primevue.org/dynamicdialog/\#api.dialog.interfaces.DialogBreakpoints)
Custom breakpoint metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | string | null |  |
## Types [\#](https://primevue.org/dynamicdialog/\#api.dialog.types)
Defines the custom types used by the module.
#### DialogPassThroughOptionType [\#](https://primevue.org/dynamicdialog/\#api.dialog.types.DialogPassThroughOptionType)
| values |
| --- |
| DialogPassThroughAttributes \| (options: DialogPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### DialogPassThroughTransitionType [\#](https://primevue.org/dynamicdialog/\#api.dialog.types.DialogPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: DialogPassThroughMethodOptions) => TransitionProps \| undefined |
#### DialogEmits [\#](https://primevue.org/dynamicdialog/\#api.dialog.types.DialogEmits)
| values |
| --- |
| EmitFn<DialogEmitsOptions> |
## DialogService-UseDialog [\#](https://primevue.org/dynamicdialog/\#api.dialogservice-usedialog)
### Services [\#](https://primevue.org/dynamicdialog/\#api.dialogservice-usedialog.services)
Dynamic Dialog components methods.
| name | parameters | returnType | description |
| --- | --- | --- | --- |
| open | content: any | DynamicDialogInstance | Displays the dialog using the dynamic dialog object options. |
## DynamicDialogOptions [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialogoptions)
### Interfaces [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialogoptions.interfaces)
Defines the custom interfaces used by the module.
#### DynamicDialogTemplates [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialogoptions.interfaces.DynamicDialogTemplates)
Custom dialog templates.
| name | type | default | description |
| --- | --- | --- | --- |
| header | any | null | Custom header template. |
| footer | any | null | Custom footer template. |
#### DynamicDialogCloseOptions [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialogoptions.interfaces.DynamicDialogCloseOptions)
Dynamic Dialog close method options.
| name | type | default | description |
| --- | --- | --- | --- |
| data | any | null | Custom data object |
| type | undefined \| "config-close" \| "dialog-close" | null | Close type |
#### DynamicDialogInstance [\#](https://primevue.org/dynamicdialog/\#api.dynamicdialogoptions.interfaces.DynamicDialogInstance)
Custom Dynamic Dialog options.
| name | type | default | description |
| --- | --- | --- | --- |
| content | any | null | Dynamic component for content template |
| options | [DynamicDialogOptions](https://primevue.org/dynamicdialog/#api.dynamicdialogoptions.interfaces.DynamicDialogOptions) | null | Instance options |
| data | any | null | Custom data object |
| close | Function | null |  |
- DynamicDialog
  - Props
  - Types
- Dialog
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
- DialogService-UseDialog
  - Services
- DynamicDialogOptions
  - Interfaces
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue PanelMenu
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# PanelMenu
PanelMenu is a hybrid of accordion-tree components.
## Import [\#](https://primevue.org/panelmenu/\#import)
```javascript
import PanelMenu from 'primevue/panelmenu';
```
Copy
## Basic [\#](https://primevue.org/panelmenu/\#basic)
PanelMenu requires a collection of menuitems as its _model_.
Files
- Documents
- Invoices
- Pending
- Paid
- Clients
- Images
- Logos
Cloud
- Upload
- Download
- Sync
Devices
- Phone
- Desktop
- Tablet
```markup
<PanelMenu :model="items" />
```
Copy
## Multiple [\#](https://primevue.org/panelmenu/\#multiple)
Only one root menuitem at a time can be active by default, enabling _multiple_ property changes this behavior to allow multiple root menuitems.
Files
- Documents
- Invoices
- Pending
- Paid
- Clients
- Images
- Logos
Cloud
- Upload
- Download
- Sync
Devices
- Phone
- Desktop
- Tablet
```markup
<PanelMenu :model="items" multiple />
```
Copy
## Controlled [\#](https://primevue.org/panelmenu/\#controlled)
If the menuitem has a _key_ defined, PanelMenu state can be controlled programmatically with the _expandedKeys_ property that defines the keys that are expanded. This property is a Map instance whose key is the key of a node and value is a boolean.
Toggle All
Users
- New
- Member
- Group
- Search
Tasks
- Add New
- Pending
- Overdue
Calendar
- New Event
- Today
- This Week
```markup
<Button type="button" label="Toggle All" text @click="toggleAll" />
<PanelMenu v-model:expandedKeys="expandedKeys" :model="items" />
```
Copy
## Template [\#](https://primevue.org/panelmenu/\#template)
PanelMenu offers item customization with the _item_ template that receives the menuitem instance from the model as a parameter.
Mail5
- ComposeâŒ˜+N
- Inbox5
- SentâŒ˜+S
- TrashâŒ˜+T
ReportsâŒ˜+R
- Sales3
- Products6
ProfileâŒ˜+W
- SettingsâŒ˜+O
- PrivacyâŒ˜+P
```markup
<PanelMenu :model="items">
    <template #item="{ item }">
        <a v-ripple class="flex items-center px-4 py-2 cursor-pointer group">
            <span :class="[item.icon, 'text-primary group-hover:text-inherit']" />
            <span :class="['ml-2', { 'font-semibold': item.items }]">{{ item.label }}</span>
            <Badge v-if="item.badge" class="ml-auto" :value="item.badge" />
            <span v-if="item.shortcut" class="ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1">{{ item.shortcut }}</span>
        </a>
    </template>
</PanelMenu>
```
Copy
## Command [\#](https://primevue.org/panelmenu/\#command)
The _command_ property defines the callback to run when an item is activated by click or a key event.
Files
- New
- Search
- Print
Sync
- Import
- Export
Sign Out
```markup
<PanelMenu :model="items" />
<Toast />
```
Copy
## Router [\#](https://primevue.org/panelmenu/\#router)
Items with navigation are defined with templating to be able to use a router link component, an external link or programmatic navigation.
Router
- [Styled](https://primevue.org/theming/styled)
- [Unstyled](https://primevue.org/theming/unstyled)
Programmatic
External
- [Vue.js](https://vuejs.org/)
- [Vite.js](https://vuejs.org/)
```markup
<PanelMenu :model="items">
    <template #item="{ item }">
        <router-link v-if="item.route" v-slot="{ href, navigate }" :to="item.route" custom>
            <a v-ripple class="flex items-center cursor-pointer text-surface-700 dark:text-surface-0 px-4 py-2" :href="href" @click="navigate">
                <span :class="item.icon" />
                <span class="ml-2">{{ item.label }}</span>
            </a>
        </router-link>
        <a v-else v-ripple class="flex items-center cursor-pointer text-surface-700 dark:text-surface-0 px-4 py-2" :href="item.url" :target="item.target">
            <span :class="item.icon" />
            <span class="ml-2">{{ item.label }}</span>
            <span v-if="item.items" class="pi pi-angle-down text-primary ml-auto" />
        </a>
    </template>
</PanelMenu>
```
Copy
## Accessibility [\#](https://primevue.org/panelmenu/\#accessibility)
### Screen Reader
Accordion header elements have a _button_ role, an _aria-label_ defined using the _label_ property of the menuitem model and _aria-controls_ to define the id of the content section along with _aria-expanded_ for the visibility state.
The content of an accordion panel uses _region_ role, defines an id that matches the _aria-controls_ of the header and _aria-labelledby_ referring to the id of the header.
The tree elements has a _tree_ as the role and each menu item has a _treeitem_ role along with _aria-label_ and _aria-expanded_ attributes. The container element of a treenode has the _group_ role. The _aria-setsize_, _aria-posinset_ and _aria-level_ attributes are calculated implicitly and added to each treeitem.
### Header Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element in the page tab sequence. |
| _enter_ | Toggles the visibility of the content. |
| _space_ | Toggles the visibility of the content. |
| _down arrow_ | Moves focus to the next header. If focus is on the last header, moves focus to the first header. |
| _up arrow_ | Moves focus to the previous header. If focus is on the first header, moves focus to the last header. |
| _home_ | Moves focus to the first header. |
| _end_ | Moves focus to the last header. |
- Import
- Basic
- Multiple
- Controlled
- Template
- Command
- Router
- Accessibility
# PanelMenu API
API defines helper props, events and others for the PrimeVue PanelMenu module.
## PanelMenu [\#](https://primevue.org/panelmenu/\#api.panelmenu)
PanelMenu is a hybrid of Accordion and Tree components.
### Props [\#](https://primevue.org/panelmenu/\#api.panelmenu.props)
Defines valid properties in PanelMenu component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | MenuItem\[\] | null | An array of menuitems. |  |
| expandedKeys | [PanelMenuExpandedKeys](https://primevue.org/panelmenu/#api.panelmenu.interfaces.PanelMenuExpandedKeys) | null | A map of keys to represent the expansion state in controlled mode. |  |
| multiple | boolean | false | When enabled, multiple root menuitems can be activated at the same time. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<PanelMenuPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/panelmenu/\#api.panelmenu.emits)
Defines valid emits in PanelMenu component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:expandedKeys | value: any | void | Emitted when the expandedKeys changes. |  |
| panel-open | event: [PanelMenuPanelOpenEvent](https://primevue.org/panelmenu/#api.panelmenu.events.PanelMenuPanelOpenEvent) | void | Callback to invoke when a panel gets expanded. |  |
| panel-close | event: [PanelMenuPanelCloseEvent](https://primevue.org/panelmenu/#api.panelmenu.events.PanelMenuPanelCloseEvent) | void | Callback to invoke when an active panel is collapsed by clicking on the header. |  |
### Slots [\#](https://primevue.org/panelmenu/\#api.panelmenu.slots)
Defines valid slots in PanelMenu component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| item | scope: {<br>item: MenuItem, // Menuitem instanceroot: boolean, // Whether there is a root menuitemactive: boolean, // Current active state of the menuitemlabel: undefined, // Label property of the menuitemprops: PanelMenuRouterBindProps, // Binding properties of the menuitemhasSubmenu: boolean, // Whether or not there is a submenu<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each item. |  |
| submenuicon | scope: {<br>active: boolean, // Whether item is active<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom submenu icon template. |  |
| headericon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header icon template. |  |
| itemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item icon template. |  |
### Events [\#](https://primevue.org/panelmenu/\#api.panelmenu.events)
Defines the custom events used by the component's emit.
#### PanelMenuPanelOpenEvent [\#](https://primevue.org/panelmenu/\#api.panelmenu.events.PanelMenuPanelOpenEvent)
Custom panel open event.
See [panel-open](https://primevue.org/panelmenu/#api.panelmenu.emitsoptions.panel-open)
| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event. |
| item | any | Current item. |
#### PanelMenuPanelCloseEvent [\#](https://primevue.org/panelmenu/\#api.panelmenu.events.PanelMenuPanelCloseEvent)
Custom panel close event.
See [panel-close](https://primevue.org/panelmenu/#api.panelmenu.emitsoptions.panel-close)
| name | type | description |
| --- | --- | --- |
| originalEvent | MouseEvent | Browser mouse event. |
| item | any | Current item. |
### Interfaces [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces)
Defines the custom interfaces used by the module.
#### PanelMenuPassThroughMethodOptions [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [PanelMenuProps](https://primevue.org/panelmenu/#api.panelmenu.interfaces.PanelMenuProps) | null | Defines valid properties. |
| state | [PanelMenuState](https://primevue.org/panelmenu/#api.panelmenu.interfaces.PanelMenuState) | null | Defines current inline state. |
| context | [PanelMenuContext](https://primevue.org/panelmenu/#api.panelmenu.interfaces.PanelMenuContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### PanelMenuPassThroughOptions [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| panel | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the panel's DOM element. |
| header | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| headerContent | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the header content's DOM element. |
| headerLink | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the header link's DOM element. |
| submenuIcon | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the submenuIcon's DOM element. |
| headerIcon | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the header icon's DOM element. |
| headerLabel | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the header label's DOM element. |
| contentContainer | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the content container's DOM element. |
| content | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| rootList | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the root list's DOM element. |
| item | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the list item's DOM element. |
| itemContent | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the item content's DOM element. |
| itemLink | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the item link's DOM element. |
| itemIcon | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the item icon's DOM element. |
| itemLabel | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the item label's DOM element. |
| submenu | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the submenu's DOM element. |
| separator | [PanelMenuPassThroughOptionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughOptionType) | null | Used to pass attributes to the separator's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [PanelMenuPassThroughTransitionType](https://primevue.org/panelmenu/#api.panelmenu.types.PanelMenuPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### PanelMenuPassThroughAttributes [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### PanelMenuState [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuState)
Defines current inline state in PanelMenu component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| activeItem | MenuItem\[\] | null | Active item path. |
#### PanelMenuContext [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuContext)
Defines current options in PanelMenu component.
| name | type | default | description |
| --- | --- | --- | --- |
| item | any | null | Current menuitem |
| index | number | null | Index of the menuitem. |
| active | boolean | false | Current active state of menuitem as a boolean. |
| focused | boolean | false | Current focused state of menuitem as a boolean. |
| disabled | boolean | false | Current disabled state of menuitem as a boolean. |
#### PanelMenuExpandedKeys [\#](https://primevue.org/panelmenu/\#api.panelmenu.interfaces.PanelMenuExpandedKeys)
Custom expanded keys metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/panelmenu/\#api.panelmenu.types)
Defines the custom types used by the module.
#### PanelMenuPassThroughOptionType [\#](https://primevue.org/panelmenu/\#api.panelmenu.types.PanelMenuPassThroughOptionType)
| values |
| --- |
| PanelMenuPassThroughAttributes \| (options: PanelMenuPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### PanelMenuPassThroughTransitionType [\#](https://primevue.org/panelmenu/\#api.panelmenu.types.PanelMenuPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: PanelMenuPassThroughMethodOptions) => TransitionProps \| undefined |
#### PanelMenuEmits [\#](https://primevue.org/panelmenu/\#api.panelmenu.types.PanelMenuEmits)
| values |
| --- |
| EmitFn<PanelMenuEmitsOptions> |
## MenuItem [\#](https://primevue.org/panelmenu/\#api.menuitem)
PrimeVue menu components share a common api to specify the menuitems and submenus.
### Events [\#](https://primevue.org/panelmenu/\#api.menuitem.events)
Defines the custom events used by the component's emit.
#### MenuItemCommandEvent [\#](https://primevue.org/panelmenu/\#api.menuitem.events.MenuItemCommandEvent)
Custom command event.
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| item | [MenuItem](https://primevue.org/panelmenu/#api.options.MenuItem) | Menuitem instance. |
| \[key: string\] | any |  |
### Options [\#](https://primevue.org/panelmenu/\#api.options.MenuItem)
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string \| Function | null | Property name or getter function to use as the label of an item. |  |
| icon | string | null | Icon of the item. |  |
| command | Function | null |  |  |
| url | string | null | External link to navigate when item is clicked. |  |
| items | MenuItem\[\] | null | An array of children menuitems. |  |
| disabled | boolean \| Function | false | A boolean or a function to return a boolean to specify if the item is disabled. |  |
| visible | boolean \| Function | true | A boolean or a function to return a boolean to specify if the item is visible. |  |
| target | string | null | Specifies where to open the linked document. |  |
| separator | boolean | false | Defines the item as a separator. |  |
| style | any | null | Inline style of the menuitem. |  |
| class | any | null | Style class of the menuitem. |  |
| key | string | null | Unique identifier of an item. |  |
| \[key: string\] | any | null |  |  |
- PanelMenu
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
- MenuItem
  - Events
  - Options
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## SplitButton Component Overview
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# SplitButton
SplitButton groups a set of commands in an overlay with a default command.
## Import [\#](https://primevue.org/splitbutton/\#import)
```javascript
import SplitButton from 'primevue/splitbutton';
```
Copy
## Basic [\#](https://primevue.org/splitbutton/\#basic)
SplitButton has a default command button and a collection of additional options defined by the _model_ property.
Save
```markup
<SplitButton label="Save" @click="save" :model="items" />
```
Copy
## Icons [\#](https://primevue.org/splitbutton/\#icons)
The buttons and menuitems have support to display icons.
Save
```markup
<SplitButton label="Save" icon="pi pi-check" dropdownIcon="pi pi-cog" @click="save" :model="items" />
```
Copy
## Nested [\#](https://primevue.org/splitbutton/\#nested)
Multi-level menus are supported with a nested menu hierarchy.
Save
```markup
<SplitButton label="Save" @click="save" :model="items" />
```
Copy
## Severity [\#](https://primevue.org/splitbutton/\#severity)
The _severity_ property defines the variant of a button.
Save
Save
Save
Save
Save
Save
Save
Save
```markup
<SplitButton label="Save" :model="items" @click="save"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="danger"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" severity="contrast"></SplitButton>
```
Copy
## Disabled [\#](https://primevue.org/splitbutton/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
Save
```markup
<SplitButton label="Save" @click="save" :model="items" disabled />
```
Copy
## Raised [\#](https://primevue.org/splitbutton/\#raised)
Raised buttons display a shadow to indicate elevation.
Save
Save
Save
Save
Save
Save
Save
Save
```markup
<SplitButton label="Save" :model="items" @click="save" raised></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="danger"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised severity="contrast"></SplitButton>
```
Copy
## Rounded [\#](https://primevue.org/splitbutton/\#rounded)
Rounded buttons have a circular border radius.
Save
Save
Save
Save
Save
Save
Save
Save
```markup
<SplitButton label="Save" :model="items" @click="save" rounded></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="danger"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" rounded severity="contrast"></SplitButton>
```
Copy
## Text [\#](https://primevue.org/splitbutton/\#text)
Text buttons are displayed as textual elements.
Save
Save
Save
Save
Save
Save
Save
```markup
<SplitButton label="Save" :model="items" @click="save" text></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" text severity="danger"></SplitButton>
```
Copy
## Raised Text [\#](https://primevue.org/splitbutton/\#raisedtext)
Text buttons can be displayed as raised as well for elevation.
Save
Save
Save
Save
Save
Save
Save
```markup
<SplitButton label="Save" :model="items" @click="save" raised text></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" raised text severity="danger"></SplitButton>
```
Copy
## Outlined [\#](https://primevue.org/splitbutton/\#outlined)
Outlined buttons display a border without a background initially.
Save
Save
Save
Save
Save
Save
Save
Save
```markup
<SplitButton label="Save" :model="items" @click="save" outlined></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="secondary"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="success"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="info"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="warn"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="help"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="danger"></SplitButton>
<SplitButton label="Save" :model="items" @click="save" outlined severity="contrast"></SplitButton>
```
Copy
## Sizes [\#](https://primevue.org/splitbutton/\#sizes)
SplitButton provides _small_ and _large_ sizes as alternatives to the standard.
Save
Save
Save
```markup
<SplitButton label="Save" :model="items" icon="pi pi-plus" size="small"></SplitButton>
<SplitButton label="Save" :model="items" icon="pi pi-plus"></SplitButton>
<SplitButton label="Save" :model="items" icon="pi pi-plus" size="large"></SplitButton>
```
Copy
## Template [\#](https://primevue.org/splitbutton/\#template)
Custom content inside a button is defined as children.
![logo](https://primefaces.org/cdn/primevue/images/logo.svg)PrimeVue
```markup
<SplitButton :model="items" @click="save" severity="contrast">
    <span class="flex items-center font-bold">
        <img alt="logo" src="https://primefaces.org/cdn/primevue/images/logo.svg" style="height: 1rem; margin-right: 0.5rem" />
        <span>PrimeVue</span>
    </span>
</SplitButton>
```
Copy
## Accessibility [\#](https://primevue.org/splitbutton/\#accessibility)
### Screen Reader
SplitButton component renders two native button elements, main button uses the label property to define _aria-label_ by default which can be customized with _buttonProps_. Dropdown button requires an explicit definition to describe it using _menuButtonProps_ option and also includes _aria-haspopup_, _aria-expanded_ for states along with _aria-controls_ to define the relation between the popup and the button.
The popup overlay uses _menu_ role on the list and each action item has a _menuitem_ role with an _aria-label_ as the menuitem label. The id of the menu refers to the _aria-controls_ of the dropdown button.
```markup
<SplitButton :buttonProps="{'aria-label': 'Default Action'}" :menuButtonProps="{'aria-label': 'More Options'}" />
```
Copy
### Main Button Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Activates the button. |
| _space_ | Activates the button. |
### Menu Button Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ _space_ _down arrow_ _up arrow_ | Opens the menu and moves focus to the first item. |
### Menu Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | If menuitem has a submenu, opens the submenu otherwise activates the menuitem and closes all open overlays. |
| _space_ | If menuitem has a submenu, opens the submenu otherwise activates the menuitem and closes all open overlays. |
| _escape_ | If focus is inside a popup submenu, closes the submenu and moves focus to the root item of the closed submenu. |
| _down arrow_ | Moves focus to the next menuitem within the submenu. |
| _up arrow_ | Moves focus to the previous menuitem within the submenu. |
| _alt_ \+ _up arrow_ | Closes the popup, then moves focus to the target element. |
| _right arrow_ | In nested mode if option is closed, opens the option otherwise moves focus to the first child option. |
| _left arrow_ | In nested mode if option is open, closes the option otherwise moves focus to the parent option. |
| _home_ | Moves focus to the first menuitem within the submenu. |
| _end_ | Moves focus to the last menuitem within the submenu. |
| _any printable character_ | Moves focus to the menuitem whose label starts with the characters being typed. |
- Import
- Basic
- Icons
- Nested
- Severity
- Disabled
- Raised
- Rounded
- Text
- Raised Text
- Outlined
- Sizes
- Template
- Accessibility
# SplitButton API
API defines helper props, events and others for the PrimeVue SplitButton module.
## SplitButton [\#](https://primevue.org/splitbutton/\#api.splitbutton)
SplitButton groups a set of commands in an overlay with a default command.
### Props [\#](https://primevue.org/splitbutton/\#api.splitbutton.props)
Defines valid properties in SplitButton component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string | null | Text of the button. |  |
| icon | string | null | Name of the icon. |  |
| model | MenuItem\[\] | null | MenuModel instance to define the overlay items. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached.<br>Special keywords are 'body' for document body and 'self' for the element itself. |  |
| disabled | boolean | false | When present, it specifies that the element should be disabled. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| class | any | null | Style class of the component. |  |
| style | any | null | Inline style of the component. |  |
| buttonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the default button. |  |
| menuButtonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the menu button. |  |
| menuButtonIcon | string | null | Name of the menu button icon. |  |
| dropdownIcon | string | null | Name of the menu button icon. |  |
| severity | HintedString<"secondary" \| "info" \| "success" \| "warn" \| "danger" \| "contrast" \| "help"> | null | Defines the style of the button. |  |
| raised | boolean | false | Add a shadow to indicate elevation. |  |
| rounded | boolean | false | Add a circular border radius to the button. |  |
| text | boolean | false | Add a textual class to the button without a background initially. |  |
| outlined | boolean | false | Add a border class without a background initially. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the button. |  |
| plain | boolean | false | Add a plain textual class to the button without a background initially. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SplitButtonPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/splitbutton/\#api.splitbutton.emits)
Defines valid emits in SplitButton component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| click | event: Event | void | Callback to invoke when main button is clicked. |  |
### Slots [\#](https://primevue.org/splitbutton/\#api.splitbutton.slots)
Defines valid slots in SplitButton component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Button part of the content can easily be customized with the default slot instead of using the built-in modes. |  |
| buttoncontent |  | VNode<RendererNode, RendererElement, Object>\[\] | Command button part of the content can easily be customized with the button content slot. |  |
| icon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom button icon template. |  |
| menubuttonicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| dropdownicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom menu button icon template. |  |
| menuitemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom menu item icon template. |  |
| item | scope: {<br>item: MenuItem, // Menuitem instancelabel: undefined, // Label property of the menuitemprops: TieredMenuRouterBindProps, // Binding properties of the menuitemhasSubmenu: boolean, // Whether or not there is a submenu<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each menu item. |  |
### Interfaces [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces)
Defines the custom interfaces used by the module.
#### SplitButtonPassThroughMethodOptions [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces.SplitButtonPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SplitButtonProps](https://primevue.org/splitbutton/#api.splitbutton.interfaces.SplitButtonProps) | null | Defines valid properties. |
| state | [SplitButtonState](https://primevue.org/splitbutton/#api.splitbutton.interfaces.SplitButtonState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### SplitButtonSharedPassThroughMethodOptions [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces.SplitButtonSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [SplitButtonProps](https://primevue.org/splitbutton/#api.splitbutton.interfaces.SplitButtonProps) | null | Defines valid properties. |
| state | [SplitButtonState](https://primevue.org/splitbutton/#api.splitbutton.interfaces.SplitButtonState) | null | Defines current inline state. |
#### SplitButtonPassThroughOptions [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces.SplitButtonPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [SplitButtonPassThroughOptionType](https://primevue.org/splitbutton/#api.splitbutton.types.SplitButtonPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcButton | any | null | Used to pass attributes to the Button component. |
| pcDropdown | any | null | Used to pass attributes to the Button component. |
| pcMenu | any | null | Used to pass attributes to the TieredMenu component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### SplitButtonPassThroughAttributes [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces.SplitButtonPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### SplitButtonState [\#](https://primevue.org/splitbutton/\#api.splitbutton.interfaces.SplitButtonState)
Defines current inline state in SplitButton component.
| name | type | default | description |
| --- | --- | --- | --- |
| isExpanded | boolean | false | Current expanded state as a boolean. |
## Types [\#](https://primevue.org/splitbutton/\#api.splitbutton.types)
Defines the custom types used by the module.
#### SplitButtonPassThroughOptionType [\#](https://primevue.org/splitbutton/\#api.splitbutton.types.SplitButtonPassThroughOptionType)
| values |
| --- |
| SplitButtonPassThroughAttributes \| (options: SplitButtonPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### SplitButtonEmits [\#](https://primevue.org/splitbutton/\#api.splitbutton.types.SplitButtonEmits)
| values |
| --- |
| EmitFn<SplitButtonEmitsOptions> |
- SplitButton
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue VirtualScroller
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# VirtualScroller
VirtualScroller is a performant approach to render large amounts of data efficiently.
## Import [\#](https://primevue.org/virtualscroller/\#import)
```javascript
import VirtualScroller from 'primevue/virtualscroller';
```
Copy
## Basic [\#](https://primevue.org/virtualscroller/\#basic)
VirtualScroller requires _items_ as the data to display, _itemSize_ for the dimensions of an item and _item_ template are required on component. In addition, an initial array is required based on the total number of items to display. Size of the viewport is configured using _scrollWidth_, _scrollHeight_ properties directly or with CSS _width_ and _height_ styles.
Item #0
Item #1
Item #2
Item #3
Item #4
Item #5
Item #6
Item #7
```markup
<VirtualScroller :items="items" :itemSize="50" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>
```
Copy
## Horizontal [\#](https://primevue.org/virtualscroller/\#horizontal)
Setting _orientation_ to _horizontal_ enables scrolling horizontally. In this case, the _itemSize_ should refer to the width of an item.
Item #0
Item #1
Item #2
Item #3
Item #4
Item #5
Item #6
Item #7
```markup
<VirtualScroller :items="items" :itemSize="50" orientation="horizontal" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px" :pt="{ content: 'flex flex-row' }">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="width: 50px; writing-mode: vertical-lr;">{{ item }}</div>
    </template>
</VirtualScroller>
```
Copy
## Grid [\#](https://primevue.org/virtualscroller/\#grid)
Scrolling can be enabled vertically and horizontally when _orientation_ is set as _both_. In this mode, _itemSize_ should be an array where first value is the height of an item and second is the width.
Item #0\_0
Item #0\_1
Item #0\_2
Item #0\_3
Item #1\_0
Item #1\_1
Item #1\_2
Item #1\_3
Item #2\_0
Item #2\_1
Item #2\_2
Item #2\_3
Item #3\_0
Item #3\_1
Item #3\_2
Item #3\_3
Item #4\_0
Item #4\_1
Item #4\_2
Item #4\_3
Item #5\_0
Item #5\_1
Item #5\_2
Item #5\_3
Item #6\_0
Item #6\_1
Item #6\_2
Item #6\_3
Item #7\_0
Item #7\_1
Item #7\_2
Item #7\_3
```markup
<VirtualScroller :items="items" :itemSize="[50, 100]" orientation="both" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">
            <template v-for="(el, index) of item" :key="index">
                <div style="width: 100px">{{ el }}</div>
            </template>
        </div>
    </template>
</VirtualScroller>
```
Copy
## Delay [\#](https://primevue.org/virtualscroller/\#delay)
The _delay_ property adds a threshold to wait in milliseconds during scrolling for render optimization.
No Delay
Item #0
Item #1
Item #2
Item #3
Item #4
Item #5
Item #6
Item #7
150ms
Item #0
Item #1
Item #2
Item #3
Item #4
Item #5
Item #6
Item #7
500ms
Item #0
Item #1
Item #2
Item #3
Item #4
Item #5
Item #6
Item #7
```markup
<VirtualScroller :items="items" :itemSize="50" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>
<VirtualScroller :items="items" :itemSize="50" :delay="150" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>
<VirtualScroller :items="items" :itemSize="50" :delay="500" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>
```
Copy
## Loading [\#](https://primevue.org/virtualscroller/\#loading)
Busy state is enabled by adding _showLoader_ property which blocks the UI with a modal by default. Alternatively, _loader_ template can be used to customize items e.g. with [Skeleton](https://primevue.org/skeleton/).
Modal
Item #0
Item #1
Item #2
Item #3
Item #4
Item #5
Item #6
Item #7
Skeleton
Item #0
Item #1
Item #2
Item #3
Item #4
Item #5
Item #6
Item #7
```markup
<VirtualScroller :items="items" :itemSize="50" showLoader :delay="250" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>
<VirtualScroller :items="items" :itemSize="50" showLoader :delay="250" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
    <template v-slot:loader="{ options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">
            <Skeleton :width="options.even ? '60%' : '50%'" height="1.3rem" />
        </div>
    </template>
</VirtualScroller>
```
Copy
## Lazy [\#](https://primevue.org/virtualscroller/\#lazy)
Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded on demand. To implement lazy loading, enable the _lazy_ property and implement _onLazyLoad_ callback to return data.
```markup
<VirtualScroller :items="lazyItems" :itemSize="50" showLoader :delay="250" :loading="lazyLoading" lazy @lazy-load="onLazyLoad" class="border border-surface-200 dark:border-surface-700 rounded" style="width: 200px; height: 200px">
    <template v-slot:item="{ item, options }">
        <div :class="['flex items-center p-2', { 'bg-surface-100 dark:bg-surface-700': options.odd }]" style="height: 50px">{{ item }}</div>
    </template>
</VirtualScroller>
```
Copy
## Accessibility [\#](https://primevue.org/virtualscroller/\#accessibility)
### Screen Reader
VirtualScroller has no specific role is enforced, still you may use any aria role and attributes as any valid attribute is passed to the container element.
### Keyboard Support
Component does not include any built-in interactive elements.
- Import
- Basic
- Horizontal
- Grid
- Delay
- Loading
- Lazy
- Accessibility
# VirtualScroller API
API defines helper props, events and others for the PrimeVue VirtualScroller module.
## VirtualScroller [\#](https://primevue.org/virtualscroller/\#api.virtualscroller)
VirtualScroller is a performant approach to handle huge data efficiently.
### Props [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.props)
Defines valid properties in VirtualScroller component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| id | string | null | Unique identifier of the element. |  |
| style | any | null | Inline style of the component. |  |
| class | any | null | Style class of the component. |  |
| items | null \| any\[\] \| any\[\]\[\] | null | An array of objects to display. |  |
| itemSize | number \| number\[\] | null | The height/width of item according to orientation. |  |
| scrollHeight | string | null | Height of the scroll viewport. |  |
| scrollWidth | string | null | Width of the scroll viewport. |  |
| orientation | HintedString<"both" \| "horizontal" \| "vertical"> | vertical | The orientation of scrollbar. |  |
| numToleratedItems | number | half the number of items shown in the view. | Determines how many additional elements to add to the DOM outside of the view.<br>According to the scrolls made up and down, extra items are added in a certain algorithm in the form of multiples of this number. |  |
| delay | number | 0 | Delay in scroll before new data is loaded. |  |
| resizeDelay | number | 10 | Delay after window's resize finishes. |  |
| lazy | boolean | false | Defines if data is loaded and interacted with in lazy manner. |  |
| disabled | boolean | false | If disabled, the VirtualScroller feature is eliminated and the content is displayed directly. |  |
| loaderDisabled | boolean | false | Used to implement a custom loader instead of using the loader feature in the VirtualScroller. |  |
| showLoader | boolean | false | Whether to show loader. |  |
| showSpacer | boolean | true | Used to implement a custom spacer instead of using the spacer feature in the VirtualScroller. |  |
| loading | boolean | false | Whether to load items. |  |
| tabindex | string \| number | 0 | Index of the element in tabbing order. |  |
| inline | boolean | false | When enabled, positions the content as inline. |  |
| step | number | 0 | Used to specify how many items to load in each load method in lazy mode. |  |
| appendOnly | boolean | false | Used to append each loaded item to top without removing any items from the DOM. Using very large data may cause the browser to crash. |  |
| autoSize | boolean | false | Whether to dynamically change the height or width of scrollable container. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<VirtualScrollerPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.emits)
Defines valid emits in VirtualScroller component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:numToleratedItems | value: number | void | Emitted when the numToleratedItems changes. |  |
| scroll | event: Event | void | Callback to invoke when scroll position changes. |  |
| scroll-index-change | event: [VirtualScrollerScrollIndexChangeEvent](https://primevue.org/virtualscroller/#api.virtualscroller.events.VirtualScrollerScrollIndexChangeEvent) | void | Callback to invoke when scroll position and item's range in view changes. |  |
| lazy-load | event: [VirtualScrollerLazyEvent](https://primevue.org/virtualscroller/#api.virtualscroller.events.VirtualScrollerLazyEvent) | void | Callback to invoke in lazy mode to load new data. |  |
### Slots [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.slots)
Defines valid slots in VirtualScroller component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| content | scope: {<br>items: any, // An array of objects to display for virtualscrollerstyleClass: string, // Style class of the contentcontentRef: (el: any) â‡’ void, // Referance of the contentgetItemOptions: (index: number) â‡’ VirtualScrollerItemOptions, // Options of the itemsloading: boolean, // Whether the data is loaded.getLoaderOptions: (index: number, ext: any) â‡’ VirtualScrollerLoaderOptions, // Loader options of the items while the data is loading.itemSize: undefined, // The height/width of item according to orientation.rows: undefined, // The number of the rendered rows.columns: undefined, // The number of the rendered columns.spacerStyle: any, // The style of spacer element.contentStyle: any, // The style of content element.vertical: boolean, // Whether the orientation is vertical.horizontal: boolean, // Whether the orientation is horizontal.both: boolean, // Whether the orientation is both.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| item | scope: {<br>item: any, // Item data.options: VirtualScrollerItemOptions, // Item options.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item template. |  |
| loader | scope: {<br>options: VirtualScrollerLoaderOptions, // Loader options.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loader template. |  |
| loadingicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading icon template. |  |
### Methods [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.methods)
Defines methods that can be accessed by the component's reference.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| scrollTo | options: ScrollToOptions | void | Scroll to move to a specific position. |  |
| scrollToIndex | index: number | void | Scroll to move to a specific item. |  |
| scrollInView | index: number | void | It is used to move the specified index into the view. It is a method that will usually be needed when keyboard support is added to the virtualScroller component. |  |
| getRenderedRange |  | VirtualScrollerRangeMethod | Returns the range of items added to the DOM. |  |
### Events [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.events)
Defines the custom events used by the component's emit.
#### VirtualScrollerScrollIndexChangeEvent [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.events.VirtualScrollerScrollIndexChangeEvent)
Custom scroll index change event.
See [scroll-index-change](https://primevue.org/virtualscroller/#api.virtualscroller.emitsoptions.scroll-index-change)
| name | type | description |
| --- | --- | --- |
| first | number | First index of the new data range to be loaded. |
| last | number | Last index of the new data range to be loaded. |
#### VirtualScrollerLazyEvent [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.events.VirtualScrollerLazyEvent)
Custom lazy event.
See [scroll-index-change](https://primevue.org/virtualscroller/#api.virtualscroller.emitsoptions.scroll-index-change)
| name | type | description |
| --- | --- | --- |
| first | number | First index of the new data range to be loaded. |
| last | number | Last index of the new data range to be loaded. |
### Interfaces [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces)
Defines the custom interfaces used by the module.
#### VirtualScrollerPassThroughMethodOptions [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [VirtualScrollerProps](https://primevue.org/virtualscroller/#api.virtualscroller.interfaces.VirtualScrollerProps) | null | Defines valid properties. |
| state | [VirtualScrollerState](https://primevue.org/virtualscroller/#api.virtualscroller.interfaces.VirtualScrollerState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### VirtualScrollerViewport [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerViewport)
Custom virtualscroller viewport metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| first | number | null | First index of the new data range to be loaded. |
| last | number | null | Last index of the new data range to be loaded. |
#### VirtualScrollerRangeMethod [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerRangeMethod)
Virtual scroller rendered range.
| name | type | default | description |
| --- | --- | --- | --- |
| first | number | null | Whether the item is first. |
| last | number | null | Whether the item is last. |
| viewport | [VirtualScrollerViewport](https://primevue.org/virtualscroller/#api.virtualscroller.interfaces.VirtualScrollerViewport) | null | Viewport info. |
#### VirtualScrollerItemOptions [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerItemOptions)
Custom item options.
| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Item index |
| count | number | null | Items count |
| first | boolean | null | Whether the item is first. |
| last | boolean | null | Whether the item is last. |
| even | boolean | null | Whether the item is even. |
| odd | boolean | null | Whether the item is odd. |
| \[key: string\] | any | null |  |
#### VirtualScrollerPassThroughOptions [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [VirtualScrollerPassThroughOptionType](https://primevue.org/virtualscroller/#api.virtualscroller.types.VirtualScrollerPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| content | [VirtualScrollerPassThroughOptionType](https://primevue.org/virtualscroller/#api.virtualscroller.types.VirtualScrollerPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| loader | [VirtualScrollerPassThroughOptionType](https://primevue.org/virtualscroller/#api.virtualscroller.types.VirtualScrollerPassThroughOptionType) | null | Used to pass attributes to the loader's DOM element. |
| loadingIcon | [VirtualScrollerPassThroughOptionType](https://primevue.org/virtualscroller/#api.virtualscroller.types.VirtualScrollerPassThroughOptionType) | null | Used to pass attributes to the loading icon's DOM element. |
| spacer | [VirtualScrollerPassThroughOptionType](https://primevue.org/virtualscroller/#api.virtualscroller.types.VirtualScrollerPassThroughOptionType) | null | Used to pass attributes to the spacer's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### VirtualScrollerPassThroughAttributes [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### VirtualScrollerState [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerState)
Defines current inline state in VirtualScroller component.
| name | type | default | description |
| --- | --- | --- | --- |
| first | number | null | First index of the new data range to be loaded as a number. |
| last | number | null | Last index of the new data range to be loaded as a number. |
| page | number | null | Index of the first item as a number. |
| numItemsInViewport | number | null | Visible item count in the viewport as a number. |
| lastScrollPos | number | null | Lastest scroll position as a number. |
| d\_numToleratedItems | number | null | Additional elements to add to the DOM outside of the view as a number. |
| d\_loading | number | false | Current loading state as a boolean. |
| loaderArr | any\[\] | null | Loadable items array. |
| spacerStyle | any | null | The style of spacer element. |
| contentStyle | any | null | The style of content element. |
#### VirtualScrollerLoaderOptions [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.interfaces.VirtualScrollerLoaderOptions)
Custom virtualscroller loader options
| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Item index |
| count | number | null | Items count |
| first | boolean | null | Whether the item is first. |
| last | boolean | null | Whether the item is last. |
| even | boolean | null | Whether the item is even. |
| odd | boolean | null | Whether the item is odd. |
## Types [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.types)
Defines the custom types used by the module.
#### VirtualScrollerPassThroughOptionType [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.types.VirtualScrollerPassThroughOptionType)
| values |
| --- |
| VirtualScrollerPassThroughAttributes \| (options: VirtualScrollerPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### VirtualScrollerEmits [\#](https://primevue.org/virtualscroller/\#api.virtualscroller.types.VirtualScrollerEmits)
| values |
| --- |
| EmitFn<VirtualScrollerEmitsOptions> |
- VirtualScroller
  - Props
  - Emits
  - Slots
  - Methods
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Input Group Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# InputGroup
Text, icon, buttons and other content can be grouped next to an input.
## Import [\#](https://primevue.org/inputgroup/\#import)
```javascript
import InputGroup from 'primevue/inputgroup';
import InputGroupAddon from 'primevue/inputgroupaddon';
```
Copy
## Basic [\#](https://primevue.org/inputgroup/\#basic)
A group is created by wrapping the input and add-ons with the _InputGroup_ component. Each add-on element is defined as a child of _InputGroupAddon_ component.
$
.00
www
City
```markup
<InputGroup>
    <InputGroupAddon>
        <i class="pi pi-user"></i>
    </InputGroupAddon>
    <InputText v-model="text1" placeholder="Username" />
</InputGroup>
<InputGroup>
    <InputGroupAddon>$</InputGroupAddon>
    <InputNumber v-model="number" placeholder="Price" />
    <InputGroupAddon>.00</InputGroupAddon>
</InputGroup>
<InputGroup>
    <InputGroupAddon>www</InputGroupAddon>
    <InputText v-model="text2" placeholder="Website" />
</InputGroup>
<InputGroup>
    <InputGroupAddon>
        <i class="pi pi-map"></i>
    </InputGroupAddon>
    <Select v-model="selectedCity" :options="cities" optionLabel="name" placeholder="City" />
</InputGroup>
```
Copy
## Multiple [\#](https://primevue.org/inputgroup/\#multiple)
Multiple add-ons can be placed inside the same group.
$
.00
```markup
<InputGroup class="sm:!w-96">
    <InputGroupAddon>
        <i class="pi pi-clock"></i>
    </InputGroupAddon>
    <InputGroupAddon>
        <i class="pi pi-star-fill"></i>
    </InputGroupAddon>
    <InputNumber placeholder="Price" />
    <InputGroupAddon>$</InputGroupAddon>
    <InputGroupAddon>.00</InputGroupAddon>
</InputGroup>
```
Copy
## Button [\#](https://primevue.org/inputgroup/\#button)
Buttons can be placed at either side of an input element.
Search
```markup
<InputGroup>
    <Button label="Search" />
    <InputText placeholder="Keyword" />
</InputGroup>
<InputGroup>
    <InputText placeholder="Keyword" />
    <InputGroupAddon>
        <Button icon="pi pi-search" severity="secondary" variant="text" @click="toggle" />
    </InputGroupAddon>
</InputGroup>
<Menu ref="menu" :model="items" popup class="!min-w-fit" />
<InputGroup>
    <InputGroupAddon>
        <Button icon="pi pi-check" severity="secondary" />
    </InputGroupAddon>
    <InputText placeholder="Vote" />
    <InputGroupAddon>
        <Button icon="pi pi-times" severity="secondary" />
    </InputGroupAddon>
</InputGroup>
```
Copy
## Checkbox & Radio [\#](https://primevue.org/inputgroup/\#checkbox)
Checkbox and RadioButton components can be combined with an input element under the same group.
```markup
<InputGroup>
    <InputText placeholder="Price" />
    <InputGroupAddon>
        <RadioButton v-model="radioValue1" name="rb1" value="rb1" />
    </InputGroupAddon>
</InputGroup>
<InputGroup>
    <InputGroupAddon>
        <Checkbox v-model="checked1" :binary="true" />
    </InputGroupAddon>
    <InputText placeholder="Username" />
</InputGroup>
<InputGroup>
    <InputGroupAddon>
        <Checkbox v-model="checked2" :binary="true" />
    </InputGroupAddon>
    <InputText placeholder="Website" />
    <InputGroupAddon>
        <RadioButton v-model="radioValue2" name="rb2" value="rb2" />
    </InputGroupAddon>
</InputGroup>
```
Copy
## Float Label [\#](https://primevue.org/inputgroup/\#floatlabel)
FloatLabel visually integrates a label with its form element. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
Over Label
$
In Label
.00
www
On Label
```markup
<InputGroup>
    <InputGroupAddon>
        <i class="pi pi-user"></i>
    </InputGroupAddon>
    <FloatLabel>
        <InputText id="over_label" v-model="value1" />
        <label for="over_label">Over Label</label>
    </FloatLabel>
</InputGroup>
<InputGroup>
    <InputGroupAddon>$</InputGroupAddon>
    <FloatLabel variant="in">
        <InputText id="in_label" v-model="value2" />
        <label for="in_label">In Label</label>
    </FloatLabel>
    <InputGroupAddon>.00</InputGroupAddon>
</InputGroup>
<InputGroup>
    <InputGroupAddon>www</InputGroupAddon>
    <FloatLabel variant="on">
        <InputText id="on_label" v-model="value3" />
        <label for="on_label">On Label</label>
    </FloatLabel>
</InputGroup>
```
Copy
## Ifta Label [\#](https://primevue.org/inputgroup/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
Price
```markup
<InputGroup class="md:w-80">
    <InputGroupAddon>
        <i class="pi pi-shopping-cart"></i>
    </InputGroupAddon>
    <IftaLabel>
        <InputNumber v-model="value" inputId="price" mode="currency" currency="USD" locale="en-US" />
        <label for="price">Price</label>
    </IftaLabel>
</InputGroup>
```
Copy
## Accessibility [\#](https://primevue.org/inputgroup/\#accessibility)
### Screen Reader
InputGroup and InputGroupAddon do not require any roles and attributes.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Multiple
- Button
- Checkbox & Radio
- Float Label
- Ifta Label
- Accessibility
# InputGroup API
API defines helper props, events and others for the PrimeVue InputGroup module.
## InputGroup [\#](https://primevue.org/inputgroup/\#api.inputgroup)
InputGroup displays text, icon, buttons and other content can be grouped next to an input.
### Props [\#](https://primevue.org/inputgroup/\#api.inputgroup.props)
Defines valid properties in InputGroup component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<InputGroupPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/inputgroup/\#api.inputgroup.slots)
Defines valid slots in InputGroup component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom default template. |  |
### Interfaces [\#](https://primevue.org/inputgroup/\#api.inputgroup.interfaces)
Defines the custom interfaces used by the module.
#### InputGroupPassThroughMethodOptions [\#](https://primevue.org/inputgroup/\#api.inputgroup.interfaces.InputGroupPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [InputGroupProps](https://primevue.org/inputgroup/#api.inputgroup.interfaces.InputGroupProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### InputGroupPassThroughOptions [\#](https://primevue.org/inputgroup/\#api.inputgroup.interfaces.InputGroupPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [InputGroupPassThroughOptionType](https://primevue.org/inputgroup/#api.inputgroup.types.InputGroupPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### InputGroupPassThroughAttributes [\#](https://primevue.org/inputgroup/\#api.inputgroup.interfaces.InputGroupPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/inputgroup/\#api.inputgroup.types)
Defines the custom types used by the module.
#### InputGroupPassThroughOptionType [\#](https://primevue.org/inputgroup/\#api.inputgroup.types.InputGroupPassThroughOptionType)
| values |
| --- |
| InputGroupPassThroughAttributes \| (options: InputGroupPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### InputGroupEmits [\#](https://primevue.org/inputgroup/\#api.inputgroup.types.InputGroupEmits)
| values |
| --- |
| EmitFn<InputGroupEmitsOptions> |
## InputGroupAddon [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon)
InputGroupAddon displays text, icon, buttons and other content can be grouped next to an input.
### Props [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.props)
Defines valid properties in InputGroupAddon component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<InputGroupAddonPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.slots)
Defines valid slots in InputGroupAddon component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom default template. |  |
### Interfaces [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.interfaces)
Defines the custom interfaces used by the module.
#### InputGroupAddonPassThroughMethodOptions [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.interfaces.InputGroupAddonPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### InputGroupAddonPassThroughOptions [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.interfaces.InputGroupAddonPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [InputGroupAddonPassThroughOptionType](https://primevue.org/inputgroup/#api.inputgroupaddon.types.InputGroupAddonPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### InputGroupAddonPassThroughAttributes [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.interfaces.InputGroupAddonPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.types)
Defines the custom types used by the module.
#### InputGroupAddonPassThroughOptionType [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.types.InputGroupAddonPassThroughOptionType)
| values |
| --- |
| InputGroupAddonPassThroughAttributes \| (options: InputGroupAddonPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### InputGroupAddonEmits [\#](https://primevue.org/inputgroup/\#api.inputgroupaddon.types.InputGroupAddonEmits)
| values |
| --- |
| EmitFn<InputGroupAddonEmitsOptions> |
- InputGroup
  - Props
  - Slots
  - Interfaces
  - Types
- InputGroupAddon
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Nuxt Setup
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Install PrimeVue with Nuxt
Setting up PrimeVue in a Nuxt project.
## Download [\#](https://primevue.org/nuxt/\#download)
PrimeVue is available for download on [npm registry](https://www.npmjs.com/package/primevue) along with the official [@primevue/nuxt-module](https://www.npmjs.com/package/@primevue/nuxt-module).
```markup
# Using npm
npm install primevue @primeuix/themes
npm install --save-dev @primevue/nuxt-module
# Using yarn
yarn add primevue @primeuix/themes
yarn add --dev @primevue/nuxt-module
# Using pnpm
pnpm add primevue @primeuix/themes
pnpm add -D @primevue/nuxt-module
```
Copy
## Module [\#](https://primevue.org/nuxt/\#module)
In _nuxt.config_ file, add the _@primevue/nuxt-module_ to the modules section and define _primevue_ object for the configuration of the module.
```javascript
export default defineNuxtConfig({
    modules: [\
        '@primevue/nuxt-module'\
    ],
    primevue: {
        /* Configuration */
    }
})
```
Copy
## Theme [\#](https://primevue.org/nuxt/\#theme)
Configure the module to use a theme like Aura.
```javascript
import Aura from '@primeuix/themes/aura';
export default defineNuxtConfig({
    modules: [\
        '@primevue/nuxt-module'\
    ],
    primevue: {
        options: {
            theme: {
                preset: Aura
            }
        }
    }
})
```
Copy
## Verify [\#](https://primevue.org/nuxt/\#verify)
The nuxt-primevue module registers the components automatically with tree-shaking support so you may start using them instantly.
Verify
```markup
<Button label="Verify" />
```
Copy
## Configuration [\#](https://primevue.org/nuxt/\#configuration)
### usePrimeVue [\#](https://primevue.org/nuxt/\#useprimevue)
The module installs the PrimeVue plugin by default. Disable this option if you prefer to configure PrimeVue manually e.g. with a Nuxt plugin.
```javascript
primevue: {
    usePrimeVue: true | false
}
```
Copy
### options [\#](https://primevue.org/nuxt/\#options)
Main configuration settings of PrimeVue, refer to the [configuration](https://primevue.org/configuration/) documentation for details.
```javascript
import Aura from '@primeuix/themes/aura';
export default defineNuxtConfig({
    modules: [\
        '@primevue/nuxt-module'\
    ],
    primevue: {
        options: {
            ripple: true,
            inputVariant: 'filled',
            theme: {
                preset: Aura,
                options: {
                    prefix: 'p',
                    darkModeSelector: 'system',
                    cssLayer: false
                }
            }
        }
    }
})
```
Copy
### autoImport [\#](https://primevue.org/nuxt/\#autoimport)
The [auto import](https://primevue.org/autoimport) feature registers components automatically with tree shaking support. Defaults to _true_, when disabled use include/exclude options of _components_ and _directives_ for manual registration.
```javascript
primevue: {
    autoImport: true|false
}
```
Copy
Use the _prefix_ in _components_ and _directives_ to add a prefix for registration.
```javascript
primevue: {
    autoImport: true|false,
    components: {
        prefix: 'org'
    },
    directives: {
        prefix: 'org'
    }
}
```
Copy
### importPT [\#](https://primevue.org/nuxt/\#importpt)
Configures the global pass through import path.
```javascript
primevue: {
    importPT: { from: '@/passthrough/mycustompt.js' }
}
```
Copy
_mycustompt.js_ file defines the configuration and exports it.
```javascript
const MyCustomPT = {
    ...
    button: {
        root: 'my-button',
       ...
    },
    ...
}
export default MyCustomPT;
```
Copy
### importTheme [\#](https://primevue.org/nuxt/\#importtheme)
Configures the theme configuration path for the customizations of a theme in styled mode.
```javascript
primevue: {
    importTheme: { from: '@/themes/mytheme.js' },
}
```
Copy
The _mytheme.js_ file contains the theme configuration.
```javascript
import { definePreset } from '@primeuix/themes';
import Aura from '@primeuix/themes/aura';
const MyPreset = definePreset(Aura, {
    semantic: {
        primary: {
            50: '{indigo.50}',
            100: '{indigo.100}',
            200: '{indigo.200}',
            300: '{indigo.300}',
            400: '{indigo.400}',
            500: '{indigo.500}',
            600: '{indigo.600}',
            700: '{indigo.700}',
            800: '{indigo.800}',
            900: '{indigo.900}',
            950: '{indigo.950}'
        }
    }
});
export default {
    preset: MyPreset,
    options: {
        darkModeSelector: '.p-dark'
    }
};
```
Copy
### components [\#](https://primevue.org/nuxt/\#components)
When _autoImport_ is disabled, use the _include_ and _exclude_ for manual registration.
The components to import and register are defined with the _include_ option using a string array. When the value is ignored or set using the _\*_ alias, all of the components are registered.
```javascript
primevue: {
    components: {
        include: ['Button', 'DataTable']
    }
}
```
Copy
In case all components are imported, particular components can still be excluded with the _exclude_ option.
```javascript
primevue: {
    components: {
        include: '*',
        exclude: ['Galleria', 'Carousel']
    }
}
```
Copy
By default, for compatibility reasons, Chart and Editor components are excluded. To include them simply set the _exclude_ option to an empty list.
```javascript
primevue: {
    components: {
        exclude: []
    }
}
```
Copy
Use the _prefix_ option to give a prefix to the registered component names.
```javascript
primevue: {
    components: {
        prefix: 'Prime'
        include: ['Button', 'DataTable']    /* Used as <PrimeButton /> and <PrimeDataTable /> */
    }
}
```
Copy
Component registration can be customized further by implementing the _name_ function that gets an object representing the import metadata. _name_ is the label of the component, _as_ is the default export name and _from_ is the import path.
```javascript
primevue: {
    components: {
        name: ({ name, as, from }) => {
            return name === 'Button' ? `My${name}` : name;
        },
        include: ['Button', 'DataTable']    /* Used as <MyButton /> and <DataTable /> */
    }
}
```
Copy
### directives [\#](https://primevue.org/nuxt/\#directives)
When _autoImport_ is disabled, use the _include_ and _exclude_ for manual registration.
The names of the directives to import and register are provided using the _include_ property. When the value is ignored or set using the _\*_ alias, all of the directives are registered.
```javascript
primevue: {
    directives: {
        include: ['Ripple', 'Tooltip']
    }
}
```
Copy
Similar to components, certain directives can be excluded and name registration can be customized.
```javascript
primevue: {
    directives: {
        include: '*',
        exclude: ['Ripple']
    }
}
```
Copy
```javascript
primevue: {
    directives: {
        prefix: 'p'
        include: ['Ripple', 'Tooltip']    /* Used as v-pripple and v-ptooltip */
    }
}
```
Copy
### composables [\#](https://primevue.org/nuxt/\#composables)
Determines the composables to use, when default value is ignored or set as _\*_ all composables are imported.
```javascript
primevue: {
    composables: {
        include: ['useStyle']
    }
}
```
Copy
## Examples [\#](https://primevue.org/nuxt/\#examples)
[Nuxt based samples](https://github.com/primefaces/primevue-examples/tree/main/nuxt-quickstart) with different options are available at PrimeVue examples repository.
## Next Steps [\#](https://primevue.org/nuxt/\#nextsteps)
Welcome to the Prime UI Ecosystem! Once you have PrimeVue up and running, we recommend exploring the following resources to gain a deeper understanding of the library.
- [Global configuration](https://primevue.org/configuration)
- [Customization of styles](https://primevue.org/theming/styled)
- [Pass through attributes](https://primevue.org/passthrough)
- [Getting support](https://primevue.org/support)
- Download
- Module
- Theme
- Verify
- Configuration
  - usePrimeVue
  - options
  - autoImport
  - importPT
  - importTheme
  - components
  - directives
  - composables
- Examples
- Next Steps
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Toolbar Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Toolbar
Toolbar is a grouping component for buttons and other content.
## Import [\#](https://primevue.org/toolbar/\#import)
```javascript
import Toolbar from 'primevue/toolbar';
```
Copy
## Basic [\#](https://primevue.org/toolbar/\#basic)
Toolbar provides _start_, _center_ and _end_ properties to place content at these sections.
Save
```markup
<Toolbar>
    <template #start>
        <Button icon="pi pi-plus" class="mr-2" severity="secondary" text />
        <Button icon="pi pi-print" class="mr-2" severity="secondary" text />
        <Button icon="pi pi-upload" severity="secondary" text />
    </template>
    <template #center>
        <IconField>
            <InputIcon>
                <i class="pi pi-search" />
            </InputIcon>
            <InputText placeholder="Search" />
        </IconField>
    </template>
    <template #end> <SplitButton label="Save" :model="items"></SplitButton></template>
</Toolbar>
```
Copy
## Custom [\#](https://primevue.org/toolbar/\#custom)
A customized toolbar with navigation bar functionality.
FilesEditView
Share
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
```markup
<Toolbar style="border-radius: 3rem; padding: 1rem 1rem 1rem 1.5rem">
    <template #start>
        <div class="flex items-center gap-2">
            <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="..." fill="var(--p-text-color)" />
                <path d="..." fill="transparent" />
            </svg>
            <Button label="Files" text plain />
            <Button label="Edit" text plain />
            <Button label="View" text plain />
        </div>
    </template>
    <template #end>
        <div class="flex items-center gap-2">
            <Button label="Share" severity="contrast" size="small" />
            <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" style="width: 32px; height: 32px" />
        </div>
    </template>
</Toolbar>
```
Copy
## Accessibility [\#](https://primevue.org/toolbar/\#accessibility)
### Screen Reader
Toolbar uses _toolbar_ role to the root element, _aria-orientation_ is not included as it defaults to "horizontal". Any valid attribute is passed to the root element so you may add additional properties like _aria-labelledby_ to define the element if required.
### Keyboard Support
Component does not include any interactive elements. Arbitrary content can be placed with templating and elements like buttons inside should follow the page tab sequence.
- Import
- Basic
- Custom
- Accessibility
# Toolbar API
API defines helper props, events and others for the PrimeVue Toolbar module.
## Toolbar [\#](https://primevue.org/toolbar/\#api.toolbar)
Toolbar is a grouping component for buttons and other content.
### Props [\#](https://primevue.org/toolbar/\#api.toolbar.props)
Defines valid properties in Toolbar component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| ariaLabelledby | string | null | Defines a string value that labels an interactive element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ToolbarPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/toolbar/\#api.toolbar.slots)
Defines valid slots in Toolbar slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| start |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom start template. |  |
| center |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom center template. |  |
| end |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom end template. |  |
### Interfaces [\#](https://primevue.org/toolbar/\#api.toolbar.interfaces)
Defines the custom interfaces used by the module.
#### ToolbarPassThroughMethodOptions [\#](https://primevue.org/toolbar/\#api.toolbar.interfaces.ToolbarPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ToolbarProps](https://primevue.org/toolbar/#api.toolbar.interfaces.ToolbarProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ToolbarPassThroughOptions [\#](https://primevue.org/toolbar/\#api.toolbar.interfaces.ToolbarPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ToolbarPassThroughOptionType](https://primevue.org/toolbar/#api.toolbar.types.ToolbarPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| start | [ToolbarPassThroughOptionType](https://primevue.org/toolbar/#api.toolbar.types.ToolbarPassThroughOptionType) | null | Used to pass attributes to the start's DOM element. |
| center | [ToolbarPassThroughOptionType](https://primevue.org/toolbar/#api.toolbar.types.ToolbarPassThroughOptionType) | null | Used to pass attributes to the center's DOM element. |
| end | [ToolbarPassThroughOptionType](https://primevue.org/toolbar/#api.toolbar.types.ToolbarPassThroughOptionType) | null | Used to pass attributes to the right's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ToolbarPassThroughAttributes [\#](https://primevue.org/toolbar/\#api.toolbar.interfaces.ToolbarPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/toolbar/\#api.toolbar.types)
Defines the custom types used by the module.
#### ToolbarPassThroughOptionType [\#](https://primevue.org/toolbar/\#api.toolbar.types.ToolbarPassThroughOptionType)
| values |
| --- |
| ToolbarPassThroughAttributes \| (options: ToolbarPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ToolbarEmits [\#](https://primevue.org/toolbar/\#api.toolbar.types.ToolbarEmits)
| values |
| --- |
| EmitFn<ToolbarEmitsOptions> |
- Toolbar
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue UI Components
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![PrimeVue Designer](https://primefaces.org/cdn/primevue/images/overview.png)![PrimeVue Designer](https://primefaces.org/cdn/primevue/images/overview-mobile.png)
# Introduction
Next-generation UI Component suite for Vue.
## Overview [\#](https://primevue.org/introduction/\#overview)
PrimeVue is a complete UI suite for Vue.js consisting of a rich set of UI components, icons, blocks, and application templates. The project's primary goal is to boost developer productivity by offering reusable solutions that are easy to tune and customize as an in-house library.
The project has been created by [PrimeTek](https://www.primetek.com.tr/) a world-renowned vendor of popular UI Component suites, including [PrimeFaces](https://primefaces.org/), [PrimeNG](https://primeng.org/), and [PrimeReact.](https://primereact.org/) All the members in [our team](https://primevue.org/team) are full time employees of PrimeTek who share the same passion and vision for open source to create awesome UI libraries. Depending on a 3rd party library may introduce risks if the library maintainers decide not to work on the project, however, this is not the case with PrimeVue as the track record of PrimeTek shows. For example, PrimeFaces has been maintained actively since 2008.
## Theming [\#](https://primevue.org/introduction/\#theming)
PrimeVue can be styled in two modes; styled or unstyled. Styled mode is based on pre-skinned components with opinionated theme variants of PrimeOne design like Aura, Lara or Nora presets. Unstyled mode on the other hand, leaves the styling to you while implementing the functionality and accessibility. Unstyled mode provides full control over the styling with no boundaries by implementing a pluggable architecture to utilize CSS libraries like Tailwind CSS, Bootstrap, Bulma or your own custom CSS. We've even further built the [Tailwind Presets](https://primevue.org/tailwind.primevue.org) library to skin the UI library with utility classes of Tailwind. This design is future proof as PrimeVue can be styled with any CSS library without actually depending on it in its core.
## Pass Through [\#](https://primevue.org/introduction/\#passthrough)
PassThrough is an innovative API to provide access to the internal DOM elements to add arbitrary attributes. In general, traditional UI component libraries encapsulate UI and logic with limited APIs that makes the developers dependant on the library maintainer to extend this API by adding new props or events. With [Pass Through](https://primevue.org/passthrough) this limitation has been eliminated since, you'll be able to access the internal of the components to add events and attributes. Some common use-cases are adding test attributes, additional aria attributes, custom events and styling.
## Accessibility [\#](https://primevue.org/introduction/\#accessibility)
PrimeVue has WCAG 2.1 AA level compliance; each component has a dedicated accessibility section to document several aspects, including keyboard and screen reader support. Through communication channels such as GitHub or Discord, numerous accessibility experts worldwide continue to provide constant feedback to improve the accessibility features further. View the [accessibility guide](https://primevue.org/guides/accessibility) to learn more.
## Add-Ons [\#](https://primevue.org/introduction/\#add-ons)
PrimeVue does not require financial sponsorships from its community; instead, to be backed by a solid financial foundation, optional add-ons are offered. These include a Figma UI Kit, premium application templates, and reusable UI blocks called PrimeBlocks. The add-ons are optional and there is no paywall when using PrimeVue.
- Overview
- Theming
- Pass Through
- Accessibility
- Add-Ons
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## ConfirmPopup Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# ConfirmPopup
ConfirmPopup displays a confirmation overlay displayed relatively to its target.
## Import [\#](https://primevue.org/confirmpopup/\#import)
```javascript
import ConfirmPopup from 'primevue/confirmpopup';
```
Copy
## Service [\#](https://primevue.org/confirmpopup/\#confirmation-service)
ConfirmPopup is controlled via the _ConfirmationService_ that needs to be installed as an application plugin.
```javascript
import {createApp} from 'vue';
import ConfirmationService from 'primevue/confirmationservice';
const app = createApp(App);
app.use(ConfirmationService);
```
Copy
The service is available with the _useConfirm_ function for Composition API or using the _$confirm_ property of the application for Options API.
```javascript
import { useConfirm } from "primevue/useconfirm";
const confirm = useConfirm();
```
Copy
## Basic [\#](https://primevue.org/confirmpopup/\#basic)
ConfirmPopup is displayed by calling the _require_ method of the _$confirm_ instance by passing the options to customize the Popup. The _target_ attribute is mandatory to align the popup to its referrer.
SaveDelete
```markup
<ConfirmPopup></ConfirmPopup>
<Button @click="confirm1($event)" label="Save" outlined></Button>
<Button @click="confirm2($event)" label="Delete" severity="danger" outlined></Button>
```
Copy
## Template [\#](https://primevue.org/confirmpopup/\#template)
Templating allows customizing the message content.
Save
```markup
<ConfirmPopup group="templating">
    <template #message="slotProps">
        <div class="flex flex-col items-center w-full gap-4 border-b border-surface-200 dark:border-surface-700 p-4 mb-4 pb-0">
            <i :class="slotProps.message.icon" class="text-6xl text-primary-500"></i>
            <p>{{ slotProps.message.message }}</p>
        </div>
    </template>
</ConfirmPopup>
<Button @click="showTemplate($event)" label="Save"></Button>
```
Copy
## Headless [\#](https://primevue.org/confirmpopup/\#headless)
Headless mode is enabled by defining a _container_ slot that lets you implement entire confirmation UI instead of the default elements.
Save
```markup
<ConfirmPopup group="headless">
    <template #container="{ message, acceptCallback, rejectCallback }">
        <div class="rounded p-4">
            <span>{{ message.message }}</span>
            <div class="flex items-center gap-2 mt-4">
                <Button label="Save" @click="acceptCallback" size="small"></Button>
                <Button label="Cancel" outlined @click="rejectCallback" severity="secondary" size="small" text></Button>
            </div>
        </div>
    </template>
</ConfirmPopup>
<Button @click="requireConfirmation($event)" label="Save"></Button>
```
Copy
## Accessibility [\#](https://primevue.org/confirmpopup/\#accessibility)
### Screen Reader
ConfirmPopup component uses _alertdialog_ role and since any attribute is passed to the root element you may define attributes like _aria-label_ or _aria-labelledby_ to describe the popup contents. In addition _aria-modal_ is added since focus is kept within the popup.
When _require_ method of the _$confirm_ instance is used and a trigger is passed as a parameter, ConfirmPopup adds _aria-expanded_ state attribute and _aria-controls_ to the trigger so that the relation between the trigger and the dialog is defined.
```markup
<ConfirmPopup id="confirm" aria-label="popup" />
<Button @click="openPopup($event)" label="Confirm" id="confirmButton" :aria-expanded="isVisible" :aria-controls="isVisible ? 'confirm' : null" />
```
Copy
```markup
<script setup>
const confirm = useConfirm();
const isVisible = ref(false);
const openPopup = (event) => {
    confirm.require({
        target: event.currentTarget,
        message: 'Are you sure you want to proceed?',
        header: 'Confirmation',
        onShow: () => {
            isVisible.value = true;
        },
        onHide: () => {
            isVisible.value = false;
        }
    });
}
</script>
```
Copy
### Overlay Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element within the popup. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element within the popup. |
| _escape_ | Closes the popup and moves focus to the trigger. |
### Buttons Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Triggers the action, closes the popup and moves focus to the trigger. |
| _space_ | Triggers the action, closes the popup and moves focus to the trigger. |
- Import
- Service
- Basic
- Template
- Headless
- Accessibility
# ConfirmPopup API
API defines helper props, events and others for the PrimeVue ConfirmPopup module.
## ConfirmPopup [\#](https://primevue.org/confirmpopup/\#api.confirmpopup)
ConfirmPopup displays a confirmation overlay displayed relatively to its target.
### Props [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.props)
Defines valid properties in ConfirmPopup component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| group | string | null | Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ConfirmPopupPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.slots)
Defines valid slots in ConfirmPopup component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| message | scope: {<br>message: ConfirmationOptions, // Message of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom message template. |  |
| icon | scope: {<br>class: any, // Style class of the icon template<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| accepticon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| rejecticon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| container | scope: {<br>message: any, // Message of the componentacceptCallback: () â‡’ void, // Accept function of the componentrejectCallback: () â‡’ void, // Reject function of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |
### Interfaces [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces)
Defines the custom interfaces used by the module.
#### ConfirmPopupPassThroughMethodOptions [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces.ConfirmPopupPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ConfirmPopupProps](https://primevue.org/confirmpopup/#api.confirmpopup.interfaces.ConfirmPopupProps) | null | Defines valid properties. |
| state | [ConfirmPopupState](https://primevue.org/confirmpopup/#api.confirmpopup.interfaces.ConfirmPopupState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ConfirmPopupSharedPassThroughMethodOptions [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces.ConfirmPopupSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [ConfirmPopupProps](https://primevue.org/confirmpopup/#api.confirmpopup.interfaces.ConfirmPopupProps) | null | Defines valid properties. |
| state | [ConfirmPopupState](https://primevue.org/confirmpopup/#api.confirmpopup.interfaces.ConfirmPopupState) | null | Defines current inline state. |
#### ConfirmPopupPassThroughOptions [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces.ConfirmPopupPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ConfirmPopupPassThroughOptionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| content | [ConfirmPopupPassThroughOptionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| icon | [ConfirmPopupPassThroughOptionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughOptionType) | null | Used to pass attributes to the icon's DOM element. |
| message | [ConfirmPopupPassThroughOptionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughOptionType) | null | Used to pass attributes to the message's DOM element. |
| footer | [ConfirmPopupPassThroughOptionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| pcRejectButton | any | null | Used to pass attributes to the Button component. |
| pcAcceptButton | any | null | Used to pass attributes to the Button component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [ConfirmPopupPassThroughTransitionType](https://primevue.org/confirmpopup/#api.confirmpopup.types.ConfirmPopupPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### ConfirmPopupPassThroughAttributes [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces.ConfirmPopupPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ConfirmPopupState [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.interfaces.ConfirmPopupState)
Defines current inline state in ConfirmPopup component.
| name | type | default | description |
| --- | --- | --- | --- |
| visible | boolean | false | Current visible state as a boolean. |
| confirmation | [ConfirmationOptions](https://primevue.org/confirmpopup/#api.options.ConfirmationOptions) | null | Current confirmation message. |
## Types [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.types)
Defines the custom types used by the module.
#### ConfirmPopupPassThroughOptionType [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.types.ConfirmPopupPassThroughOptionType)
| values |
| --- |
| ConfirmPopupPassThroughAttributes \| (options: ConfirmPopupPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ConfirmPopupPassThroughTransitionType [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.types.ConfirmPopupPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: ConfirmPopupPassThroughMethodOptions) => TransitionProps \| undefined |
#### ConfirmPopupEmits [\#](https://primevue.org/confirmpopup/\#api.confirmpopup.types.ConfirmPopupEmits)
| values |
| --- |
| EmitFn<ConfirmPopupEmitsOptions> |
## ConfirmationService-UseConfirm [\#](https://primevue.org/confirmpopup/\#api.confirmationservice-useconfirm)
### Services [\#](https://primevue.org/confirmpopup/\#api.confirmationservice-useconfirm.services)
Confirmation Service methods.
| name | parameters | returnType | description |
| --- | --- | --- | --- |
| require | options: [ConfirmationOptions](https://primevue.org/confirmpopup/#api.options.ConfirmationOptions) | void | Displays the dialog using the confirmation object options. |
| close |  | void | Hides the dialog without invoking accept or reject callbacks. |
## ConfirmationOptions [\#](https://primevue.org/confirmpopup/\#api.confirmationoptions)
### Options [\#](https://primevue.org/confirmpopup/\#api.options.ConfirmationOptions)
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| target | HTMLElement | null | Element to align the overlay. |  |
| header | string | null | Header text of the dialog. |  |
| message | string | null | Message of the confirmation. |  |
| group | string | null | Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance. |  |
| position | HintedString<"left" \| "right" \| "top" \| "bottom" \| "center" \| "topleft" \| "topright" \| "bottomleft" \| "bottomright"> | center | Position of the dialog. |  |
| icon | string | null | Icon to display next to the message. |  |
| blockScroll | boolean | false | Whether background scroll should be blocked when dialog is visible. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the confirm dialog gets attached.<br>Special keywords are 'body' for document body and 'self' for the element itself. |  |
| modal | boolean | false | Defines if background should be blocked when confirm dialog is displayed. |  |
| accept | Function | null |  |  |
| reject | Function | null |  |  |
| onShow | Function | null |  |  |
| onHide | Function | null |  |  |
| acceptLabel | string | null | Label of the accept button. Defaults to PrimeVue Locale configuration. |  |
| rejectLabel | string | null | Label of the reject button. Defaults to PrimeVue Locale configuration. |  |
| acceptIcon | string | null | Icon of the accept button. |  |
| rejectIcon | string | null | Icon of the reject button. |  |
| acceptClass | string | null | Style class of the accept button. |  |
| rejectClass | string | null | Style class of the reject button. |  |
| defaultFocus | string | null | Element to receive the focus when the dialog gets visible, valid values are "accept" and "reject". |  |
| rejectProps | object | null | Used to pass all properties of the ButtonProps to the reject button inside the component. |  |
| acceptProps | object | null | Used to pass all properties of the ButtonProps to the accept button inside the component. |  |
- ConfirmPopup
  - Props
  - Slots
  - Interfaces
  - Types
- ConfirmationService-UseConfirm
  - Services
- ConfirmationOptions
  - Options
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Textarea Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Textarea
Textarea adds styling and autoResize functionality to standard textarea element.
## Import [\#](https://primevue.org/textarea/\#import)
```javascript
import Textarea from 'primevue/textarea';
```
Copy
## Basic [\#](https://primevue.org/textarea/\#basic)
Textarea is used with the _v-model_ property for two-way value binding.
```markup
<Textarea v-model="value" rows="5" cols="30" />
```
Copy
## Forms [\#](https://primevue.org/textarea/\#forms)
Textarea integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col gap-1">
        <Textarea name="address" rows="5" cols="30" style="resize: none" />
        <Message v-if="$form.address?.invalid" severity="error" size="small" variant="simple">{{ $form.address.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Auto Resize [\#](https://primevue.org/textarea/\#auto-resize)
When _autoResize_ is enabled, textarea grows instead of displaying a scrollbar.
```markup
<Textarea v-model="value" autoResize rows="5" cols="30" />
```
Copy
## Filled [\#](https://primevue.org/textarea/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
```markup
<Textarea v-model="value" variant="filled" rows="5" cols="30" />
```
Copy
## Float Label [\#](https://primevue.org/textarea/\#floatlabel)
A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
Over LabelIn LabelOn Label
```markup
<FloatLabel>
    <Textarea id="over_label" v-model="value1" rows="5" cols="30" style="resize: none" />
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel variant="in">
    <Textarea id="over_label" v-model="value2" rows="5" cols="30" style="resize: none" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel variant="on">
    <Textarea id="over_label" v-model="value3" rows="5" cols="30" style="resize: none" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/textarea/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
Description
```markup
<IftaLabel>
    <Textarea id="description" v-model="value" rows="5" cols="30" style="resize: none" />
    <label for="description">Description</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/textarea/\#sizes)
Textarea provides _small_ and _large_ sizes as alternatives to the base.
```markup
<Textarea v-model="value1" size="small" placeholder="Small" rows="3" />
<Textarea v-model="value2" placeholder="Normal" rows="3" />
<Textarea v-model="value3" size="large" placeholder="Large" rows="3" />
```
Copy
## Invalid [\#](https://primevue.org/textarea/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
```markup
<Textarea v-model="value" rows="5" cols="30" :invalid="!value" style="resize: none" placeholder="Address" />
```
Copy
## Disabled [\#](https://primevue.org/textarea/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
```markup
<Textarea v-model="value" rows="5" cols="30" disabled />
```
Copy
## Accessibility [\#](https://primevue.org/textarea/\#accessibility)
### Screen Reader
Textarea component renders a native textarea element that implicitly includes any passed prop. Value to describe the component can either be provided via _label_ tag combined with _id_ prop or using _aria-labelledby_, _aria-label_ props.
```markup
<label for="address1">Address 1</label>
<Textarea id="address1" />
<span id="address2">Address 2</span>
<Textarea aria-labelledby="address2" />
<Textarea aria-label="Address Details"/>
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the input. |
- Import
- Basic
- Forms
- Auto Resize
- Filled
- Float Label
- Ifta Label
- Sizes
- Invalid
- Disabled
- Accessibility
# Textarea API
API defines helper props, events and others for the PrimeVue Textarea module.
## Textarea [\#](https://primevue.org/textarea/\#api.textarea)
Textarea is a multi-line text input element.
### Props [\#](https://primevue.org/textarea/\#api.textarea.props)
Defines valid properties in Textarea component. In addition to these, all properties of TextareaHTMLAttributes can be used in this component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | Nullable<string> | null | Value of the component. |  |
| defaultValue | Nullable<string> | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| autoResize | boolean | false | When present, height of textarea changes as being typed. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TextareaPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/textarea/\#api.textarea.emits)
Defines valid emits in Textarea component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| value-change | value: string | void | Emitted when the value changes in uncontrolled mode. |  |
### Interfaces [\#](https://primevue.org/textarea/\#api.textarea.interfaces)
Defines the custom interfaces used by the module.
#### TextareaPassThroughMethodOptions [\#](https://primevue.org/textarea/\#api.textarea.interfaces.TextareaPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TextareaProps](https://primevue.org/textarea/#api.textarea.interfaces.TextareaProps) | null | Defines valid properties. |
| context | [TextareaContext](https://primevue.org/textarea/#api.textarea.interfaces.TextareaContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TextareaPassThroughOptions [\#](https://primevue.org/textarea/\#api.textarea.interfaces.TextareaPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TextareaPassThroughOptionType](https://primevue.org/textarea/#api.textarea.types.TextareaPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### TextareaPassThroughAttributes [\#](https://primevue.org/textarea/\#api.textarea.interfaces.TextareaPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TextareaContext [\#](https://primevue.org/textarea/\#api.textarea.interfaces.TextareaContext)
Defines current options in Textarea component.
| name | type | default | description |
| --- | --- | --- | --- |
| filled | boolean | false | Current filled state of the component as a boolean. |
| disabled | boolean | false | Current disabled state of the component as a boolean. |
## Types [\#](https://primevue.org/textarea/\#api.textarea.types)
Defines the custom types used by the module.
#### TextareaPassThroughOptionType [\#](https://primevue.org/textarea/\#api.textarea.types.TextareaPassThroughOptionType)
| values |
| --- |
| TextareaPassThroughAttributes \| (options: TextareaPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TextareaEmits [\#](https://primevue.org/textarea/\#api.textarea.types.TextareaEmits)
| values |
| --- |
| EmitFn<TextareaEmitsOptions> |
- Textarea
  - Props
  - Emits
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Card Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Card
Card is a flexible container component.
## Import [\#](https://primevue.org/card/\#import)
```javascript
import Card from 'primevue/card';
```
Copy
## Basic [\#](https://primevue.org/card/\#basic)
A simple Card is created with a _title_ property along with the content as children.
Simple Card
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!
```markup
<Card>
    <template #title>Simple Card</template>
    <template #content>
        <p class="m-0">
            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque
            quas!
        </p>
    </template>
</Card>
```
Copy
## Advanced [\#](https://primevue.org/card/\#advanced)
Card provides _header_, _title_, _subtitle_, _content_ and _footer_ as the named templates to place content.
![user header](https://primefaces.org/cdn/primevue/images/card-vue.jpg)
Advanced Card
Card subtitle
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!
CancelSave
```markup
<Card style="width: 25rem; overflow: hidden">
    <template #header>
        <img alt="user header" src="/images/usercard.png" />
    </template>
    <template #title>Advanced Card</template>
    <template #subtitle>Card subtitle</template>
    <template #content>
        <p class="m-0">
            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque
            quas!
        </p>
    </template>
    <template #footer>
        <div class="flex gap-4 mt-1">
            <Button label="Cancel" severity="secondary" outlined class="w-full" />
            <Button label="Save" class="w-full" />
        </div>
    </template>
</Card>
```
Copy
## Accessibility [\#](https://primevue.org/card/\#accessibility)
### Screen Reader
A card can be utilized in many use cases as a result no role is enforced, in fact a role may not be necessary if the card is used for presentational purposes only. Any valid attribute is passed to the container element so if you require to use one of the [landmark](https://www.w3.org/TR/wai-aria/#landmark) roles like _region_, you may use the _role_ property.
```markup
<Card role="region">
    Content
</Card>
```
Copy
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Advanced
- Accessibility
# Card API
API defines helper props, events and others for the PrimeVue Card module.
## Card [\#](https://primevue.org/card/\#api.card)
Card is a flexible container component.
### Props [\#](https://primevue.org/card/\#api.card.props)
Defines valid properties in Card component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<CardPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/card/\#api.card.slots)
Defines valid slots in Card component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| title |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom title template. |  |
| subtitle |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom subtitle template. |  |
| content |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
### Interfaces [\#](https://primevue.org/card/\#api.card.interfaces)
Defines the custom interfaces used by the module.
#### CardPassThroughMethodOptions [\#](https://primevue.org/card/\#api.card.interfaces.CardPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [CardProps](https://primevue.org/card/#api.card.interfaces.CardProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### CardPassThroughOptions [\#](https://primevue.org/card/\#api.card.interfaces.CardPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| body | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the body's DOM element. |
| caption | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the caption's DOM element. |
| title | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the title's DOM element. |
| subtitle | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the subtitle's DOM element. |
| content | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| footer | [CardPassThroughOptionType](https://primevue.org/card/#api.card.types.CardPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### CardPassThroughAttributes [\#](https://primevue.org/card/\#api.card.interfaces.CardPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/card/\#api.card.types)
Defines the custom types used by the module.
#### CardPassThroughOptionType [\#](https://primevue.org/card/\#api.card.types.CardPassThroughOptionType)
| values |
| --- |
| CardPassThroughAttributes \| (options: CardPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### CardEmits [\#](https://primevue.org/card/\#api.card.types.CardEmits)
| values |
| --- |
| EmitFn<CardEmitsOptions> |
- Card
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## IftaLabel Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# IftaLabel
IftaLabel is used to create infield top aligned labels
## Import [\#](https://primevue.org/iftalabel/\#import)
```javascript
import IftaLabel from 'primevue/iftalabel';
```
Copy
## Basic [\#](https://primevue.org/iftalabel/\#basic)
IftaLabel is used by wrapping the input and its label.
Username
```markup
<IftaLabel>
    <InputText id="username" v-model="value" />
    <label for="username">Username</label>
</IftaLabel>
```
Copy
## Invalid [\#](https://primevue.org/iftalabel/\#invalid)
When the form element is invalid, the label is also highlighted.
Username
```markup
<IftaLabel>
    <InputText id="username" v-model="value" :invalid="!value" />
    <label for="username">Username</label>
</IftaLabel>
```
Copy
## Accessibility [\#](https://primevue.org/iftalabel/\#accessibility)
### Screen Reader
IftaLabel does not require any roles and attributes.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Invalid
- Accessibility
# IftaLabel API
API defines helper props, events and others for the PrimeVue IftaLabel module.
## IftaLabel [\#](https://primevue.org/iftalabel/\#api.iftalabel)
IftaLabel visually integrates a label within its form element.
### Props [\#](https://primevue.org/iftalabel/\#api.iftalabel.props)
Defines valid properties in IftaLabel component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<IftaLabelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Interfaces [\#](https://primevue.org/iftalabel/\#api.iftalabel.interfaces)
Defines the custom interfaces used by the module.
#### IftaLabelPassThroughMethodOptions [\#](https://primevue.org/iftalabel/\#api.iftalabel.interfaces.IftaLabelPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [IftaLabelProps](https://primevue.org/iftalabel/#api.iftalabel.interfaces.IftaLabelProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### IftaLabelPassThroughOptions [\#](https://primevue.org/iftalabel/\#api.iftalabel.interfaces.IftaLabelPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [IftaLabelPassThroughOptionType](https://primevue.org/iftalabel/#api.iftalabel.types.IftaLabelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### IftaLabelPassThroughAttributes [\#](https://primevue.org/iftalabel/\#api.iftalabel.interfaces.IftaLabelPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/iftalabel/\#api.iftalabel.types)
Defines the custom types used by the module.
#### IftaLabelPassThroughOptionType [\#](https://primevue.org/iftalabel/\#api.iftalabel.types.IftaLabelPassThroughOptionType)
| values |
| --- |
| IftaLabelPassThroughAttributes \| (options: IftaLabelPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### IftaLabelPassThroughTransitionType [\#](https://primevue.org/iftalabel/\#api.iftalabel.types.IftaLabelPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: IftaLabelPassThroughMethodOptions) => TransitionProps \| undefined |
#### IftaLabelEmits [\#](https://primevue.org/iftalabel/\#api.iftalabel.types.IftaLabelEmits)
| values |
| --- |
| EmitFn<IftaLabelEmitsOptions> |
- IftaLabel
  - Props
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Galleria Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Galleria
Galleria is a content gallery component.
## Import [\#](https://primevue.org/galleria/\#import)
```javascript
import Galleria from 'primevue/galleria';
```
Copy
## Basic [\#](https://primevue.org/galleria/\#basic)
Galleria requires a _value_ as a collection of images, _item_ template for the higher resolution image and _thumbnail_ template to display as a thumbnail.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)
![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)
![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)
![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)
![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)
![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)
![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)
![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)
![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)
![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)
![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)
![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)
![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)
![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)
![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)
```markup
<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" containerStyle="max-width: 640px">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" />
    </template>
</Galleria>
```
Copy
## Controlled [\#](https://primevue.org/galleria/\#controlled)
Galleria can be controlled programmatically using a binding to _activeIndex_.
![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3.jpg)
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)
![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)
![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)
![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)
![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)
![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)
![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)
![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)
![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)
![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)
![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)
![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)
![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)
![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)
![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)
```markup
<div>
    <Button icon="pi pi-minus" @click="prev" />
    <Button icon="pi pi-plus" @click="next" severity="secondary" class="ml-2" />
</div>
<Galleria v-model:activeIndex="activeIndex" :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" containerStyle="max-width: 640px">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" />
    </template>
</Galleria>
```
Copy
## Indicator [\#](https://primevue.org/galleria/\#indicator)
Indicators allow quick navigation between the items.
### Click Event [\#](https://primevue.org/galleria/\#indicatorbasic)
Indicators are displayed at the bottom by enabling _showIndicators_ property and interacted with the click event by default.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
```markup
<Galleria :value="images" :numVisible="5" containerStyle="max-width: 640px"
    :showThumbnails="false" :showIndicators="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
</Galleria>
```
Copy
### Hover Event [\#](https://primevue.org/galleria/\#indicatorhoverevent)
Indicators can be activated on hover instead of click if _changeItemOnIndicatorHover_ is added.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
```markup
<Galleria :value="images" :numVisible="5" containerStyle="max-width: 640px"
    :showThumbnails="false" :showIndicators="true" :changeItemOnIndicatorHover="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
</Galleria>
```
Copy
### Position [\#](https://primevue.org/galleria/\#indicatorposition)
Indicators can be placed at four different sides using the _indicatorsPosition_ property. In addition, enabling _showIndicatorsOnItem_ moves the indicators inside the image section.
Bottom
Top
Left
Right
Inside
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
```markup
<Galleria :value="images" :numVisible="5" containerStyle="max-width: 640px" :showThumbnails="false"
    :showIndicators="true" :changeItemOnIndicatorHover="true" :showIndicatorsOnItem="inside" :indicatorsPosition="position">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
</Galleria>
```
Copy
### Template [\#](https://primevue.org/galleria/\#indicatortemplate)
Indicator content can be customized with the _indicator_ property that takes an index as a parameter and expects content.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
- 1
- 2
- 3
- 4
- 5
- 6
- 7
- 8
- 9
- 10
- 11
- 12
- 13
- 14
- 15
```markup
<Galleria :value="images" :numVisible="5" containerStyle="max-width: 640px" :showThumbnails="false"
    :showIndicators="true" :changeItemOnIndicatorHover="true" :showIndicatorsOnItem="true" indicatorsPosition="left">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #indicator="{ index }">
        <span style="color: '#ffffff', cursor: pointer">{{ index + 1 }}</span>
    </template>
</Galleria>
```
Copy
## Thumbnail [\#](https://primevue.org/galleria/\#thumbnail)
Thumbnails represent a smaller version of the actual content.
Bottom
Top
Left
Right
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)
![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)
![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)
![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)
![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)
![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)
![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)
![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)
![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)
![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)
![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)
![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)
![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)
![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)
![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)
```markup
<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :thumbnailsPosition="position" containerStyle="max-width: 640px">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <div class="grid gap-4 justify-center">
            <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block;" />
        </div>
    </template>
</Galleria>
```
Copy
## Responsive [\#](https://primevue.org/galleria/\#responsive)
Settings per screen size is defined via the _responsiveOptions_ property.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)
![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)
![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)
![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)
![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)
![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)
![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)
![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)
![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)
![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)
![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)
![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)
![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)
![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)
![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)
```markup
<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :circular="true" containerStyle="max-width: 640px">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
</Galleria>
```
Copy
## Full Screen [\#](https://primevue.org/galleria/\#fullscreen)
In fullscreen mode content covers the whole page over a modal layer.
### With Thumbnails [\#](https://primevue.org/galleria/\#fullscreenwiththumbnail)
Full screen mode is enabled by adding _fullScreen_ property and and visibility is controlled with a binding to _visible_ property.
Show
```markup
<Galleria v-model:visible="displayBasic" :value="images" :responsiveOptions="responsiveOptions" :numVisible="9" containerStyle="max-width: 50%" :circular="true" :fullScreen="true" :showItemNavigators="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
</Galleria>
<Button label="Show" icon="pi pi-external-link" @click="displayBasic = true" />
```
Copy
### Without Thumbnails [\#](https://primevue.org/galleria/\#fullscreenwithoutthumnails)
Thumbnails can also be hidden in full screen mode.
Show
```markup
<Galleria v-model:visible="displayBasic" :value="images" :responsiveOptions="responsiveOptions" :numVisible="9" containerStyle="max-width: 50%" :circular="true" :fullScreen="true" :showItemNavigators="true"  :showThumbnails="false">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
</Galleria>
<Button label="Show" icon="pi pi-external-link" @click="displayBasic = true" />
```
Copy
### Custom Content [\#](https://primevue.org/galleria/\#fullscreencustom)
Using _activeIndex_, Galleria is displayed with a specific initial image.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)
![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)
![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)
![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)
![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)
![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)
![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)
![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)
![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)
![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)
![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)
![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)
![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)
![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)
![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)
```markup
<Galleria v-model:activeIndex="activeIndex" v-model:visible="displayCustom" :value="images" :responsiveOptions="responsiveOptions" :numVisible="7"
    containerStyle="max-width: 850px" :circular="true" :fullScreen="true" :showItemNavigators="true" :showThumbnails="false">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
</Galleria>
```
Copy
## Navigator [\#](https://primevue.org/galleria/\#navigator)
Navigators are used to move back and forth between the images.
### With Thumbnails [\#](https://primevue.org/galleria/\#itemthumbnails)
Add _showItemNavigators_ to display navigator elements and the left and right side.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)
![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)
![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)
![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)
![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)
![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)
![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)
![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)
![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)
![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)
![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)
![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)
![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)
![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)
![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)
```markup
<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :circular="true" containerStyle="max-width: 640px"
    :showItemNavigators="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block;" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block;" />
    </template>
</Galleria>
```
Copy
### Without Thumbnails [\#](https://primevue.org/galleria/\#itemwithouthumbnails)
Simple example with navigators only.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
```markup
<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :circular="true" containerStyle="max-width: 640px"
    :showItemNavigators="true" :showThumbnails="false">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block;" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block;" />
    </template>
</Galleria>
```
Copy
### Display on Hover [\#](https://primevue.org/galleria/\#itemhover)
Navigators are displayed on hover only if _showItemNavigatorsOnHover_ is enabled.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)
![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)
![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)
![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)
![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)
![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)
![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)
![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)
![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)
![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)
![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)
![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)
![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)
![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)
![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)
```markup
<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :circular="true" containerStyle="max-width: 640px" :showItemNavigators="true" :showItemNavigatorsOnHover="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
</Galleria>
```
Copy
### With Indicators [\#](https://primevue.org/galleria/\#indicators)
Navigators and Indicators can be combined as well.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
```markup
<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" :circular="true" containerStyle="max-width: 640px"
    :showItemNavigators="true" :showThumbnails="false" :showItemNavigatorsOnHover="true" :showIndicators="true">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block;" />
    </template>
    <template #thumbnail="slotProps">
            <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block;" />
    </template>
</Galleria>
```
Copy
## AutoPlay [\#](https://primevue.org/galleria/\#autoplay)
A slideshow implementation is defined by adding _circular_ and _autoPlay_ properties.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)
![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)
![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)
![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)
![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)
![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)
![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)
![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)
![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)
![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)
![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)
![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)
![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)
![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)
![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)
```markup
<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" containerStyle="max-width: 640px"
    :circular="true" :autoPlay="true" :transitionInterval="2000">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
</Galleria>
```
Copy
## Caption [\#](https://primevue.org/galleria/\#caption)
Description of an image is specified with the _caption_ property that takes the displayed object and returns content.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
Title 1
Description for Image 1
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1s.jpg)
![Description for Image 2](https://primefaces.org/cdn/primevue/images/galleria/galleria2s.jpg)
![Description for Image 3](https://primefaces.org/cdn/primevue/images/galleria/galleria3s.jpg)
![Description for Image 4](https://primefaces.org/cdn/primevue/images/galleria/galleria4s.jpg)
![Description for Image 5](https://primefaces.org/cdn/primevue/images/galleria/galleria5s.jpg)
![Description for Image 6](https://primefaces.org/cdn/primevue/images/galleria/galleria6s.jpg)
![Description for Image 7](https://primefaces.org/cdn/primevue/images/galleria/galleria7s.jpg)
![Description for Image 8](https://primefaces.org/cdn/primevue/images/galleria/galleria8s.jpg)
![Description for Image 9](https://primefaces.org/cdn/primevue/images/galleria/galleria9s.jpg)
![Description for Image 10](https://primefaces.org/cdn/primevue/images/galleria/galleria10s.jpg)
![Description for Image 11](https://primefaces.org/cdn/primevue/images/galleria/galleria11s.jpg)
![Description for Image 12](https://primefaces.org/cdn/primevue/images/galleria/galleria12s.jpg)
![Description for Image 13](https://primefaces.org/cdn/primevue/images/galleria/galleria13s.jpg)
![Description for Image 14](https://primefaces.org/cdn/primevue/images/galleria/galleria14s.jpg)
![Description for Image 15](https://primefaces.org/cdn/primevue/images/galleria/galleria15s.jpg)
```markup
<Galleria :value="images" :responsiveOptions="responsiveOptions" :numVisible="5" containerStyle="max-width: 640px">
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" style="width: 100%; display: block" />
    </template>
    <template #thumbnail="slotProps">
        <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
    </template>
    <template #caption="slotProps">
        <div class="text-xl mb-2 font-bold">{{ slotProps.item.title }}</div>
        <p class="text-white">{{ slotProps.item.alt }}</p>
    </template>
</Galleria>
```
Copy
## Advanced [\#](https://primevue.org/galleria/\#advanced)
Advanced Galleria implementation with a custom UI.
![Description for Image 1](https://primefaces.org/cdn/primevue/images/galleria/galleria1.jpg)
1/15Title 1Description for Image 1
```markup
<Galleria
    ref="galleria"
    v-model:activeIndex="activeIndex"
    :value="images"
    :numVisible="5"
    containerStyle="max-width: 640px"
    :showThumbnails="showThumbnails"
    :showItemNavigators="true"
    :showItemNavigatorsOnHover="true"
    :circular="true"
    :autoPlay="isAutoPlay"
    :transitionInterval="3000"
    :responsiveOptions="responsiveOptions"
    :pt="{
        root: {
            class: [{ 'flex flex-col': fullScreen }]
        },
        content: {
            class: ['relative', { 'flex-1 justify-center': fullScreen }]
        },
        thumbnails: 'absolute w-full left-0 bottom-0'
    }"
>
    <template #item="slotProps">
        <img :src="slotProps.item.itemImageSrc" :alt="slotProps.item.alt" :style="[{ width: !fullScreen ? '100%' : '', display: !fullScreen ? 'block' : '' }]" />
    </template>
    <template #thumbnail="slotProps">
        <div class="grid gap-4 justify-center">
            <img :src="slotProps.item.thumbnailImageSrc" :alt="slotProps.item.alt" style="display: block" />
        </div>
    </template>
    <template #footer>
        <div class="flex items-stretch bg-surface-950 text-white h-10">
            <button type="button" @click="onThumbnailButtonClick" class="bg-transparent border-none rounded-none hover:bg-white/10 text-white inline-flex justify-center items-center cursor-pointer px-3">
                <i class="pi pi-th-large"></i>
            </button>
            <button type="button" @click="toggleAutoSlide" class="bg-transparent border-none rounded-none hover:bg-white/10 text-white inline-flex justify-center items-center cursor-pointer px-3"><i :class="slideButtonIcon"></i></button>
            <span v-if="images" class="flex items-center gap-4 ml-3">
                <span class="text-sm">{{ activeIndex + 1 }}/{{ images.length }}</span>
                <span class="font-bold text-sm">{{ images[activeIndex].title }}</span>
                <span class="text-sm">{{ images[activeIndex].alt }}</span>
            </span>
            <button type="button" @click="toggleFullScreen" class="bg-transparent border-none rounded-none hover:bg-white/10 text-white inline-flex justify-center items-center cursor-pointer px-3 ml-auto">
                <i :class="fullScreenIcon"></i>
            </button>
        </div>
    </template>
</Galleria>
```
Copy
## Accessibility [\#](https://primevue.org/galleria/\#accessibility)
### Screen Reader
Galleria uses _region_ role and since any attribute is passed to the main container element, attributes such as _aria-label_ and _aria-roledescription_ can be used as well. The slides container has _aria-live_ attribute set as "polite" if galleria is not in autoplay mode, otherwise "off" would be the value in autoplay.
A slide has a _group_ role with an aria-label that refers to the _aria.slideNumber_ property of the [locale](https://primevue.org/configuration/#locale) API. Similarly _aria.slide_ is used as the _aria-roledescription_ of the item. Inactive slides are hidden from the readers with _aria-hidden_.
Next and Previous navigators are button elements with _aria-label_ attributes referring to the _aria.prevPageLabel_ and _aria.nextPageLabel_ properties of the [locale](https://primevue.org/configuration/#locale) API by default respectively, you may still use your own aria roles and attributes as any valid attribute is passed to the button elements implicitly by using _nextButtonProps_ and _prevButtonProps_.
Quick navigation elements and thumnbails follow the tab pattern. They are placed inside an element with a _tablist_ role whereas each item has a _tab_ role with _aria-selected_ and _aria-controls_ attributes. The _aria-label_ attribute of a quick navigation item refers to the _aria.pageLabel_ of the [locale](https://primevue.org/configuration/#locale) API. Current page is marked with _aria-current_.
In full screen mode, modal element uses _dialog_ role with _aria-modal_ enabled. The close button retrieves _aria-label_ from the _aria.close_ property of the [locale](https://primevue.org/configuration/#locale) API.
### Next/Prev Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through interactive elements in the carousel. |
| _enter_ | Activates navigation. |
| _space_ | Activates navigation. |
### Quick Navigation Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the active slide link. |
| _enter_ | Activates the focused slide link. |
| _space_ | Activates the focused slide link. |
| _right arrow_ | Moves focus to the next slide link. |
| _left arrow_ | Moves focus to the previous slide link. |
| _home_ | Moves focus to the first slide link. |
| _end_ | Moves focus to the last slide link. |
- Import
- Basic
- Controlled
- Indicator
  - Click Event
  - Hover Event
  - Position
  - Template
- Thumbnail
- Responsive
- Full Screen
  - With Thumbnails
  - Without Thumbnails
  - Custom Content
- Navigator
  - With Thumbnails
  - Without Thumbnails
  - Display on Hover
  - With Indicators
- AutoPlay
- Caption
- Advanced
- Accessibility
# Galleria API
API defines helper props, events and others for the PrimeVue Galleria module.
## Galleria [\#](https://primevue.org/galleria/\#api.galleria)
Galleria is an advanced content gallery component.
### Props [\#](https://primevue.org/galleria/\#api.galleria.props)
Defines valid properties in Galleria component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| id | string | null | Unique identifier of the element. |  |
| value | any\[\] | null | An array of objects to display. |  |
| activeIndex | number | 0 | Index of the first item. |  |
| fullScreen | boolean | false | Whether to display the component on fullscreen. |  |
| visible | boolean | false | Specifies the visibility of the mask on fullscreen mode. |  |
| numVisible | number | 3 | Number of items per page. |  |
| responsiveOptions | [GalleriaResponsiveOptions\[\]](https://primevue.org/galleria/#api.galleria.interfaces.GalleriaResponsiveOptions[]) | null | An array of options for responsive design. |  |
| showItemNavigators | boolean | false | Whether to display navigation buttons in item section. |  |
| showThumbnailNavigators | boolean | true | Whether to display navigation buttons in thumbnail container. |  |
| showItemNavigatorsOnHover | boolean | false | Whether to display navigation buttons on item hover. |  |
| changeItemOnIndicatorHover | boolean | false | When enabled, item is changed on indicator hover. |  |
| circular | boolean | false | Defines if scrolling would be infinite. |  |
| autoPlay | boolean | false | Items are displayed with a slideshow in autoPlay mode. |  |
| transitionInterval | number | 4000 | Time in milliseconds to scroll items. |  |
| showThumbnails | boolean | true | Whether to display thumbnail container. |  |
| thumbnailsPosition | HintedString<"left" \| "right" \| "top" \| "bottom"> | bottom | Position of thumbnails. |  |
| verticalThumbnailViewPortHeight | string | 300px | Height of the viewport in vertical thumbnail. |  |
| showIndicators | boolean | false | Whether to display indicator container. |  |
| showIndicatorsOnItem | boolean | false | When enabled, indicator container is displayed on item container. |  |
| indicatorsPosition | HintedString<"left" \| "right" \| "top" \| "bottom"> | bottom | Position of indicators. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| maskClass | string | null | Style class of the mask on fullscreen mode. |  |
| containerStyle | any | null | Inline style of the component on fullscreen mode. Otherwise, the 'style' property can be used. |  |
| containerClass | any | null | Style class of the component on fullscreen mode. Otherwise, the 'class' property can be used. |  |
| containerProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the container element on fullscreen mode. |  |
| prevButtonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the previous navigation button. |  |
| nextButtonProps | ButtonHTMLAttributes | null | Used to pass all properties of the HTMLButtonElement to the next navigation button. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaRoledescription | string | null | Defines a string value that description for the role of the component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<GalleriaPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/galleria/\#api.galleria.emits)
Defines valid emits in Galleria component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:activeIndex | value: number | void | Emitted when the active index changes. |  |
| update:visible | value: boolean | void | Emitted when the visible changes. |  |
### Slots [\#](https://primevue.org/galleria/\#api.galleria.slots)
Defines valid slots in Galleria slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| item | scope: {<br>item: any, // Item instance<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item template. |  |
| caption | scope: {<br>item: any, // Item instance<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom caption template. |  |
| indicator | scope: {<br>index: number, // Index of the indicator itemactiveIndex: number, // Current active item index as a number.tabindex: number, // Index of the element in tabbing order.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom indicator template. |  |
| thumbnail | scope: {<br>item: any, // Item instance<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom thumbnail template. |  |
| closeicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom close icon template. |  |
| previousitemicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom navigator previous item icon template. |  |
| nextitemicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom navigator next item icon template. |  |
| previousthumbnailicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom thumbnail previous icon template. |  |
| nextthumbnailicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom thumbnail next item template. |  |
### Interfaces [\#](https://primevue.org/galleria/\#api.galleria.interfaces)
Defines the custom interfaces used by the module.
#### GalleriaPassThroughMethodOptions [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [GalleriaProps](https://primevue.org/galleria/#api.galleria.interfaces.GalleriaProps) | null | Defines valid properties. |
| state | [GalleriaState](https://primevue.org/galleria/#api.galleria.interfaces.GalleriaState) | null | Defines current inline state. |
| context | [GalleriaContext](https://primevue.org/galleria/#api.galleria.interfaces.GalleriaContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### GalleriaResponsiveOptions [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaResponsiveOptions)
| name | type | default | description |
| --- | --- | --- | --- |
| breakpoint | string | null | Breakpoint for responsive mode. Exp; |
| numVisible | number | null | The number of visible items on breakpoint. |
#### GalleriaPassThroughOptions [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| closeButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the close button's DOM element. |
| closeIcon | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the close icon's DOM element. |
| header | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| content | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| footer | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| itemsContainer | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the item container's DOM element. |
| items | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the items' DOM element. |
| prevButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the previous item button's DOM element. |
| prevIcon | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the previous item icon's DOM element. |
| item | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| nextButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the next item button's DOM element. |
| nextIcon | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the next item icon's DOM element. |
| caption | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the caption's DOM element. |
| indicatorList | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the indicator list's DOM element. |
| indicator | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the indicator's DOM element. |
| indicatorButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the indicator button's DOM element. |
| thumbnails | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnails' DOM element. |
| thumbnailContent | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnail content's DOM element. |
| thumbnailPrevButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the previous thumbnail button's DOM element. |
| thumbnailPrevIcon | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the previous thumbnail icon's DOM element. |
| thumbnailsViewport | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnails viewport's DOM element. |
| thumbnailItems | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnail items' DOM element. |
| thumbnailItem | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnail item's DOM element. |
| thumbnail | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the thumbnail's DOM element. |
| thumbnailNextButton | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the next thumbnail button's DOM element. |
| thumbnailNextIcon | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the next thumbnail icon's DOM element. |
| mask | [GalleriaPassThroughOptionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [GalleriaPassThroughTransitionType](https://primevue.org/galleria/#api.galleria.types.GalleriaPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### GalleriaPassThroughAttributes [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### GalleriaState [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaState)
Defines current inline state in Galleria component.
| name | type | default | description |
| --- | --- | --- | --- |
| containerVisible | boolean | false | Current container visible state as a boolean. |
| id | string | null | Style id of the component. |
| activeIndex | number | 0 | Index of the first item as a number. |
| numVisible | number | 3 | Number of items per page as a number. |
| slideShowActive | boolean | false | Current slide active state as a boolean. |
| d\_numVisible | number | 3 | Number of items per page as a number. |
| d\_oldNumVisible | number | 3 | Old number of items per page as a number. |
| d\_activeIndex | number | 0 | Current active item index as a number. |
| d\_oldActiveItemIndex | number | 0 | The previous active item index as a number. |
| page | number | 0 | Index of the first item. |
| totalShiftedItems | number | 0 | Total shifted items' count as a number. |
#### GalleriaContext [\#](https://primevue.org/galleria/\#api.galleria.interfaces.GalleriaContext)
Defines current inline options in Galleria component.
| name | type | default | description |
| --- | --- | --- | --- |
| highlighted | boolean | false | Current highlighted state of the indicator as a boolean. |
## Types [\#](https://primevue.org/galleria/\#api.galleria.types)
Defines the custom types used by the module.
#### GalleriaPassThroughOptionType [\#](https://primevue.org/galleria/\#api.galleria.types.GalleriaPassThroughOptionType)
| values |
| --- |
| GalleriaPassThroughAttributes \| (options: GalleriaPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### GalleriaPassThroughTransitionType [\#](https://primevue.org/galleria/\#api.galleria.types.GalleriaPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: GalleriaPassThroughMethodOptions) => TransitionProps \| undefined |
#### GalleriaEmits [\#](https://primevue.org/galleria/\#api.galleria.types.GalleriaEmits)
| values |
| --- |
| EmitFn<GalleriaEmitsOptions> |
- Galleria
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Panel Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Panel
Panel is a grouping component providing with content toggle feature.
## Import [\#](https://primevue.org/panel/\#import)
```javascript
import Panel from 'primevue/panel';
```
Copy
## Basic [\#](https://primevue.org/panel/\#basic)
A simple Panel is created with a _header_ property along with the content as children.
Header
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
```markup
<Panel header="Header">
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Panel>
```
Copy
## Toggleable [\#](https://primevue.org/panel/\#toggleable)
Content of the panel can be expanded and collapsed using _toggleable_ option.
Header
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
```markup
<Panel header="Header" toggleable>
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Panel>
```
Copy
## Template [\#](https://primevue.org/panel/\#template)
Header, icons and footer sections of the panel are customizable via templating.
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
Amy Elsner
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Updated 2 hours ago
```markup
<Panel toggleable>
    <template #header>
        <div class="flex items-center gap-2">
            <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" shape="circle" />
            <span class="font-bold">Amy Elsner</span>
        </div>
    </template>
    <template #footer>
        <div class="flex flex-wrap items-center justify-between gap-4">
            <div class="flex items-center gap-2">
                <Button icon="pi pi-user" rounded text></Button>
                <Button icon="pi pi-bookmark" severity="secondary" rounded text></Button>
            </div>
            <span class="text-surface-500 dark:text-surface-400">Updated 2 hours ago</span>
        </div>
    </template>
    <template #icons>
        <Button icon="pi pi-cog" severity="secondary" rounded text @click="toggle" />
        <Menu ref="menu" id="config_menu" :model="items" popup />
    </template>
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Panel>
```
Copy
## Accessibility [\#](https://primevue.org/panel/\#accessibility)
### Screen Reader
Toggleable panels use a content toggle button at the header that has _aria-controls_ to define the id of the content section along with _aria-expanded_ for the visibility state. The value to read the button defaults to the value of the _header_ property and can be customized by defining an _aria-label_ or _aria-labelledby_ via the _toggleButtonProps_ property.
The content uses _region_, defines an id that matches the _aria-controls_ of the content toggle button and _aria-labelledby_ referring to the id of the header.
### Content Toggle Button Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element in the page tab sequence. |
| _enter_ | Toggles the visibility of the content. |
| _space_ | Toggles the visibility of the content. |
- Import
- Basic
- Toggleable
- Template
- Accessibility
# Panel API
API defines helper props, events and others for the PrimeVue Panel module.
## Panel [\#](https://primevue.org/panel/\#api.panel)
Panel is a container with the optional content toggle feature.
### Props [\#](https://primevue.org/panel/\#api.panel.props)
Defines valid properties in Panel component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| header | string | null | Header text of the panel. |  |
| toggleable | boolean | false | Defines if content of panel can be expanded and collapsed. |  |
| collapsed | boolean | false | Defines the initial state of panel content. |  |
| toggleButtonProps | object | null | Used to pass the custom value to read for the button inside the component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<PanelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/panel/\#api.panel.emits)
Defines valid emits in Panel component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:collapsed | value: boolean | void | Emitted when the collapsed changes. |  |
| toggle | event: [PanelToggleEvent](https://primevue.org/panel/#api.panel.events.PanelToggleEvent) | void | Callback to invoke when a tab toggle. |  |
### Slots [\#](https://primevue.org/panel/\#api.panel.slots)
Defines valid slots in Panel slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| header | scope: {<br>id: string, // Current id state as a stringclass: string, // Style class of the icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| icons |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icons template. |  |
| togglebutton | scope: {<br>collapsed: boolean, // Collapsed state as a booleantoggleCallback: (event: Event) â‡’ void, // Toggle function.keydownCallback: (event: Event) â‡’ void, // Keydown function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom toggle button template of panel. |  |
| togglericon | scope: {<br>collapsed: boolean, // Collapsed state as a boolean<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| toggleicon | scope: {<br>collapsed: boolean, // Collapsed state as a boolean<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom toggle icon template of panel. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
### Events [\#](https://primevue.org/panel/\#api.panel.events)
Defines the custom events used by the component's emit.
#### PanelToggleEvent [\#](https://primevue.org/panel/\#api.panel.events.PanelToggleEvent)
Custom toggle event.
See [toggle](https://primevue.org/panel/#api.panel.emitsoptions.toggle)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| value | boolean | Collapsed state as a boolean |
### Interfaces [\#](https://primevue.org/panel/\#api.panel.interfaces)
Defines the custom interfaces used by the module.
#### PanelPassThroughMethodOptions [\#](https://primevue.org/panel/\#api.panel.interfaces.PanelPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [PanelProps](https://primevue.org/panel/#api.panel.interfaces.PanelProps) | null | Defines valid properties. |
| state | [PanelState](https://primevue.org/panel/#api.panel.interfaces.PanelState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### PanelSharedPassThroughMethodOptions [\#](https://primevue.org/panel/\#api.panel.interfaces.PanelSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [PanelProps](https://primevue.org/panel/#api.panel.interfaces.PanelProps) | null | Defines valid properties. |
| state | [PanelState](https://primevue.org/panel/#api.panel.interfaces.PanelState) | null | Defines current inline state. |
#### PanelPassThroughOptions [\#](https://primevue.org/panel/\#api.panel.interfaces.PanelPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| title | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the title's DOM element. |
| headerActions | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the header actions' DOM element. |
| pcToggleButton | any | null | Used to pass attributes to the toggle button button's DOM element. |
| contentContainer | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the content container's DOM element. |
| content | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| footer | [PanelPassThroughOptionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| transition | [PanelPassThroughTransitionType](https://primevue.org/panel/#api.panel.types.PanelPassThroughTransitionType) | null | Used to control Vue Transition API. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### PanelPassThroughAttributes [\#](https://primevue.org/panel/\#api.panel.interfaces.PanelPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### PanelState [\#](https://primevue.org/panel/\#api.panel.interfaces.PanelState)
Defines current inline state in Panel component.
| name | type | default | description |
| --- | --- | --- | --- |
| d\_collapsed | boolean | false | Current collapsed state as a boolean. |
## Types [\#](https://primevue.org/panel/\#api.panel.types)
Defines the custom types used by the module.
#### PanelPassThroughOptionType [\#](https://primevue.org/panel/\#api.panel.types.PanelPassThroughOptionType)
| values |
| --- |
| PanelPassThroughAttributes \| (options: PanelPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### PanelPassThroughTransitionType [\#](https://primevue.org/panel/\#api.panel.types.PanelPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: PanelPassThroughMethodOptions) => TransitionProps \| undefined |
#### PanelEmits [\#](https://primevue.org/panel/\#api.panel.types.PanelEmits)
| values |
| --- |
| EmitFn<PanelEmitsOptions> |
- Panel
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Icons Library
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Icons
[PrimeIcons](https://github.com/primefaces/primeicons) is the default icon library of PrimeVue with over 250 open source icons developed by PrimeTek. PrimeIcons library is optional as PrimeVue components can use any icon with templating.
## Download [\#](https://primevue.org/icons/\#download)
PrimeIcons is available at npm, run the following command to download it to your project.
```javascript
npm install primeicons
```
Copy
## Import [\#](https://primevue.org/icons/\#import)
CSS file of the icon library needs to be imported in _styles.scss_ of your application.
```javascript
import 'primeicons/primeicons.css'
```
Copy
## Figma [\#](https://primevue.org/icons/\#figma)
PrimeIcons library is now available on [Figma Community](https://www.figma.com/community/file/1354343849355792252/primeicons). By adding them as a library, you can easily use these icons in your designs.
## Basic [\#](https://primevue.org/icons/\#basic)
PrimeIcons use the _pi pi-{icon}_ syntax such as _pi pi-check_. A standalone icon can be displayed using an element such as _i_ or _span_
```javascript
<i class="pi pi-check"></i>
<i class="pi pi-times"></i>
<span class="pi pi-search"></span>
<span class="pi pi-user"></span>
```
Copy
## Size [\#](https://primevue.org/icons/\#size)
Size of an icon is controlled with the font-size property of the element.
```javascript
<i class="pi pi-check" style="font-size: 1rem"></i>
<i class="pi pi-times" style="font-size: 1.5rem"></i>
<i class="pi pi-search" style="font-size: 2rem"></i>
<i class="pi pi-user" style="font-size: 2.5rem"></i>
```
Copy
## Color [\#](https://primevue.org/icons/\#color)
Icon color is defined with the _color_ property which is inherited from parent by default.
```javascript
<i class="pi pi-check" style="color: slateblue"></i>
<i class="pi pi-times" style="color: green"></i>
<i class="pi pi-search" style="color: 'var(--p-primary-color)'"></i>
<i class="pi pi-user" style="color: #708090"></i>
```
Copy
## Spin [\#](https://primevue.org/icons/\#spin)
Special _pi-spin_ class applies infinite rotation to an icon.
```javascript
<i class="pi pi-spin pi-spinner" style="font-size: 2rem"></i>
<i class="pi pi-spin pi-cog" style="font-size: 2rem"></i>
```
Copy
## Constants [\#](https://primevue.org/icons/\#constants)
Constants API is available to reference icons easily when used programmatically.
- File
- New
- Open
```javascript
<template>
    <div class="card flex justify-center">
        <Menu :model="items" />
    </div>
</template>
<script>
import { PrimeIcons } from '@primevue/core/api';
export default {
    data() {
        return {
            items: [\
                {\
                    label: 'File',\
                    items: [\
                        { label: 'New', icon: PrimeIcons.PLUS },\
                        { label: 'Open', icon: PrimeIcons.DOWNLOAD }\
                    ]\
                }\
            ]
        };
    }
};
</script>
```
Copy
## List [\#](https://primevue.org/icons/\#list)
Here is the full list of PrimeIcons. More icons will be added periodically and you may also [request new icons](https://github.com/primefaces/primeicons/issues) at the issue tracker.
pi-address-book
pi-align-center
pi-align-justify
pi-align-left
pi-align-right
pi-amazon
pi-android
pi-angle-double-down
pi-angle-double-left
pi-angle-double-right
pi-angle-double-up
pi-angle-down
pi-angle-left
pi-angle-right
pi-angle-up
pi-apple
pi-arrow-circle-down
pi-arrow-circle-left
pi-arrow-circle-right
pi-arrow-circle-up
pi-arrow-down
pi-arrow-down-left
pi-arrow-down-left-and-arrow-up-right-to-center
pi-arrow-down-right
pi-arrow-left
pi-arrow-right
pi-arrow-right-arrow-left
pi-arrow-up
pi-arrow-up-left
pi-arrow-up-right
pi-arrow-up-right-and-arrow-down-left-from-center
pi-arrows-alt
pi-arrows-h
pi-arrows-v
pi-asterisk
pi-at
pi-backward
pi-ban
pi-barcode
pi-bars
pi-bell
pi-bell-slash
pi-bitcoin
pi-bolt
pi-book
pi-bookmark
pi-bookmark-fill
pi-box
pi-briefcase
pi-building
pi-building-columns
pi-bullseye
pi-calculator
pi-calendar
pi-calendar-clock
pi-calendar-minus
pi-calendar-plus
pi-calendar-times
pi-camera
pi-car
pi-caret-down
pi-caret-left
pi-caret-right
pi-caret-up
pi-cart-arrow-down
pi-cart-minus
pi-cart-plus
pi-chart-bar
pi-chart-line
pi-chart-pie
pi-chart-scatter
pi-check
pi-check-circle
pi-check-square
pi-chevron-circle-down
pi-chevron-circle-left
pi-chevron-circle-right
pi-chevron-circle-up
pi-chevron-down
pi-chevron-left
pi-chevron-right
pi-chevron-up
pi-circle
pi-circle-fill
pi-clipboard
pi-clock
pi-clone
pi-cloud
pi-cloud-download
pi-cloud-upload
pi-code
pi-cog
pi-comment
pi-comments
pi-compass
pi-copy
pi-credit-card
pi-crown
pi-database
pi-delete-left
pi-desktop
pi-directions
pi-directions-alt
pi-discord
pi-dollar
pi-download
pi-eject
pi-ellipsis-h
pi-ellipsis-v
pi-envelope
pi-equals
pi-eraser
pi-ethereum
pi-euro
pi-exclamation-circle
pi-exclamation-triangle
pi-expand
pi-external-link
pi-eye
pi-eye-slash
pi-face-smile
pi-facebook
pi-fast-backward
pi-fast-forward
pi-file
pi-file-arrow-up
pi-file-check
pi-file-edit
pi-file-excel
pi-file-export
pi-file-import
pi-file-pdf
pi-file-plus
pi-file-word
pi-filter
pi-filter-fill
pi-filter-slash
pi-flag
pi-flag-fill
pi-folder
pi-folder-open
pi-folder-plus
pi-forward
pi-gauge
pi-gift
pi-github
pi-globe
pi-google
pi-graduation-cap
pi-hammer
pi-hashtag
pi-headphones
pi-heart
pi-heart-fill
pi-history
pi-home
pi-hourglass
pi-id-card
pi-image
pi-images
pi-inbox
pi-indian-rupee
pi-info
pi-info-circle
pi-instagram
pi-key
pi-language
pi-lightbulb
pi-link
pi-linkedin
pi-list
pi-list-check
pi-lock
pi-lock-open
pi-map
pi-map-marker
pi-mars
pi-megaphone
pi-microchip
pi-microchip-ai
pi-microphone
pi-microsoft
pi-minus
pi-minus-circle
pi-mobile
pi-money-bill
pi-moon
pi-objects-column
pi-palette
pi-paperclip
pi-pause
pi-pause-circle
pi-paypal
pi-pen-to-square
pi-pencil
pi-percentage
pi-phone
pi-pinterest
pi-play
pi-play-circle
pi-plus
pi-plus-circle
pi-pound
pi-power-off
pi-prime
pi-print
pi-qrcode
pi-question
pi-question-circle
pi-receipt
pi-reddit
pi-refresh
pi-replay
pi-reply
pi-save
pi-search
pi-search-minus
pi-search-plus
pi-send
pi-server
pi-share-alt
pi-shield
pi-shop
pi-shopping-bag
pi-shopping-cart
pi-sign-in
pi-sign-out
pi-sitemap
pi-slack
pi-sliders-h
pi-sliders-v
pi-sort
pi-sort-alpha-down
pi-sort-alpha-down-alt
pi-sort-alpha-up
pi-sort-alpha-up-alt
pi-sort-alt
pi-sort-alt-slash
pi-sort-amount-down
pi-sort-amount-down-alt
pi-sort-amount-up
pi-sort-amount-up-alt
pi-sort-down
pi-sort-down-fill
pi-sort-numeric-down
pi-sort-numeric-down-alt
pi-sort-numeric-up
pi-sort-numeric-up-alt
pi-sort-up
pi-sort-up-fill
pi-sparkles
pi-spinner
pi-spinner-dotted
pi-star
pi-star-fill
pi-star-half
pi-star-half-fill
pi-step-backward
pi-step-backward-alt
pi-step-forward
pi-step-forward-alt
pi-stop
pi-stop-circle
pi-stopwatch
pi-sun
pi-sync
pi-table
pi-tablet
pi-tag
pi-tags
pi-telegram
pi-th-large
pi-thumbs-down
pi-thumbs-down-fill
pi-thumbs-up
pi-thumbs-up-fill
pi-thumbtack
pi-ticket
pi-tiktok
pi-times
pi-times-circle
pi-trash
pi-trophy
pi-truck
pi-turkish-lira
pi-twitch
pi-twitter
pi-undo
pi-unlock
pi-upload
pi-user
pi-user-edit
pi-user-minus
pi-user-plus
pi-users
pi-venus
pi-verified
pi-video
pi-vimeo
pi-volume-down
pi-volume-off
pi-volume-up
pi-wallet
pi-warehouse
pi-wave-pulse
pi-whatsapp
pi-wifi
pi-window-maximize
pi-window-minimize
pi-wrench
pi-youtube
- Download
- Import
- Figma
- Basic
- Size
- Color
- Spin
- Constants
- List
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue TreeTable Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# TreeTable
TreeTable is used to display hierarchical data in tabular format.
## Import [\#](https://primevue.org/treetable/\#import)
```javascript
import TreeTable from 'primevue/treetable';
import Column from 'primevue/column';
```
Copy
## Basic [\#](https://primevue.org/treetable/\#basic)
TreeTable requires a collection of _TreeNode_ instances as a _value_ and _Column_ components as children for the representation. The column with the element to toggle a node should have _expander_ enabled.
```markup
<TreeTable :value="nodes" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>
```
Copy
## Dynamic Columns [\#](https://primevue.org/treetable/\#dynamic_columns)
Columns can be created programmatically.
```markup
<TreeTable :value="nodes" tableStyle="min-width: 50rem">
    <Column v-for="col of columns" :key="col.field" :field="col.field" :header="col.header" :expander="col.expander"></Column>
</TreeTable>
```
Copy
## Controlled [\#](https://primevue.org/treetable/\#controlled)
Expansion state is controlled with _expandedKeys_ property. The _expandedKeys_ should be an object whose keys refer to the node key and values represent the expanded state e.g. _{'0-0': true}_.
```markup
<Button @click="toggleApplications" label="Toggle Applications" />
<TreeTable v-model:expandedKeys="expandedKeys" :value="nodes" class="mt-6" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>
```
Copy
## Template [\#](https://primevue.org/treetable/\#template)
Custom content at _header_ and _footer_ slots are supported via templating.
```markup
<TreeTable :value="nodes" tableStyle="min-width: 50rem">
    <template #header>
        <div class="text-xl font-bold">File Viewer</div>
    </template>
    <Column field="name" header="Name" expander style="width: 250px"></Column>
    <Column field="size" header="Size" style="width: 150px"></Column>
    <Column field="type" header="Type" style="width: 150px"></Column>
    <Column style="width: 10rem">
        <template #body>
            <div class="flex flex-wrap gap-2">
                <Button type="button" icon="pi pi-search" rounded />
                <Button type="button" icon="pi pi-pencil" rounded severity="success" />
            </div>
        </template>
    </Column>
    <template #footer>
        <div class="flex justify-start">
            <Button icon="pi pi-refresh" label="Reload" severity="warn" />
        </div>
    </template>
</TreeTable>
```
Copy
## Size [\#](https://primevue.org/treetable/\#size)
In addition to a regular table, alternatives with alternative sizes are available.
```markup
<TreeTable :value="nodes" :size="size.value" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>
```
Copy
## Pagination [\#](https://primevue.org/treetable/\#pagination)
### Basic [\#](https://primevue.org/treetable/\#paginator_basic)
Pagination is enabled by adding _paginator_ property and defining _rows_ per page.
```markup
<TreeTable :value="nodes" :paginator="true" :rows="5" :rowsPerPageOptions="[5, 10, 25]" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>
```
Copy
### Template [\#](https://primevue.org/treetable/\#paginator_template)
Paginator UI is customized using the _paginatorTemplate_ property. Each element can also be customized further with your own UI to replace the default one, refer to the [Paginator](https://primevue.org/paginator/) component for more information about the advanced customization options.
```markup
<TreeTable
    :value="nodes"
    :paginator="true"
    :rows="5"
    :rowsPerPageOptions="[5, 10, 25, 50]"
    paginatorTemplate="RowsPerPageDropdown FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink"
    currentPageReportTemplate="{first} to {last} of {totalRecords}"
    tableStyle="min-width: 50rem"
>
    <template #paginatorstart>
        <Button type="button" icon="pi pi-refresh" text />
    </template>
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
    <template #paginatorend>
        <Button type="button" icon="pi pi-download" text />
    </template>
</TreeTable>
```
Copy
### Headless [\#](https://primevue.org/treetable/\#paginator_headless)
Pagination is enabled by adding _paginator_ property and defining _rows_ per page.
```markup
<TreeTable :value="nodes" :paginator="true" :rows="5" :rowsPerPageOptions="[5, 10, 25]" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
    <template #paginatorcontainer="{ first, last, page, pageCount, prevPageCallback, nextPageCallback, totalRecords }">
        <div class="flex items-center gap-4 border border-primary bg-transparent rounded-full w-full py-1 px-2 justify-between">
            <Button icon="pi pi-chevron-left" rounded text @click="prevPageCallback" :disabled="page === 0" />
            <div class="text-color font-medium">
                <span class="hidden sm:block">Showing {{ first }} to {{ last }} of {{ totalRecords }}</span>
                <span class="block sm:hidden">Page {{ page + 1 }} of {{ pageCount }}</span>
            </div>
            <Button icon="pi pi-chevron-right" rounded text @click="nextPageCallback" :disabled="page === pageCount - 1" />
        </div>
    </template>
</TreeTable>
```
Copy
## Sort [\#](https://primevue.org/treetable/\#sort)
### Single Column [\#](https://primevue.org/treetable/\#single_sort)
Sorting on a column is enabled by adding the _sortable_ property.
```markup
<TreeTable :value="nodes" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" sortable expander style="width: 34%"></Column>
    <Column field="size" header="Size" sortable style="width: 33%"></Column>
    <Column field="type" header="Type" sortable style="width: 33%"></Column>
</TreeTable>
```
Copy
### Multiple Columns [\#](https://primevue.org/treetable/\#multiple_sort)
Multiple columns can be sorted by defining _sortMode_ as _multiple_. This mode requires metaKey (e.g. _âŒ˜_) to be pressed when clicking a header.
```markup
<TreeTable :value="nodes" sortMode="multiple" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" sortable expander style="width: 34%"></Column>
    <Column field="size" header="Size" sortable style="width: 33%"></Column>
    <Column field="type" header="Type" sortable style="width: 33%"></Column>
</TreeTable>
```
Copy
### Removable Sort [\#](https://primevue.org/treetable/\#removable_sort)
When _removableSort_ is present, the third click removes the sorting from the column.
```markup
<TreeTable :value="nodes" sortMode="multiple" removableSort tableStyle="min-width: 50rem">
    <Column field="name" header="Name" sortable expander style="width: 34%"></Column>
    <Column field="size" header="Size" sortable style="width: 33%"></Column>
    <Column field="type" header="Type" sortable style="width: 33%"></Column>
</TreeTable>
```
Copy
## Filter [\#](https://primevue.org/treetable/\#filter)
Filtering is enabled by adding the _filter_ property to a Column. The _filterMode_ specifies the filtering strategy, in _lenient_ mode when the query matches a node, children of the node are not searched further as all descendants of the node are included. On the other hand, in _strict_ mode when the query matches a node, filtering continues on all descendants. A general filled called _globalFilter_ is also provided to search all columns that support filtering.
```markup
<SelectButton v-model="filterMode" optionLabel="label" dataKey="label" :options="filterOptions" />
<TreeTable :value="nodes" :filters="filters" :filterMode="filterMode.value">
    <template #header>
        <div class="flex justify-end">
            <IconField>
                <InputIcon class="pi pi-search" />
                <InputText v-model="filters['global']" placeholder="Global Search" />
            </IconField>
        </div>
    </template>
    <Column field="name" header="Name" expander style="min-width: 12rem">
        <template #filter>
            <InputText v-model="filters['name']" type="text" placeholder="Filter by name" />
        </template>
    </Column>
    <Column field="size" header="Size" style="min-width: 12rem">
        <template #filter>
            <InputText v-model="filters['size']" type="text" placeholder="Filter by size" />
        </template>
    </Column>
    <Column field="type" header="Type" style="min-width: 12rem">
        <template #filter>
            <InputText v-model="filters['type']" type="text" placeholder="Filter by type" />
        </template>
    </Column>
</TreeTable>
```
Copy
## Selection [\#](https://primevue.org/treetable/\#selection)
### Single [\#](https://primevue.org/treetable/\#single_row_selection)
Single node selection is configured by setting _selectionMode_ as _single_ along with _selectionKeys_ property to manage the selection value binding.
By default, metaKey press (e.g. _âŒ˜_) is necessary to unselect a node however this can be configured with disabling the _metaKeySelection_ property. In touch enabled devices this option has no effect and behavior is same as setting it to false.
```markup
<ToggleSwitch v-model="metaKey" inputId="input-metakey" />
<TreeTable v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="single" :metaKeySelection="metaKey" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>
```
Copy
### Multiple [\#](https://primevue.org/treetable/\#multiple_rows_selection)
More than one node is selectable by setting _selectionMode_ to _multiple_. By default in multiple selection mode, metaKey press (e.g. _âŒ˜_) is not necessary to add to existing selections. When the optional _metaKeySelection_ is present, behavior is changed in a way that selecting a new node requires meta key to be present. Note that in touch enabled devices, TreeTable always ignores metaKey.
In multiple selection mode, value binding should be a key-value pair where key is the node key and value is a boolean to indicate selection.
```markup
<ToggleSwitch v-model="metaKey" inputId="input-metakey" />
<TreeTable v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="multiple" :metaKeySelection="metaKey" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>
```
Copy
### Checkbox [\#](https://primevue.org/treetable/\#checkbox_row_selection)
Selection of multiple nodes via checkboxes is enabled by configuring _selectionMode_ as _checkbox_.
In checkbox selection mode, value binding should be a key-value pair where key (or the dataKey) is the node key and value is an object that has _checked_ and _partialChecked_ properties to represent the checked state of a node.
```javascript
{
    '0-0': {
        partialChecked: false,
        checked: true
    }
}
```
Copy
```markup
<TreeTable v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="checkbox" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>
```
Copy
### Events [\#](https://primevue.org/treetable/\#row_selection_events)
TreeTable provides _nodeSelect_ and _nodeUnselect_ events to listen selection events.
```markup
<TreeTable v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="single" @nodeSelect="onNodeSelect" @nodeUnselect="onNodeUnselect" :metaKeySelection="false" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>
```
Copy
## Lazy Load [\#](https://primevue.org/treetable/\#lazy_load)
Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime _paging_, _sorting_ and _filtering_ occurs. Sample below imitates lazy loading data from a remote datasource using an in-memory list and timeouts to mimic network connection.
Enabling the _lazy_ property and assigning the logical number of rows to _totalRecords_ by doing a projection query are the key elements of the implementation so that paginator displays the UI assuming there are actually records of totalRecords size although in reality they are not present on page, only the records that are displayed on the current page exist.
In addition, only the root elements should be loaded, children can be loaded on demand using _nodeExpand_ callback.
```markup
<TreeTable :value="nodes" :lazy="true" :paginator="true" :rows="rows" :loading="loading"
    @nodeExpand="onExpand" @page="onPage" :totalRecords="totalRecords" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander></Column>
    <Column field="size" header="Size"></Column>
    <Column field="type" header="Type"></Column>
</TreeTable>
```
Copy
## Scroll [\#](https://primevue.org/treetable/\#scroll)
### Vertical [\#](https://primevue.org/treetable/\#vertical_scroll)
Adding _scrollable_ property along with a _scrollHeight_ for the data viewport enables vertical scrolling with fixed headers.
```markup
<TreeTable :value="nodes" scrollable scrollHeight="270px" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>
```
Copy
### Flexible [\#](https://primevue.org/treetable/\#flex_scroll)
Flex scroll feature makes the scrollable viewport section dynamic instead of a fixed value so that it can grow or shrink relative to the parent size of the table. Click the button below to display a maximizable Dialog where data viewport adjusts itself according to the size changes.
```markup
<Button label="Show" icon="pi pi-external-link" @click="dialogVisible = true" />
<Dialog v-model:visible="dialogVisible" header="Flex Scroll" :style="{ width: '75vw' }" maximizable modal :contentStyle="{ height: '300px' }">
    <TreeTable :value="nodes" :scrollable="true" scrollHeight="flex" tableStyle="min-width: 50rem">
        <Column field="name" header="Name" :expander="true" style="min-width: 200px"></Column>
        <Column field="size" header="Size" style="min-width: 200px"></Column>
        <Column field="type" header="Type" style="min-width: 200px"></Column>
    </TreeTable>
    <template #footer>
        <Button label="Ok" icon="pi pi-check" @click="dialogVisible = false" />
    </template>
</Dialog>
```
Copy
### Horizontal [\#](https://primevue.org/treetable/\#horizontal_scroll)
Horizontal scrollbar is displayed when table width exceeds the parent width.
```markup
<TreeTable :value="nodes" scrollable scrollHeight="300px">
    <Column field="name" header="Name" expander style="min-width: 250px"></Column>
    <Column field="size" header="Size" style="min-width: 200px"></Column>
    <Column field="type" header="Type 2" style="min-width: 200px"></Column>
    <Column field="size" header="Size 2" style="min-width: 200px"></Column>
    <Column field="type" header="Type 3" style="min-width: 200px"></Column>
    <Column field="size" header="Size 3" style="min-width: 200px"></Column>
</TreeTable>
```
Copy
### Frozen Columns [\#](https://primevue.org/treetable/\#frozen_columns)
A column can be fixed during horizontal scrolling by enabling the _frozen_ property on a Column. The location is defined with the _alignFrozen_ that can be _left_ or _right_.
```markup
<TreeTable :value="nodes" scrollable scrollHeight="300px">
    <Column field="name" header="Name" expander frozen style="min-width: 250px" class="font-bold"></Column>
    <Column field="size" header="Size" style="min-width: 200px"></Column>
    <Column field="type" header="Type 2" style="min-width: 200px"></Column>
    <Column field="size" header="Size 2" style="min-width: 200px"></Column>
    <Column field="type" header="Type 3" style="min-width: 200px"></Column>
    <Column field="size" header="Size 3" style="min-width: 200px"></Column>
</TreeTable>
```
Copy
## Column Resize [\#](https://primevue.org/treetable/\#column_resize)
### Fit Mode [\#](https://primevue.org/treetable/\#resize_fitmode)
Columns can be resized with drag and drop when _resizableColumns_ is enabled. Default resize mode is _fit_ that does not change the overall table width.
```markup
<TreeTable :value="nodes" :resizableColumns="true" showGridlines tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander></Column>
    <Column field="size" header="Size"></Column>
    <Column field="type" header="Type"></Column>
</TreeTable>
```
Copy
### Expand Mode [\#](https://primevue.org/treetable/\#resize_expandmode)
Setting _columnResizeMode_ as _expand_ changes the table width as well.
```markup
<TreeTable :value="nodes" :resizableColumns="true" columnResizeMode="expand" showGridlines tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander></Column>
    <Column field="size" header="Size"></Column>
    <Column field="type" header="Type"></Column>
</TreeTable>
```
Copy
## Column Toggle [\#](https://primevue.org/treetable/\#column_toggle)
Column visibility based on a condition can be implemented with dynamic columns, in this sample a MultiSelect is used to manage the visible columns.
```markup
<TreeTable :value="nodes" tableStyle="min-width: 50rem">
    <template #header>
        <div style="text-align:left">
            <MultiSelect :modelValue="selectedColumns" @update:modelValue="onToggle" :options="columns" optionLabel="header" class="w-full sm:w-64" display="chip"/>
        </div>
    </template>
    <Column field="name" header="Name" :expander="true"></Column>
    <Column v-for="col of selectedColumns" :field="col.field" :header="col.header" :key="col.field"></Column>
</TreeTable>
```
Copy
## ContextMenu [\#](https://primevue.org/treetable/\#contextmenu)
TreeTable has exclusive integration with ContextMenu using the _contextMenu_ event to open a menu on right click alont with _contextMenuSelection_ property and _row-contextmenu_ event to control the selection via the menu.
```markup
<ContextMenu ref="cm" :model="menuModel" @hide="selectedNode = null" />
<TreeTable v-model:contextMenuSelection="selectedNode" :value="nodes" contextMenu @row-contextmenu="onRowContextMenu" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" expander style="width: 34%"></Column>
    <Column field="size" header="Size" style="width: 33%"></Column>
    <Column field="type" header="Type" style="width: 33%"></Column>
</TreeTable>
```
Copy
## Accessibility [\#](https://primevue.org/treetable/\#accessibility)
### Screen Reader
DataTable uses a _treegrid_ element whose attributes can be extended with the _tableProps_ option. This property allows passing aria roles and attributes like _aria-label_ and _aria-describedby_ to define the table for readers. Default role of the table is _table_. Header, body and footer elements use _rowgroup_, rows use _row_ role, header cells have _columnheader_ and body cells use _cell_ roles. Sortable headers utilizer _aria-sort_ attribute either set to "ascending" or "descending".
Row elements manage _aria-expanded_ for state along with _aria-posinset_, _aria-setsize_ and _aria-level_ attribute to define the hierachy.
When selection is enabled, _aria-selected_ is set to true on a row. In checkbox mode, TreeTable component uses a hidden native checkbox element.
Editable cells use custom templating so you need to manage aria roles and attributes manually if required.
Paginator is a standalone component used inside the DataTable, refer to the [paginator](https://primevue.org/paginator/) for more information about the accessibility features.
### Sortable Headers Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves through the headers. |
| _enter_ | Sorts the column. |
| _space_ | Sorts the column. |
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the first selected node when focus enters the component, if there is none then first element receives the focus. If focus is already inside the component, moves focus to the next focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the last selected node when focus enters the component, if there is none then first element receives the focus. If focus is already inside the component, moves focus to the previous focusable element in the page tab sequence. |
| _enter_ | Selects the focused treenode. |
| _space_ | Selects the focused treenode. |
| _down arrow_ | Moves focus to the next treenode. |
| _up arrow_ | Moves focus to the previous treenode. |
| _right arrow_ | If node is closed, opens the node otherwise moves focus to the first child node. |
| _left arrow_ | If node is open, closes the node otherwise moves focus to the parent node. |
| _home_ | Moves focus to the first same-level node. |
| _end_ | Moves focus to the last same-level node. |
- Import
- Basic
- Dynamic Columns
- Controlled
- Template
- Size
- Pagination
  - Basic
  - Template
  - Headless
- Sort
  - Single Column
  - Multiple Columns
  - Removable Sort
- Filter
- Selection
  - Single
  - Multiple
  - Checkbox
  - Events
- Lazy Load
- Scroll
  - Vertical
  - Flexible
  - Horizontal
  - Frozen Columns
- Column Resize
  - Fit Mode
  - Expand Mode
- Column Toggle
- ContextMenu
- Accessibility
# TreeTable API
API defines helper props, events and others for the PrimeVue TreeTable module.
## TreeTable [\#](https://primevue.org/treetable/\#api.treetable)
TreeTable is used to display hierarchical data in tabular format.
### Props [\#](https://primevue.org/treetable/\#api.treetable.props)
Defines valid properties in TreeTable component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | TreeNode\[\] | null | An array of treenodes. |  |
| dataKey | string \| Function | "key" | Name of the field that uniquely identifies the a record in the data. |  |
| expandedKeys | [TreeTableExpandedKeys](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableExpandedKeys) | null | A map of keys to represent the state of the tree expansion state in controlled mode. |  |
| selectionKeys | [TreeTableSelectionKeys](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSelectionKeys) | null | A map of keys to control the selection state. |  |
| selectionMode | HintedString<"single" \| "multiple" \| "checkbox"> | null | Defines the selection mode. |  |
| metaKeySelection | boolean | false | Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.<br>On touch enabled devices, metaKeySelection is turned off automatically. |  |
| contextMenu | boolean | false | Enables context menu integration. |  |
| contextMenuSelection | any | null | Selected row instance with the ContextMenu. |  |
| rows | number | null | Number of rows to display per page. |  |
| first | number | 0 | Index of the first row to be displayed. |  |
| totalRecords | number | null | Number of total records, defaults to length of value when not defined. |  |
| paginator | boolean | false | When specified as true, enables the pagination. |  |
| paginatorPosition | HintedString<"top" \| "bottom" \| "both"> | bottom | Position of the paginator, options are 'top','bottom' or 'both'. |  |
| alwaysShowPaginator | boolean | true | Whether to show it even there is only one page. |  |
| paginatorTemplate | string | FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown | Template of the paginator. It can be customized using the template property using the predefined keys. Here are the available elements that can be placed inside a paginator in any order.<br>\- FirstPageLink<br>\- PrevPageLink<br>\- PageLinks<br>\- NextPageLink<br>\- LastPageLink<br>\- RowsPerPageDropdown<br>\- JumpToPageDropdown<br>\- JumpToPageInput<br>\- CurrentPageReport |  |
| pageLinkSize | number | 5 | Number of page links to display. |  |
| rowsPerPageOptions | number\[\] | null | Array of integer values to display inside rows per page dropdown. |  |
| currentPageReportTemplate | string | '({currentPage} of {totalPages})' | Template of the current page report element. It displays information about the pagination state.<br>\- {currentPage}<br>\- {totalPages}<br>\- {rows}<br>\- {first}<br>\- {last}<br>\- {totalRecords} |  |
| lazy | boolean | false | Defines if data is loaded and interacted with in lazy manner. |  |
| loading | boolean | false | Displays a loader to indicate data load is in progress. |  |
| loadingIcon | string | null | The icon to show while indicating data load is in progress. |  |
| loadingMode | HintedString<"mask" \| "icon"> | mask | Loading mode display. |  |
| rowHover | boolean | false | When enabled, background of the rows change on hover. |  |
| autoLayout | boolean | false | Whether the cell widths scale according to their content or not. |  |
| sortField | string \| Function | null | Property name or a getter function of a row data used for sorting by default. |  |
| sortOrder | number | null | Order to sort the data by default. |  |
| defaultSortOrder | number | 1 | Default sort order of an unsorted column. |  |
| multiSortMeta | null \| [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | null | An array of SortMeta objects to sort the data by default in multiple sort mode. |  |
| sortMode | HintedString<"single" \| "multiple"> | single | Defines whether sorting works on single column or on multiple columns. |  |
| removableSort | boolean | false | When enabled, columns can have an un-sorted state. |  |
| filters | [TreeTableFilterMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMeta) | null | Filters object with key-value pairs to define the filters. |  |
| filterMode | HintedString<"lenient" \| "strict"> | lenient | Mode for filtering. |  |
| filterLocale | string | null | Locale to use in filtering. The default locale is the host environment's current locale. |  |
| resizableColumns | boolean | false | When enabled, columns can be resized using drag and drop. |  |
| columnResizeMode | HintedString<"fit" \| "expand"> | fit | Defines whether the overall table width should change on column resize. |  |
| indentation | number | 1 | Indentation factor as rem value for children nodes. |  |
| showGridlines | boolean | false | Whether to show grid lines between cells. |  |
| scrollable | boolean | false | When specified, enables horizontal and/or vertical scrolling. |  |
| scrollHeight | HintedString<"flex"> | null | Height of the scroll viewport in fixed pixels or the 'flex' keyword for a dynamic size. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the table. |  |
| tableStyle | string \| object | null | Inline style of the table element. |  |
| tableClass | string \| object | null | Style class of the table element. |  |
| tableProps | any | null | Props to pass to the table element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TreeTablePassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/treetable/\#api.treetable.emits)
Defines valid emits in TreeTable component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:expandedKeys | value: [TreeTableExpandedKeys](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableExpandedKeys) | void | Emitted when the expanded keys change. |  |
| update:selectionKeys | event: [TreeTableSelectionKeys](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSelectionKeys) | void | Emitted when the selection keys change. |  |
| update:contextMenuSelection | value: any | void | Emitted when the contextMenuSelection changes. |  |
| update:first | value: number | void | Emitted when the first changes. |  |
| update:rows | value: number | void | Emitted when the rows changes. |  |
| update:sortField | value: string | void | Emitted when the sortField changes. |  |
| update:sortOrder | value: undefined \| number | void | Emitted when the sortOrder changes. |  |
| update:multiSortMeta | value: undefined \| null \| [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | void | Emitted when the multiSortMeta changes. |  |
| page | event: [TreeTablePageEvent](https://primevue.org/treetable/#api.treetable.events.TreeTablePageEvent) | void | Callback to invoke on pagination. Sort and Filter information is also available for lazy loading implementation. |  |
| sort | event: [TreeTableSortEvent](https://primevue.org/treetable/#api.treetable.events.TreeTableSortEvent) | void | Callback to invoke on sort. Page and Filter information is also available for lazy loading implementation. |  |
| filter | event: [TreeTableFilterEvent](https://primevue.org/treetable/#api.treetable.events.TreeTableFilterEvent) | void | Event to emit after filtering, not triggered in lazy mode. |  |
| node-select | node: TreeNode | void | Callback to invoke when a node is selected. |  |
| node-unselect | node: TreeNode | void | Callback to invoke when a node is unselected. |  |
| node-expand | node: TreeNode | void | Callback to invoke when a node is expanded. |  |
| node-collapse | node: TreeNode | void | Callback to invoke when a node is collapsed. |  |
| column-resize-end | event: Event | void | Callback to invoke when a column is resized. |  |
| row-contextmenu | event: [TreeTableRowContextMenuEvent](https://primevue.org/treetable/#api.treetable.events.TreeTableRowContextMenuEvent) | void | Callback to invoke when a row is selected with a ContextMenu. |  |
### Slots [\#](https://primevue.org/treetable/\#api.treetable.slots)
Defines valid slots in TreeTable component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template. |  |
| loadingicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading icon template. |  |
| checkboxicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom checkbox icon template. |  |
| paginatorcontainer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator container template. |  |
| paginatorstart |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator start template. |  |
| paginatorend |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator end template. |  |
| paginatorfirstpagelinkicon | scope: {<br>class: string, // Style class of the paginator first page link icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator first page link icon template. |  |
| paginatorprevpagelinkicon | scope: {<br>class: string, // Style class of the paginator prev page link icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator previous page link icon template. |  |
| paginatornextpagelinkicon | scope: {<br>class: string, // Style class of the paginator next page link icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator next page link icon template. |  |
| paginatorlastpagelinkicon | scope: {<br>class: string, // Style class of the paginator last page link icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator last page link icon template. |  |
| paginatorrowsperpagedropdownicon | scope: {<br>class: string, // Style class of the paginator rows per page dropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginatorrowsperpagedropdownicon template. |  |
| paginatorjumptopagedropdownicon | scope: {<br>class: string, // Style class of the paginator jump to page dropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginatorjumptopagedropdownicon template. |  |
### Events [\#](https://primevue.org/treetable/\#api.treetable.events)
Defines the custom events used by the component's emit.
#### TreeTableSortEvent [\#](https://primevue.org/treetable/\#api.treetable.events.TreeTableSortEvent)
Custom sort event.
See [sort](https://primevue.org/treetable/#api.treetable.emitsoptions.sort)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| first | number | Index of first record |
| rows | number | Number of rows to display in new page |
| sortField | undefined \| string \| Function | Field to sort against |
| sortOrder | undefined \| null \| 0 \| 1 \| -1 | Sort order as integer |
| multiSortMeta | undefined \| null \| [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | MultiSort metadata |
| filters | [TreeTableFilterMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMeta) | Collection of active filters |
| filterMatchModes | undefined \| HintedString<"startsWith" \| "contains" \| "notContains" \| "endsWith" \| "equals" \| "notEquals" \| "in" \| "lt" \| "lte" \| "gt" \| "gte" \| "between" \| "dateIs" \| "dateIsNot" \| "dateBefore" \| "dateAfter"> | Match modes per field |
#### TreeTablePageEvent [\#](https://primevue.org/treetable/\#api.treetable.events.TreeTablePageEvent)
Custom page event.
See [sort](https://primevue.org/treetable/#api.treetable.emitsoptions.sort)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| first | number | Index of first record |
| rows | number | Number of rows to display in new page |
| sortField | undefined \| string \| Function | Field to sort against |
| sortOrder | undefined \| null \| 0 \| 1 \| -1 | Sort order as integer |
| multiSortMeta | undefined \| null \| [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | MultiSort metadata |
| filters | [TreeTableFilterMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMeta) | Collection of active filters |
| filterMatchModes | undefined \| HintedString<"startsWith" \| "contains" \| "notContains" \| "endsWith" \| "equals" \| "notEquals" \| "in" \| "lt" \| "lte" \| "gt" \| "gte" \| "between" \| "dateIs" \| "dateIsNot" \| "dateBefore" \| "dateAfter"> | Match modes per field |
| page | number | New page number |
| pageCount | number | Total page count |
#### TreeTableFilterEvent [\#](https://primevue.org/treetable/\#api.treetable.events.TreeTableFilterEvent)
Custom filter event.
See [sort](https://primevue.org/treetable/#api.treetable.emitsoptions.sort)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| first | number | Index of first record |
| rows | number | Number of rows to display in new page |
| sortField | undefined \| string \| Function | Field to sort against |
| sortOrder | undefined \| null \| 0 \| 1 \| -1 | Sort order as integer |
| multiSortMeta | undefined \| null \| [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | MultiSort metadata |
| filters | [TreeTableFilterMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMeta) | Collection of active filters |
| filterMatchModes | undefined \| HintedString<"startsWith" \| "contains" \| "notContains" \| "endsWith" \| "equals" \| "notEquals" \| "in" \| "lt" \| "lte" \| "gt" \| "gte" \| "between" \| "dateIs" \| "dateIsNot" \| "dateBefore" \| "dateAfter"> | Match modes per field |
| filteredValue | any | Filtered collection (non-lazy only) |
#### TreeTableRowContextMenuEvent [\#](https://primevue.org/treetable/\#api.treetable.events.TreeTableRowContextMenuEvent)
Custom row context menu event.
See [row-contextmenu](https://primevue.org/treetable/#api.treetable.emitsoptions.row-contextmenu)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| node | TreeNode | Selected row data. |
### Interfaces [\#](https://primevue.org/treetable/\#api.treetable.interfaces)
Defines the custom interfaces used by the module.
#### TreeTablePassThroughMethodOptions [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTablePassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TreeTableProps](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableProps) | null | Defines valid properties. |
| state | [TreeTableState](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableState) | null | Defines current inline state. |
| context | [TreeTableContext](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TreeTableSharedPassThroughMethodOptions [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [TreeTableProps](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableProps) | null | Defines valid properties. |
| state | [TreeTableState](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableState) | null | Defines current inline state. |
#### TreeTableFilterMetaData [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableFilterMetaData)
Custom treetable filter metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| value | any | null | Filter value |
| matchMode | undefined \| HintedString<"startsWith" \| "contains" \| "notContains" \| "endsWith" \| "equals" \| "notEquals" \| "in" \| "lt" \| "lte" \| "gt" \| "gte" \| "between" \| "dateIs" \| "dateIsNot" \| "dateBefore" \| "dateAfter"> | null | Filter match mode |
#### TreeTableOperatorFilterMetaData [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableOperatorFilterMetaData)
Custom operator filter metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| operator | string | null | Filter operator |
| constraints | [TreeTableFilterMetaData\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMetaData[]) | null | Array of filter meta datas. |
#### TreeTableFilterMeta [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableFilterMeta)
Custom filter metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | string \| [TreeTableFilterMetaData](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMetaData) \| [TreeTableOperatorFilterMetaData](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableOperatorFilterMetaData) | null |  |
#### TreeTableSortMeta [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableSortMeta)
Custom sort metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| field | string | null | Column field |
| order | undefined \| null \| 0 \| 1 \| -1 | null | Column sort order |
#### TreeTableExpandedKeys [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableExpandedKeys)
Custom expanded keys metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TreeTableSelectionKeys [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableSelectionKeys)
Custom selection keys metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TreeTablePassThroughOptions [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTablePassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| loading | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the loading wrapper's DOM element. |
| mask | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| loadingIcon | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the loading icon's DOM element. |
| header | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| pcPaginator | any | null | Used to pass attributes to the Paginator component. |
| tableContainer | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the table container's DOM element. |
| table | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the table's DOM element. |
| thead | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the thead's DOM element. |
| headerRow | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the header row's DOM element. |
| tbody | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the tbody's DOM element. |
| row | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the row's DOM element. |
| emptyMessage | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the empty message's DOM element. |
| emptyMessageCell | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the empty message cell's DOM element. |
| tfoot | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the tfoot's DOM element. |
| footerRow | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the footer row's DOM element. |
| footer | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| columnResizeIndicator | [TreeTablePassThroughOptionType](https://primevue.org/treetable/#api.treetable.types.TreeTablePassThroughOptionType) | null | Used to pass attributes to the column resize indicator's DOM element. |
| column | any | null | Used to pass attributes to the Column helper components. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### TreeTablePassThroughAttributes [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTablePassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TreeTableState [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableState)
Defines current inline state in TreeTable component.
| name | type | default | description |
| --- | --- | --- | --- |
| d\_first | number | null | Current index of first record as a number. |
| d\_rows | number | null | Current number of rows to display in new page as a number. |
| d\_sortField | undefined \| string \| Function | null | Current sort field. |
| d\_sortOrder | number | null | Current order to sort the data by default. |
| d\_multiSortMeta | [TreeTableSortMeta\[\]](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta[]) | null | Current sortmeta objects to sort the data. |
| d\_groupRowsSortMeta | [TreeTableSortMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableSortMeta) | null | Current group sortmeta objects to sort the data. |
| d\_selectionKeys | any\[\] | null | Current keys of selected rows. |
| d\_expandedRowKeys | any\[\] | null | Current keys of rows in expanded state. |
| d\_columnOrder | string\[\] | null | Current order of the columns. |
| d\_editingRowKeys | any | null | Current keys of editing rows. |
| d\_editingMeta | object | null | Current editing meta data. |
| d\_filters | [TreeTableFilterMeta](https://primevue.org/treetable/#api.treetable.interfaces.TreeTableFilterMeta) | null | Current filters object. |
| d\_editing | boolean | false | Current editing as a boolean. |
#### TreeTableContext [\#](https://primevue.org/treetable/\#api.treetable.interfaces.TreeTableContext)
Defines current options in TreeTable component.
| name | type | default | description |
| --- | --- | --- | --- |
| node | TreeNode | null | Current node of the item. |
| index | number | null | Current index state of the item. |
| frozen | boolean | false | Current frozen state of the row as a boolean. |
| selectable | boolean | false | Current selectable state of the row as a boolean. |
| selected | boolean | false | Current selected state of the row as a boolean. |
| scrollable | boolean | false | Current horizontal and/or vertical scrolling state. |
| showGridlines | boolean | false | Current show gridlines state. |
| size | null \| string | null | Current size of the table. |
| checked | boolean | false | Current check state of the node as a boolean. |
| partialChecked | boolean | false | Current partial check state of the node as a boolean. |
## Types [\#](https://primevue.org/treetable/\#api.treetable.types)
Defines the custom types used by the module.
#### TreeTablePassThroughOptionType [\#](https://primevue.org/treetable/\#api.treetable.types.TreeTablePassThroughOptionType)
| values |
| --- |
| TreeTablePassThroughAttributes \| (options: TreeTablePassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TreeTableEmits [\#](https://primevue.org/treetable/\#api.treetable.types.TreeTableEmits)
| values |
| --- |
| EmitFn<TreeTableEmitsOptions> |
## Column [\#](https://primevue.org/treetable/\#api.column)
Column component defines various options to specify corresponding features.
It is a helper component for DataTable and TreeTable.
### Props [\#](https://primevue.org/treetable/\#api.column.props)
Defines valid properties in Column component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| columnKey | string | null | Identifier of a column if field property is not defined. |  |
| field | string \| Function | null | Property represented by the column. |  |
| sortField | string \| Function | null | Property name to use in sorting, defaults to field. |  |
| filterField | string \| Function | null | Property name to use in filtering, defaults to field. |  |
| dataType | string | null | Type of data. It's value is related to PrimeVue.filterMatchModeOptions config. |  |
| sortable | boolean | false | Defines if a column is sortable. |  |
| header | string | null | Header content of the column. |  |
| footer | string | null | Footer content of the column. |  |
| style | any | null | Inline style of header, body and footer cells. |  |
| class | any | null | Style class of header, body and footer cells. |  |
| headerStyle | any | null | Inline style of the column header. |  |
| headerClass | any | null | Style class of the column header. |  |
| bodyStyle | any | null | Inline style of the column body. |  |
| bodyClass | any | null | Style class of the column body. |  |
| footerStyle | any | null | Inline style of the column footer. |  |
| footerClass | any | null | Style class of the column footer. |  |
| showFilterMenu | boolean | true | Whether to display the filter overlay. |  |
| showFilterOperator | boolean | true | When enabled, match all and match any operator selector is displayed. |  |
| showClearButton | boolean | false | Displays a button to clear the column filtering. |  |
| showApplyButton | boolean | true | Displays a button to apply the column filtering. |  |
| showFilterMatchModes | boolean | true | Whether to show the match modes selector. |  |
| showAddButton | boolean | true | When enabled, a button is displayed to add more rules. |  |
| filterMatchModeOptions | [ColumnFilterMatchModeOptions\[\]](https://primevue.org/treetable/#api.column.interfaces.ColumnFilterMatchModeOptions[]) | null | An array of label-value pairs to override the global match mode options. |  |
| maxConstraints | number | 2 | Maximum number of constraints for a column filter. |  |
| excludeGlobalFilter | boolean | false | Whether to exclude from global filtering or not. |  |
| filterHeaderStyle | any | null | Inline style of the column filter header in row filter display. |  |
| filterHeaderClass | any | null | Style class of the column filter header in row filter display. |  |
| filterMenuStyle | any | null | Inline style of the column filter overlay. |  |
| filterMenuClass | any | null | Style class of the column filter overlay. |  |
| selectionMode | HintedString<"single" \| "multiple"> | null | Defines column based selection mode. |  |
| expander | boolean | false | Displays an icon to toggle row expansion. |  |
| colspan | number | null | Number of columns to span for grouping. |  |
| rowspan | number | null | Number of rows to span for grouping. |  |
| rowReorder | boolean | false | Whether this column displays an icon to reorder the rows. |  |
| rowReorderIcon | string | null | Icon of the drag handle to reorder rows. |  |
| reorderableColumn | boolean | false | Defines if the column itself can be reordered with dragging. |  |
| rowEditor | boolean | false | When enabled, column displays row editor controls. |  |
| frozen | boolean | false | Whether the column is fixed in horizontal scrolling. |  |
| alignFrozen | HintedString<"left" \| "right"> | left | Position of a frozen column, valid values are left and right. |  |
| exportable | boolean | false | Whether the column is included in data export. |  |
| exportHeader | string | null | Custom export header of the column to be exported as CSV. |  |
| exportFooter | string | null | Custom export footer of the column to be exported as CSV. |  |
| filterMatchMode | string | null | Defines the filtering algorithm to use when searching the options. |  |
| hidden | boolean | false | Whether the column is rendered. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ColumnPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/treetable/\#api.column.slots)
Defines valid slots in Column component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| body | scope: {<br>data: any, // Row data.node: any, // Row node data.column: ColumnNode, // Column node.field: undefined, // Column field.index: number, // Row index.frozenRow: boolean, // Whether the row is frozen.editorInitCallback: (event: Event) â‡’ void, // Editor init callback functionrowTogglerCallback: (event: Event) â‡’ void, // Row toggler callback unction<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom body template for DataTable. |  |
| node | scope: {<br>data: any, // Row data.node: any, // Row node data.column: ColumnNode, // Column node.field: string, // Column field.index: number, // Row index.frozenRow: boolean, // Whether the row is frozen.editorInitCallback: (event: Event) â‡’ void, // Editor init callback functionrowTogglerCallback: (event: Event) â‡’ void, // Row toggler callback unction<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom body template for TreeTable. |  |
| header | scope: {<br>column: ColumnNode, // Column node.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer | scope: {<br>column: ColumnNode, // Column node.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| editor | scope: {<br>data: any, // Row data.column: ColumnNode, // Column node.field: string, // Column field.index: number, // Row index.frozenRow: boolean, // Whether the row is frozen.editorSaveCallback: (event: Event) â‡’ void, // Callback functioneditorCancelCallback: (event: Event) â‡’ void, // Callback function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom editor template. |  |
| filter | scope: {<br>field: string, // Column field.filterModel: ColumnFilterModelType, // Filter metadatafilterCallback: () â‡’ void, // Callback functionapplyFilter: () â‡’ void, // Callback function (closes the overlay)<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter template. |  |
| filterheader | scope: {<br>field: string, // Column field.filterModel: ColumnFilterModelType, // Filter metadatafilterCallback: () â‡’ void, // Callback function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter header template. |  |
| filterfooter | scope: {<br>field: string, // Column field.filterModel: ColumnFilterModelType, // Filter metadatafilterCallback: () â‡’ void, // Callback function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter footer template. |  |
| filterclear | scope: {<br>field: string, // Column field.filterModel: ColumnFilterModelType, // Filter metadatafilterCallback: () â‡’ void, // Callback function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter clear template. |  |
| filterapply | scope: {<br>field: string, // Column field.filterModel: ColumnFilterModelType, // Filter metadatafilterCallback: () â‡’ void, // Callback function<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter apply template. |  |
| loading | scope: {<br>data: any, // Row data.column: ColumnNode, // Column node.field: string, // Column field.index: number, // Row index.frozenRow: boolean, // Whether the row is frozen.loadingOptions: ColumnLoadingOptions, // Loading options.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading template. |  |
| rowtogglericon | scope: {<br>class: string, // Style class of the row toggler icon.rowExpanded: boolean, // Current row expanded state.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| rowtoggleicon | scope: {<br>class: string, // Style class of the row toggler icon.rowExpanded: boolean, // Current row expanded state.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom row toggler icon template. |  |
| rowcheckboxicon | scope: {<br>checked: boolean, // Current check state.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom row checkbox icon template. |  |
| roweditoriniticon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom row editor init icon template. |  |
| roweditorsaveicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom row editor save icon template. |  |
| roweditorcancelicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom row editor cancel icon template. |  |
| filtericon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter icon template. |  |
| filterclearicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter clear icon template. |  |
| filterremoveicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter remove icon template. |  |
| filteraddicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter add icon template. |  |
| sorticon | scope: {<br>class: string, // Style class of the sort icon.sorted: boolean, // Current sort state.sortOrder: number, // Current sort order state.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom sort icon template. |  |
| headercheckboxicon | scope: {<br>checked: boolean, // Current check state.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header checkbox icon template. |  |
| rowreordericon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom row reorder icon template. |  |
| nodetogglericon |  | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| nodetoggleicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom node toggler icon template. |  |
### Interfaces [\#](https://primevue.org/treetable/\#api.column.interfaces)
Defines the custom interfaces used by the module.
#### ColumnPassThroughMethodOptions [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ColumnProps](https://primevue.org/treetable/#api.column.interfaces.ColumnProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| context | [ColumnContext](https://primevue.org/treetable/#api.column.interfaces.ColumnContext) | null | Defines current options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ColumnSharedPassThroughMethodOptions [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [ColumnProps](https://primevue.org/treetable/#api.column.interfaces.ColumnProps) | null | Defines valid properties. |
| parent | DataTablePassThroughOptions | null | Defines parent instance. |
#### ColumnFilterModelType [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnFilterModelType)
Filter model metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| value | any | null | Value of filterModel. |
| matchMode | string | null | Match mode of filterModel. |
#### ColumnFilterMatchModeOptions [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnFilterMatchModeOptions)
Filter match modes for specific columns.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | string | null |  |
#### ColumnLoadingOptions [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnLoadingOptions)
Custom column loading metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| cellIndex | number | null | Cell index |
| cellFirst | boolean | null | Whether the cell is first. |
| cellLast | boolean | null | Whether the cell is last. |
| cellEven | boolean | null | Whether the cell is even. |
| cellOdd | boolean | null | Whether the item is odd. |
| column | [ColumnNode](https://primevue.org/treetable/#api.column.interfaces.ColumnNode) | null | Column instance |
| field | string | null | Column field |
#### ColumnPassThroughOptions [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| headerCell | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the header cell's DOM element. |
| columnResizer | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the column resizer's DOM element. |
| columnHeaderContent | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the column header content's DOM element. |
| columnTitle | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the header title's DOM element. |
| sort | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the sort's DOM element. |
| sortIcon | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the sort icon's DOM element. |
| pcSortBadge | any | null | Used to pass attributes to the Badge component. |
| pcHeaderCheckbox | any | null | Used to pass attributes to the Checkbox component. |
| filter | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the column filter's DOM element. |
| filterElementContainer | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter element container's DOM element. |
| pcColumnFilterButton | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the column filter button's DOM element. |
| filterMenuIcon | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter menu icon's DOM element. |
| pcColumnFilterClearButton | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the column filter clear button's DOM element. |
| filterClearIcon | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter clear icon's DOM element. |
| filterOverlay | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter overlay's DOM element. |
| filterConstraintList | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter constraint list's DOM element. |
| filterConstraint | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter constraint's DOM element. |
| filterConstraintSeparator | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter constraint separator's DOM element. |
| filterOperator | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter operator's DOM element. |
| pcFilterOperatorDropdown | any | null | Used to pass attributes to the Select component. |
| filterRuleList | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter rule list' DOM element. |
| filterRule | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter rule's DOM element. |
| pcFilterConstraintDropdown | any | null | Used to pass attributes to the Select component. |
| filterRemove | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter remove button container's DOM element. |
| pcFilterRemoveRuleButton | any | null | Used to pass attributes to the Button component. |
| filterAddButtonContainer | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter add button container's DOM element. |
| pcFilterAddRuleButton | any | null | Used to pass attributes to the Button component. |
| filterButtonbar | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the filter buttonbar's DOM element. |
| pcFilterClearButton | any | null | Used to pass attributes to the Button component. |
| pcFilterApplyButton | any | null | Used to pass attributes to the Button component. |
| rowToggleButton | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the row toggler button's DOM element. |
| rowToggleIcon | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the row toggler icon's DOM element. |
| bodyCell | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the body cell's DOM element. |
| reorderableRowHandle | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the reorderable row handle's DOM element. |
| pcRowRadiobutton | any | null | Used to pass attributes to the radiobutton's DOM element. |
| pcRowCheckbox | any | null | Used to pass attributes to the checkbox's DOM element. |
| pcRowEditorInit | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the row editor init button's DOM element. |
| pcRowEditorSave | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the row editor save button's DOM element. |
| pcRowEditorCancel | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the row editor cancel button's DOM element. |
| footerCell | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the footer cell's DOM element. |
| columnFooter | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the footer content DOM element. |
| bodyCellContent | [ColumnPassThroughOptionType](https://primevue.org/treetable/#api.column.types.ColumnPassThroughOptionType) | null | Used to pass attributes to the body cell content's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ColumnPassThroughAttributes [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ColumnState [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnState)
Defines current inline state in Column component.
| name | type | default | description |
| --- | --- | --- | --- |
| d\_editing | boolean | null |  |
| styleObject | object | null | Current style of the body cell. |
| overlayVisible | boolean | null | Current filter overlay visible as a boolean. |
| defaultMatchMode | string | null | Current filter match mode. |
| defaultOperator | string | null | Current filter operator. |
| focused | boolean | false | Current focused state as a boolean. |
| rowGroupHeaderStyleObject | object | null | Current style of the rowgroup header. |
#### ColumnContext [\#](https://primevue.org/treetable/\#api.column.interfaces.ColumnContext)
Defines current options in Column component.
| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Current index of the column. |
| checked | boolean | false | Current checked state of row as a boolean. |
| focused | boolean | false | Current focused state of row as a boolean. |
| disabled | boolean | false | Current disabled state of row as a boolean. |
| sorted | boolean | false | Current sort state of the column as a boolean. |
| frozen | boolean | false | Current frozen state of the column as a boolean. |
| resizable | boolean | false | Current resizable state of the column as a boolean. |
| size | string | null | Current size state of the table. |
| showGridlines | boolean | false | Current gridlines state of the table as a boolean. |
| highlighted | boolean | false | Current highlighted state of the filter row item as a boolean. |
| hidden | boolean | false | Current hidden state of the filter clear button of a column as a boolean. |
| overlayVisible | boolean | false | Current visible state of the filter menu of a column as a boolean. |
| active | boolean | false | Current active state of the filter menu of a column as a boolean. |
## Types [\#](https://primevue.org/treetable/\#api.column.types)
Defines the custom types used by the module.
#### ColumnPassThroughOptionType [\#](https://primevue.org/treetable/\#api.column.types.ColumnPassThroughOptionType)
| values |
| --- |
| ColumnPassThroughAttributes \| (options: ColumnPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ColumnEmits [\#](https://primevue.org/treetable/\#api.column.types.ColumnEmits)
| values |
| --- |
| EmitFn<ColumnEmitsOptions> |
#### ColumnNode [\#](https://primevue.org/treetable/\#api.column.types.ColumnNode)
| values |
| --- |
| {<br> "props": "ColumnProps, "<br>} |
## TreeNode [\#](https://primevue.org/treetable/\#api.treenode)
PrimeVue tree components share a common api to specify the node.
### Options [\#](https://primevue.org/treetable/\#api.options.TreeNode)
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| key | string | null | Mandatory unique key of the node. |  |
| label | string | null | Label of the node. |  |
| data | any | null | Data represented by the node. |  |
| type | string | null | Type of the node to match a template. |  |
| icon | string | null | Icon of the node to display next to content. |  |
| children | TreeNode\[\] | null | An array of treenodes as children. |  |
| style | any | null | Inline style of the node. |  |
| styleClass | string | null | Style class of the node. |  |
| selectable | boolean | null | Whether the node is selectable when selection mode is enabled. |  |
| leaf | boolean | false | Specifies if the node has children. Used in lazy loading. |  |
| loading | boolean | null | Specifies the node loading. Used in Tree and TreeTable. |  |
| expandedIcon | string | null | Icon to use in expanded state. |  |
| collapsedIcon | string | null | Icon to use in collapsed state. |  |
| \[key: string\] | any | null |  |  |
- TreeTable
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
- Column
  - Props
  - Slots
  - Interfaces
  - Types
- TreeNode
  - Options
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## CascadeSelect Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# CascadeSelect
CascadeSelect is a form component to select a value from a nested structure of options.
## Import [\#](https://primevue.org/cascadeselect/\#import)
```javascript
import CascadeSelect from 'primevue/cascadeselect';
```
Copy
## Basic [\#](https://primevue.org/cascadeselect/\#basic)
CascadeSelect is used with the _v-model_ property for two-way value binding along with the _options_ collection. To define the label of a group _optionGroupLabel_ property is needed and also _optionGroupChildren_ is required to define the property that refers to the children of a group. Note that order of the _optionGroupChildren_ matters as it should correspond to the data hierarchy.
Select a City
3 results are available
```markup
<CascadeSelect v-model="selectedCity" :options="countries" optionLabel="cname" optionGroupLabel="name"
    :optionGroupChildren="['states', 'cities']" class="w-56" placeholder="Select a City" />
```
Copy
## Forms [\#](https://primevue.org/cascadeselect/\#forms)
CascadeSelect integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Select a City
3 results are available
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex justify-center flex-col gap-4">
    <div class="flex flex-col gap-1">
        <CascadeSelect name="city" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']" class="w-56" placeholder="Select a City" />
        <Message v-if="$form.city?.invalid" severity="error" size="small" variant="simple">{{ $form.city.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Template [\#](https://primevue.org/cascadeselect/\#template)
CascadeSelect offers multiple slots for customization through templating.
Select a City
3 results are available
```markup
<CascadeSelect v-model="selectedCity" :options="countries" optionLabel="cname" optionGroupLabel="name"
    :optionGroupChildren="['states', 'cities']" class="w-56" placeholder="Select a City">
    <template #option="slotProps">
        <div class="flex items-center">
            <img v-if="slotProps.option.states" :alt="slotProps.option.name" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px"  />
            <i v-if="slotProps.option.cities" class="pi pi-compass mr-2"></i>
            <i v-if="slotProps.option.cname" class="pi pi-map-marker mr-2"></i>
            <span>{{ slotProps.option.cname || slotProps.option.name }}</span>
        </div>
    </template>
    <template #dropdownicon>
        <i class="pi pi-map" />
    </template>
    <template #header>
        <div class="font-medium px-3 py-2">Available Countries</div>
    </template>
    <template #footer>
        <div class="px-3 py-1">
            <Button label="Add New" fluid severity="secondary" text size="small" icon="pi pi-plus" />
        </div>
    </template>
</CascadeSelect>
```
Copy
## Loading State [\#](https://primevue.org/cascadeselect/\#loadingstate)
Loading state can be used _loading_ property.
Loading...
No results found
```markup
<CascadeSelect loading placeholder="Loading..." class="w-56" />
```
Copy
## Clear Icon [\#](https://primevue.org/cascadeselect/\#clearicon)
When _showClear_ is enabled, a clear icon is added to reset the CascadeSelect.
Select a City
3 results are available
```markup
<CascadeSelect v-model="selectedCity" :options="countries" optionLabel="cname" optionGroupLabel="name"
    :optionGroupChildren="['states', 'cities']" class="w-56" placeholder="Select a City" />
```
Copy
## Filled [\#](https://primevue.org/cascadeselect/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
Select a City
3 results are available
```markup
<CascadeSelect v-model="selectedCity" variant="filled" :options="countries" optionLabel="cname" optionGroupLabel="name"
    :optionGroupChildren="['states', 'cities']" class="w-56" placeholder="Select a City" />
```
Copy
## Float Label [\#](https://primevue.org/cascadeselect/\#floatlabel)
A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
p-emptylabel
3 results are available
Over Label
p-emptylabel
3 results are available
In Label
p-emptylabel
3 results are available
On Label
```markup
<FloatLabel class="w-full md:w-56">
    <CascadeSelect v-model="value1" inputId="over_label" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']" class="w-full" />
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel class="w-full md:w-56">
    <CascadeSelect v-model="value2" inputId="in_label" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']" class="w-full" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel class="w-full md:w-56">
    <CascadeSelect v-model="value3" inputId="on_label" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']" class="w-full" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/cascadeselect/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
p-emptylabel
3 results are available
City
```markup
<IftaLabel class="w-full md:w-56">
    <CascadeSelect v-model="selectedCity" inputId="cs_city" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']" class="w-full" variant="filled" />
    <label for="cs_city">City</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/cascadeselect/\#sizes)
CascadeSelect provides _small_ and _large_ sizes as alternatives to the base.
Small
3 results are available
Normal
3 results are available
Large
3 results are available
```markup
<CascadeSelect v-model="value1" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']"
    class="w-56" size="small" placeholder="Small" />
<CascadeSelect v-model="value2" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']"
    class="w-56" placeholder="Normal" />
<CascadeSelect v-model="value3" :options="countries" optionLabel="cname" optionGroupLabel="name" :optionGroupChildren="['states', 'cities']"
    class="w-56" size="large" placeholder="Large" />
```
Copy
## Invalid [\#](https://primevue.org/cascadeselect/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
Select a City
3 results are available
Select a City
3 results are available
```markup
<div class="card flex flex-wrap justify-center gap-4">
    <CascadeSelect v-model="selectedCity1" :invalid="!selectedCity1" :options="countries" optionLabel="cname" optionGroupLabel="name"
        :optionGroupChildren="['states', 'cities']" class="w-full sm:w-56" placeholder="Select a City" />
    <CascadeSelect v-model="selectedCity2" :invalid="!selectedCity2" :options="countries" optionLabel="cname" optionGroupLabel="name"
        :optionGroupChildren="['states', 'cities']" class="w-full sm:w-56" placeholder="Select a City" variant="filled" />
</div>
```
Copy
## Disabled [\#](https://primevue.org/cascadeselect/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
Disabled
No results found
```markup
<CascadeSelect disabled placeholder="Disabled" class="w-56" />
```
Copy
## Accessibility [\#](https://primevue.org/cascadeselect/\#accessibility)
### Screen Reader
Value to describe the component can either be provided with _aria-labelledby_ or _aria-label_ props. The cascadeselect element has a _combobox_ role in addition to _aria-haspopup_ and _aria-expanded_ attributes. The relation between the combobox and the popup is created with _aria-controls_ that refers to the id of the popup.
The popup list has an id that refers to the _aria-controls_ attribute of the _combobox_ element and uses _tree_ as the role. Each list item has a _treeitem_ role along with _aria-label_, _aria-selected_ and _aria-expanded_ attributes. The container element of a treenode has the _group_ role. The _aria-setsize_, _aria-posinset_ and _aria-level_ attributes are calculated implicitly and added to each treeitem.
```markup
<span id="dd1"></span>Options</span>
<CascadeSelect aria-labelledby="dd1" />
<CascadeSelect aria-label="Options" />
```
Copy
### Closed State Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the cascadeselect element. |
| _space_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _enter_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _down arrow_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _up arrow_ | Opens the popup and moves visual focus to the selected option, if there is none then last option receives the focus. |
| _any printable character_ | Opens the popup and moves focus to the option whose label starts with the characters being typed, if there is none then first option receives the focus. |
### Popup Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Hides the popup and moves focus to the next tabbable element. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page. |
| _shift_ \+ _tab_ | Hides the popup and moves focus to the previous tabbable element. |
| _enter_ | Selects the focused option and closes the popup. |
| _space_ | Selects the focused option and closes the popup. |
| _escape_ | Closes the popup, moves focus to the cascadeselect element. |
| _down arrow_ | Moves focus to the next option. |
| _up arrow_ | Moves focus to the previous option. |
| _alt_ \+ _up arrow_ | Selects the focused option and closes the popup, then moves focus to the cascadeselect element. |
| _right arrow_ | If option is closed, opens the option otherwise moves focus to the first child option. |
| _left arrow_ | If option is open, closes the option otherwise moves focus to the parent option. |
| _home_ | Moves input cursor at the end, if not then moves focus to the first option. |
| _end_ | Moves input cursor at the beginning, if not then moves focus to the last option. |
| _any printable character_ | Moves focus to the option whose label starts with the characters being typed. |
- Import
- Basic
- Forms
- Template
- Loading State
- Clear Icon
- Filled
- Float Label
- Ifta Label
- Sizes
- Invalid
- Disabled
- Accessibility
# CascadeSelect API
API defines helper props, events and others for the PrimeVue CascadeSelect module.
## CascadeSelect [\#](https://primevue.org/cascadeselect/\#api.cascadeselect)
CascadeSelect is a form component to select a value from a nested structure of options.
### Props [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.props)
Defines valid properties in CascadeSelect component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| options | any\[\] | null | An array of selectitems to display as the available options. |  |
| optionLabel | string \| Function | null | Property name or getter function to use as the label of an option. |  |
| optionValue | string \| Function | null | Property name or getter function to use as the value of an option, defaults to the option itself when not defined. |  |
| optionDisabled | string \| Function | null | Property name or getter function to use as the disabled flag of an option, defaults to false when not defined. |  |
| optionGroupLabel | string \| Function | null | Property name or getter function to use as the label of an option group. |  |
| optionGroupChildren | string \| string\[\] \| Function | null | Property name or getter function to retrieve the items of a group. |  |
| placeholder | string | null | Default text to display when no option is selected. |  |
| breakpoint | string | 960px | The breakpoint to define the maximum width boundary. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| dataKey | string | null | A property to uniquely identify an option. |  |
| showClear | boolean | false | When enabled, a clear icon is displayed to clear the value. |  |
| clearIcon | string | null | Icon to display in clear button. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| inputProps | InputHTMLAttributes | null | Used to pass all properties of the HTMLInputElement to the focusable input element inside the component. |  |
| panelStyle | object | null |  |  |
| panelClass | string \| object | null |  |  |
| panelProps | HTMLAttributes | null |  |  |
| overlayStyle | object | null | Inline style of the overlay overlay. |  |
| overlayClass | string \| object | null | Style class of the overlay overlay. |  |
| overlayProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the overlay overlay inside the component. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself. |  |
| loading | boolean | false | Whether the dropdown is in loading state. |  |
| dropdownIcon | string | null | Icon to display in the dropdown. |  |
| loadingIcon | string | null | Icon to display in loading state. |  |
| optionGroupIcon | string | null | Icon to display in the option group. |  |
| autoOptionFocus | boolean | false | Whether to focus on the first visible or selected element when the overlay panel is shown. |  |
| selectOnFocus | boolean | false | When enabled, the focused option is selected/opened. |  |
| focusOnHover | boolean | true | When enabled, the focus is placed on the hovered option. |  |
| searchLocale | string | null | Locale to use in searching. The default locale is the host environment's current locale. |  |
| searchMessage | string | '{0} results are available' | Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration. |  |
| selectionMessage | string | '{0} items selected' | Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySelectionMessage | string | No selected item | Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySearchMessage | string | No results found | Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration. |  |
| emptyMessage | string | No available options | Text to be displayed when there are no options available. Defaults to value from PrimeVue locale configuration. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<CascadeSelectPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.emits)
Defines valid emits in CascadeSelect component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [CascadeSelectChangeEvent](https://primevue.org/cascadeselect/#api.cascadeselect.events.CascadeSelectChangeEvent) | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| click | event: Event | void | Callback to invoke on click. |  |
| group-change | event: [CascadeSelectGroupChangeEvent](https://primevue.org/cascadeselect/#api.cascadeselect.events.CascadeSelectGroupChangeEvent) | void | Callback to invoke when a group changes. |  |
| before-show |  | void | Callback to invoke before the overlay is shown. |  |
| before-hide |  | void | Callback to invoke before the overlay is hidden. |  |
| show |  | void | Callback to invoke when the overlay is shown. |  |
| hide |  | void | Callback to invoke when the overlay is hidden. |  |
### Slots [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.slots)
Defines valid slots in CascadeSelect component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| option | scope: {<br>option: any, // Option instanceselected: boolean, // Selection state<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each option. |  |
| value | scope: {<br>value: any, // Value of the componentplaceholder: string, // Placeholder text to show<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom value template. |  |
| dropdownicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom dropdown icon template. |  |
| loadingicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading icon template. |  |
| optiongroupicon | scope: {<br>class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option group icon template. |  |
| header | scope: {<br>value: any, // Current valueoptions: any, // Options of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer | scope: {<br>value: any, // Current valueoptions: any, // Options of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| clearicon | scope: {<br>clearCallback: (event: Event) â‡’ void, // Clear icon click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom clear icon template. |  |
### Events [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.events)
Defines the custom events used by the component's emit.
#### CascadeSelectChangeEvent [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.events.CascadeSelectChangeEvent)
Custom change event
See [change](https://primevue.org/cascadeselect/#api.cascadeselect.emitsoptions.change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event. |
| value | any | Selected option value. |
#### CascadeSelectGroupChangeEvent [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.events.CascadeSelectGroupChangeEvent)
See [change](https://primevue.org/cascadeselect/#api.cascadeselect.emitsoptions.change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event. |
| value | any | Selected option value. |
### Interfaces [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces)
Defines the custom interfaces used by the module.
#### CascadeSelectPassThroughMethodOptions [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [CascadeSelectProps](https://primevue.org/cascadeselect/#api.cascadeselect.interfaces.CascadeSelectProps) | null | Defines valid properties. |
| state | [CascadeSelectState](https://primevue.org/cascadeselect/#api.cascadeselect.interfaces.CascadeSelectState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| context | [CascadeSelectContext](https://primevue.org/cascadeselect/#api.cascadeselect.interfaces.CascadeSelectContext) | null | Defines current options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### CascadeSelectPassThroughOptions [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| input | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the input's DOM element. |
| label | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the label's DOM element. |
| clearIcon | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the label's DOM element. |
| dropdown | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the dropdown button's DOM element. |
| dropdownIcon | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the dropdown icon's DOM element. |
| loadingIcon | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the loading icon's DOM element. |
| overlay | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the overlay's DOM element. |
| listContainer | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the list container's DOM element. |
| list | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| option | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the option's DOM element. |
| optionContent | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the option content's DOM element. |
| optionText | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the option text's DOM element. |
| optionList | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the option list's DOM element. |
| groupIconContainer | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the group icon container's DOM element. |
| groupIcon | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the group icon's DOM element. |
| hiddenInputContainer | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the hidden input container's DOM element. |
| hiddenInput | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the hidden input's DOM element. |
| hiddenSelectedMessage | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the hidden selected message's DOM element. |
| hiddenSearchResult | [CascadeSelectPassThroughOptionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughOptionType) | null | Used to pass attributes to the search result message text aria's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [CascadeSelectPassThroughTransitionType](https://primevue.org/cascadeselect/#api.cascadeselect.types.CascadeSelectPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### CascadeSelectPassThroughAttributes [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### CascadeSelectFocusedOptionInfo [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectFocusedOptionInfo)
Defines focused item info
| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Active item index |
| level | number | null | Active item level |
| parentKey | string | null | Parent key info |
#### CascadeSelectState [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectState)
Defines current inline state in CascadeSelect component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string |
| focused | boolean | false | Current focused state as a boolean. |
| focusedOptionInfo | [CascadeSelectFocusedOptionInfo](https://primevue.org/cascadeselect/#api.cascadeselect.interfaces.CascadeSelectFocusedOptionInfo) | null | Current focused item info. |
| activeOptionPath | any\[\] | false | Current focused state as a boolean. |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |
#### CascadeSelectContext [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.interfaces.CascadeSelectContext)
Defines current options in CascadeSelect component.
| name | type | default | description |
| --- | --- | --- | --- |
| option | any | null | Current option. |
| index | number | null | Index of the option. |
| level | number | null | Level of the option. |
| optionGroup | boolean | null | Current option group state of option as a boolean. |
| active | boolean | false | Current active state of option as a boolean. |
| focused | boolean | false | Current focused state of option as a boolean. |
| disabled | boolean | false | Current disabled state of option as a boolean. |
## Types [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.types)
Defines the custom types used by the module.
#### CascadeSelectPassThroughOptionType [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.types.CascadeSelectPassThroughOptionType)
| values |
| --- |
| CascadeSelectPassThroughAttributes \| (options: CascadeSelectPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### CascadeSelectPassThroughTransitionType [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.types.CascadeSelectPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: CascadeSelectPassThroughMethodOptions) => TransitionProps \| undefined |
#### CascadeSelectEmits [\#](https://primevue.org/cascadeselect/\#api.cascadeselect.types.CascadeSelectEmits)
| values |
| --- |
| EmitFn<CascadeSelectEmitsOptions> |
- CascadeSelect
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Laravel Setup
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Install PrimeVue with Laravel
Setting up PrimeVue in a Laravel project.
## Download [\#](https://primevue.org/laravel/\#download)
PrimeVue is available for download on [npm registry](https://www.npmjs.com/package/primevue).
```markup
# Using npm
npm install primevue @primeuix/themes
# Using yarn
yarn add primevue @primeuix/themes
# Using pnpm
pnpm add primevue @primeuix/themes
```
Copy
## Plugin [\#](https://primevue.org/laravel/\#theme)
PrimeVue plugin is required to be installed as an application plugin to set up the default [configuration](https://primevue.org/configuration). The plugin is lightweight, and only utilized for configuration purposes.
```javascript
import { createApp } from 'vue';
import PrimeVue from 'primevue/config';
const app = createApp(App);
app.use(PrimeVue);
```
Copy
## Theme [\#](https://primevue.org/laravel/\#theme)
Configure PrimeVue to use a theme like Aura.
```javascript
import { createApp } from 'vue';
import PrimeVue from 'primevue/config';
import Aura from '@primeuix/themes/aura';
const app = createApp(App);
app.use(PrimeVue, {
    theme: {
        preset: Aura
    }
});
```
Copy
## Verify [\#](https://primevue.org/laravel/\#verify)
Verify your setup by adding a component such as [Button](https://primevue.org/button). Each component can be imported and registered individually so that you only include what you use for bundle optimization. Import path is available in the documentation of the corresponding component.
Verify
```javascript
import Button from "primevue/button"
const app = createApp(App);
app.component('Button', Button);
```
Copy
## Examples [\#](https://primevue.org/laravel/\#examples)
We've created various samples for the popular options in the Vue ecosystem. Visit the [primevue-examples](https://github.com/primefaces/primevue-examples) repository for more samples including [laravel-quickstart](https://github.com/primefaces/primevue-examples/tree/main/laravel-quickstart) and [inertia-quickstart](https://github.com/primefaces/primevue-examples/tree/main/inertia-quickstart).
## Next Steps [\#](https://primevue.org/laravel/\#nextsteps)
Welcome to the Prime UI Ecosystem! Once you have PrimeVue up and running, we recommend exploring the following resources to gain a deeper understanding of the library.
- [Global configuration](https://primevue.org/configuration)
- [Auto imports with tree-shaking](https://primevue.org/autoimport)
- [Customization of styles](https://primevue.org/theming/styled)
- [Pass through attributes](https://primevue.org/passthrough)
- [Getting support](https://primevue.org/support)
- Download
- Plugin
- Theme
- Verify
- Examples
- Next Steps
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Tree Component
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Tree
Tree is used to display hierarchical data.
## Import [\#](https://primevue.org/tree/\#import)
```
import Tree from 'primevue/tree';
```
## Basic [\#](https://primevue.org/tree/\#basic)
Tree component requires an array of TreeNode objects as its _value_.
```
<Tree :value="nodes" class="w-full md:w-[30rem]"></Tree>
```
## Controlled [\#](https://primevue.org/tree/\#controlled)
Tree state can be controlled programmatically with the _expandedKeys_ property that defines the keys that are expanded. This property is a Map instance whose key is the key of a node and value is a boolean. Note that _expandedKeys_ also supports two-way binding with the v-model directive.
Expand AllCollapse All
```
<div class="flex flex-wrap gap-2 mb-6">
    <Button type="button" icon="pi pi-plus" label="Expand All" @click="expandAll" />
    <Button type="button" icon="pi pi-minus" label="Collapse All" @click="collapseAll" />
</div>
<Tree v-model:expandedKeys="expandedKeys" :value="nodes" class="w-full md:w-[30rem]"></Tree>
```
## Selection [\#](https://primevue.org/tree/\#selection)
### Single [\#](https://primevue.org/tree/\#single)
Single node selection is configured by setting _selectionMode_ as _single_ along with _selectionKeys_ property to manage the selection value binding.
```
<Tree v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="single" class="w-full md:w-[30rem]"></Tree>
```
### Multiple [\#](https://primevue.org/tree/\#multiple)
More than one node is selectable by setting _selectionMode_ to _multiple_. By default in multiple selection mode, metaKey press (e.g. _âŒ˜_) is not necessary to add to existing selections. When the optional _metaKeySelection_ is present, behavior is changed in a way that selecting a new node requires meta key to be present. Note that in touch enabled devices, Tree always ignores metaKey.
In multiple selection mode, value binding should be a key-value pair where key is the node key and value is a boolean to indicate selection.
MetaKey
```
<Tree v-model:selectionKeys="selectedKeys" :value="nodes"
    selectionMode="multiple" :metaKeySelection="checked"></Tree>
```
### Checkbox [\#](https://primevue.org/tree/\#checkbox)
Selection of multiple nodes via checkboxes is enabled by configuring _selectionMode_ as _checkbox_.
In checkbox selection mode, value binding should be a key-value pair where key is the node key and value is an object that has _checked_ and _partialChecked_ properties to represent the checked state of a node object to indicate selection.
```
<Tree v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="checkbox" class="w-full md:w-[30rem]"></Tree>
```
## Events [\#](https://primevue.org/tree/\#events)
An event is provided for each type of user interaction such as expand, collapse and selection.
```
<Tree v-model:selectionKeys="selectedKey" :value="nodes" selectionMode="single" :metaKeySelection="false"
    @nodeSelect="onNodeSelect" @nodeUnselect="onNodeUnselect" @nodeExpand="onNodeExpand" @nodeCollapse="onNodeCollapse" class="w-full md:w-[30rem]"></Tree>
```
## Lazy [\#](https://primevue.org/tree/\#lazy)
Lazy loading is useful when dealing with huge datasets, in this example nodes are dynamically loaded on demand using _loading_ property and _node-expand_ method. Default value of _loadingMode_ is _mask_ and also _icon_ is available.
Mask Mode
Icon Mode
```
<Tree :value="nodes" @node-expand="onNodeExpand" :loading="loading" class="w-full md:w-[30rem]"></Tree>
<Tree :value="nodes2" @node-expand="onNodeExpand2" loadingMode="icon" class="w-full md:w-[30rem]"></Tree>
```
## Template [\#](https://primevue.org/tree/\#template)
Each node can have a distinct template by matching the _type_ property to the slot name.
- **Introduction**
- **Components In-Depth**
```
<Tree :value="nodes" class="w-full md:w-[30rem]">
    <template #default="slotProps">
        <b>{{ slotProps.node.label }}</b>
    </template>
    <template #url="slotProps">
        <a :href="slotProps.node.data">{{ slotProps.node.label }}</a>
    </template>
</Tree>
```
## Filter [\#](https://primevue.org/tree/\#filter)
Filtering is enabled by adding the _filter_ property, by default label property of a node is used to compare against the value in the text field, in order to customize which field(s) should be used during search define _filterBy_ property. In addition _filterMode_ specifies the filtering strategy. In _lenient_ mode when the query matches a node, children of the node are not searched further as all descendants of the node are included. On the other hand, in _strict_ mode when the query matches a node, filtering continues on all descendants.
```
<Tree :value="nodes" :filter="true" filterMode="lenient" class="w-full md:w-[30rem]"></Tree>
<Tree :value="nodes" :filter="true" filterMode="strict" class="w-full md:w-[30rem]"></Tree>
```
## Accessibility [\#](https://primevue.org/tree/\#accessibility)
### Screen Reader
Value to describe the component can either be provided with _aria-labelledby_ or _aria-label_ props. The root list element has a _tree_ role whereas each list item has a _treeitem_ role along with _aria-label_, _aria-selected_ and _aria-expanded_ attributes. In checkbox selection, _aria-checked_ is used instead of _aria-selected_. The container element of a treenode has the _group_ role. Checkbox and toggle icons are hidden from screen readers as their parent element with _treeitem_ role and attributes are used instead for readers and keyboard support. The _aria-setsize_, _aria-posinset_ and _aria-level_ attributes are calculated implicitly and added to each treeitem.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the first selected node when focus enters the component, if there is none then first element receives the focus. If focus is already inside the component, moves focus to the next focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the last selected node when focus enters the component, if there is none then first element receives the focus. If focus is already inside the component, moves focus to the previous focusable element in the page tab sequence. |
| _enter_ | Selects the focused treenode. |
| _space_ | Selects the focused treenode. |
| _down arrow_ | Moves focus to the next treenode. |
| _up arrow_ | Moves focus to the previous treenode. |
| _right arrow_ | If node is closed, opens the node otherwise moves focus to the first child node. |
| _left arrow_ | If node is open, closes the node otherwise moves focus to the parent node. |
- Import
- Basic
- Controlled
- Selection
  - Single
  - Multiple
  - Checkbox
- Events
- Lazy
- Template
- Filter
- Accessibility
# Tree API
API defines helper props, events and others for the PrimeVue Tree module.
Theme Designer
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PickList Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# PickList
PickList is used to reorder items between different lists.
## Import [\#](https://primevue.org/picklist/\#import)
```javascript
import PickList from 'primevue/picklist';
```
Copy
## Basic [\#](https://primevue.org/picklist/\#basic)
PickList requires a multidimensional array as its value bound with the _v-model_ directive and a template for its content that gets the _option_ instance and the index via slotProps.
- Bamboo Watch
- Black Watch
- Blue Band
- Blue T-Shirt
- Bracelet
- Brown Purse
- Chakra Bracelet
- Galaxy Earrings
- Game Controller
- Gaming Set
No selected item
- No available options
No available optionsNo selected item
```markup
<PickList v-model="products" dataKey="id" breakpoint="1400px">
    <template #option="{ option  }">
        {{ option.name }}
    </template>
</PickList>
```
Copy
## Template [\#](https://primevue.org/picklist/\#template)
For custom content support define an _option_ template that gets the item instance as a parameter. In addition _sourceheader_ and _targetheader_ slots are provided for further customization.
- ![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)
Bamboo WatchAccessories
$65
- ![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)
Black WatchAccessories
$72
- ![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)
Blue BandFitness
$79
- ![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)
Blue T-ShirtClothing
$29
- ![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)
BraceletAccessories
$15
- ![Brown Purse](https://primefaces.org/cdn/primevue/images/product/brown-purse.jpg)
Brown PurseAccessories
$120
- ![Chakra Bracelet](https://primefaces.org/cdn/primevue/images/product/chakra-bracelet.jpg)
Chakra BraceletAccessories
$32
- ![Galaxy Earrings](https://primefaces.org/cdn/primevue/images/product/galaxy-earrings.jpg)
Galaxy EarringsAccessories
$34
- ![Game Controller](https://primefaces.org/cdn/primevue/images/product/game-controller.jpg)
Game ControllerElectronics
$99
- ![Gaming Set](https://primefaces.org/cdn/primevue/images/product/gaming-set.jpg)
Gaming SetElectronics
$299
No selected item
- No available options
No available optionsNo selected item
```markup
<PickList v-model="products" dataKey="id" breakpoint="1400px" scrollHeight="20rem>
    <template #option="{ option , selected }">
        <div class="flex flex-wrap p-1 items-center gap-4 w-full">
            <img class="w-12 shrink-0 rounded" :src="'https://primefaces.org/cdn/primevue/images/product/' + option.image" :alt="option.name" />
            <div class="flex-1 flex flex-col">
                <span class="font-medium text-sm">{{ option.name }}</span>
                <span :class="['text-sm', { 'text-surface-500 dark:text-surface-400': !selected, 'text-inherit': selected }]">{{ option.category }}</span>
            </div>
            <span class="font-bold">${{ option.price }}</span>
        </div>
    </template>
</PickList>
```
Copy
## Accessibility [\#](https://primevue.org/picklist/\#accessibility)
### Screen Reader
Value to describe the source listbox and target listbox can be provided with _sourceListProps_ and _targetListProps_ by passing _aria-labelledby_ or _aria-label_ props. The list elements has a _listbox_ role with the _aria-multiselectable_ attribute. Each list item has an _option_ role with _aria-selected_ as their attributes.
Controls buttons are _button_ elements with an _aria-label_ that refers to the _aria.moveTop_, _aria.moveUp_, _aria.moveDown_, _aria.moveBottom_, _aria.moveToTarget_, _aria.moveAllToTarget_, _aria.moveToSource_ and _aria.moveAllToSource_ properties of the [locale](https://primevue.org/configuration/#locale) API by default, alternatively you may use _moveTopButtonProps_, _moveUpButtonProps_, _moveDownButtonProps_, _moveToButtonProps_, _moveAllToButtonProps_, _moveFromButtonProps_, _moveFromButtonProps_ _moveAllFromButtonProps_ _moveToTargetProps_, _moveAllToTargetProps_, _moveToSourceProps_ and _moveAllToSourceProps_ to customize the buttons like overriding the default _aria-label_ attributes.
```markup
<span id="lb">Options</span>
<PickList aria-labelledby="lb" />
<PickList aria-label="City" />
```
Copy
### ListBox Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the first selected option, if there is none then first option receives the focus. |
| _up arrow_ | Moves focus to the previous option. |
| _down arrow_ | Moves focus to the next option. |
| _enter_ | Toggles the selected state of the focused option. |
| _space_ | Toggles the selected state of the focused option. |
| _home_ | Moves focus to the first option. |
| _end_ | Moves focus to the last option. |
| _shift_ \+ _down arrow_ | Moves focus to the next option and toggles the selection state. |
| _shift_ \+ _up arrow_ | Moves focus to the previous option and toggles the selection state. |
| _shift_ \+ _space_ | Selects the items between the most recently selected option and the focused option. |
| _control_ \+ _shift_ \+ _home_ | Selects the focused options and all the options up to the first one. |
| _control_ \+ _shift_ \+ _end_ | Selects the focused options and all the options down to the first one. |
| _control_ \+ _a_ | Selects all options. |
### Buttons Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Executes button action. |
| _space_ | Executes button action. |
- Import
- Basic
- Template
- Accessibility
# PickList API
API defines helper props, events and others for the PrimeVue PickList module.
## PickList [\#](https://primevue.org/picklist/\#api.picklist)
PickList is used to reorder items between different lists.
### Props [\#](https://primevue.org/picklist/\#api.picklist.props)
Defines valid properties in PickList component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any\[\]\[\] | null | Value of the component as a multidimensional array. |  |
| selection | any\[\]\[\] | null | Selected items in the list as a multidimensional array. |  |
| dataKey | string | null | Name of the field that uniquely identifies the a record in the data. |  |
| metaKeySelection | boolean | false | Defines whether metaKey is requred or not for the selection.<br>When true metaKey needs to be pressed to select or unselect an item and<br>when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically. |  |
| autoOptionFocus | boolean | true | Whether to focus on the first visible or selected element. |  |
| focusOnHover | boolean | true | When enabled, the focus is placed on the hovered option. |  |
| listStyle | any | null | Inline style of the the list element. |  |
| responsive | boolean | true | Whether the list optimizes layout based on screen size. |  |
| breakpoint | string | 960px | The breakpoint to define the maximum width boundary when responsiveness is enabled. |  |
| scrollHeight | string | 14rem | Height of the viewport, a scrollbar is defined if height of list exceeds this value. |  |
| striped | boolean | false | Whether to displays rows with alternating colors. |  |
| showSourceControls | boolean | true | Whether to show buttons of source list. |  |
| showTargetControls | boolean | true | Whether to show buttons of target list. |  |
| buttonProps | object | null | Used to pass all properties of the ButtonProps to the move up button inside the component. |  |
| moveUpButtonProps | object | null | Used to pass all properties of the ButtonProps to the move up button inside the component. |  |
| moveTopButtonProps | object | null | Used to pass all properties of the ButtonProps to the move top button inside the component. |  |
| moveDownButtonProps | object | null | Used to pass all properties of the ButtonProps to the move down button inside the component. |  |
| moveBottomButtonProps | object | null | Used to pass all properties of the ButtonProps to the move bottom button inside the component. |  |
| moveToTargetProps | object | null | Used to pass all properties of the ButtonProps to the move to target button inside the component. |  |
| moveAllToTargetProps | object | null | Used to pass all properties of the ButtonProps to the move all to target button inside the component. |  |
| moveToSourceProps | object | null | Used to pass all properties of the ButtonProps to the move to source button inside the component. |  |
| moveAllToSourceProps | object | null | Used to pass all properties of the ButtonProps to the move all to source button inside the component. |  |
| tabindex | string \| number | null | Index of the list element in tabbing order. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<PickListPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/picklist/\#api.picklist.emits)
Defines valid emits in PickList component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any\[\]\[\] | void | Emitted when the value changes. |  |
| update:selection | value: any\[\]\[\] | void | Emitted when the selection changes. |  |
| reorder | event: [PickListReorderEvent](https://primevue.org/picklist/#api.picklist.events.PickListReorderEvent) | void | Callback to invoke when the list is reordered. |  |
| selection-change | event: [PickListSelectionChangeEvent](https://primevue.org/picklist/#api.picklist.events.PickListSelectionChangeEvent) | void | Callback to invoke when one or more items are moved to the other list. |  |
| move-to-target | event: [PickListMoveToTargetEvent](https://primevue.org/picklist/#api.picklist.events.PickListMoveToTargetEvent) | void | Callback to invoke when one or more items are moved to the target list. |  |
| move-all-to-target | event: [PickListMoveAllToTargetEvent](https://primevue.org/picklist/#api.picklist.events.PickListMoveAllToTargetEvent) | void | Callback to invoke when all items are moved to the target list. |  |
| move-to-source | event: [PickListMoveToSourceEvent](https://primevue.org/picklist/#api.picklist.events.PickListMoveToSourceEvent) | void | Callback to invoke when one or more items are moved to the source list. |  |
| move-all-to-source | event: [PickListMoveAllToSourceEvent](https://primevue.org/picklist/#api.picklist.events.PickListMoveAllToSourceEvent) | void | Callback to invoke when all items are moved to the source list. |  |
### Slots [\#](https://primevue.org/picklist/\#api.picklist.slots)
Defines valid slots in PickList component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| item | scope: {<br>item: any, // Item of the componentselected: boolean, // Selection stateindex: number, // Index of the item.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| option | scope: {<br>option: any, // Option of the componentselected: boolean, // Selection stateindex: number, // Index of the option.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option template. |  |
| sourceheader |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom source header template. |  |
| targetheader |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom target header template. |  |
| sourcecontrolsstart |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom source controls start template. |  |
| sourcecontrolsend |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom source controls end template. |  |
| movecontrolsstart |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move controls start template. |  |
| movecontrolsend |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move controls end template. |  |
| targetcontrolsstart |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom target controls start template. |  |
| targetcontrolsend |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom target controls end template. |  |
| moveupicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move up icon template. |  |
| movetopicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move top icon template. |  |
| movedownicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move down icon template. |  |
| movebottomicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move bottom icon template. |  |
| movetotargeticon | scope: {<br>viewChanged: boolean, // Whether view change.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom move to target icon template. |  |
| movealltotargeticon | scope: {<br>viewChanged: boolean, // Whether view change.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom move all to target icon template. |  |
| movetosourceicon | scope: {<br>viewChanged: boolean, // Whether view change.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom move to source icon template. |  |
| movealltosourceicon | scope: {<br>viewChanged: boolean, // Whether view change.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom move all to source icon template. |  |
### Events [\#](https://primevue.org/picklist/\#api.picklist.events)
Defines the custom events used by the component's emit.
#### PickListReorderEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListReorderEvent)
Custom reorder event.
See [reorder](https://primevue.org/picklist/#api.picklist.emitsoptions.reorder)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | any\[\] | Ordered list |
| direction | string | Direction of the change; 'up', 'down', 'bottom', 'top' |
| listIndex | number | Index of the list that is ordered, 0 represents the source and 1 represents the target list. |
#### PickListSelectionChangeEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListSelectionChangeEvent)
Custom selection change event.
See [selection-change](https://primevue.org/picklist/#api.picklist.emitsoptions.selection-change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | any\[\] | Selected item |
#### PickListMoveToTargetEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListMoveToTargetEvent)
Custom move-to-target event.
See [move-to-target](https://primevue.org/picklist/#api.picklist.emitsoptions.move-to-target)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| items | any\[\] | Moved items |
#### PickListMoveAllToTargetEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListMoveAllToTargetEvent)
Custom move-all-to-target event.
See [move-all-to-target](https://primevue.org/picklist/#api.picklist.emitsoptions.move-all-to-target)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| items | any\[\] | Moved items |
#### PickListMoveToSourceEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListMoveToSourceEvent)
Custom move-to-source event.
See [move-all-to-target](https://primevue.org/picklist/#api.picklist.emitsoptions.move-all-to-target)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| items | any\[\] | Moved items |
#### PickListMoveAllToSourceEvent [\#](https://primevue.org/picklist/\#api.picklist.events.PickListMoveAllToSourceEvent)
Custom move-all-to-source event.
See [move-all-to-target](https://primevue.org/picklist/#api.picklist.emitsoptions.move-all-to-target)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| items | any\[\] | Moved items |
### Interfaces [\#](https://primevue.org/picklist/\#api.picklist.interfaces)
Defines the custom interfaces used by the module.
#### PickListPassThroughMethodOptions [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [PickListProps](https://primevue.org/picklist/#api.picklist.interfaces.PickListProps) | null | Defines valid properties. |
| state | [PickListState](https://primevue.org/picklist/#api.picklist.interfaces.PickListState) | null | Defines current inline state. |
| context | [PickListContext](https://primevue.org/picklist/#api.picklist.interfaces.PickListContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### PickListSharedPassThroughMethodOptions [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [PickListProps](https://primevue.org/picklist/#api.picklist.interfaces.PickListProps) | null | Defines valid properties. |
| state | [PickListState](https://primevue.org/picklist/#api.picklist.interfaces.PickListState) | null | Defines current inline state. |
#### PickListPassThroughOptions [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| sourceControls | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the source controls' DOM element. |
| pcSourceMoveUpButton | any | null | Used to pass attributes to the Button component. |
| pcSourceMoveTopButton | any | null | Used to pass attributes to the Button component. |
| pcSourceMoveDownButton | any | null | Used to pass attributes to the Button component. |
| pcSourceMoveBottomButton | any | null | Used to pass attributes to the Button component. |
| pcListbox | any | null | Used to pass attributes to the Listbox component. |
| sourceListContainer | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the source list containerr's DOM element. |
| transferControls | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the transfer controls' DOM element. |
| pcMoveToTargetButton | any | null | Used to pass attributes to the Button component. |
| pcMoveAllToTargetButton | any | null | Used to pass attributes to the Button component. |
| pcMoveToSourceButton | any | null | Used to pass attributes to the Button component. |
| pcMoveAllToSourceButton | any | null | Used to pass attributes to the Button component. |
| targetListContainer | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the target list container's DOM element. |
| targetControls | [PickListPassThroughOptionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughOptionType) | null | Used to pass attributes to the target controls' DOM element. |
| pcTargetMoveUpButton | any | null | Used to pass attributes to the Button component. |
| pcTargetMoveTopButton | any | null | Used to pass attributes to the Button component. |
| pcTargetMoveDownButton | any | null | Used to pass attributes to the Button component. |
| pcTargetMoveBottomButton | any | null | Used to pass attributes to the Button component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [PickListPassThroughTransitionType](https://primevue.org/picklist/#api.picklist.types.PickListPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### PickListPassThroughAttributes [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### PickListFocusedState [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListFocusedState)
| name | type | default | description |
| --- | --- | --- | --- |
| sourceList | boolean | false | Current source list's focused state as a boolean. |
| targetList | boolean | false | Current target list's focused state as a boolean. |
#### PickListState [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListState)
Defines current inline state in PickList component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| d\_selection | any\[\] | null | Current id state as a string. |
| viewChanged | boolean | false | Current view change state as a boolean. |
#### PickListContext [\#](https://primevue.org/picklist/\#api.picklist.interfaces.PickListContext)
Defines current options in PickList component.
| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | false | Current active state of the item as a boolean. |
| focused | boolean | false | Current focus state of the item as a boolean. |
## Types [\#](https://primevue.org/picklist/\#api.picklist.types)
Defines the custom types used by the module.
#### PickListPassThroughOptionType [\#](https://primevue.org/picklist/\#api.picklist.types.PickListPassThroughOptionType)
| values |
| --- |
| PickListPassThroughAttributes \| (options: PickListPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### PickListPassThroughTransitionType [\#](https://primevue.org/picklist/\#api.picklist.types.PickListPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: PickListPassThroughMethodOptions) => TransitionProps \| undefined |
#### PickListEmits [\#](https://primevue.org/picklist/\#api.picklist.types.PickListEmits)
| values |
| --- |
| EmitFn<PickListEmitsOptions> |
- PickList
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## DataView Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# DataView
DataView displays data in grid or list layout with pagination and sorting features.
## Import [\#](https://primevue.org/dataview/\#import)
```javascript
import DataView from 'primevue/dataview';
```
Copy
## Basic [\#](https://primevue.org/dataview/\#basic)
DataView requires a _value_ to display along with a _list_ slot for item content.
![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)
INSTOCK
Accessories
Bamboo Watch
5
$65
Buy Now
![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)
INSTOCK
Accessories
Black Watch
4
$72
Buy Now
![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)
LOWSTOCK
Fitness
Blue Band
3
$79
Buy Now
![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)
INSTOCK
Clothing
Blue T-Shirt
5
$29
Buy Now
![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)
INSTOCK
Accessories
Bracelet
4
$15
Buy Now
```markup
<DataView :value="products">
    <template #list="slotProps">
        <div class="flex flex-col">
            <div v-for="(item, index) in slotProps.items" :key="index">
                <div class="flex flex-col sm:flex-row sm:items-center p-6 gap-4" :class="{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }">
                    <div class="md:w-40 relative">
                        <img class="block xl:block mx-auto rounded w-full" :src="`https://primefaces.org/cdn/primevue/images/product/${item.image}`" :alt="item.name" />
                        <div class="absolute bg-black/70 rounded-border" style="left: 4px; top: 4px">
                            <Tag :value="item.inventoryStatus" :severity="getSeverity(item)"></Tag>
                        </div>
                    </div>
                    <div class="flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6">
                        <div class="flex flex-row md:flex-col justify-between items-start gap-2">
                            <div>
                                <span class="font-medium text-surface-500 dark:text-surface-400 text-sm">{{ item.category }}</span>
                                <div class="text-lg font-medium mt-2">{{ item.name }}</div>
                            </div>
                            <div class="bg-surface-100 p-1" style="border-radius: 30px">
                                <div class="bg-surface-0 flex items-center gap-2 justify-center py-1 px-2" style="border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)">
                                    <span class="text-surface-900 font-medium text-sm">{{ item.rating }}</span>
                                    <i class="pi pi-star-fill text-yellow-500"></i>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col md:items-end gap-8">
                            <span class="text-xl font-semibold">${{ item.price }}</span>
                            <div class="flex flex-row-reverse md:flex-row gap-2">
                                <Button icon="pi pi-heart" outlined></Button>
                                <Button icon="pi pi-shopping-cart" label="Buy Now" :disabled="item.inventoryStatus === 'OUTOFSTOCK'" class="flex-auto md:flex-initial whitespace-nowrap"></Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
</DataView>
```
Copy
## Pagination [\#](https://primevue.org/dataview/\#pagination)
Pagination is enabled with the _paginator_ and _rows_ properties. Refer to the [Paginator](https://primevue.org/paginator/) for more information about customizing the paginator.
![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)
INSTOCK
Accessories
Bamboo Watch
5
$65
Buy Now
![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)
INSTOCK
Accessories
Black Watch
4
$72
Buy Now
![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)
LOWSTOCK
Fitness
Blue Band
3
$79
Buy Now
![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)
INSTOCK
Clothing
Blue T-Shirt
5
$29
Buy Now
![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)
INSTOCK
Accessories
Bracelet
4
$15
Buy Now
```markup
<DataView :value="products" paginator :rows="5">
    <template #list="slotProps">
        <div class="flex flex-col">
            <div v-for="(item, index) in slotProps.items" :key="index">
                <div class="flex flex-col sm:flex-row sm:items-center p-6 gap-4" :class="{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }">
                    <div class="md:w-40 relative">
                        <img class="block xl:block mx-auto rounded w-full" :src="`https://primefaces.org/cdn/primevue/images/product/${item.image}`" :alt="item.name" />
                        <div class="absolute bg-black/70 rounded-border" style="left: 4px; top: 4px">
                            <Tag :value="item.inventoryStatus" :severity="getSeverity(item)"></Tag>
                        </div>
                    </div>
                    <div class="flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6">
                        <div class="flex flex-row md:flex-col justify-between items-start gap-2">
                            <div>
                                <span class="font-medium text-surface-500 dark:text-surface-400 text-sm">{{ item.category }}</span>
                                <div class="text-lg font-medium mt-2">{{ item.name }}</div>
                            </div>
                            <div class="bg-surface-100 p-1" style="border-radius: 30px">
                                <div class="bg-surface-0 flex items-center gap-2 justify-center py-1 px-2" style="border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)">
                                    <span class="text-surface-900 font-medium text-sm">{{ item.rating }}</span>
                                    <i class="pi pi-star-fill text-yellow-500"></i>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col md:items-end gap-8">
                            <span class="text-xl font-semibold">${{ item.price }}</span>
                            <div class="flex flex-row-reverse md:flex-row gap-2">
                                <Button icon="pi pi-heart" outlined></Button>
                                <Button icon="pi pi-shopping-cart" label="Buy Now" :disabled="item.inventoryStatus === 'OUTOFSTOCK'" class="flex-auto md:flex-initial whitespace-nowrap"></Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
</DataView>
```
Copy
## Sorting [\#](https://primevue.org/dataview/\#sorting)
Built-in sorting is controlled by bindings _sortField_ and _sortField_ properties from a custom UI.
Sort By Price
![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)
INSTOCK
Accessories
Bamboo Watch
5
$65
Buy Now
![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)
INSTOCK
Accessories
Black Watch
4
$72
Buy Now
![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)
LOWSTOCK
Fitness
Blue Band
3
$79
Buy Now
![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)
INSTOCK
Clothing
Blue T-Shirt
5
$29
Buy Now
![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)
INSTOCK
Accessories
Bracelet
4
$15
Buy Now
```markup
<DataView :value="products" :sortOrder="sortOrder" :sortField="sortField">
    <template #header>
        <Select v-model="sortKey" :options="sortOptions" optionLabel="label" placeholder="Sort By Price" @change="onSortChange($event)" />
    </template>
    <template #list="slotProps">
        <div class="flex flex-col">
            <div v-for="(item, index) in slotProps.items" :key="index">
                <div class="flex flex-col sm:flex-row sm:items-center p-6 gap-4" :class="{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }">
                    <div class="md:w-40 relative">
                        <img class="block xl:block mx-auto rounded w-full" :src="`https://primefaces.org/cdn/primevue/images/product/${item.image}`" :alt="item.name" />
                        <div class="absolute bg-black/70 rounded-border" style="left: 4px; top: 4px">
                            <Tag :value="item.inventoryStatus" :severity="getSeverity(item)"></Tag>
                        </div>
                    </div>
                    <div class="flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6">
                        <div class="flex flex-row md:flex-col justify-between items-start gap-2">
                            <div>
                                <span class="font-medium text-surface-500 dark:text-surface-400 text-sm">{{ item.category }}</span>
                                <div class="text-lg font-medium mt-2">{{ item.name }}</div>
                            </div>
                            <div class="bg-surface-100 p-1" style="border-radius: 30px">
                                <div class="bg-surface-0 flex items-center gap-2 justify-center py-1 px-2" style="border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)">
                                    <span class="text-surface-900 font-medium text-sm">{{ item.rating }}</span>
                                    <i class="pi pi-star-fill text-yellow-500"></i>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col md:items-end gap-8">
                            <span class="text-xl font-semibold">${{ item.price }}</span>
                            <div class="flex flex-row-reverse md:flex-row gap-2">
                                <Button icon="pi pi-heart" outlined></Button>
                                <Button icon="pi pi-shopping-cart" label="Buy Now" :disabled="item.inventoryStatus === 'OUTOFSTOCK'" class="flex-auto md:flex-initial whitespace-nowrap"></Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
</DataView>
```
Copy
## Layout [\#](https://primevue.org/dataview/\#layout)
DataView supports _list_ and _grid_ display modes defined with the _layout_ property. The _grid_ mode is not built-in for flexibility purposes and requires a library with CSS grid features like Tailwind.
![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)
INSTOCK
Accessories
Bamboo Watch
5
$65
Buy Now
![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)
INSTOCK
Accessories
Black Watch
4
$72
Buy Now
![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)
LOWSTOCK
Fitness
Blue Band
3
$79
Buy Now
![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)
INSTOCK
Clothing
Blue T-Shirt
5
$29
Buy Now
![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)
INSTOCK
Accessories
Bracelet
4
$15
Buy Now
![Brown Purse](https://primefaces.org/cdn/primevue/images/product/brown-purse.jpg)
OUTOFSTOCK
Accessories
Brown Purse
4
$120
Buy Now
![Chakra Bracelet](https://primefaces.org/cdn/primevue/images/product/chakra-bracelet.jpg)
LOWSTOCK
Accessories
Chakra Bracelet
3
$32
Buy Now
![Galaxy Earrings](https://primefaces.org/cdn/primevue/images/product/galaxy-earrings.jpg)
INSTOCK
Accessories
Galaxy Earrings
5
$34
Buy Now
![Game Controller](https://primefaces.org/cdn/primevue/images/product/game-controller.jpg)
LOWSTOCK
Electronics
Game Controller
4
$99
Buy Now
![Gaming Set](https://primefaces.org/cdn/primevue/images/product/gaming-set.jpg)
INSTOCK
Electronics
Gaming Set
3
$299
Buy Now
![Gold Phone Case](https://primefaces.org/cdn/primevue/images/product/gold-phone-case.jpg)
OUTOFSTOCK
Accessories
Gold Phone Case
4
$24
Buy Now
![Green Earbuds](https://primefaces.org/cdn/primevue/images/product/green-earbuds.jpg)
INSTOCK
Electronics
Green Earbuds
4
$89
Buy Now
```markup
<DataView :value="products" :layout="layout">
    <template #header>
        <div class="flex justify-end">
            <SelectButton v-model="layout" :options="options" :allowEmpty="false">
                <template #option="{ option }">
                    <i :class="[option === 'list' ? 'pi pi-bars' : 'pi pi-table']" />
                </template>
            </SelectButton>
        </div>
    </template>
    <template #list="slotProps">
        <div class="flex flex-col">
            <div v-for="(item, index) in slotProps.items" :key="index">
                <div class="flex flex-col sm:flex-row sm:items-center p-6 gap-4" :class="{ 'border-t border-surface-200 dark:border-surface-700': index !== 0 }">
                    <div class="md:w-40 relative">
                        <img class="block xl:block mx-auto rounded w-full" :src="`https://primefaces.org/cdn/primevue/images/product/${item.image}`" :alt="item.name" />
                        <div class="absolute bg-black/70 rounded-border" style="left: 4px; top: 4px">
                            <Tag :value="item.inventoryStatus" :severity="getSeverity(item)"></Tag>
                        </div>
                    </div>
                    <div class="flex flex-col md:flex-row justify-between md:items-center flex-1 gap-6">
                        <div class="flex flex-row md:flex-col justify-between items-start gap-2">
                            <div>
                                <span class="font-medium text-surface-500 dark:text-surface-400 text-sm">{{ item.category }}</span>
                                <div class="text-lg font-medium mt-2">{{ item.name }}</div>
                            </div>
                            <div class="bg-surface-100 p-1" style="border-radius: 30px">
                                <div class="bg-surface-0 flex items-center gap-2 justify-center py-1 px-2" style="border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)">
                                    <span class="text-surface-900 font-medium text-sm">{{ item.rating }}</span>
                                    <i class="pi pi-star-fill text-yellow-500"></i>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col md:items-end gap-8">
                            <span class="text-xl font-semibold">${{ item.price }}</span>
                            <div class="flex flex-row-reverse md:flex-row gap-2">
                                <Button icon="pi pi-heart" outlined></Button>
                                <Button icon="pi pi-shopping-cart" label="Buy Now" :disabled="item.inventoryStatus === 'OUTOFSTOCK'" class="flex-auto md:flex-initial whitespace-nowrap"></Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
    <template #grid="slotProps">
        <div class="grid grid-cols-12 gap-4">
            <div v-for="(item, index) in slotProps.items" :key="index" class="col-span-12 sm:col-span-6 md:col-span-4 xl:col-span-6 p-2">
                <div class="p-6 border border-surface-200 dark:border-surface-700 bg-surface-0 dark:bg-surface-900 rounded flex flex-col">
                    <div class="bg-surface-50 flex justify-center rounded p-4">
                        <div class="relative mx-auto">
                            <img class="rounded w-full" :src="`https://primefaces.org/cdn/primevue/images/product/${item.image}`" :alt="item.name" style="max-width: 300px"/>
                            <div class="absolute bg-black/70 rounded-border" style="left: 4px; top: 4px">
                                <Tag :value="item.inventoryStatus" :severity="getSeverity(item)"></Tag>
                            </div>
                        </div>
                    </div>
                    <div class="pt-6">
                        <div class="flex flex-row justify-between items-start gap-2">
                            <div>
                                <span class="font-medium text-surface-500 dark:text-surface-400 text-sm">{{ item.category }}</span>
                                <div class="text-lg font-medium mt-1">{{ item.name }}</div>
                            </div>
                            <div class="bg-surface-100 p-1" style="border-radius: 30px">
                                <div class="bg-surface-0 flex items-center gap-2 justify-center py-1 px-2" style="border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)">
                                    <span class="text-surface-900 font-medium text-sm">{{ item.rating }}</span>
                                    <i class="pi pi-star-fill text-yellow-500"></i>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-col gap-6 mt-6">
                            <span class="text-2xl font-semibold">${{ item.price }}</span>
                            <div class="flex gap-2">
                                <Button icon="pi pi-shopping-cart" label="Buy Now" :disabled="item.inventoryStatus === 'OUTOFSTOCK'" class="flex-auto whitespace-nowrap"></Button>
                                <Button icon="pi pi-heart" outlined></Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
</DataView>
```
Copy
## Loading [\#](https://primevue.org/dataview/\#loading)
While data is being loaded, [Skeleton](https://primevue.org/skeleton/) component may be used to indicate the busy state.
```markup
<DataView :value="products" :layout="layout">
    <template #header>
        <div class="flex justify-end">
            <SelectButton v-model="layout" :options="options" :allowEmpty="false">
                <template #option="{ option }">
                    <i :class="[option === 'list' ? 'pi pi-bars' : 'pi pi-table']" />
                </template>
            </SelectButton>
        </div>
    </template>
    <template #list>
        <div class="flex flex-col">
            <div v-for="i in 6" :key="i">
                <div class="flex flex-col xl:flex-row xl:items-start p-6 gap-6" :class="{ 'border-t border-surface-200 dark:border-surface-700': i !== 0 }">
                    <Skeleton class="!w-9/12 sm:!w-64 xl:!w-40 !h-24 mx-auto" />
                    <div class="flex flex-col sm:flex-row justify-between items-center xl:items-start flex-1 gap-6">
                        <div class="flex flex-col items-center sm:items-start gap-4">
                            <Skeleton width="8rem" height="2rem" />
                            <Skeleton width="6rem" height="1rem" />
                            <div class="flex items-center gap-4">
                                <Skeleton width="6rem" height="1rem" />
                                <Skeleton width="3rem" height="1rem" />
                            </div>
                        </div>
                        <div class="flex sm:flex-col items-center sm:items-end gap-4 sm:gap-2">
                            <Skeleton width="4rem" height="2rem" />
                            <Skeleton size="3rem" shape="circle" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>
    <template #grid>
        <div class="grid grid-cols-12 gap-4">
            <div v-for="i in 6" :key="i" class="col-span-12 sm:col-span-6 xl:col-span-4 p-2">
                <div class="p-6 border border-surface-200 dark:border-surface-700 bg-surface-0 dark:bg-surface-900 rounded">
                    <div class="flex flex-wrap items-center justify-between gap-2">
                        <Skeleton width="6rem" height="2rem" />
                        <Skeleton width="3rem" height="1rem" />
                    </div>
                    <div class="flex flex-col items-center gap-4 py-8">
                        <Skeleton width="75%" height="10rem" />
                        <Skeleton width="8rem" height="2rem" />
                        <Skeleton width="6rem" height="1rem" />
                    </div>
                    <div class="flex items-center justify-between">
                        <Skeleton width="4rem" height="2rem" />
                        <Skeleton width="6rem" height="1rem" shape="circle" size="3rem" />
                    </div>
                </div>
            </div>
        </div>
    </template>
</DataView>
```
Copy
## Accessibility [\#](https://primevue.org/dataview/\#accessibility)
### Screen Reader
The container element that wraps the layout options buttons has a _group_ role whereas each button element uses _button_ role and _aria-pressed_ is updated depending on selection state. Values to describe the buttons are derived from the _aria.listView_ and _aria.gridView_ properties of the [locale](https://primevue.org/configuration/#locale) API respectively.
Refer to [paginator](https://primevue.org/paginator/) accessibility documentation for the paginator of the component.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the buttons. |
| _space_ | Toggles the checked state of a button. |
- Import
- Basic
- Pagination
- Sorting
- Layout
- Loading
- Accessibility
# DataView API
API defines helper props, events and others for the PrimeVue DataView module.
## DataView [\#](https://primevue.org/dataview/\#api.dataview)
DataView displays data in grid or list layout with pagination and sorting features.
### Props [\#](https://primevue.org/dataview/\#api.dataview.props)
Defines valid properties in DataView component. In addition to these, all properties of HTMLDivElement can be used in this component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | any\[\] | null | An array of objects to display. |  |
| layout | HintedString<"list" \| "grid"> | list | Layout of the items, valid values are 'list' and 'grid'. |  |
| rows | number | 0 | Number of rows to display per page. |  |
| first | number | 0 | Index of the first record to render. |  |
| totalRecords | number | null | Number of total records, defaults to length of value when not defined. |  |
| paginator | boolean | false | When specified as true, enables the pagination. |  |
| paginatorPosition | HintedString<"top" \| "bottom" \| "both"> | bottom | Position of the paginator, options are 'top','bottom' or 'both'. |  |
| alwaysShowPaginator | boolean | true | Whether to show it even there is only one page. |  |
| paginatorTemplate | string | FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown | Template of the paginator. It can be customized using the template property using the predefined keys,<br>\- FirstPageLink<br>\- PrevPageLink<br>\- PageLinks<br>\- NextPageLink<br>\- LastPageLink<br>\- RowsPerPageDropdown<br>\- JumpToPageDropdown<br>\- JumpToPageInput<br>\- CurrentPageReport |  |
| pageLinkSize | number | 5 | Number of page links to display. |  |
| rowsPerPageOptions | number\[\] | null | Array of integer values to display inside rows per page dropdown. |  |
| currentPageReportTemplate | string | '({currentPage} of {totalPages})' | Template of the current page report element. It displays information about the pagination state.<br>\- {currentPage}<br>\- {totalPages}<br>\- {rows}<br>\- {first}<br>\- {last}<br>\- {totalRecords} |  |
| sortField | string \| Function | null | Property name or a getter function of data to use in sorting by default. |  |
| sortOrder | number | null | Order to sort the data by default. |  |
| lazy | boolean | false | Defines if data is loaded and interacted with in lazy manner. |  |
| dataKey | undefined \| string | null | Name of the data that uniquely identifies the a record in the data. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DataViewPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/dataview/\#api.dataview.emits)
Defines valid slots in DataView component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:first | value: number | void | Emitted when the first changes. |  |
| update:rows | value: number | void | Emitted when the rows changes. |  |
| page | event: [DataViewPageEvent](https://primevue.org/dataview/#api.dataview.events.DataViewPageEvent) | void | Callback to invoke when page changes, the event object contains information about the new state. |  |
### Slots [\#](https://primevue.org/dataview/\#api.dataview.slots)
Defines valid slots in DataView component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| empty | scope: {<br>layout: string, // Layout of the items.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template. |  |
| paginatorcontainer | scope: {<br>first: number, // Index of first recordlast: number, // Index of last recordrows: number, // Number of rows to display in new pagepage: number, // New page numberpageCount: number, // Total number of pagespageLinks: number, // Direct page linkstotalRecords: number, // Total recordsfirstPageCallback: (event: Event) â‡’ void, // First page function.lastPageCallback: (event: Event) â‡’ void, // Last page function.prevPageCallback: (event: Event) â‡’ void, // Previous page function.nextPageCallback: (event: Event) â‡’ void, // Next page function.rowChangeCallback: (value: number) â‡’ void, // Row change function.changePageCallback: (value: number) â‡’ void, // Page change function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator container template. |  |
| paginatorstart |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator start template. |  |
| paginatorend |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom paginator end template. |  |
| list | scope: {<br>items: any, // Value of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom list template. |  |
| grid | scope: {<br>items: any, // Value of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom list template. |  |
### Events [\#](https://primevue.org/dataview/\#api.dataview.events)
Defines the custom events used by the component's emit.
#### DataViewPageEvent [\#](https://primevue.org/dataview/\#api.dataview.events.DataViewPageEvent)
Custom page event.
See [page](https://primevue.org/dataview/#api.dataview.emitsoptions.page)
| name | type | description |
| --- | --- | --- |
| page | number | New page number |
| first | number | Index of first record |
| rows | number | Number of rows to display in new page |
| pageCount | number | Total number of pages |
### Interfaces [\#](https://primevue.org/dataview/\#api.dataview.interfaces)
Defines the custom interfaces used by the module.
#### DataViewPassThroughMethodOptions [\#](https://primevue.org/dataview/\#api.dataview.interfaces.DataViewPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DataViewProps](https://primevue.org/dataview/#api.dataview.interfaces.DataViewProps) | null | Defines valid properties. |
| state | [DataViewState](https://primevue.org/dataview/#api.dataview.interfaces.DataViewState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### DataViewSharedPassThroughMethodOptions [\#](https://primevue.org/dataview/\#api.dataview.interfaces.DataViewSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [DataViewProps](https://primevue.org/dataview/#api.dataview.interfaces.DataViewProps) | null | Defines valid properties. |
| state | [DataViewState](https://primevue.org/dataview/#api.dataview.interfaces.DataViewState) | null | Defines current inline state. |
#### DataViewPassThroughOptions [\#](https://primevue.org/dataview/\#api.dataview.interfaces.DataViewPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [DataViewPassThroughOptionType](https://primevue.org/dataview/#api.dataview.types.DataViewPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [DataViewPassThroughOptionType](https://primevue.org/dataview/#api.dataview.types.DataViewPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| pcPaginator | any | null | Used to pass attributes to the Paginator component. |
| content | [DataViewPassThroughOptionType](https://primevue.org/dataview/#api.dataview.types.DataViewPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| emptyMessage | [DataViewPassThroughOptionType](https://primevue.org/dataview/#api.dataview.types.DataViewPassThroughOptionType) | null | Used to pass attributes to the empty message's DOM element. |
| footer | [DataViewPassThroughOptionType](https://primevue.org/dataview/#api.dataview.types.DataViewPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### DataViewPassThroughAttributes [\#](https://primevue.org/dataview/\#api.dataview.interfaces.DataViewPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### DataViewState [\#](https://primevue.org/dataview/\#api.dataview.interfaces.DataViewState)
Defines current inline state in DataView component.
| name | type | default | description |
| --- | --- | --- | --- |
| d\_first | number | null | Current index of first record as a number. |
| d\_rows | number | null | Current number of rows to display in new page as a number. |
## Types [\#](https://primevue.org/dataview/\#api.dataview.types)
Defines the custom types used by the module.
#### DataViewPassThroughOptionType [\#](https://primevue.org/dataview/\#api.dataview.types.DataViewPassThroughOptionType)
| values |
| --- |
| DataViewPassThroughAttributes \| (options: DataViewPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### DataViewEmits [\#](https://primevue.org/dataview/\#api.dataview.types.DataViewEmits)
| values |
| --- |
| EmitFn<DataViewEmitsOptions> |
- DataView
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Image Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Image
Displays a single image with preview and tranformation options.
## Import [\#](https://primevue.org/image/\#import)
```javascript
import Image from 'primevue/image';
```
Copy
## Basic [\#](https://primevue.org/image/\#basic)
Image is used similar to the standard _img_ element.
![Image](https://primefaces.org/cdn/primevue/images/galleria/galleria10.jpg)
```markup
<Image src="/image.jpg" alt="Image" width="250" />
```
Copy
## Preview [\#](https://primevue.org/image/\#preview)
Enabling _preview_ mode displays a modal layer when the image is clicked to provide transformation options such as rotating and zooming.
![Image](https://primefaces.org/cdn/primevue/images/galleria/galleria10.jpg)
```markup
<Image src="/image.jpg" alt="Image" width="250" preview />
```
Copy
## Template [\#](https://primevue.org/image/\#template)
An eye icon is displayed by default when the image is hovered in preview mode, use the _previewicon_ slot for custom content. In addition, the _image_ and _preview_ slots are available to define the thumbnail and detailed image respectively.
![image](https://primefaces.org/cdn/primevue/images/galleria/galleria11.jpg)
```markup
<Image alt="Image" preview>
    <template #previewicon>
        <i class="pi pi-search"></i>
    </template>
    <template #image>
        <img src="/thumbnail.jpg" alt="image" />
    </template>
    <template #preview="slotProps">
        <img src="/image.jpg" alt="preview" :style="slotProps.style" @click="slotProps.onClick" />
    </template>
</Image>
```
Copy
## Accessibility [\#](https://primevue.org/image/\#accessibility)
### Screen Reader
The preview button is a native _button_ element with an _aria-label_ that refers to the _aria.zoomImage_ property of the [locale](https://primevue.org/configuration/#locale) API by default, with _previewButtonProps_ you may use your own aria roles and attributes as any valid attribute is passed to the button element implicitly.
When preview is active, _dialog_ role with _aria-modal_ is applied to the overlay image container.
Button controls use _aria.rotateRight_, _aria.rotateLeft_, _aria.zoomIn_, _aria.zoomOut_ and _aria.close_ from the [locale](https://primevue.org/configuration/#locale) API as _aria-label_.
### ButtonBar Keyboard Support
When preview is activated, close button receives the initial focus.
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through button bar. |
| _enter_ | Activates the button. |
| _space_ | Activates the button. |
| _esc_ | Closes the image preview. |
- Import
- Basic
- Preview
- Template
- Accessibility
# Image API
API defines helper props, events and others for the PrimeVue Image module.
## Image [\#](https://primevue.org/image/\#api.image)
Displays an image with preview and tranformation options. For multiple image, see Galleria.
### Props [\#](https://primevue.org/image/\#api.image.props)
Defines valid properties in Image component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| src | string | null | Image url. |  |
| preview | boolean | false | Controls the preview functionality. |  |
| imageStyle | any | null | Inline style of the image element. |  |
| imageClass | any | null | Style class of the image element. |  |
| indicatorIcon | string | null | Custom indicator icon. |  |
| previewIcon | string | null | Custom indicator icon. |  |
| zoomInDisabled | boolean | false | Disable the zoom-in button |  |
| zoomOutDisabled | boolean | false | Disable the zoom-out button |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ImagePassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/image/\#api.image.slots)
Defines valid slots in Image slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| previewicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom indicator template. |  |
| indicatoricon |  | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| refresh |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom refresh template. |  |
| undo |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom undo template. |  |
| zoomout |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom zoomout template. |  |
| zoomin |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom zoomin template. |  |
| close |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom close template. |  |
| image | scope: {<br>class: any, // Style class of the image element.style: any, // Style of the image element.errorCallback: () â‡’ void, // Preview click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom image template. |  |
| preview | scope: {<br>class: any, // Style class of the preview image element.style: any, // Style of the preview image element.previewCallback: () â‡’ void, // Preview click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| original | scope: {<br>class: any, // Style class of the original image element.style: any, // Style of the original image element.previewCallback: () â‡’ void, // Preview click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom original template. |  |
### Methods [\#](https://primevue.org/image/\#api.image.methods)
Defines methods that can be accessed by the component's reference.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| show |  | void | Triggered when the preview overlay is shown. |  |
| hide |  | void | Triggered when the preview overlay is hidden. |  |
| error |  | void | Triggered when an error occurs while loading an image file. |  |
### Interfaces [\#](https://primevue.org/image/\#api.image.interfaces)
Defines the custom interfaces used by the module.
#### ImagePassThroughMethodOptions [\#](https://primevue.org/image/\#api.image.interfaces.ImagePassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ImageProps](https://primevue.org/image/#api.image.interfaces.ImageProps) | null | Ë†<br>Defines valid properties. |
| state | [ImageState](https://primevue.org/image/#api.image.interfaces.ImageState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ImagePassThroughOptions [\#](https://primevue.org/image/\#api.image.interfaces.ImagePassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| image | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the image's DOM element. |
| previewMask | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the preview mask's DOM element. |
| previewIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the preview icon's DOM element. |
| mask | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| toolbar | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the toolbar's DOM element. |
| rotateRightButton | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the rotate right button's DOM element. |
| rotateRightIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the rotate right icon's DOM element. |
| rotateLeftButton | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the rotate left button's DOM element. |
| rotateLeftIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the rotate left icon's DOM element. |
| zoomOutButton | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the zoom out button's DOM element. |
| zoomOutIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the zoom out icon's DOM element. |
| zoomInButton | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the zoom in button's DOM element. |
| zoomInIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the zoom in icon's DOM element. |
| closeButton | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the close button's DOM element. |
| closeIcon | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the close icon's DOM element. |
| originalContainer | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the original container's DOM element. |
| original | [ImagePassThroughOptionType](https://primevue.org/image/#api.image.types.ImagePassThroughOptionType) | null | Used to pass attributes to the original's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [ImagePassThroughTransitionType](https://primevue.org/image/#api.image.types.ImagePassThroughTransitionType) | null | Used to control Vue Transition API. |
#### ImagePassThroughAttributes [\#](https://primevue.org/image/\#api.image.interfaces.ImagePassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ImageState [\#](https://primevue.org/image/\#api.image.interfaces.ImageState)
Defines current inline state in Image component.
| name | type | default | description |
| --- | --- | --- | --- |
| maskVisible | boolean | false | Mask visible state as a boolean. |
| previewVisible | boolean | false | Preview visible state as a boolean. |
| rotate | number | 0 | Rotate state as a number. |
| scale | number | 1 | Scale state as a boolean. |
## Types [\#](https://primevue.org/image/\#api.image.types)
Defines the custom types used by the module.
#### ImagePassThroughOptionType [\#](https://primevue.org/image/\#api.image.types.ImagePassThroughOptionType)
| values |
| --- |
| ImagePassThroughAttributes \| (options: ImagePassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ImagePassThroughTransitionType [\#](https://primevue.org/image/\#api.image.types.ImagePassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: ImagePassThroughMethodOptions) => TransitionProps \| undefined |
#### ImageEmits [\#](https://primevue.org/image/\#api.image.types.ImageEmits)
| values |
| --- |
| EmitFn<ImageEmitsOptions> |
- Image
  - Props
  - Slots
  - Methods
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## ScrollPanel Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# ScrollPanel
ScrollPanel is a cross browser, lightweight and skinnable alternative to native browser scrollbar.
## Import [\#](https://primevue.org/scrollpanel/\#import)
```javascript
import ScrollPanel from 'primevue/scrollpanel';
```
Copy
## Basic [\#](https://primevue.org/scrollpanel/\#basic)
ScrollPanel is defined using dimensions for the scrollable viewport.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
Quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat
```markup
<ScrollPanel style="width: 100%; height: 200px">
    <p>
        Lorem ipsum dolor ...
    </p>
</ScrollPanel>
```
Copy
## Custom [\#](https://primevue.org/scrollpanel/\#custom)
Scrollbar visuals can be styled for a unified look across different platforms.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
```markup
<ScrollPanel
    style="width: 100%; height: 200px"
    :dt="{
        bar: {
            background: '{primary.color}'
        }
    }"
>
    ...
</ScrollPanel>
```
Copy
## Accessibility [\#](https://primevue.org/scrollpanel/\#accessibility)
### Screen Reader
Scrollbars of the ScrollPanel has a _scrollbar_ role along with the _aria-controls_ attribute that refers to the id of the scrollable content container and the _aria-orientation_ to indicate the orientation of scrolling.
### Header Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the bar. |
| _down arrow_ | Scrolls content down when vertical scrolling is available. |
| _up arrow_ | Scrolls content up when vertical scrolling is available. |
| _left_ | Scrolls content left when horizontal scrolling is available. |
| _right_ | Scrolls content right when horizontal scrolling is available. |
- Import
- Basic
- Custom
- Accessibility
# ScrollPanel API
API defines helper props, events and others for the PrimeVue ScrollPanel module.
## ScrollPanel [\#](https://primevue.org/scrollpanel/\#api.scrollpanel)
ScrollPanel is a cross browser, lightweight and themable alternative to native browser scrollbar.
### Props [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.props)
Defines valid properties in ScrollPanel component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| step | number | 5 | Step factor to scroll the content while pressing the arrow keys. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ScrollPanelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Interfaces [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.interfaces)
Defines the custom interfaces used by the module.
#### ScrollPanelPassThroughMethodOptions [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.interfaces.ScrollPanelPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ScrollPanelProps](https://primevue.org/scrollpanel/#api.scrollpanel.interfaces.ScrollPanelProps) | null | Defines valid properties. |
| state | [ScrollPanelState](https://primevue.org/scrollpanel/#api.scrollpanel.interfaces.ScrollPanelState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ScrollPanelPassThroughOptions [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.interfaces.ScrollPanelPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ScrollPanelPassThroughOptionType](https://primevue.org/scrollpanel/#api.scrollpanel.types.ScrollPanelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| contentContainer | [ScrollPanelPassThroughOptionType](https://primevue.org/scrollpanel/#api.scrollpanel.types.ScrollPanelPassThroughOptionType) | null | Used to pass attributes to the content container's DOM element. |
| content | [ScrollPanelPassThroughOptionType](https://primevue.org/scrollpanel/#api.scrollpanel.types.ScrollPanelPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| barX | [ScrollPanelPassThroughOptionType](https://primevue.org/scrollpanel/#api.scrollpanel.types.ScrollPanelPassThroughOptionType) | null | Used to pass attributes to the horizontal panel's DOM element. |
| barY | [ScrollPanelPassThroughOptionType](https://primevue.org/scrollpanel/#api.scrollpanel.types.ScrollPanelPassThroughOptionType) | null | Used to pass attributes to the vertical panel's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ScrollPanelPassThroughAttributes [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.interfaces.ScrollPanelPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ScrollPanelState [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.interfaces.ScrollPanelState)
Defines current inline state in Panel component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| orientation | string | vertical | Current scrollpanel orientation. |
| lastScrollTop | number | 0 | Latest scroll top position. |
| lastScrollLeft | number | 0 | Latest scroll left position. |
## Types [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.types)
Defines the custom types used by the module.
#### ScrollPanelPassThroughOptionType [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.types.ScrollPanelPassThroughOptionType)
| values |
| --- |
| ScrollPanelPassThroughAttributes \| (options: ScrollPanelPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ScrollPanelEmits [\#](https://primevue.org/scrollpanel/\#api.scrollpanel.types.ScrollPanelEmits)
| values |
| --- |
| EmitFn<ScrollPanelEmitsOptions> |
- ScrollPanel
  - Props
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Slider Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Slider
Slider is a component to provide input with a drag handle.
## Import [\#](https://primevue.org/slider/\#import)
```javascript
import Slider from 'primevue/slider';
```
Copy
## Basic [\#](https://primevue.org/slider/\#basic)
Slider is used with the _v-model_ property for two-way value binding.
```markup
<Slider v-model="value" class="w-56" />
```
Copy
## Forms [\#](https://primevue.org/slider/\#forms)
Slider integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-56">
    <div class="flex flex-col gap-4">
        <Slider name="slider" />
        <Message v-if="$form.slider?.invalid" severity="error" size="small" variant="simple">{{ $form.slider.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Input [\#](https://primevue.org/slider/\#input)
Slider is connected to an input field using two-way binding.
```markup
<InputText v-model.number="value" />
<Slider v-model="value" />
```
Copy
## Step [\#](https://primevue.org/slider/\#step)
Size of each movement is defined with the _step_ property.
```markup
<Slider v-model="value" :step="20" class="w-56" />
```
Copy
## Range [\#](https://primevue.org/slider/\#range)
When _range_ property is present, slider provides two handles to define two values. In range mode, value should be an array instead of a single value.
```markup
<Slider v-model="value" range class="w-56" />
```
Copy
## Filter [\#](https://primevue.org/slider/\#filter)
Image filter implementation using multiple sliders.
![user header](https://primefaces.org/cdn/primevue/images/card-vue.jpg)
ContrastBrightnessSepia
```markup
<img alt="user header" class="w-full md:w-80 rounded mb-6" src="https://primefaces.org/cdn/primevue/images/card-vue.jpg" :style="filterStyle" />
<SelectButton v-model="filter" :options="filterOptions" optionLabel="label" optionValue="value" class="mb-4" />
<Slider v-model="filterValues[filter]" class="w-56" :min="0" :max="200" />
```
Copy
## Vertical [\#](https://primevue.org/slider/\#vertical)
Default layout of slider is _horizontal_, use _orientation_ property for the alternative _vertical_ mode.
```markup
<Slider v-model="value" orientation="vertical" class="h-56" />
```
Copy
## Accessibility [\#](https://primevue.org/slider/\#accessibility)
### Screen Reader
Slider element component uses _slider_ role on the handle in addition to the _aria-orientation_, _aria-valuemin_, _aria-valuemax_ and _aria-valuenow_ attributes. Value to describe the component can be defined using _aria-labelledby_ and _aria-label_ props.
```markup
<span id="label_number">Number</span>
<Slider aria-labelledby="label_number" />
<Slider aria-label="Number" />
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the slider. |
| _left arrow_ _up arrow_ | Decrements the value. |
| _right arrow_ _down arrow_ | Increments the value. |
| _home_ | Set the minimum value. |
| _end_ | Set the maximum value. |
| _page up_ | Increments the value by 10 steps. |
| _page down_ | Decrements the value by 10 steps. |
- Import
- Basic
- Forms
- Input
- Step
- Range
- Filter
- Vertical
- Accessibility
# Slider API
API defines helper props, events and others for the PrimeVue Slider module.
## Slider [\#](https://primevue.org/slider/\#api.slider)
Slider is a component to provide input with a drag handle.
### Props [\#](https://primevue.org/slider/\#api.slider.props)
Defines valid properties in Slider component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | number \| number\[\] | null | Value of the component. |  |
| defaultValue | number \| number\[\] | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| min | number | 0 | Mininum boundary value. |  |
| max | number | 100 | Maximum boundary value. |  |
| orientation | HintedString<"horizontal" \| "vertical"> | horizontal | Orientation of the slider. |  |
| step | number | 1 | Step factor to increment/decrement the value. |  |
| range | boolean | false | When speficed, allows two boundary values to be picked. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| tabindex | number | null | Index of the element in tabbing order. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Used to define a string that labels the element. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SliderPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/slider/\#api.slider.emits)
Defines valid emits in Slider component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: number \| number\[\] | void | Emitted when the value changes. |  |
| value-change | value: number \| number\[\] | void | Emitted when the value changes in uncontrolled mode. |  |
| change | value: number | void | Callback to invoke on value change. |  |
| slideend | event: [SliderSlideEndEvent](https://primevue.org/slider/#api.slider.events.SliderSlideEndEvent) | void | Callback to invoke when slide ends. |  |
### Events [\#](https://primevue.org/slider/\#api.slider.events)
Defines the custom events used by the component's emit.
#### SliderSlideEndEvent [\#](https://primevue.org/slider/\#api.slider.events.SliderSlideEndEvent)
Custom slide end event.
See [slideend](https://primevue.org/slider/#api.slider.emitsoptions.slideend)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event |
| value | number | New value. |
### Interfaces [\#](https://primevue.org/slider/\#api.slider.interfaces)
Defines the custom interfaces used by the module.
#### SliderPassThroughMethodOptions [\#](https://primevue.org/slider/\#api.slider.interfaces.SliderPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SliderProps](https://primevue.org/slider/#api.slider.interfaces.SliderProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### SliderPassThroughOptions [\#](https://primevue.org/slider/\#api.slider.interfaces.SliderPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [SliderPassThroughOptionType](https://primevue.org/slider/#api.slider.types.SliderPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| range | [SliderPassThroughOptionType](https://primevue.org/slider/#api.slider.types.SliderPassThroughOptionType) | null | Used to pass attributes to the range's DOM element. |
| handle | [SliderPassThroughOptionType](https://primevue.org/slider/#api.slider.types.SliderPassThroughOptionType) | null | Used to pass attributes to the handle's DOM element. |
| startHandler | [SliderPassThroughOptionType](https://primevue.org/slider/#api.slider.types.SliderPassThroughOptionType) | null | Used to pass attributes to the start handler's DOM element. |
| endHandler | [SliderPassThroughOptionType](https://primevue.org/slider/#api.slider.types.SliderPassThroughOptionType) | null | Used to pass attributes to the end handler's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### SliderPassThroughAttributes [\#](https://primevue.org/slider/\#api.slider.interfaces.SliderPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/slider/\#api.slider.types)
Defines the custom types used by the module.
#### SliderPassThroughOptionType [\#](https://primevue.org/slider/\#api.slider.types.SliderPassThroughOptionType)
| values |
| --- |
| SliderPassThroughAttributes \| (options: SliderPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### SliderEmits [\#](https://primevue.org/slider/\#api.slider.types.SliderEmits)
| values |
| --- |
| EmitFn<SliderEmitsOptions> |
- Slider
  - Props
  - Emits
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## KeyFilter Directive
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
# KeyFilter
A keyfilter is a directive used to block individual keystrokes based on a pattern.
## Import [\#](https://primevue.org/keyfilter/\#import)
```javascript
import KeyFilter from 'primevue/keyfilter';
app.directive('keyfilter', KeyFilter);
```
Copy
## Presets [\#](https://primevue.org/keyfilter/\#presets)
KeyFilter provides various presets configured with the _v-keyfilter_ directive.
Integer
Number
Money
Hex
Alphabetic
Alphanumeric
```markup
<InputText v-keyfilter.int />
<InputText v-keyfilter.num />
<InputText v-keyfilter.money />
<InputText v-keyfilter.hex />
<InputText v-keyfilter.alpha />
<InputText v-keyfilter.alphanum />
```
Copy
## Regex (Single Keypress) [\#](https://primevue.org/keyfilter/\#regex)
In addition to the presets, a regular expression can be configured for customization of blocking a single key press.
Block Space
Block < > \* !
```markup
<InputText v-model="spacekey" v-keyfilter="/[^s]/" />
<InputText v-model="chars" v-keyfilter="/^[^<>*!]+$/" />
```
Copy
## Regex (Whole Word) [\#](https://primevue.org/keyfilter/\#regexword)
In addition to the presets, a regular expression can be used to validate the entire word using _validateOnly_ option.
Block Numeric (allow "+" only once at start)
```markup
<InputText v-model="text" v-keyfilter="{ pattern: /^[+]?(d{1,12})?$/, validateOnly: true }" />
```
Copy
## Accessibility [\#](https://primevue.org/keyfilter/\#accessibility)
KeyFilter is a directive and do not require any accessibility features.
- Import
- Presets
- Regex (Single Keypress)
- Regex (Whole Word)
- Accessibility
# KeyFilter API
API defines helper props, events and others for the PrimeVue KeyFilter module.
## KeyFilter [\#](https://primevue.org/keyfilter/\#api.keyfilter)
A keyfilter is a directive used to block individual keystrokes based on a pattern.
### Interfaces [\#](https://primevue.org/keyfilter/\#api.keyfilter.interfaces)
Defines the custom interfaces used by the module.
#### KeyFilterOptions [\#](https://primevue.org/keyfilter/\#api.keyfilter.interfaces.KeyFilterOptions)
Defines options of KeyFilter.
| name | type | default | description |
| --- | --- | --- | --- |
| pattern | RegExp | null | Sets the pattern for key filtering. |
| validateOnly | boolean | false | When enabled, instead of blocking keys, input is validated internally to test against the regular expression. |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |
| pt | PassThrough<KeyFilterDirectivePassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |
#### KeyFilterDirectivePassThroughOptions [\#](https://primevue.org/keyfilter/\#api.keyfilter.interfaces.KeyFilterDirectivePassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [KeyFilterDirectivePassThroughOptionType](https://primevue.org/keyfilter/#api.keyfilter.types.KeyFilterDirectivePassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### KeyFilterDirectivePassThroughAttributes [\#](https://primevue.org/keyfilter/\#api.keyfilter.interfaces.KeyFilterDirectivePassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### KeyFilterModifiers [\#](https://primevue.org/keyfilter/\#api.keyfilter.interfaces.KeyFilterModifiers)
Defines modifiers of KeyFilter directive.
| name | type | default | description |
| --- | --- | --- | --- |
| pint | RegExp | false | Positive integer pattern for KeyFilter directive. |
| int | RegExp | false | Integer pattern for KeyFilter directive. |
| pnum | RegExp | false | Positive number pattern for KeyFilter directive. |
| money | RegExp | false | Money pattern for KeyFilter directive. |
| num | RegExp | false | Number pattern for KeyFilter directive. |
| hex | RegExp | false | Hexadecimal pattern for KeyFilter directive. |
| email | RegExp | false | Email pattern for KeyFilter directive. |
| alpha | RegExp | false | Alphabetic pattern for KeyFilter directive. |
| alphanum | RegExp | false | Alphanumeric pattern for KeyFilter directive. |
#### KeyFilterDirectiveBinding [\#](https://primevue.org/keyfilter/\#api.keyfilter.interfaces.KeyFilterDirectiveBinding)
Binding of KeyFilter directive.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | null \| ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, "", Object, any> \| Record<string, any> | null |  |
| oldValue | any | null |  |
| arg | string | null |  |
| dir | ObjectDirective<any, any, string, string> | null |  |
| value | string \| [KeyFilterOptions](https://primevue.org/keyfilter/#api.keyfilter.interfaces.KeyFilterOptions) | null | Value of the KeyFilter. |
| modifiers | [KeyFilterModifiers](https://primevue.org/keyfilter/#api.keyfilter.interfaces.KeyFilterModifiers) | null | Modifiers of the KeyFilter. |
## Types [\#](https://primevue.org/keyfilter/\#api.keyfilter.types)
Defines the custom types used by the module.
#### KeyFilterDirectivePassThroughOptionType [\#](https://primevue.org/keyfilter/\#api.keyfilter.types.KeyFilterDirectivePassThroughOptionType)
| values |
| --- |
| KeyFilterDirectivePassThroughAttributes \| null \| undefined |
- KeyFilter
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Designer Tool
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![PrimeVue Designer](https://primefaces.org/cdn/designer/hero.png)
![PrimeVue UI Kit](https://primefaces.org/cdn/designer/feature-1.png)
POWERFUL
Visual Editor
Transform your PrimeVue components with our advanced visual editor. Design, customize, and preview changes in real-time, all within an intuitive interface.
- Intelligent Completion
- Entire Token Set
- Custom Tokens
- Light and Dark Modes
- Real Time Preview
- Starter Kits
AUTOMATED
Figma to Theme
Bridge the gap between design and development with our powerful Figma sync technology. Fully integrated with the PrimeVue Figma UI Kit, get started in no time by importing your design token file. Save countless hours in your workflow by eliminating manual theme creation from Figma designs.
- Automatic Mapping
- Eliminate Handoff
- Maintain Perfect Fidelity
- Verify Synchorization
![PrimeVue Designer](https://primefaces.org/cdn/designer/feature-2.png)
![PrimeVue Designer](https://primefaces.org/cdn/designer/feature-3.png)
INTELLIGENT
Migration Assistant
Update your existing themes and design tokens into the latest version effortlessly. Our intelligent migration assistant handles the heavy lifting, ensuring a smooth transition for your design system.
- Automatic Updates
- Preview Changes
REMOTE
Cloud Storage
Store and manage your themes securely in the cloud. Access your design system from anywhere with enterprise-grade cloud storage.
- Access Anywhere
- Multiple Themes
![Tokens Support](https://primefaces.org/cdn/designer/feature-4.png)
Pricing
Choose the right plan for your business. Whether you are an individual or a member of a team, Designer is available for affordable prices.
View Terms and Conditions
Basic
For small teams
* * *
$249/ year
* * *
- Figma to Code
- Up to 2 Themes
- 1 Year Service
- Visual Editor
- Migration Assistant
- Cloud Storage
- Use on Unlimited Projects
* * *
[Buy Now](https://www.primefaces.org/store/designer.xhtml)
Extended
For teams with UI/UX designers
* * *
$990/ year
* * *
- Figma to Code
- Up to 10 Themes
- 1 Year Service
- Visual Editor
- Migration Assistant
- Cloud Storage
- Use on Unlimited Projects
* * *
[Buy Now](https://www.primefaces.org/store/designer.xhtml)
Enterprise
For custom requirements
* * *
EXCLUSIVE DEALS
* * *
- Figma to Code
- Custom Theme Limit
- Multi Year Service
- Visual Editor
- Migration Assistant
- Cloud Storage
- Use on Unlimited Projects
* * *
[Contact Us](mailto:contact@primetek.com.tr)
Frequently Asked Questions
What do I get when I purchase a plan?
A license key to unlock the features based on your plan.
Is there a recurring fee or is the license perpetual?
Designer license key is valid for 1 year with no auto renewals.
What happens after the 1 year period is concluded?
License key will expire and a new license key needs to be renewed to continue using the tool. Downloaded themes can be used indefinitely and does not require a renewal.
Can I have trial access to the Designer?
Visual Editor is available for trial purposes, various features such as downloads, migration assistant and cloud storage are disabled.
Can I create multiple themes?
Yes, based on the theme limit of your plan.
How can I update my theme?
Migration Assistant tool automatically scans your theme and adds missing tokens for the latest version.
I have purchased the Figma UI Kit, does Designer require a separate purchase?
Yes, Figma UI Kit and Designer are different products. The Designer offers Figma to Code generation feature so it is recommended to purchase both for an efficient workflow.
How can I get support?
PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and [Forum](https://github.com/orgs/primefaces/discussions/categories/theme-designer).
Is there a limit on the team size within the organization?
No, any team member is able to utilize the tool and the generated themes.
Can subsidiary company of a larger organization share a plan?
No, plan is per organization so each subsidiary company needs to purchase a separate plan.
Can I include generated theme in an open source project?
Yes, the generated theme is suitable for usage in an open source project.
We're a reseller, are we able to purchase a license on behalf of our client?
Yes, please [contact us](mailto:contact@primetek.com.tr) to initiate the procurement process.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Pass Through
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Pass Through
The Pass Through attributes is an API to access the internal DOM Structure of the components.
## Introduction [\#](https://primevue.org/passthrough/\#introduction)
In traditional 3rd party UI libraries, users are limited to the API provided by component author. This API commonly consists of props, events and slots. Whenever a requirement emerges for a new customization option in the API, the component author needs to develop and publish it with a new release.
Vision of PrimeTek is _Your components, not ours_. The pass through feature is a key element to implement this vision by exposing the component internals in order to apply arbitrary attributes and listeners to the DOM elements. The primary advantage of this approach is that it frees you from being restricted by the main component API. We recommend considering the pass-through feature whenever you need to tailor a component that lacks a built-in feature for your specific requirement.
Two videos are available at PrimeTV youtube channel, first one is an introduction and second one covers a unique case that is solved by the pass-through.
Introduction to Pass Through Props Feature of PrimeVue - YouTube
Cagatay Civici
8.4K subscribers
[Introduction to Pass Through Props Feature of PrimeVue](https://www.youtube.com/watch?list=PLC9bp-OHi-Wk9fMhxOM1u6Si82i6AxqUM&v=CvQj-zDRTFw)
Cagatay Civici
Search
Watch later
Share
Copy link
1/2
Info
Shopping
Tap to unmute
If playback doesn't begin shortly, try restarting your device.
More videos
## More videos
You're signed out
Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.
CancelConfirm
Share
Include playlist
An error occurred while retrieving sharing information. Please try again later.
[Watch on](https://www.youtube.com/watch?list=PLC9bp-OHi-Wk9fMhxOM1u6Si82i6AxqUM&v=CvQj-zDRTFw&embeds_referring_euri=https%3A%2F%2Fprimevue.org%2F)
0:00
[Previous (SHIFT+p)](https://www.youtube.com/watch?list=PLC9bp-OHi-Wk9fMhxOM1u6Si82i6AxqUM&v=knd3wmOLpJY "Previous (SHIFT+p)") [Next (SHIFT+n)](https://www.youtube.com/watch?list=PLC9bp-OHi-Wk9fMhxOM1u6Si82i6AxqUM&v=knd3wmOLpJY "Next (SHIFT+n)")
0:00 / 7:14â€¢Live
â€¢
[Watch on YouTube](https://www.youtube.com/watch?list=PLC9bp-OHi-Wk9fMhxOM1u6Si82i6AxqUM&v=CvQj-zDRTFw "Watch on YouTube")
## Basic [\#](https://primevue.org/passthrough/\#basic)
Each component has a special _pt_ property to define an object with keys corresponding to the available DOM elements. Each value can either be a string, an object or a function that returns a string or an object to define the arbitrary properties to apply to the element such as styling, aria, data-\* or custom attributes. If the value is a string or a function that returns a string, it is considered as a class definition and added to the class attribute of the element. Every component documentation has a dedicated section to document the available section names exposed via PT.
Most common usage of _pt_ is styling and customization. The _class_ and _style_ properties support the exact syntax of the corresponding [Vue bindings](https://vuejs.org/guide/essentials/class-and-style.html) like arrays, objects and conditionals. Example below styles an unstyled Panel component with Tailwind CSS library.
Header
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
```markup
<Panel header="Header" toggleable
    :pt="{
        root: 'border border-primary rounded-xl p-4',
        header: (options) => ({
            id: 'myPanelHeader',
            style: {
                'user-select': 'none'
            },
            class: ['flex items-center justify-between text-primary font-bold']
        }),
        content: { class: 'text-primary-700 dark:text-primary-200 mt-4' },
        title: 'text-xl',
        toggler: () => 'bg-primary text-primary-contrast hover:text-primary hover:bg-primary-contrast'
    }">
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Panel>
```
Copy
## Declarative [\#](https://primevue.org/passthrough/\#declarative)
The declarative syntax provides an alternative to the programmatic syntax. The attributes that start with _pt_ are interpreted differently by the component based on the format below. An IDE extension is also being planned to autocomplete the values for better developer experience in the future.
```markup
<ComponentTag pt:[passthrough_key]:[attribute]="value" />
```
Copy
Here is another example using both syntax alternatives for the same options.
```markup
<Panel
    :pt="{
        root: {
            class: 'border-1 border-solid'
        },
        header: {
            'data-test-id': 'testid',
            class: 'bg-blue-500',
            onClick: onHeaderClick
        }
    }"
>
```
Copy
```markup
<Panel
    pt:root:class="border border-solid"
    pt:header:id="headerId"
    pt:header:data-test-id="testId"
    pt:header:class="bg-blue-500"
    :pt:header:onClick="onHeaderClick"
>
```
Copy
## PC Prefix [\#](https://primevue.org/passthrough/\#pcprefix)
Section names prefixed with _pc_ denote PrimeVue components, distinguishing them from standard DOM elements and indicating the necessity for a nested structure. For example, the "badge" section is identified as _pcBadge_ because the button component incorporates the badge component internally.
Messages2
```markup
 <Button
    type="button"
    label="Messages"
    icon="pi pi-inbox"
    badge="2"
    variant="outlined"
    severity="secondary"
    :pt="{
        root: '!px-4 !py-3',
        icon: '!text-xl !text-violet-500 dark:!text-violet-400',
        label: '!text-lg !text-violet-500 dark:!text-violet-400',
        pcBadge: {
            root: '!bg-violet-500 dark:!bg-violet-400 !text-white dark:!text-black'
        }
    }"
/>
```
Copy
## Lifecycle [\#](https://primevue.org/passthrough/\#lifecycle)
Lifecycle hooks of components are exposed as pass through using the _hooks_ property so that callback functions can be registered. Available callbacks are _onBeforeCreate_, _onCreated_, _onBeforeUpdate_, _onUpdated_, _onBeforeMount_, _onMounted_, _onBeforeUnmount_ and _onUnmounted_. Refer to the Vue.js documentation for detailed information about lifecycle hooks.
```markup
<Panel header="Header" :pt="panelPT">
    Content
</Panel>
```
Copy
## Global [\#](https://primevue.org/passthrough/\#global)
Defines the shared pass through properties per component type. For example, with the configuration below all panel headers have the _bg-primary_ style class and the all autocomplete components have a fixed width. These settings can be overriden by a particular component as components _pt_ property has higher precedence over global _pt_.
```javascript
import { createApp } from "vue";
import PrimeVue from "primevue/config";
const app = createApp(App);
app.use(PrimeVue, {
    pt: {
        panel: {
            header: {
                class: 'bg-primary text-primary-contrast'
            }
        },
        autocomplete: {
            input: {
                root: 'w-64' // OR { class: 'w-64' }
            }
        }
    }
});
```
Copy
## Custom CSS [\#](https://primevue.org/passthrough/\#customcss)
The _global_ property has a _css_ option to define custom css that belongs to a global _pt_ configuration. Common use case of this feature is defining global styles and animations related to the pass through configuration.
```javascript
import { createApp } from "vue";
import PrimeVue from "primevue/config";
const app = createApp(App);
app.use(PrimeVue, {
    pt: {
        global: {
            css: `
                .my-button {
                    border-width: 2px;
                }
            `
        },
        button: {
            root: 'my-button'
        }
    }
});
```
Copy
## UsePassThrough [\#](https://primevue.org/passthrough/\#usepassthrough)
An existing pass through configuration is customized with the _usePassThrough_ utility. The first parameter is the object to customize, the second parameter is the customizations and the final parameter is the merge strategy.
```javascript
import { createApp } from "vue";
import PrimeVue from "primevue/config";
import { usePassThrough } from "primevue/passthrough";
import BasePreset from "./basepreset";
const app = createApp(App);
const CustomPreset = usePassThrough(
    BasePreset,
    {
        panel: {
            title: {
                class: ['leading-none font-light text-2xl']
            }
        }
    },
    {
        mergeSections: true,
        mergeProps: false
    }
);
app.use(PrimeVue, { unstyled: true, pt: CustomPreset });
```
Copy
The _mergeSections_ defines whether the sections from the main configuration gets added and the _mergeProps_ controls whether to override or merge the defined props. Defaults are _true_ for _mergeSections_ and _false_ for _mergeProps_.
```javascript
const CustomPreset = usePassThrough(
    BasePreset,
    {
        panel: {
            header: 'my_panel_header'
        }
    },
    { mergeSections: true, mergeProps: false }
);
// Output:
// panel.header.class => 'my_panel_header'
// panel.title.class => Tailwind.panel.title.class
```
Copy
```javascript
const CustomPreset = usePassThrough(
    BasePreset,
    {
        panel: {
            header: 'my_panel_header'
        }
    },
    { mergeSections: true, mergeProps: true }
);
// Output:
// panel.header.class => [Tailwind.panel.header.class, 'my_panel_header']
// panel.title.class => Tailwind.panel.title.class
```
Copy
```javascript
const CustomPreset = usePassThrough(
    BasePreset,
    {
        panel: {
            header: 'my_panel_header'
        }
    },
    { mergeSections: false, mergeProps: true }
);
// Output:
// panel.header.class => [Tailwind.panel.header.class, 'my_panel_header']
// panel.title.class => undefined
```
Copy
```javascript
const CustomPreset = usePassThrough(
    BasePreset,
    {
        panel: {
            header: 'my_panel_header'
        }
    },
    { mergeSections: false, mergeProps: false }
);
// Output:
// panel.header.class => 'my_panel_header'
// panel.title.class => undefined
```
Copy
- Introduction
- Basic
- Declarative
- PC Prefix
- Lifecycle
- Global
- Custom CSS
- UsePassThrough
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Vite Setup
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Install PrimeVue with Vite
Setting up PrimeVue in a Vite project.
## Download [\#](https://primevue.org/vite/\#download)
PrimeVue is available for download on [npm registry](https://www.npmjs.com/package/primevue).
```markup
# Using npm
npm install primevue @primeuix/themes
# Using yarn
yarn add primevue @primeuix/themes
# Using pnpm
pnpm add primevue @primeuix/themes
```
Copy
## Plugin [\#](https://primevue.org/vite/\#theme)
PrimeVue plugin is required to be installed as an application plugin to set up the default [configuration](https://primevue.org/configuration). The plugin is lightweight, and only utilized for configuration purposes.
```javascript
import { createApp } from 'vue';
import PrimeVue from 'primevue/config';
const app = createApp(App);
app.use(PrimeVue);
```
Copy
## Theme [\#](https://primevue.org/vite/\#theme)
Configure PrimeVue to use a theme like Aura.
```javascript
import { createApp } from 'vue';
import PrimeVue from 'primevue/config';
import Aura from '@primeuix/themes/aura';
const app = createApp(App);
app.use(PrimeVue, {
    theme: {
        preset: Aura
    }
});
```
Copy
## Verify [\#](https://primevue.org/vite/\#verify)
Verify your setup by adding a component such as [Button](https://primevue.org/button). Each component can be imported and registered individually so that you only include what you use for bundle optimization. Import path is available in the documentation of the corresponding component.
Verify
```javascript
import Button from "primevue/button"
const app = createApp(App);
app.component('Button', Button);
```
Copy
## Examples [\#](https://primevue.org/vite/\#examples)
We've created various samples for the popular options in the Vue ecosystem. Visit the [primevue-examples](https://github.com/primefaces/primevue-examples) repository for more samples including [vite-quickstart](https://github.com/primefaces/primevue-examples/tree/main/vite-quickstart) and [vite-ts-quickstart](https://github.com/primefaces/primevue-examples/tree/main/vite-ts-quickstart).
## Video [\#](https://primevue.org/vite/\#video)
Watch the short video tutorial from Ã‡aÄŸatay Ã‡ivici to setup PrimeVue in styled mode with [Create-Vue](https://github.com/vuejs/create-vue).
Getting Started with PrimeVue v4 - YouTube
Cagatay Civici
8.4K subscribers
[Getting Started with PrimeVue v4](https://www.youtube.com/watch?v=xW8EFqalm4I)
Cagatay Civici
Search
Watch later
Share
Copy link
Info
Shopping
Tap to unmute
If playback doesn't begin shortly, try restarting your device.
More videos
## More videos
You're signed out
Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.
CancelConfirm
Share
Include playlist
An error occurred while retrieving sharing information. Please try again later.
[Watch on](https://www.youtube.com/watch?v=xW8EFqalm4I&embeds_referring_euri=https%3A%2F%2Fprimevue.org%2F)
0:00
0:00 / 5:05â€¢Live
â€¢
[Watch on YouTube](https://www.youtube.com/watch?v=xW8EFqalm4I "Watch on YouTube")
## Next Steps [\#](https://primevue.org/vite/\#nextsteps)
Welcome to the Prime UI Ecosystem! Once you have PrimeVue up and running, we recommend exploring the following resources to gain a deeper understanding of the library.
- [Global configuration](https://primevue.org/configuration)
- [Auto imports with tree-shaking](https://primevue.org/autoimport)
- [Customization of styles](https://primevue.org/theming/styled)
- [Pass through attributes](https://primevue.org/passthrough)
- [Getting support](https://primevue.org/support)
- Download
- Plugin
- Theme
- Verify
- Examples
- Video
- Next Steps
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Contribution Guide
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Contribution Guide
Welcome to the PrimeVue Contribution Guide and thank you for considering contributing.
## Introduction [\#](https://primevue.org/contribution/\#introduction)
PrimeVue is a popular Vue UI library maintained by PrimeTek, a company renowned for its comprehensive set of UI components for various frameworks. PrimeTek is dedicated to providing high-quality, versatile, and accessible UI components that help developers build better applications faster.
### Development Setup
To begin with, clone the PrimeVue repository from GitHub:
```markup
git clone https://github.com/primefaces/primevue.git
cd primevue
```
Copy
Then run the showcase in your local environment at _http://localhost:3000/_.
```markup
npm run setup
npm run dev
```
Copy
### Project Structure
PrimeVue utilizes a monorepo architecture, the libraries are located at _packages_ folder and the website is at _apps/showcase_.
```markup
- apps
  - showcase                // website
- packages
  - auto-import-resolver    // unplugin resolver
  - core                    // core api
  - icons                   // primeicons as sfc
  - metadata                // list of components and directives
  - nuxt-module             // module for nuxt
  - primevue                // main package of components and directives
  - themes                  // presets of styled mode
```
Copy
## Help Needed [\#](https://primevue.org/contribution/\#helpneeded)
PrimeVue is a community-driven project backed by the expertise and sponsorship of PrimeTek, and we appreciate any help you can provide. Here are some areas where you can contribute:
### Issue Triage
Help us manage issues by;
- Reproducing reported bugs
- Clarifying issue descriptions
- Tagging issues with appropriate labels
### Sending Pull Requests
We encourage you to send pull requests, especially for issues tagged with the _help-needed_ label.
### Community Support
Assist other users by participating in the issue tracker, [GitHub discussions](https://github.com/orgs/primefaces/discussions/categories/primevue), and the [PrimeLand Discord](https://primevue.org/PrimeLand) server. Your expertise can help others solve problems and improve their experience with PrimeVue.
## Key Points [\#](https://primevue.org/contribution/\#keypoints)
PrimeVue has several add-ons such as UI Kit, Premium Templates, and Blocks that rely on design tokens and styling. Any core structural changes, such as adding new props, events, or updating design tokens, should be communicated with the core team to ensure consistency and compatibility.
## Communication [\#](https://primevue.org/contribution/\#communication)
Join the Contributors channel on the [PrimeLand Discord](https://primevue.org/PrimeLand) server to connect with PrimeVue staff and fellow contributors. In this channel, you can discuss the areas you want to contribute to and receive feedback. This channel is open to everyone who'd like to contribute.
## Pathway [\#](https://primevue.org/contribution/\#pathway)
PrimeTek offers an organization structure involving contributors and the core team:
### Contributor Role
After a certain period of frequent contributions, a community member is offered the Contributor role. On average, it may take about three months, but the exact duration can vary depending on the individual commitment.
### Committer Role
If a contributor actively participates in the codebase and PRs, their role may be upgraded to a Committer level, providing direct commit access to the PrimeVue codebase.
### Employment
PrimeTek prefers to hire team members from open source committers, so you may be offered a full-time position when a position becomes available.
## Benefits [\#](https://primevue.org/contribution/\#benefits)
Contributing to PrimeVue comes with several benefits. Being part of an open-source project will enhance your career and open up exciting opportunities. Contributors and Committers will be listed on our [team page](https://primevue.org/team). You'll gain significant visibility in the developer community while improving yourself as a professional.
You'll be invited to a private communication channel at Discord to get in touch with PrimeTek. In addition, contributors have access to all PrimeVue add-ons like Premium Templates, Blocks, and UI Kit free of charge.
## CLA [\#](https://primevue.org/contribution/\#cla)
When a community member is offered the Contributor role, they are expected to sign a Contributor License Agreement (CLA) for legal purposes. This helps protect both the contributor and PrimeTek.
- Introduction
- Help Needed
- Key Points
- Communication
- Pathway
- Benefits
- CLA
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Deferred Content Loading
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# DeferredContent
DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.
## Import [\#](https://primevue.org/deferredcontent/\#import)
```javascript
import DeferredContent from 'primevue/deferredcontent';
```
Copy
## Basic [\#](https://primevue.org/deferredcontent/\#basic)
DeferredContent is used by wrapping the target.
Scroll down to lazy load an image.
![Nature](https://primefaces.org/cdn/primevue/images/nature/nature4.jpg)
```markup
<DeferredContent @load="onImageLoad">
    <img src="/images/nature/nature4.jpg" alt="Nature" class="rounded-xl w-full md:w-96 block sm:mx-auto" />
</DeferredContent>
```
Copy
## DataTable [\#](https://primevue.org/deferredcontent/\#datatable)
A practical example that triggers a fetch when the table becomes visible in viewport.
Scroll down to lazy load a DataTable.
| Code | Name | Category | Quantity |
| --- | --- | --- | --- |
| f230fh0g3 | Bamboo Watch | Accessories | 24 |
| nvklal433 | Black Watch | Accessories | 61 |
| zz21cz3c1 | Blue Band | Fitness | 2 |
| 244wgerg2 | Blue T-Shirt | Clothing | 25 |
| h456wer53 | Bracelet | Accessories | 73 |
| av2231fwg | Brown Purse | Accessories | 0 |
| bib36pfvm | Chakra Bracelet | Accessories | 5 |
| mbvjkgip5 | Galaxy Earrings | Accessories | 23 |
| vbb124btr | Game Controller | Electronics | 2 |
| cm230f032 | Gaming Set | Electronics | 63 |
```markup
<DeferredContent @load="onDataLoad" role="region" aria-live="polite" aria-label="Content loaded after page scrolled down">
    <DataTable :value="products">
        <Column field="code" header="Code"></Column>
        <Column field="name" header="Name"></Column>
        <Column field="category" header="Category"></Column>
        <Column field="quantity" header="Quantity"></Column>
    </DataTable>
</DeferredContent>
```
Copy
## Accessibility [\#](https://primevue.org/deferredcontent/\#accessibility)
### Screen Reader
DeferredContent can be utilized in many use cases as a result no role is enforced, in fact a role may not be necessary if the card is used for presentational purposes only. Any valid attribute is passed to the container element so you have full control over the roles like [landmark](https://www.w3.org/TR/wai-aria/#landmark) and attributes like _aria-live_.
```markup
<DeferredContent role="region" aria-live="polite" aria-label="Content loaded after page scrolled down">
    Content
</DeferredContent>
```
Copy
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- DataTable
- Accessibility
# DeferredContent API
API defines helper props, events and others for the PrimeVue DeferredContent module.
## DeferredContent [\#](https://primevue.org/deferredcontent/\#api.deferredcontent)
DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.
### Props [\#](https://primevue.org/deferredcontent/\#api.deferredcontent.props)
Defines valid props in DeferredContent component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DeferredContentPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/deferredcontent/\#api.deferredcontent.emits)
Defines valid emits in DeferredContent component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| load |  | void | Callback to invoke when deferred content is loaded. |  |
### Slots [\#](https://primevue.org/deferredcontent/\#api.deferredcontent.slots)
Defines valid slots in DeferredContent component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default content slot. |  |
### Interfaces [\#](https://primevue.org/deferredcontent/\#api.deferredcontent.interfaces)
Defines the custom interfaces used by the module.
#### DeferredContentPassThroughMethodOptions [\#](https://primevue.org/deferredcontent/\#api.deferredcontent.interfaces.DeferredContentPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DeferredContentProps](https://primevue.org/deferredcontent/#api.deferredcontent.interfaces.DeferredContentProps) | null | Defines valid properties. |
| state | [DeferredContentState](https://primevue.org/deferredcontent/#api.deferredcontent.interfaces.DeferredContentState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### DeferredContentPassThroughOptions [\#](https://primevue.org/deferredcontent/\#api.deferredcontent.interfaces.DeferredContentPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [DeferredContentPassThroughOptionType](https://primevue.org/deferredcontent/#api.deferredcontent.types.DeferredContentPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### DeferredContentPassThroughAttributes [\#](https://primevue.org/deferredcontent/\#api.deferredcontent.interfaces.DeferredContentPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### DeferredContentState [\#](https://primevue.org/deferredcontent/\#api.deferredcontent.interfaces.DeferredContentState)
Defines current inline state in DeferredContent component.
| name | type | default | description |
| --- | --- | --- | --- |
| loaded | boolean | false | Current loaded state as a boolean. |
## Types [\#](https://primevue.org/deferredcontent/\#api.deferredcontent.types)
Defines the custom types used by the module.
#### DeferredContentPassThroughOptionType [\#](https://primevue.org/deferredcontent/\#api.deferredcontent.types.DeferredContentPassThroughOptionType)
| values |
| --- |
| DeferredContentPassThroughAttributes \| (options: DeferredContentPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### DeferredContentEmits [\#](https://primevue.org/deferredcontent/\#api.deferredcontent.types.DeferredContentEmits)
| values |
| --- |
| EmitFn<DeferredContentEmitsOptions> |
- DeferredContent
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue InputNumber Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# InputNumber
InputNumber is an input component to provide numerical input.
## Import [\#](https://primevue.org/inputnumber/\#import)
```javascript
import InputNumber from 'primevue/inputnumber';
```
Copy
## Numerals [\#](https://primevue.org/inputnumber/\#numerals)
InputNumber is used with the _v-model_ property for two-way value binding.
Integer Only
Without Grouping
Min-Max Fraction Digits
Min-Max Boundaries
```markup
<InputNumber v-model="value1" inputId="integeronly" fluid />
<InputNumber v-model="value2" inputId="withoutgrouping" :useGrouping="false" fluid />
<InputNumber v-model="value3" inputId="minmaxfraction" :minFractionDigits="2" :maxFractionDigits="5" fluid />
<InputNumber v-model="value4" inputId="minmax" :min="0" :max="100" fluid />
```
Copy
## Forms [\#](https://primevue.org/inputnumber/\#forms)
InputNumber integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-56">
    <div class="flex flex-col gap-1">
        <InputNumber name="amount" fluid />
        <Message v-if="$form.amount?.invalid" severity="error" size="small" variant="simple">{{ $form.amount.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Locale [\#](https://primevue.org/inputnumber/\#locale)
Localization information such as grouping and decimal symbols are defined with the _locale_ property which defaults to the user locale.
User Locale
United States Locale
German Locale
Indian Locale
```markup
<InputNumber v-model="value1" inputId="locale-user" :minFractionDigits="2" fluid />
<InputNumber v-model="value2" inputId="locale-us" locale="en-US" :minFractionDigits="2" fluid />
<InputNumber v-model="value3" inputId="locale-german" locale="de-DE" :minFractionDigits="2" fluid />
<InputNumber v-model="value4" inputId="locale-indian" locale="en-IN" :minFractionDigits="2" fluid />
```
Copy
## Currency [\#](https://primevue.org/inputnumber/\#currency)
Monetary values are enabled by setting _mode_ property as _currency_. In this setting, _currency_ property also needs to be defined using ISO 4217 standard such as "USD" for the US dollar.
United States
Germany
India
Japan
```markup
<InputNumber v-model="value1" inputId="currency-us" mode="currency" currency="USD" locale="en-US" fluid />
<InputNumber v-model="value2" inputId="currency-germany" mode="currency" currency="EUR" locale="de-DE" />
<InputNumber v-model="value3" inputId="currency-india" mode="currency" currency="INR" currencyDisplay="code" locale="en-IN" fluid />
<InputNumber v-model="value4" inputId="currency-japan" mode="currency" currency="JPY" locale="jp-JP" fluid />
```
Copy
## Prefix & Suffix [\#](https://primevue.org/inputnumber/\#prefixsuffix)
Custom texts e.g. units can be placed before or after the input section with the _prefix_ and _suffix_ properties.
Mile
Percent
Expiry
Temperature
```markup
<InputNumber v-model="value1" inputId="mile" suffix=" mi" fluid />
<InputNumber v-model="value2" inputId="percent" prefix="%" fluid />
<InputNumber v-model="value3" inputId="expiry" prefix="Expires in " suffix=" days" fluid />
<InputNumber v-model="value4" inputId="temperature" prefix="&uarr; " suffix="â„ƒ" :min="0" :max="40" fluid />
```
Copy
## Buttons [\#](https://primevue.org/inputnumber/\#buttons)
Spinner buttons are enabled using the _showButtons_ property and layout is defined with the _buttonLayout_.
Stacked
Min-Max Boundaries
Horizontal with Step
```markup
<InputNumber v-model="value1" inputId="stacked-buttons" showButtons mode="currency" currency="USD" fluid />
<InputNumber v-model="value2" inputId="minmax-buttons" mode="decimal" showButtons :min="0" :max="100" fluid />
<InputNumber v-model="value3" inputId="horizontal-buttons" showButtons buttonLayout="horizontal" :step="0.25" mode="currency" currency="EUR" fluid>
    <template #incrementbuttonicon>
        <span class="pi pi-plus" />
    </template>
    <template #decrementbuttonicon>
        <span class="pi pi-minus" />
    </template>
</InputNumber>
```
Copy
## Vertical [\#](https://primevue.org/inputnumber/\#vertical)
Buttons can also placed vertically by setting _buttonLayout_ as _vertical_.
```markup
<InputNumber v-model="value" showButtons buttonLayout="vertical" style="width: 3rem" :min="0" :max="99">
    <template #incrementbuttonicon>
        <span class="pi pi-plus" />
    </template>
    <template #decrementbuttonicon>
        <span class="pi pi-minus" />
    </template>
</InputNumber>
```
Copy
## Filled [\#](https://primevue.org/inputnumber/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
```markup
<InputNumber v-model="value" variant="filled" />
```
Copy
## Float Label [\#](https://primevue.org/inputnumber/\#floatlabel)
A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
Over LabelIn LabelOn Label
```markup
<FloatLabel>
    <InputNumber v-model="value1" inputId="over_label" mode="currency" currency="USD" locale="en-US" />
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel variant="in">
    <InputNumber v-model="value2" inputId="in_label" mode="currency" currency="USD" locale="en-US" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel variant="on">
    <InputNumber v-model="value3" inputId="on_label" mode="currency" currency="USD" locale="en-US" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/inputnumber/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
Price
```markup
<IftaLabel>
    <InputNumber v-model="value" inputId="price_input" mode="currency" currency="USD" locale="en-US" variant="filled" />
    <label for="price_input">Price</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/inputnumber/\#sizes)
InputNumber provides _small_ and _large_ sizes as alternatives to the base.
```markup
<InputNumber v-model="value1" size="small" placeholder="Small" mode="currency" currency="USD" locale="en-US" />
<InputNumber v-model="value2" placeholder="Normal" mode="currency" currency="USD" locale="en-US" />
<InputNumber v-model="value3" size="large" placeholder="Large" mode="currency" currency="USD" locale="en-US" />
```
Copy
## Invalid [\#](https://primevue.org/inputnumber/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
```markup
<InputNumber v-model="value1" :invalid="value1 === null" mode="decimal" :minFractionDigits="2" placeholder="Amount" />
<InputNumber v-model="value2" :invalid="value2 === null" mode="decimal" :minFractionDigits="2" variant="filled" placeholder="Amount" />
```
Copy
## Disabled [\#](https://primevue.org/inputnumber/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
```markup
<InputNumber v-model="value" disabled prefix="%" />
```
Copy
## Accessibility [\#](https://primevue.org/inputnumber/\#accessibility)
### Screen Reader
Value to describe the component can either be provided via _label_ tag combined with _inputId_ prop or using _aria-labelledby_, _aria-label_ props. The input element uses _spinbutton_ role in addition to the _aria-valuemin_, _aria-valuemax_ and _aria-valuenow_ attributes.
```markup
<label for="price">Price</label>
<InputNumber inputId="price" />
<span id="label_number">Number</span>
<InputNumber aria-labelledby="label_number" />
<InputNumber aria-label="Number" />
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the input. |
| _up arrow_ | Increments the value. |
| _down arrow_ | Decrements the value. |
| _home_ | Set the minimum value if provided. |
| _end_ | Set the maximum value if provided. |
- Import
- Numerals
- Forms
- Locale
- Currency
- Prefix & Suffix
- Buttons
- Vertical
- Filled
- Float Label
- Ifta Label
- Sizes
- Invalid
- Disabled
- Accessibility
# InputNumber API
API defines helper props, events and others for the PrimeVue InputNumber module.
## InputNumber [\#](https://primevue.org/inputnumber/\#api.inputnumber)
InputNumber is an input component to provide numerical input.
### Props [\#](https://primevue.org/inputnumber/\#api.inputnumber.props)
Defines valid properties in InputNumber component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | Nullable<number> | null | Value of the component. |  |
| defaultValue | Nullable<number> | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| format | boolean | true | Whether to format the value. |  |
| showButtons | boolean | false | Displays spinner buttons. |  |
| buttonLayout | HintedString<"horizontal" \| "vertical" \| "stacked"> | stacked | Layout of the buttons. |  |
| incrementButtonClass | string | null | Style class of the increment button. |  |
| decrementButtonClass | string | null | Style class of the decrement button. |  |
| incrementButtonIcon | string | null | Style class of the increment icon. |  |
| incrementIcon | string | null | Style class of the increment icon. |  |
| decrementButtonIcon | string | null | Style class of the decrement icon. |  |
| decrementIcon | string | null | Style class of the decrement icon. |  |
| locale | string | null | Locale to be used in formatting. |  |
| localeMatcher | HintedString<"lookup" \| "best fit"> | best fit | The locale matching algorithm to use. Possible values are 'lookup' and 'best fit'; the default is 'best fit'.<br>See \[Locale Negotation\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Intl#locale\_negotiation) for details. |  |
| mode | HintedString<"decimal" \| "currency"> | decimal | Defines the behavior of the component. |  |
| prefix | string | null | Text to display before the value. |  |
| suffix | string | null | Text to display after the value. |  |
| currency | string | null | The currency to use in currency formatting. Possible values are the \[ISO 4217 currency codes\](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency), such as 'USD' for the US dollar, 'EUR' for the euro, or 'CNY' for the Chinese RMB.<br>There is no default value; if the style is 'currency', the currency property must be provided. |  |
| currencyDisplay | string | symbol | How to display the currency in currency formatting. Possible values are 'symbol' to use a localized currency symbol such as â‚¬, 'code' to use the ISO currency code, 'name' to use a localized currency name such as 'dollar'. |  |
| useGrouping | boolean | true | Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. |  |
| minFractionDigits | number | null | The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0;<br>the default for currency formatting is the number of minor unit digits provided by the \[ISO 4217 currency code\](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) list (2 if the list doesn't provide that information). |  |
| maxFractionDigits | number | null | The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3;<br>the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the \[ISO 4217 currency code\](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) list (2 if the list doesn't provide that information). |  |
| roundingMode | RoundingMode | null | How decimals should be rounded.<br>The default value is \`"halfExpand"\` , \[further information\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Intl/NumberFormat/NumberFormat#roundingmode). |  |
| min | number | null | Minimum boundary value. |  |
| max | number | null | Maximum boundary value. |  |
| step | number | 1 | Step factor to increment/decrement the value. |  |
| allowEmpty | boolean | true | Determines whether the input field is empty. |  |
| highlightOnFocus | boolean | false | Highlights automatically the input value. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| readonly | boolean | false | When present, it specifies that an input field is read-only. |  |
| placeholder | string | null | Placeholder text for the input. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| inputId | string | null | Identifier of the focus input to match a label defined for the chips. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<InputNumberPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/inputnumber/\#api.inputnumber.emits)
Defines valid emits in InputNumber component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: number | void | Emitted when the value changes. |  |
| value-change | value: number | void | Emitted when the value changes in uncontrolled mode. |  |
| input | event: [InputNumberInputEvent](https://primevue.org/inputnumber/#api.inputnumber.events.InputNumberInputEvent) | void | Callback to invoke when the value is entered. |  |
| focus | event: Event | void | Callback to invoke on focus of input field. |  |
| blur | event: [InputNumberBlurEvent](https://primevue.org/inputnumber/#api.inputnumber.events.InputNumberBlurEvent) | void | Callback to invoke on blur of input field. |  |
### Slots [\#](https://primevue.org/inputnumber/\#api.inputnumber.slots)
Defines valid slots in InputNumber component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| incrementbutton | scope: {<br>listeners: InputNumberButtonListeners, // InputNumber listeners<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom increment button template. |  |
| decrementbutton | scope: {<br>listeners: InputNumberButtonListeners, // InputNumber listeners<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom decrement button template. |  |
| incrementbuttonicon |  | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| incrementicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom increment icon template. |  |
| decrementbuttonicon |  | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| decrementicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom decrement icon template. |  |
### Events [\#](https://primevue.org/inputnumber/\#api.inputnumber.events)
Defines the custom events used by the component's emit.
#### InputNumberInputEvent [\#](https://primevue.org/inputnumber/\#api.inputnumber.events.InputNumberInputEvent)
Custom input event.
See [input](https://primevue.org/inputnumber/#api.inputnumber.emitsoptions.input)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | undefined \| string \| number | New value |
| formattedValue | string | currentValue |
#### InputNumberBlurEvent [\#](https://primevue.org/inputnumber/\#api.inputnumber.events.InputNumberBlurEvent)
Custom blur event.
See [blur](https://primevue.org/inputnumber/#api.inputnumber.emitsoptions.blur)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | string | Input value |
### Interfaces [\#](https://primevue.org/inputnumber/\#api.inputnumber.interfaces)
Defines the custom interfaces used by the module.
#### InputNumberPassThroughMethodOptions [\#](https://primevue.org/inputnumber/\#api.inputnumber.interfaces.InputNumberPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [InputNumberProps](https://primevue.org/inputnumber/#api.inputnumber.interfaces.InputNumberProps) | null | Defines valid properties. |
| state | [InputNumberState](https://primevue.org/inputnumber/#api.inputnumber.interfaces.InputNumberState) | null | Defines current inline state. |
| parent | any | null | Defines parent instance. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### InputNumberSharedPassThroughMethodOptions [\#](https://primevue.org/inputnumber/\#api.inputnumber.interfaces.InputNumberSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [InputNumberProps](https://primevue.org/inputnumber/#api.inputnumber.interfaces.InputNumberProps) | null | Defines valid properties. |
| state | [InputNumberState](https://primevue.org/inputnumber/#api.inputnumber.interfaces.InputNumberState) | null | Defines current inline state. |
#### InputNumberPassThroughOptions [\#](https://primevue.org/inputnumber/\#api.inputnumber.interfaces.InputNumberPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [InputNumberPassThroughOptionType<T>](https://primevue.org/inputnumber/#api.inputnumber.types.InputNumberPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| pcInputText | any | null | Used to pass attributes to the InputText component. |
| buttonGroup | [InputNumberPassThroughOptionType<T>](https://primevue.org/inputnumber/#api.inputnumber.types.InputNumberPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the button group's DOM element. |
| incrementButton | [InputNumberPassThroughOptionType<T>](https://primevue.org/inputnumber/#api.inputnumber.types.InputNumberPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the increment button's DOM element. |
| incrementIcon | [InputNumberPassThroughOptionType<T>](https://primevue.org/inputnumber/#api.inputnumber.types.InputNumberPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the increment icon's DOM element. |
| decrementButton | [InputNumberPassThroughOptionType<T>](https://primevue.org/inputnumber/#api.inputnumber.types.InputNumberPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the decrement button's DOM element. |
| decrementIcon | [InputNumberPassThroughOptionType<T>](https://primevue.org/inputnumber/#api.inputnumber.types.InputNumberPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the decrement icon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### InputNumberPassThroughAttributes [\#](https://primevue.org/inputnumber/\#api.inputnumber.interfaces.InputNumberPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### InputNumberState [\#](https://primevue.org/inputnumber/\#api.inputnumber.interfaces.InputNumberState)
Defines current inline state in InputNumber component.
| name | type | default | description |
| --- | --- | --- | --- |
| d\_modelValue | number | null | Current value state as a number. |
| d\_value | number | null | Current value state as a number. |
| focused | boolean | false | Current focused state as a boolean. |
#### InputNumberButtonListeners [\#](https://primevue.org/inputnumber/\#api.inputnumber.interfaces.InputNumberButtonListeners)
Defines valid listeners in InputNumber component.
| name | type | default | description |
| --- | --- | --- | --- |
| onMousedown | Function | null |  |
| onMouseup | Function | null |  |
| onMouseleave | Function | null |  |
| onKeydown | Function | null |  |
| onKeyup | Function | null |  |
## Types [\#](https://primevue.org/inputnumber/\#api.inputnumber.types)
Defines the custom types used by the module.
#### RoundingMode [\#](https://primevue.org/inputnumber/\#api.inputnumber.types.RoundingMode)
| values |
| --- |
| "ceil" \| "floor" \| "expand" \| "trunc" \| "halfCeil" \| "halfFloor" \| "halfExpand" \| "halfTrunc" \| "halfEven" |
#### InputNumberPassThroughOptionType [\#](https://primevue.org/inputnumber/\#api.inputnumber.types.InputNumberPassThroughOptionType)
| values |
| --- |
| InputNumberPassThroughAttributes \| (options: InputNumberPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### InputNumberEmits [\#](https://primevue.org/inputnumber/\#api.inputnumber.types.InputNumberEmits)
| values |
| --- |
| EmitFn<InputNumberEmitsOptions> |
- InputNumber
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Templates
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Templates
Highly customizable application templates to get started in no time with style. Designed and implemented by PrimeTek.
## Multi-Purpose Templates
[![Genesis](https://primefaces.org/cdn/primevue/images/layouts/genesis-vue.jpg)](https://genesis.primevue.org/)
[Preview](https://genesis.primevue.org/) [Learn More](https://primevue.org/templates/genesis/)
## Admin Templates
[![Sakai](https://primefaces.org/cdn/primevue/images/layouts/sakai-vue.jpg)](https://sakai.primevue.org/)
[Preview](https://sakai.primevue.org/) [Learn More](https://primevue.org/templates/sakai/)
[![Poseidon](https://primefaces.org/cdn/primevue/images/layouts/poseidon-vue-nextgen.jpg)](https://poseidon.primevue.org/)
[Preview](https://poseidon.primevue.org/) [Learn More](https://primevue.org/templates/poseidon/)
[![Apollo](https://primefaces.org/cdn/primevue/images/layouts/apollo-vue.jpg)](https://apollo.primevue.org/)
[Preview](https://apollo.primevue.org/) [Learn More](https://primevue.org/templates/apollo/)
[![Diamond](https://primefaces.org/cdn/primevue/images/layouts/diamond-remastered-vue.jpg)](https://diamond.primevue.org/)
[Preview](https://diamond.primevue.org/) [Learn More](https://primevue.org/templates/diamond/)
[![Atlantis](https://primefaces.org/cdn/primevue/images/layouts/atlantis-vue.jpg)](https://atlantis.primevue.org/)
[Preview](https://atlantis.primevue.org/) [Learn More](https://primevue.org/templates/atlantis/)
[![Ultima](https://primefaces.org/cdn/primevue/images/layouts/ultima-vue.jpg)](https://ultima.primevue.org/)
[Preview](https://ultima.primevue.org/) [Learn More](https://primevue.org/templates/ultima/)
[![Freya](https://primefaces.org/cdn/primevue/images/layouts/freya-vue.png)](https://freya.primevue.org/)
[Preview](https://freya.primevue.org/) [Learn More](https://primevue.org/templates/freya/)
[![Verona](https://primefaces.org/cdn/primevue/images/layouts/verona-vue.jpg)](https://verona.primevue.org/)
[Preview](https://verona.primevue.org/) [Learn More](https://primevue.org/templates/verona/)
[![Avalon](https://primefaces.org/cdn/primevue/images/layouts/avalon-vue.jpg)](https://avalon.primevue.org/)
[Preview](https://avalon.primevue.org/) [Learn More](https://primevue.org/templates/avalon/)
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Playground
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Playground
Experience PrimeVue right now with the interactive environment.
PrimeVue Playground v4 - StackBlitz
Project
Search
Ports in use
Settings
App.vue
More Actionsâ€¦
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
<scriptÂ setupÂ lang="ts">
import{ref}from'vue';
constmsg=ref('');
</script>
<template>
<main>
Â Â Â Â <h1>Playground</h1>
Â Â Â Â <InputTextÂ v-model="msg"Â />
Â Â Â Â <p>{{Â msgÂ }}</p>
</main>
</template>
<styleÂ scoped></style>
Terminal\_1
#### Terminal\_1
Close Preview
Booting WebContainer
1. Booting WebContainer
[Astro Basics\\
\\
Node.js](https://stackblitz.com/fork/github/withastro/astro/tree/latest/examples/basics?file=README.md&title=Astro%20Starter%20Kit:%20Basics) [Next.js\\
\\
Node.js](https://stackblitz.com/fork/github/stackblitz/starters/tree/main/nextjs?title=Next.js%20Starter&description=The%20React%20framework%20for%20production) [Nuxt\\
\\
Node.js](https://stackblitz.com/fork/github/nuxt/starter/tree/v3-stackblitz) [React\\
\\
TypeScript](https://stackblitz.com/fork/github/vitejs/vite/tree/main/packages/create-vite/template-react-ts?file=index.html&terminal=dev) [Vanilla\\
\\
JavaScript](https://stackblitz.com/fork/github/vitejs/vite/tree/main/packages/create-vite/template-vanilla?file=index.html&terminal=dev) [Vanilla\\
\\
TypeScript](https://stackblitz.com/fork/github/vitejs/vite/tree/main/packages/create-vite/template-vanilla-ts?file=index.html&terminal=dev) [Static\\
\\
HTML/JS/CSS](https://stackblitz.com/fork/github/stackblitz/starters/tree/main/static?title=Static%20Starter&description=HTML/CSS/JS%20Starter&file=script.js,styles.css,index.html&terminalHeight=10) [Node.js\\
\\
Blank project](https://stackblitz.com/fork/github/stackblitz/starters/tree/main/node?title=node.new%20Starter&description=Starter%20project%20for%20Node.js%2C%20a%20JavaScript%20runtime%20built%20on%20Chrome%27s%20V8%20JavaScript%20engine) [Angular\\
\\
TypeScript](https://stackblitz.com/fork/github/stackblitz/starters/tree/main/angular?template=node&title=Angular%20Starter&description=An%20angular-cli%20project%20based%20on%20%40angular%2Fanimations%2C%20%40angular%2Fcommon%2C%20%40angular%2Fcompiler%2C%20%40angular%2Fcore%2C%20%40angular%2Fforms%2C%20%40angular%2Fplatform-browser%2C%20%40angular%2Fplatform-browser-dynamic%2C%20%40angular%2Frouter%2C%20core-js%2C%20rxjs%2C%20tslib%20and%20zone.js) [Vue\\
\\
JavaScript](https://stackblitz.com/fork/github/vitejs/vite/tree/main/packages/create-vite/template-vue?file=index.html&terminal=dev) [WebContainer API\\
\\
Node.js](https://stackblitz.com/fork/github/stackblitz/webcontainer-api-starter)
# Publish a package
Are you trying to publish ``?
CancelConfirm
# Allow access to localhost resource
Request to:
More information
```
Method: undefined
Headers:
```
Warning
Allowing access to your localhost resources can lead to security issues such as unwanted request access or data leaks through your localhost.
Do not ask me again
BlockAllow
# Out of memory error
This browser tab is running out of memory. Free up memory by closing other StackBlitz tabs and then refresh the page.
OK [Learn more](https://developer.stackblitz.com/codeflow/working-in-codeflow-ide#out-of-memory-error)
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Tabs Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Tabs
Tabs facilitates seamless switching between different views.
## Import [\#](https://primevue.org/tabs/\#import)
```javascript
import Tabs from 'primevue/tabs';
import TabList from 'primevue/tablist';
import Tab from 'primevue/tab';
import TabPanels from 'primevue/tabpanels';
import TabPanel from 'primevue/tabpanel';
```
Copy
## Basic [\#](https://primevue.org/tabs/\#basic)
Tabs is defined using _TabList_, _Tab_, _TabPanels_ and _TabPanel_ components. Tab and TabPanel components are associated with their _value_ properties.
Header IHeader IIHeader III
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
```markup
<Tabs value="0">
    <TabList>
        <Tab value="0">Header I</Tab>
        <Tab value="1">Header II</Tab>
        <Tab value="2">Header III</Tab>
    </TabList>
    <TabPanels>
        <TabPanel value="0">
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </TabPanel>
        <TabPanel value="1">
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </TabPanel>
        <TabPanel value="2">
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </TabPanel>
    </TabPanels>
</Tabs>
```
Copy
## Dynamic [\#](https://primevue.org/tabs/\#dynamic)
Tabs can be generated dynamically using the standard _v-for_ directive on Tab and TabPanel.
Tab 1Tab 2Tab 3
Tab 1 Content
Tab 2 Content
Tab 3 Content
```markup
<Tabs value="0">
    <TabList>
        <Tab v-for="tab in tabs" :key="tab.title" :value="tab.value">{{ tab.title }}</Tab>
    </TabList>
    <TabPanels>
        <TabPanel v-for="tab in tabs" :key="tab.content" :value="tab.value">
            <p class="m-0">{{ tab.content }}</p>
        </TabPanel>
    </TabPanels>
</Tabs>
```
Copy
## Controlled [\#](https://primevue.org/tabs/\#controlled)
Tabs can be controlled programmatically using _value_ property as a model.
123
Header IHeader IIHeader III
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
```markup
<div class="flex mb-2 gap-2 justify-end">
    <Button @click="value = '0'" rounded label="1" class="w-8 h-8 p-0" :outlined="value !== '0'" />
    <Button @click="value = '1'" rounded label="2" class="w-8 h-8 p-0" :outlined="value !== '1'" />
    <Button @click="value = '2'" rounded label="3" class="w-8 h-8 p-0" :outlined="value !== '2'" />
</div>
<Tabs v-model:value="value">
    <TabList>
        <Tab value="0">Header I</Tab>
        <Tab value="1">Header II</Tab>
        <Tab value="2">Header III</Tab>
    </TabList>
    <TabPanels>
        <TabPanel value="0">
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </TabPanel>
        <TabPanel value="1">
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </TabPanel>
        <TabPanel value="2">
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </TabPanel>
    </TabPanels>
</Tabs>
```
Copy
## Scrollable [\#](https://primevue.org/tabs/\#scrollable)
Adding _scrollable_ property displays navigational buttons at each side to scroll between tabs.
Tab 1Tab 2Tab 3Tab 4Tab 5Tab 6Tab 7Tab 8Tab 9Tab 10Tab 11Tab 12Tab 13Tab 14Tab 15Tab 16Tab 17Tab 18Tab 19Tab 20Tab 21Tab 22Tab 23Tab 24Tab 25Tab 26Tab 27Tab 28Tab 29Tab 30Tab 31Tab 32Tab 33Tab 34Tab 35Tab 36Tab 37Tab 38Tab 39Tab 40Tab 41Tab 42Tab 43Tab 44Tab 45Tab 46Tab 47Tab 48Tab 49Tab 50
Tab 1 Content
Tab 2 Content
Tab 3 Content
Tab 4 Content
Tab 5 Content
Tab 6 Content
Tab 7 Content
Tab 8 Content
Tab 9 Content
Tab 10 Content
Tab 11 Content
Tab 12 Content
Tab 13 Content
Tab 14 Content
Tab 15 Content
Tab 16 Content
Tab 17 Content
Tab 18 Content
Tab 19 Content
Tab 20 Content
Tab 21 Content
Tab 22 Content
Tab 23 Content
Tab 24 Content
Tab 25 Content
Tab 26 Content
Tab 27 Content
Tab 28 Content
Tab 29 Content
Tab 30 Content
Tab 31 Content
Tab 32 Content
Tab 33 Content
Tab 34 Content
Tab 35 Content
Tab 36 Content
Tab 37 Content
Tab 38 Content
Tab 39 Content
Tab 40 Content
Tab 41 Content
Tab 42 Content
Tab 43 Content
Tab 44 Content
Tab 45 Content
Tab 46 Content
Tab 47 Content
Tab 48 Content
Tab 49 Content
Tab 50 Content
```markup
<Tabs value="0" scrollable>
    <TabList>
        <Tab v-for="tab in scrollableTabs" :key="tab.title" :value="tab.value">
            {{ tab.title }}
        </Tab>
    </TabList>
    <TabPanels>
        <TabPanel v-for="tab in scrollableTabs" :key="tab.content" :value="tab.value">
            <p class="m-0">{{ tab.content }}</p>
        </TabPanel>
    </TabPanels>
</Tabs>
```
Copy
## Disabled [\#](https://primevue.org/tabs/\#disabled)
Enabling _disabled_ property of a Tab prevents user interaction.
Header IHeader IIHeader IIIHeader IV
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
```markup
<Tabs value="0">
    <TabList>
        <Tab value="0">Header I</Tab>
        <Tab value="1">Header II</Tab>
        <Tab value="2">Header III</Tab>
        <Tab disabled>Header IV</Tab>
    </TabList>
    <TabPanels>
        <TabPanel value="0">
            <p class="m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
        </TabPanel>
        <TabPanel value="1">
            <p class="m-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
                ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
            </p>
        </TabPanel>
        <TabPanel value="2">
            <p class="m-0">
                At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
                qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
            </p>
        </TabPanel>
    </TabPanels>
</Tabs>
```
Copy
## Template [\#](https://primevue.org/tabs/\#template)
Custom content for a tab is defined with the default slot. The optional _as_ property controls the default container element of a tab, for example setting it to a _div_ renders a div for the header instead of a button. The _asChild_ option enables the headless mode for further customization by passing callbacks and properties to implement your own tab header.
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
Amy Elsner
![](https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png)
Onyama Limba
![](https://primefaces.org/cdn/primevue/images/avatar/ionibowcher.png)
Ioni Bowcher2
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
```markup
<Tabs value="0">
    <TabList>
        <Tab value="0" as="div" class="flex items-center gap-2">
            <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" shape="circle" />
            <span class="font-bold whitespace-nowrap">Amy Elsner</span>
        </Tab>
        <Tab value="1" as="div" class="flex items-center gap-2">
            <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png" shape="circle" />
            <span class="font-bold whitespace-nowrap">Onyama Limba</span>
        </Tab>
        <Tab v-slot="slotProps" value="2" asChild>
            <div :class="['flex items-center gap-2', slotProps.class]" @click="slotProps.onClick" v-bind="slotProps.a11yAttrs">
                <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/ionibowcher.png" shape="circle" />
                <span class="font-bold whitespace-nowrap">Ioni Bowcher</span>
                <Badge value="2" />
            </div>
        </Tab>
    </TabList>
    <TabPanels>
        <TabPanel value="0" as="p" class="m-0">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        </TabPanel>
        <TabPanel value="1" as="p" class="m-0">
            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
            ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.
        </TabPanel>
        <TabPanel v-slot="slotProps" value="2" asChild>
            <div v-show="slotProps.active" :class="slotProps.class" v-bind="slotProps.a11yAttrs">
                <p class="m-0">
                    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in
                    culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.
                </p>
            </div>
        </TabPanel>
    </TabPanels>
</Tabs>
```
Copy
## Tab Menu [\#](https://primevue.org/tabs/\#tabmenu)
A navigation menu is implemented using tabs without the panels where the content of a tab is provided by a route component like [router-view](https://router.vuejs.org/guide/essentials/nested-routes#Nested-Named-Routes). For the purpose of this demo, _router-view_ is not included.
Dashboard
Transactions
Products
Messages
```markup
<Tabs value="/dashboard">
    <TabList>
        <Tab v-for="tab in items" :key="tab.label" :value="tab.route">
            <router-link v-if="tab.route" v-slot="{ href, navigate }" :to="tab.route" custom>
                <a v-ripple :href="href" @click="navigate" class="flex items-center gap-2 text-inherit">
                    <i :class="tab.icon" />
                    <span>{{ tab.label }}</span>
                </a>
            </router-link>
        </Tab>
    </TabList>
</Tabs>
```
Copy
## Accessibility [\#](https://primevue.org/tabs/\#accessibility)
### Screen Reader
The tabs container in TabList is defined with the _tablist_ role, as any attribute is passed to the container element _aria-labelledby_ can be optionally used to specify an element to describe the Tabs. Each Tab has a _tab_ role along with _aria-selected_ state attribute and _aria-controls_ to refer to the corresponding TabPanel. TabPanel has _tabpanel_ role, an id to match the _aria-controls_ of Tab and _aria-labelledby_ reference to Tab as the accessible name.
### Tab Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the header. |
| _enter_ | Activates the focused tab header. |
| _space_ | Activates the focused tab header. |
| _right arrow_ | Moves focus to the next header. If focus is on the last header, moves focus to the first header. |
| _left arrow_ | Moves focus to the previous header. If focus is on the first header, moves focus to the last header. |
| _home_ | Moves focus to the last header. |
| _end_ | Moves focus to the first header. |
| _pageUp_ | Moves scroll position to first header. |
| _pageDown_ | Moves scroll position to last header. |
- Import
- Basic
- Dynamic
- Controlled
- Scrollable
- Disabled
- Template
- Tab Menu
- Accessibility
# Tabs API
API defines helper props, events and others for the PrimeVue Tabs module.
## Tabs [\#](https://primevue.org/tabs/\#api.tabs)
Tabs facilitates seamless switching between different views.
### Props [\#](https://primevue.org/tabs/\#api.tabs.props)
Defines valid properties in Tabs component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | string \| number | null | Value of the active tab. |  |
| lazy | boolean | false | When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css. |  |
| scrollable | boolean | false | When specified, enables horizontal and/or vertical scrolling. |  |
| showNavigators | boolean | true | Whether to display navigation buttons in container when scrollable is enabled. |  |
| tabindex | number | 0 | Index of the element in tabbing order. |  |
| selectOnFocus | boolean | false | When enabled, the focused tab is activated. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TabsPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/tabs/\#api.tabs.emits)
Defines valid emits in Tabs component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:value | value: string \| number | void | Emitted when the value changes. |  |
### Slots [\#](https://primevue.org/tabs/\#api.tabs.slots)
Defines valid slots in Tabs slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default slot to detect TabPanel components. |  |
| previcon |  | VNode<RendererNode, RendererElement, Object>\[\] | Previous button icon template for the scrollable component. |  |
| nexticon |  | VNode<RendererNode, RendererElement, Object>\[\] | Next button icon template for the scrollable component. |  |
### Interfaces [\#](https://primevue.org/tabs/\#api.tabs.interfaces)
Defines the custom interfaces used by the module.
#### TabsPassThroughMethodOptions [\#](https://primevue.org/tabs/\#api.tabs.interfaces.TabsPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TabsProps](https://primevue.org/tabs/#api.tabs.interfaces.TabsProps) | null | Defines valid properties. |
| state | [TabsState](https://primevue.org/tabs/#api.tabs.interfaces.TabsState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TabsPassThroughOptions [\#](https://primevue.org/tabs/\#api.tabs.interfaces.TabsPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TabsPassThroughOptionType](https://primevue.org/tabs/#api.tabs.types.TabsPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### TabsPassThroughAttributes [\#](https://primevue.org/tabs/\#api.tabs.interfaces.TabsPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TabsState [\#](https://primevue.org/tabs/\#api.tabs.interfaces.TabsState)
Defines current inline state in Tabs component.
| name | type | default | description |
| --- | --- | --- | --- |
| d\_value | string \| number | null | Current active value state. |
| id | string | null | Unique id for the Tabs component. |
## Types [\#](https://primevue.org/tabs/\#api.tabs.types)
Defines the custom types used by the module.
#### TabsPassThroughOptionType [\#](https://primevue.org/tabs/\#api.tabs.types.TabsPassThroughOptionType)
| values |
| --- |
| TabsPassThroughAttributes \| (options: TabsPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TabsEmits [\#](https://primevue.org/tabs/\#api.tabs.types.TabsEmits)
| values |
| --- |
| EmitFn<TabsEmitsOptions> |
## TabList [\#](https://primevue.org/tabs/\#api.tablist)
TabList is a helper component for Tabs component.
### Props [\#](https://primevue.org/tabs/\#api.tablist.props)
Defines valid properties in TabList component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TabListPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/tabs/\#api.tablist.slots)
Defines valid slots in TabList slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
### Interfaces [\#](https://primevue.org/tabs/\#api.tablist.interfaces)
Defines the custom interfaces used by the module.
#### TabListPassThroughMethodOptions [\#](https://primevue.org/tabs/\#api.tablist.interfaces.TabListPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TabListProps](https://primevue.org/tabs/#api.tablist.interfaces.TabListProps) | null | Defines valid properties. |
| context | [TabListContext](https://primevue.org/tabs/#api.tablist.interfaces.TabListContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TabListPassThroughOptions [\#](https://primevue.org/tabs/\#api.tablist.interfaces.TabListPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TabListPassThroughOptionType](https://primevue.org/tabs/#api.tablist.types.TabListPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| prevButton | [TabListPassThroughOptionType](https://primevue.org/tabs/#api.tablist.types.TabListPassThroughOptionType) | null | Used to pass attributes to the previous button component. |
| nextButton | [TabListPassThroughOptionType](https://primevue.org/tabs/#api.tablist.types.TabListPassThroughOptionType) | null | Used to pass attributes to the next button component. |
| content | [TabListPassThroughOptionType](https://primevue.org/tabs/#api.tablist.types.TabListPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| tabList | [TabListPassThroughOptionType](https://primevue.org/tabs/#api.tablist.types.TabListPassThroughOptionType) | null | Used to pass attributes to the tablist's DOM element. |
| activeBar | [TabListPassThroughOptionType](https://primevue.org/tabs/#api.tablist.types.TabListPassThroughOptionType) | null | Used to pass attributes to the inkbar's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### TabListPassThroughAttributes [\#](https://primevue.org/tabs/\#api.tablist.interfaces.TabListPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TabListContext [\#](https://primevue.org/tabs/\#api.tablist.interfaces.TabListContext)
Defines current options in TabList component.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/tabs/\#api.tablist.types)
Defines the custom types used by the module.
#### TabListPassThroughOptionType [\#](https://primevue.org/tabs/\#api.tablist.types.TabListPassThroughOptionType)
| values |
| --- |
| TabListPassThroughAttributes \| (options: TabListPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TabListEmits [\#](https://primevue.org/tabs/\#api.tablist.types.TabListEmits)
| values |
| --- |
| EmitFn<TabListEmitsOptions> |
## Tab [\#](https://primevue.org/tabs/\#api.tab)
Tab is a helper component for Tabs component.
### Props [\#](https://primevue.org/tabs/\#api.tab.props)
Defines valid properties in Tab component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | string \| number | null | Value of tab. |  |
| disabled | boolean | false | Whether the tab is disabled. |  |
| as | string \| Component | BUTTON | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TabPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/tabs/\#api.tab.slots)
Defines valid slots in Tab slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
### Interfaces [\#](https://primevue.org/tabs/\#api.tab.interfaces)
Defines the custom interfaces used by the module.
#### TabPassThroughMethodOptions [\#](https://primevue.org/tabs/\#api.tab.interfaces.TabPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TabProps](https://primevue.org/tabs/#api.tab.interfaces.TabProps) | null | Defines valid properties. |
| context | [TabContext](https://primevue.org/tabs/#api.tab.interfaces.TabContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TabPassThroughOptions [\#](https://primevue.org/tabs/\#api.tab.interfaces.TabPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TabPassThroughOptionType](https://primevue.org/tabs/#api.tab.types.TabPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### TabPassThroughAttributes [\#](https://primevue.org/tabs/\#api.tab.interfaces.TabPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TabContext [\#](https://primevue.org/tabs/\#api.tab.interfaces.TabContext)
Defines current options in Tab component.
| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | null | Whether the tab is active. |
## Types [\#](https://primevue.org/tabs/\#api.tab.types)
Defines the custom types used by the module.
#### TabPassThroughOptionType [\#](https://primevue.org/tabs/\#api.tab.types.TabPassThroughOptionType)
| values |
| --- |
| TabPassThroughAttributes \| (options: TabPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TabEmits [\#](https://primevue.org/tabs/\#api.tab.types.TabEmits)
| values |
| --- |
| EmitFn<TabEmitsOptions> |
## TabPanels [\#](https://primevue.org/tabs/\#api.tabpanels)
TabPanels is a helper component for Tabs component.
### Props [\#](https://primevue.org/tabs/\#api.tabpanels.props)
Defines valid properties in TabPanels component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TabPanelsPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/tabs/\#api.tabpanels.slots)
Defines valid slots in TabPanels slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
### Interfaces [\#](https://primevue.org/tabs/\#api.tabpanels.interfaces)
Defines the custom interfaces used by the module.
#### TabPanelsPassThroughMethodOptions [\#](https://primevue.org/tabs/\#api.tabpanels.interfaces.TabPanelsPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TabPanelsProps](https://primevue.org/tabs/#api.tabpanels.interfaces.TabPanelsProps) | null | Defines valid properties. |
| context | [TabPanelsContext](https://primevue.org/tabs/#api.tabpanels.interfaces.TabPanelsContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TabPanelsPassThroughOptions [\#](https://primevue.org/tabs/\#api.tabpanels.interfaces.TabPanelsPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TabPanelsPassThroughOptionType](https://primevue.org/tabs/#api.tabpanels.types.TabPanelsPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### TabPanelsPassThroughAttributes [\#](https://primevue.org/tabs/\#api.tabpanels.interfaces.TabPanelsPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TabPanelsContext [\#](https://primevue.org/tabs/\#api.tabpanels.interfaces.TabPanelsContext)
Defines current options in TabPanels component.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/tabs/\#api.tabpanels.types)
Defines the custom types used by the module.
#### TabPanelsPassThroughOptionType [\#](https://primevue.org/tabs/\#api.tabpanels.types.TabPanelsPassThroughOptionType)
| values |
| --- |
| TabPanelsPassThroughAttributes \| (options: TabPanelsPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TabPanelsEmits [\#](https://primevue.org/tabs/\#api.tabpanels.types.TabPanelsEmits)
| values |
| --- |
| EmitFn<TabPanelsEmitsOptions> |
## TabPanel [\#](https://primevue.org/tabs/\#api.tabpanel)
TabPanel is a helper component for Tabs component.
### Props [\#](https://primevue.org/tabs/\#api.tabpanel.props)
Defines valid properties in TabPanel component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | string \| number | null | Value of tabpanel. |  |
| as | string \| Component | DIV | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| header | string | null | Orientation of tab headers. |  |
| headerStyle | any | null | Inline style of the tab header. |  |
| headerClass | any | null | Style class of the tab header. |  |
| headerProps | LiHTMLAttributes | null | Used to pass all properties of the HTMLLiElement to the tab header. |  |
| headerActionProps | AnchorHTMLAttributes | null | Used to pass all properties of the HTMLAnchorElement to the focusable anchor element inside the tab header. |  |
| contentStyle | any | null | Inline style of the tab content. |  |
| contentClass | any | null | Style class of the tab content. |  |
| contentProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the tab content. |  |
| disabled | boolean | false | Whether the tab is disabled. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TabPanelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/tabs/\#api.tabpanel.slots)
Defines valid slots in TabPanel slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
### Interfaces [\#](https://primevue.org/tabs/\#api.tabpanel.interfaces)
Defines the custom interfaces used by the module.
#### TabPanelPassThroughMethodOptions [\#](https://primevue.org/tabs/\#api.tabpanel.interfaces.TabPanelPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TabPanelProps](https://primevue.org/tabs/#api.tabpanel.interfaces.TabPanelProps) | null | Defines valid properties. |
| context | [TabPanelContext](https://primevue.org/tabs/#api.tabpanel.interfaces.TabPanelContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TabPanelPassThroughOptions [\#](https://primevue.org/tabs/\#api.tabpanel.interfaces.TabPanelPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TabPanelPassThroughOptionType](https://primevue.org/tabs/#api.tabpanel.types.TabPanelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [TabPanelPassThroughOptionType](https://primevue.org/tabs/#api.tabpanel.types.TabPanelPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| headerAction | [TabPanelPassThroughOptionType](https://primevue.org/tabs/#api.tabpanel.types.TabPanelPassThroughOptionType) | null | Used to pass attributes to the header action's DOM element. |
| headerTitle | [TabPanelPassThroughOptionType](https://primevue.org/tabs/#api.tabpanel.types.TabPanelPassThroughOptionType) | null | Used to pass attributes to the title's DOM element. |
| content | [TabPanelPassThroughOptionType](https://primevue.org/tabs/#api.tabpanel.types.TabPanelPassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### TabPanelPassThroughAttributes [\#](https://primevue.org/tabs/\#api.tabpanel.interfaces.TabPanelPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TabPanelContext [\#](https://primevue.org/tabs/\#api.tabpanel.interfaces.TabPanelContext)
Defines current options in TabPanel component.
| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Current index of the tab. |
| count | number | null | Count of tabs |
| first | boolean | null | Whether the tab is first. |
| last | boolean | null | Whether the tab is last. |
| active | boolean | null | Whether the tab is active. |
## Types [\#](https://primevue.org/tabs/\#api.tabpanel.types)
Defines the custom types used by the module.
#### TabPanelPassThroughOptionType [\#](https://primevue.org/tabs/\#api.tabpanel.types.TabPanelPassThroughOptionType)
| values |
| --- |
| TabPanelPassThroughAttributes \| (options: TabPanelPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TabPanelEmits [\#](https://primevue.org/tabs/\#api.tabpanel.types.TabPanelEmits)
| values |
| --- |
| EmitFn<TabPanelEmitsOptions> |
- Tabs
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
- TabList
  - Props
  - Slots
  - Interfaces
  - Types
- Tab
  - Props
  - Slots
  - Interfaces
  - Types
- TabPanels
  - Props
  - Slots
  - Interfaces
  - Types
- TabPanel
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Paginator Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Paginator
Paginator displays data in paged format and provides navigation between pages.
## Import [\#](https://primevue.org/paginator/\#import)
```javascript
import Paginator from 'primevue/paginator';
```
Copy
## Basic [\#](https://primevue.org/paginator/\#basic)
Paginator is used as a controlled component with _first_ and _rows_ properties to manage the first index and number of records to display per page. Total number of records need to be with _totalRecords_ property. Default template includes a dropdown to change the _rows_ so _rowsPerPageOptions_ is also necessary for the dropdown options.
```markup
<Paginator :rows="10" :totalRecords="120" :rowsPerPageOptions="[10, 20, 30]"></Paginator>
```
Copy
## Template [\#](https://primevue.org/paginator/\#template)
Paginator elements can be customized using the _template_ property using the predefined keys, default value is "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown". Here are the available elements that can be placed inside a paginator in any order.
- FirstPageLink
- PrevPageLink
- PageLinks
- NextPageLink
- LastPageLink
- RowsPerPageDropdown
- JumpToPageDropdown
- JumpToPageInput
- CurrentPageReport
![0](https://primefaces.org/cdn/primevue/images/nature/nature1.jpg)
```markup
<Paginator v-model:first="first" :rows="1" :totalRecords="12" template="FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink" />
<div class="p-4 text-center">
    <img :src="`https://primefaces.org/cdn/primevue/images/nature/nature${first + 1}.jpg`" :alt="first" class="rounded w-full sm:w-[30rem]" />
</div>
```
Copy
## Current Page Report [\#](https://primevue.org/paginator/\#currentpagereport)
Current page report item in the template displays information about the pagination state. Default value is ({currentPage} of {totalPages}) whereas available placeholders are the following;
- {currentPage}
- {totalPages}
- {rows}
- {first}
- {last}
- {totalRecords}
```markup
<Paginator :rows="10" :totalRecords="120" template="FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink"
    currentPageReportTemplate="Showing {first} to {last} of {totalRecords}" />
```
Copy
## Responsive [\#](https://primevue.org/paginator/\#responsive)
Paginator elements can be customized per screen size by defining a template per breakpoint. Note that breakpoints are based on max-width setting, if default key is omitted then the default template would be used. Example below has 4 settings; up to 640px, between 641px-960px, between 961px-1300px and larger than 1301px which is the default.
```markup
<Paginator
    :template="{
        '640px': 'PrevPageLink CurrentPageReport NextPageLink',
        '960px': 'FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink',
        '1300px': 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink',
        default: 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink JumpToPageDropdown JumpToPageInput'
    }"
    :rows="10"
    :totalRecords="120">
</Paginator>
```
Copy
## Custom Content [\#](https://primevue.org/paginator/\#customcontent)
There are two templates available named _start_ and _end_ to add custom content to these locations. Both templates get a state object as a slot property to provide the current page, first index and the rows.
```markup
<Paginator :rows="10" :totalRecords="120" :rowsPerPageOptions="[10, 20, 30]">
    <template #start="slotProps">
        Page: {{ slotProps.state.page }}
        First: {{ slotProps.state.first }}
        Rows: {{ slotProps.state.rows }}
    </template>
    <template #end>
        <Button type="button" icon="pi pi-search" />
    </template>
</Paginator>
```
Copy
## Headless [\#](https://primevue.org/paginator/\#headless)
Headless mode is enabled by defining a _container_ slot that lets you implement entire UI instead of the default elements. The template receives the following data;
- first
- last
- rows
- page
- pageCount
- totalRecords
- firstPageCallback
- lastPageCallback
- prevPageCallback
- nextPageCallback
- rowChangeCallback
```markup
<Paginator :rows="10" :totalRecords="120">
    <template #container="{ first, last, page, pageCount, prevPageCallback, nextPageCallback, totalRecords }">
        <div class="flex items-center gap-4 border border-primary bg-transparent rounded-full w-full py-1 px-2 justify-between">
            <Button icon="pi pi-chevron-left" rounded text @click="prevPageCallback" :disabled="page === 0" />
            <div class="text-color font-medium">
                <span class="hidden sm:block">Showing {{ first }} to {{ last }} of {{ totalRecords }}</span>
                <span class="block sm:hidden">Page {{ page + 1 }} of {{ pageCount }}</span>
            </div>
            <Button icon="pi pi-chevron-right" rounded text @click="nextPageCallback" :disabled="page === pageCount - 1" />
        </div>
    </template>
</Paginator>
```
Copy
## Accessibility [\#](https://primevue.org/paginator/\#accessibility)
### Screen Reader
Paginator is placed inside a _nav_ element to indicate a navigation section. All of the paginator elements can be customized using templating however the default behavious is listed below.
First, previous, next and last page navigators elements with _aria-label_ attributes referring to the _aria.firstPageLabel_, _aria.prevPageLabel_, _aria.nextPageLabel_ and _aria.lastPageLabel_ properties of the [locale](https://primevue.org/configuration/#locale) API respectively.
Page links are also button elements with an _aria-label_ attribute derived from the _aria.pageLabel_ of the [locale](https://primevue.org/configuration/#locale) API. Current page is marked with _aria-current_ set to "page" as well.
Current page report uses _aria-live="polite"_ to instruct screen reader about the changes to the pagination state.
Rows per page dropdown internally uses a dropdown component, refer to the [select](https://primevue.org/select) documentation for accessibility details. Additionally, the dropdown uses an _aria-label_ from the _aria.rowsPerPageLabel_ property of the [locale](https://primevue.org/configuration/#locale) API.
Jump to page input is an _input_ element with an _aria-label_ that refers to the _aria.jumpToPageInputLabel_ property and jump to page dropdown internally uses a dropdown component, with an _aria-label_ that refers to the _aria.jumpToPageDropdownLabel_ property of the [locale](https://primevue.org/configuration/#locale) API.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the paginator elements. |
| _enter_ | Executes the paginator element action. |
| _space_ | Executes the paginator element action. |
### Rows Per Page Dropdown Keyboard Support
Refer to the [select](https://primevue.org/select) documentation for more details about keyboard support.
- Import
- Basic
- Template
- Current Page Report
- Responsive
- Custom Content
- Headless
- Accessibility
# Paginator API
API defines helper props, events and others for the PrimeVue Paginator module.
## Paginator [\#](https://primevue.org/paginator/\#api.paginator)
Paginator is a generic component to display content in paged format.
### Props [\#](https://primevue.org/paginator/\#api.paginator.props)
Defines valid properties in Paginator component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| totalRecords | number | 0 | Number of total records. |  |
| rows | number | 0 | Data count to display per page. |  |
| first | number | 0 | Zero-relative number of the first row to be displayed. |  |
| pageLinkSize | number | 5 | Number of page links to display. |  |
| rowsPerPageOptions | number\[\] | null | Array of integer values to display inside rows per page dropdown. |  |
| template | any | null | Template of the paginator, can either be a string or an object with key-value pairs to define templates per breakpoint. Available templates are the following;<br>\- FirstPageLink<br>\- PrevPageLink<br>\- PageLinks<br>\- NextPageLink<br>\- LastPageLink<br>\- RowsPerPageDropdown<br>\- JumpToPageDropdown<br>\- JumpToPageInput<br>\- CurrentPageReport |  |
| currentPageReportTemplate | string | '({currentPage} of {totalPages})' | Template of the current page report element. It displays information about the pagination state. Available placeholders are the following;<br>\- {currentPage}<br>\- {totalPages}<br>\- {rows}<br>\- {first}<br>\- {last}<br>\- {totalRecords} |  |
| alwaysShow | boolean | true | Whether to show the paginator even there is only one page. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<PaginatorPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Emits [\#](https://primevue.org/paginator/\#api.paginator.emits)
Defines valid emits in Paginator component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:first | value: number | void | Emitted when the first changes. |  |
| update:rows | value: number | void | Emitted when the rows changes. |  |
| page | event: PageState | void | Callback to invoke when page changes, the event object contains information about the new state. |  |
### Slots [\#](https://primevue.org/paginator/\#api.paginator.slots)
Defines valid slots in Paginator component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| start | scope: {<br>state: PageState, // Current state<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom start template. |  |
| end | scope: {<br>state: PageState, // Current state<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom end template. |  |
| firstpagelinkicon | scope: {<br>class: string, // Style class of the jumptopagedropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| firsticon | scope: {<br>class: string, // Style class of the jumptopagedropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom first page link icon template. |  |
| prevpagelinkicon | scope: {<br>class: string, // Style class of the jumptopagedropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| previcon | scope: {<br>class: string, // Style class of the jumptopagedropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom previous page link icon template. |  |
| nextpagelinkicon | scope: {<br>class: string, // Style class of the jumptopagedropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| nexticon | scope: {<br>class: string, // Style class of the jumptopagedropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom finextrst page link icon template. |  |
| lastpagelinkicon | scope: {<br>class: string, // Style class of the jumptopagedropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| lasticon | scope: {<br>class: string, // Style class of the jumptopagedropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom last page link icon template. |  |
| rowsperpagedropdownicon | scope: {<br>class: string, // Style class of the rowsperpagedropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom rowsperpagedropdownicon template. |  |
| jumptopagedropdownicon | scope: {<br>class: string, // Style class of the jumptopagedropdown icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom jumptopagedropdownicon template. |  |
| container | scope: {<br>first: number, // Index of first recordlast: number, // Index of last recordrows: number, // Number of rows to display in new pagepage: number, // New page numberpageCount: number, // Total number of pagespageLinks: number, // Direct page linkstotalRecords: number, // Total recordsfirstPageCallback: (event: Event) â‡’ void, // First page function.lastPageCallback: (event: Event) â‡’ void, // Last page function.prevPageCallback: (event: Event) â‡’ void, // Previous page function.nextPageCallback: (event: Event) â‡’ void, // Next page function.rowChangeCallback: (value: number) â‡’ void, // Row change function.changePageCallback: (value: number) â‡’ void, // Page change function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |
### Interfaces [\#](https://primevue.org/paginator/\#api.paginator.interfaces)
Defines the custom interfaces used by the module.
#### PaginatorPassThroughMethodOptions [\#](https://primevue.org/paginator/\#api.paginator.interfaces.PaginatorPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [PaginatorProps](https://primevue.org/paginator/#api.paginator.interfaces.PaginatorProps) | null | Defines valid properties. |
| state | [PaginatorState](https://primevue.org/paginator/#api.paginator.interfaces.PaginatorState) | null | Defines current inline state. |
| parent | any | null | Defines parent instance. |
| context | [PaginatorContext](https://primevue.org/paginator/#api.paginator.interfaces.PaginatorContext) | null | Defines current options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### PaginatorSharedPassThroughMethodOptions [\#](https://primevue.org/paginator/\#api.paginator.interfaces.PaginatorSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [PaginatorProps](https://primevue.org/paginator/#api.paginator.interfaces.PaginatorProps) | null | Defines valid properties. |
| state | [PaginatorState](https://primevue.org/paginator/#api.paginator.interfaces.PaginatorState) | null | Defines current inline state. |
#### PaginatorPassThroughOptions [\#](https://primevue.org/paginator/\#api.paginator.interfaces.PaginatorPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| paginatorContainer | any | null | Used to pass attributes to the paginator container's DOM element. |
| root | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| content | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the content DOM element. |
| contentStart | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the content start's DOM element. |
| first | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the first page button's DOM element. |
| firstIcon | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the first icon's DOM element. |
| prev | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the prev page button's DOM element. |
| prevIcon | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the prev page icon's DOM element. |
| next | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the next page button's DOM element. |
| nextIcon | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the next page icon's DOM element. |
| last | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the last page button's DOM element. |
| lastIcon | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the last page icon's DOM element. |
| pages | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the pages's DOM element. |
| page | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the page button's DOM element. |
| current | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the current's DOM element. |
| pcRowPerPageDropdown | any | null | Used to pass attributes to the Dropdown component. |
| pcJumpToPageDropdown | any | null | Used to pass attributes to the Dropdown component. |
| pcJumpToPageInputText | any | null | Used to pass attributes to the Dropdown component. |
| contentEnd | [PaginatorPassThroughOptionType<T>](https://primevue.org/paginator/#api.paginator.types.PaginatorPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the content end's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### PaginatorPassThroughAttributes [\#](https://primevue.org/paginator/\#api.paginator.interfaces.PaginatorPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### PaginatorState [\#](https://primevue.org/paginator/\#api.paginator.interfaces.PaginatorState)
Defines current inline state in Paginator component.
| name | type | default | description |
| --- | --- | --- | --- |
| d\_first | number | null | Current index of first record as a number. |
| d\_rows | number | null | Current number of rows to display in new page as a number. |
#### PaginatorContext [\#](https://primevue.org/paginator/\#api.paginator.interfaces.PaginatorContext)
Defines current options in Paginator component.
| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | false | Current active state as a boolean. |
| disabled | boolean | false | Current disabled state of the button as a boolean. |
#### PageState [\#](https://primevue.org/paginator/\#api.paginator.interfaces.PageState)
Paginator page state metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| first | number | null | Index of first record |
| rows | number | null | Number of rows to display in new page |
| page | number | null | New page number |
| pageCount | number | null | Total number of pages |
## Types [\#](https://primevue.org/paginator/\#api.paginator.types)
Defines the custom types used by the module.
#### PaginatorPassThroughOptionType [\#](https://primevue.org/paginator/\#api.paginator.types.PaginatorPassThroughOptionType)
| values |
| --- |
| PaginatorPassThroughAttributes \| (options: PaginatorPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### PaginatorEmits [\#](https://primevue.org/paginator/\#api.paginator.types.PaginatorEmits)
| values |
| --- |
| EmitFn<PaginatorEmitsOptions> |
- Paginator
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue MegaMenu Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# MegaMenu
MegaMenu is a navigation component that displays submenus and content in columns.
## Import [\#](https://primevue.org/megamenu/\#import)
```javascript
import MegaMenu from 'primevue/megamenu';
```
Copy
## Basic [\#](https://primevue.org/megamenu/\#basic)
MegaMenu requires a collection of menuitems as its _model_.
- Furniture
- Living Room
- Accessories
- Armchair
- Coffee Table
- Couch
- TV Stand
- Kitchen
- Bar stool
- Chair
- Table
- Bathroom
- Accessories
- Bedroom
- Bed
- Chaise lounge
- Cupboard
- Dresser
- Wardrobe
- Office
- Bookcase
- Cabinet
- Chair
- Desk
- Executive Chair
- Electronics
- Computer
- Monitor
- Mouse
- Notebook
- Keyboard
- Printer
- Storage
- Home Theater
- Projector
- Speakers
- TVs
- Gaming
- Accessories
- Console
- PC
- Video Games
- Appliances
- Coffee Machine
- Fridge
- Oven
- Vaccum Cleaner
- Washing Machine
- Sports
- Football
- Kits
- Shoes
- Shorts
- Training
- Running
- Accessories
- Shoes
- T-Shirts
- Shorts
- Swimming
- Kickboard
- Nose Clip
- Swimsuits
- Paddles
- Tennis
- Balls
- Rackets
- Shoes
- Training
```markup
<MegaMenu :model="items" />
```
Copy
## Vertical [\#](https://primevue.org/megamenu/\#Vertical)
Layout of the MegaMenu is configured with the _orientation_ property that accepts _horizontal_ and _vertical_ as options.
- Furniture
- Living Room
- Accessories
- Armchair
- Coffee Table
- Couch
- TV Stand
- Kitchen
- Bar stool
- Chair
- Table
- Bathroom
- Accessories
- Bedroom
- Bed
- Chaise lounge
- Cupboard
- Dresser
- Wardrobe
- Office
- Bookcase
- Cabinet
- Chair
- Desk
- Executive Chair
- Electronics
- Computer
- Monitor
- Mouse
- Notebook
- Keyboard
- Printer
- Storage
- Home Theater
- Projector
- Speakers
- TVs
- Gaming
- Accessories
- Console
- PC
- Video Games
- Appliances
- Coffee Machine
- Fridge
- Oven
- Vaccum Cleaner
- Washing Machine
- Sports
- Football
- Kits
- Shoes
- Shorts
- Training
- Running
- Accessories
- Shoes
- T-Shirts
- Shorts
- Swimming
- Kickboard
- Nose Clip
- Swimsuits
- Paddles
- Tennis
- Balls
- Rackets
- Shoes
- Training
```markup
<MegaMenu :model="items" orientation="vertical" />
```
Copy
## Template [\#](https://primevue.org/megamenu/\#template)
MegaMenu offers item customization with the _item_ template that receives the menuitem instance from the model as a parameter. Additional slots named _start_ and _end_ are provided to embed content before or after the menu.
- Company
- FeaturesSubtext of item
- CustomersSubtext of item
- Case StudiesSubtext of item
- SolutionsSubtext of item
- FaqSubtext of item
- LibrarySubtext of item
- CommunitySubtext of item
- RewardsSubtext of item
- InvestorsSubtext of item
- ![megamenu-demo](https://primefaces.org/cdn/primevue/images/uikit/uikit-system.png)Build spectacular apps in no time.GET STARTED
- Resources
- Contact
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
```markup
<MegaMenu :model="items" class="p-4 bg-surface-0" style="border-radius: 3rem">
    <template #start>
        <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-8">
            <path d="..." fill="var(--p-primary-color)" />
            <path d="..." fill="var(--p-text-color)" />
        </svg>
    </template>
    <template #item="{ item }">
        <a v-if="item.root" class="flex items-center cursor-pointer px-4 py-2 overflow-hidden relative font-semibold text-lg uppercase" style="border-radius: 2rem">
            <span>{{ item.label }}</span>
        </a>
        <a v-else-if="!item.image" class="flex items-center p-4 cursor-pointer mb-2 gap-3">
            <span class="inline-flex items-center justify-center rounded-full bg-primary text-primary-contrast w-12 h-12">
                <i :class="[item.icon, 'text-lg']"></i>
            </span>
            <span class="inline-flex flex-col gap-1">
                <span class="font-bold text-lg">{{ item.label }}</span>
                <span class="whitespace-nowrap">{{ item.subtext }}</span>
            </span>
        </a>
        <div v-else class="flex flex-col items-start gap-4 p-2">
            <img alt="megamenu-demo" :src="item.image" class="w-full" />
            <span>{{ item.subtext }}</span>
            <Button :label="item.label" outlined />
        </div>
    </template>
    <template #end>
        <Avatar image="/images/avatar/amyelsner.png" shape="circle" />
    </template>
</MegaMenu>
```
Copy
## Command [\#](https://primevue.org/megamenu/\#command)
The _command_ property of a menuitem defines the callback to run when an item is activated by click or a key event.
```javascript
{
    label: 'Log out',
    icon: 'pi pi-signout',
    command: () => {
        // Callback to run
    }
}
```
Copy
## Router [\#](https://primevue.org/megamenu/\#router)
Items with navigation are defined with templating to be able to use a router link component, an external link or programmatic navigation.
```markup
<MegaMenu :model="items">
    <template #item="{ item }">
        <router-link v-if="item.route" v-slot="{ href, navigate }" :to="item.route" custom>
            <a v-ripple :href="href" @click="navigate">
                <span :class="item.icon" />
                <span class="ml-2">{{ item.label }}</span>
            </a>
        </router-link>
        <a v-else v-ripple :href="item.url" :target="item.target">
            <span :class="item.icon" />
            <span class="ml-2">{{ item.label }}</span>
        </a>
    </template>
</MegaMenu>
```
Copy
## Accessibility [\#](https://primevue.org/megamenu/\#accessibility)
### Screen Reader
MegaMenu component uses the _menubar_ role along with _aria-orientation_ and the value to describe the component can either be provided with _aria-labelledby_ or _aria-label_ props. Each list item has a _menuitem_ role with _aria-label_ referring to the label of the item and _aria-disabled_ defined if the item is disabled. A submenu within a MegaMenu uses the _menu_ role with an _aria-labelledby_ defined as the id of the submenu root menuitem label. In addition, root menuitems that open a submenu have _aria-haspopup_ and _aria-expanded_ to define the relation between the item and the submenu.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Add focus to the first item if focus moves in to the menu. If the focus is already within the menu, focus moves to the next focusable item in the page tab sequence. |
| _shift_ \+ _tab_ | Add focus to the first item if focus moves in to the menu. If the focus is already within the menu, focus moves to the previous focusable item in the page tab sequence. |
| _enter_ | If menuitem has a submenu, toggles the visibility of the submenu otherwise activates the menuitem and closes all open overlays. |
| _space_ | If menuitem has a submenu, toggles the visibility of the submenu otherwise activates the menuitem and closes all open overlays. |
| _escape_ | If focus is inside a popup submenu, closes the submenu and moves focus to the root item of the closed submenu. |
| _down arrow_ | If focus is on a root element, open a submenu and moves focus to the first element in the submenu otherwise moves focus to the next menuitem within the submenu. |
| _up arrow_ | If focus is on a root element, opens a submenu and moves focus to the last element in the submenu otherwise moves focus to the previous menuitem within the submenu. |
| _alt_ \+ _up arrow_ | If focus is inside a popup menu, moves focus to the first element in the submenu otherwise closes the submenu and moves focus to the root item of the closed submenu in horizontal mode. |
| _right arrow_ | If focus is on a root element, moves focus to the next menuitem. If the focus in inside a submenu, moves focus to the first menuitem of the next menu group. |
| _left arrow_ | If focus is on a root element, moves focus to the previous menuitem. If the focus in inside a submenu, moves focus to the first menuitem of the previous menu group. |
| _home_ | Moves focus to the first menuitem within the submenu. |
| _end_ | Moves focus to the last menuitem within the submenu. |
| _any printable character_ | Moves focus to the menuitem whose label starts with the characters being typed. |
- Import
- Basic
- Vertical
- Template
- Command
- Router
- Accessibility
# MegaMenu API
API defines helper props, events and others for the PrimeVue MegaMenu module.
## MegaMenu [\#](https://primevue.org/megamenu/\#api.megamenu)
MegaMenu is navigation component that displays submenus together.
### Props [\#](https://primevue.org/megamenu/\#api.megamenu.props)
Defines valid properties in MegaMenu component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | MenuItem\[\]\[\] | null | An array of menuitems. |  |
| orientation | HintedString<"horizontal" \| "vertical"> | horizontal | Defines the orientation. |  |
| breakpoint | string | 960px | The breakpoint to define the maximum width boundary. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| scrollHeight | string | 20rem | Height of the viewport, a scrollbar is defined if height of list exceeds this value. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying menu element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<MegaMenuPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/megamenu/\#api.megamenu.emits)
Defines valid emits in MegaMenu component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
### Slots [\#](https://primevue.org/megamenu/\#api.megamenu.slots)
Defines valid slots in MegaMenu component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| start |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom start template. |  |
| end |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom end template. |  |
| item | scope: {<br>item: MenuItem, // Menuitem instancelabel: undefined, // Label property of the menuitemprops: MegaMenuRouterBindProps, // Binding properties of the menuitemhasSubmenu: boolean, // Whether or not there is a submenu<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item template. |  |
| menubutton | scope: {<br>id: string, // Current id state as a stringclass: string, // Style class of componenttoggleCallback: () â‡’ void, // Toggle event<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom menu button template on responsive mode. |  |
| menubuttonicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom menu button icon template on responsive mode. |  |
| submenuicon | scope: {<br>active: boolean, // Whether item is active<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom submenu icon template. |  |
| itemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item icon template. |  |
### Interfaces [\#](https://primevue.org/megamenu/\#api.megamenu.interfaces)
Defines the custom interfaces used by the module.
#### MegaMenuPassThroughMethodOptions [\#](https://primevue.org/megamenu/\#api.megamenu.interfaces.MegaMenuPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [MegaMenuProps](https://primevue.org/megamenu/#api.megamenu.interfaces.MegaMenuProps) | null | Defines valid properties. |
| state | [MegaMenuState](https://primevue.org/megamenu/#api.megamenu.interfaces.MegaMenuState) | null | Defines current inline state. |
| context | [MegaMenuContext](https://primevue.org/megamenu/#api.megamenu.interfaces.MegaMenuContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### MegaMenuPassThroughOptions [\#](https://primevue.org/megamenu/\#api.megamenu.interfaces.MegaMenuPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| rootList | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the root list's DOM element. |
| item | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| itemContent | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the item content's DOM element. |
| itemLink | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the item link's DOM element. |
| itemIcon | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the item icon's DOM element. |
| itemLabel | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the item label's DOM element. |
| submenuIcon | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the submenu icon's DOM element. |
| overlay | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the overlay DOM element. |
| grid | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the grid's DOM element. |
| column | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the column's DOM element. |
| submenuLabel | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the submenu item's DOM element. |
| submenu | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the submenu's DOM element. |
| separator | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the separator's DOM element. |
| button | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the mobile popup menu button's DOM element. |
| buttonIcon | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the mobile popup menu button icon's DOM element. |
| start | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the start of the component. |
| end | [MegaMenuPassThroughOptionType](https://primevue.org/megamenu/#api.megamenu.types.MegaMenuPassThroughOptionType) | null | Used to pass attributes to the end of the component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### MegaMenuPassThroughAttributes [\#](https://primevue.org/megamenu/\#api.megamenu.interfaces.MegaMenuPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### MegaMenuFocusedItemInfo [\#](https://primevue.org/megamenu/\#api.megamenu.interfaces.MegaMenuFocusedItemInfo)
Defines focused item info
| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Active item index |
| level | number | null | Active item level |
| parentKey | string | null | Parent key info |
#### MegaMenuState [\#](https://primevue.org/megamenu/\#api.megamenu.interfaces.MegaMenuState)
Defines current inline state in MegaMenu component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| focused | boolean | false | Current focus state as a boolean. |
| focusedItemInfo | [MegaMenuFocusedItemInfo](https://primevue.org/megamenu/#api.megamenu.interfaces.MegaMenuFocusedItemInfo) | null | Current focused item info. |
| activeItem | MenuItem | null | Active item path. |
#### MegaMenuContext [\#](https://primevue.org/megamenu/\#api.megamenu.interfaces.MegaMenuContext)
Defines current options in MegaMenu component.
| name | type | default | description |
| --- | --- | --- | --- |
| item | any | null | Current menuitem |
| index | number | null | Current index of the menuitem. |
| active | boolean | false | Current active state of menuitem as a boolean. |
| focused | boolean | false | Current focused state of menuitem as a boolean. |
| disabled | boolean | false | Current disabled state of menuitem as a boolean. |
## Types [\#](https://primevue.org/megamenu/\#api.megamenu.types)
Defines the custom types used by the module.
#### MegaMenuPassThroughOptionType [\#](https://primevue.org/megamenu/\#api.megamenu.types.MegaMenuPassThroughOptionType)
| values |
| --- |
| MegaMenuPassThroughAttributes \| (options: MegaMenuPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### MegaMenuEmits [\#](https://primevue.org/megamenu/\#api.megamenu.types.MegaMenuEmits)
| values |
| --- |
| EmitFn<MegaMenuEmitsOptions> |
## MenuItem [\#](https://primevue.org/megamenu/\#api.menuitem)
PrimeVue menu components share a common api to specify the menuitems and submenus.
### Events [\#](https://primevue.org/megamenu/\#api.menuitem.events)
Defines the custom events used by the component's emit.
#### MenuItemCommandEvent [\#](https://primevue.org/megamenu/\#api.menuitem.events.MenuItemCommandEvent)
Custom command event.
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| item | [MenuItem](https://primevue.org/megamenu/#api.options.MenuItem) | Menuitem instance. |
| \[key: string\] | any |  |
### Options [\#](https://primevue.org/megamenu/\#api.options.MenuItem)
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string \| Function | null | Property name or getter function to use as the label of an item. |  |
| icon | string | null | Icon of the item. |  |
| command | Function | null |  |  |
| url | string | null | External link to navigate when item is clicked. |  |
| items | MenuItem\[\] | null | An array of children menuitems. |  |
| disabled | boolean \| Function | false | A boolean or a function to return a boolean to specify if the item is disabled. |  |
| visible | boolean \| Function | true | A boolean or a function to return a boolean to specify if the item is visible. |  |
| target | string | null | Specifies where to open the linked document. |  |
| separator | boolean | false | Defines the item as a separator. |  |
| style | any | null | Inline style of the menuitem. |  |
| class | any | null | Style class of the menuitem. |  |
| key | string | null | Unique identifier of an item. |  |
| \[key: string\] | any | null |  |  |
- MegaMenu
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
- MenuItem
  - Events
  - Options
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Select Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Select
Select is used to choose an item from a collection of options.
## Import [\#](https://primevue.org/select/\#import)
```javascript
import Select from 'primevue/select';
```
Copy
## Basic [\#](https://primevue.org/select/\#basic)
Select is used with the _v-model_ property for two-way value binding along with the _options_ collection. Label and value of an option are defined with the _optionLabel_ and _optionValue_ properties respectively. Note that, when options are simple primitive values such as a string array, no _optionLabel_ and _optionValue_ would be necessary.
Select a City
```markup
<Select v-model="selectedCity" :options="cities" optionLabel="name" placeholder="Select a City" class="w-full md:w-56" />
```
Copy
## Forms [\#](https://primevue.org/select/\#forms)
Select a City
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-full md:w-56">
    <div class="flex flex-col gap-1">
        <Select name="city.name" :options="cities" optionLabel="name" placeholder="Select a City" fluid />
        <Message v-if="$form.city?.name?.invalid" severity="error" size="small" variant="simple">{{ $form.city.name.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Checkmark [\#](https://primevue.org/select/\#checkmark)
An alternative way to highlight the selected option is displaying a checkmark instead.
Select a City
```markup
<Select v-model="selectedCity" :options="cities" optionLabel="name" placeholder="Select a City" checkmark :highlightOnSelect="false" class="w-full md:w-56" />
```
Copy
## Editable [\#](https://primevue.org/select/\#editable)
When _editable_ is present, the input can also be entered with typing.
```markup
<Select v-model="selectedCity" editable :options="cities" optionLabel="name" placeholder="Select a City" class="w-full md:w-56" />
```
Copy
## Group [\#](https://primevue.org/select/\#group)
Options can be grouped when a nested data structures is provided. To define the label of a group _optionGroupLabel_ property is needed and also _optionGroupChildren_ is required to define the property that refers to the children of a group.
Select a City
```markup
<Select v-model="selectedCity" :options="groupedCities" optionLabel="label" optionGroupLabel="label" optionGroupChildren="items" placeholder="Select a City" class="w-full md:w-56">
    <template #optiongroup="slotProps">
        <div class="flex items-center">
            <img :alt="slotProps.option.label" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`mr-2 flag flag-${slotProps.option.code.toLowerCase()}`" style="width: 18px" />
            <div>{{ slotProps.option.label }}</div>
        </div>
    </template>
</Select>
```
Copy
## Template [\#](https://primevue.org/select/\#template)
Select offers multiple slots for customization through templating.
Select a Country
```markup
<Select v-model="selectedCountry" :options="countries" optionLabel="name" placeholder="Select a Country" class="w-full md:w-56">
    <template #value="slotProps">
        <div v-if="slotProps.value" class="flex items-center">
            <img :alt="slotProps.value.label" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`mr-2 flag flag-${slotProps.value.code.toLowerCase()}`" style="width: 18px" />
            <div>{{ slotProps.value.name }}</div>
        </div>
        <span v-else>
            {{ slotProps.placeholder }}
        </span>
    </template>
    <template #option="slotProps">
        <div class="flex items-center">
            <img :alt="slotProps.option.label" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`mr-2 flag flag-${slotProps.option.code.toLowerCase()}`" style="width: 18px" />
            <div>{{ slotProps.option.name }}</div>
        </div>
    </template>
    <template #dropdownicon>
        <i class="pi pi-map" />
    </template>
    <template #header>
        <div class="font-medium p-3">Available Countries</div>
    </template>
    <template #footer>
        <div class="p-3">
            <Button label="Add New" fluid severity="secondary" text size="small" icon="pi pi-plus" />
        </div>
    </template>
</Select>
```
Copy
## Filter [\#](https://primevue.org/select/\#filter)
Select provides built-in filtering that is enabled by adding the _filter_ property.
Select a Country
```markup
<Select v-model="selectedCountry" :options="countries" filter optionLabel="name" placeholder="Select a Country" class="w-full md:w-56">
    <template #value="slotProps">
        <div v-if="slotProps.value" class="flex items-center">
            <img :alt="slotProps.value.label" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`mr-2 flag flag-${slotProps.value.code.toLowerCase()}`" style="width: 18px" />
            <div>{{ slotProps.value.name }}</div>
        </div>
        <span v-else>
            {{ slotProps.placeholder }}
        </span>
    </template>
    <template #option="slotProps">
        <div class="flex items-center">
            <img :alt="slotProps.option.label" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`mr-2 flag flag-${slotProps.option.code.toLowerCase()}`" style="width: 18px" />
            <div>{{ slotProps.option.name }}</div>
        </div>
    </template>
</Select>
```
Copy
## Clear Icon [\#](https://primevue.org/select/\#clearicon)
When _showClear_ is enabled, a clear icon is added to reset the Select.
Select a City
```markup
<Select v-model="selectedCity" :options="cities" showClear optionLabel="name" placeholder="Select a City" class="w-full md:w-56" />
```
Copy
## Loading State [\#](https://primevue.org/select/\#loadingstate)
Loading state is enabled with the _loading_ property.
Loading...
```markup
<Select placeholder="Loading..." loading class="w-full md:w-56" />
```
Copy
## Virtual Scroll [\#](https://primevue.org/select/\#virtualscroll)
VirtualScroller is used to render a long list of options efficiently like 100K records in this demo. The configuration is done with _virtualScrollerOptions_ property, refer to the [VirtualScroller](https://primevue.org/virtualscroller) for more information about the available options as it is used internally by Select.
Select Item
```markup
<Select v-model="selectedItem" :options="items" optionLabel="label" optionValue="value"
    :virtualScrollerOptions="{ itemSize: 38 }" placeholder="Select Item" class="w-full md:w-56" />
```
Copy
## Lazy Virtual Scroll [\#](https://primevue.org/select/\#lazyvirtualscroll)
The virtual scrolling also supports dynamically loading items on demand.
Select Item
```markup
<Select v-model="selectedItem" :options="items" optionLabel="label" optionValue="value" class="w-full md:w-56"
    :virtualScrollerOptions="{ lazy: true, onLazyLoad: onLazyLoad, itemSize: 38, showLoader: true, loading: loading, delay: 250 }" placeholder="Select Item" />
```
Copy
## Filled [\#](https://primevue.org/select/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
Select a City
```markup
<Select v-model="selectedCity" variant="filled" :options="cities" optionLabel="name" placeholder="Select a City" class="w-full md:w-56" />
```
Copy
## Float Label [\#](https://primevue.org/select/\#floatlabel)
A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
Over Label
In Label
On Label
```markup
<FloatLabel class="w-full md:w-56">
    <Select v-model="value1" inputId="over_label" :options="cities" optionLabel="name" class="w-full" />
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel class="w-full md:w-56" variant="in">
    <Select v-model="value2" inputId="in_label" :options="cities" optionLabel="name" class="w-full" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel class="w-full md:w-56" variant="on">
    <Select v-model="value3" inputId="on_label" :options="cities" optionLabel="name" class="w-full" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/select/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
City
```markup
<IftaLabel>
    <Select v-model="selectedCity" inputId="dd-city" :options="cities" optionLabel="name" class="w-full" variant="filled" />
    <label for="dd-city">City</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/select/\#sizes)
Select provides _small_ and _large_ sizes as alternatives to the base.
Small
Normal
Large
```markup
<Select v-model="value1" :options="cities" optionLabel="name" size="small" placeholder="Small" class="w-full md:w-56" />
<Select v-model="value2" :options="cities" optionLabel="name" placeholder="Normal" class="w-full md:w-56" />
<Select v-model="value3" :options="cities" optionLabel="name" size="large" placeholder="Large" class="w-full md:w-56" />
```
Copy
## Invalid [\#](https://primevue.org/select/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
Select a City
Select a City
```markup
<Select v-model="selectedCity1" :options="cities" optionLabel="name" placeholder="Select a City" :invalid="!selectedCity1" class="w-full md:w-56" />
<Select v-model="selectedCity2" :options="cities" optionLabel="name" placeholder="Select a City" :invalid="!selectedCity2" class="w-full md:w-56" variant="filled" />
```
Copy
## Disabled [\#](https://primevue.org/select/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
Select a City
```markup
<Select disabled placeholder="Select a City" class="w-full md:w-56" />
```
Copy
## Accessibility [\#](https://primevue.org/select/\#accessibility)
### Screen Reader
Value to describe the component can either be provided with _aria-labelledby_ or _aria-label_ props. The select element has a _combobox_ role in addition to _aria-haspopup_ and _aria-expanded_ attributes. If the editable option is enabled _aria-autocomplete_ is also added. The relation between the combobox and the popup is created with _aria-controls_ and _aria-activedescendant_ attribute is used to instruct screen reader which option to read during keyboard navigation within the popup list.
The popup list has an id that refers to the _aria-controls_ attribute of the _combobox_ element and uses _listbox_ as the role. Each list item has an _option_ role, an id to match the _aria-activedescendant_ of the input element along with _aria-label_, _aria-selected_ and _aria-disabled_ attributes.
If filtering is enabled, _filterInputProps_ can be defined to give _aria-\*_ props to the filter input element.
```markup
<span id="dd1"></span>Options</span>
<select aria-labelledby="dd1" />
<select aria-label="Options" />
```
Copy
### Closed State Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the select element. |
| _space_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _enter_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _down arrow_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _up arrow_ | Opens the popup and moves visual focus to the selected option, if there is none then last option receives the focus. |
| _any printable character_ | Opens the popup and moves focus to the option whose label starts with the characters being typed, if there is none and select is not editable then first option receives the focus. |
### Popup Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next focusable element in the popup. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page. |
| _shift_ \+ _tab_ | Moves focus to the previous focusable element in the popup. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page. |
| _enter_ | Selects the focused option and closes the popup, then moves focus to the select element. |
| _space_ | Selects the focused option and closes the popup, then moves focus to the select element. |
| _escape_ | Closes the popup, then moves focus to the select element. |
| _down arrow_ | Moves focus to the next option, if there is none then visual focus does not change. |
| _up arrow_ | Moves focus to the previous option, if there is none then visual focus does not change. |
| _alt_ \+ _up arrow_ | Selects the focused option and closes the popup, then moves focus to the select element. |
| _left arrow_ | If the select is editable, removes the visual focus from the current option and moves input cursor to one character left. |
| _right arrow_ | If the select is editable, removes the visual focus from the current option and moves input cursor to one character right. |
| _home_ | If the select is editable, moves input cursor at the end, if not then moves focus to the first option. |
| _end_ | If the select is editable, moves input cursor at the beginning, if not then moves focus to the last option. |
| _pageUp_ | Jumps visual focus to first option. |
| _pageDown_ | Jumps visual focus to last option. |
| _any printable character_ | Moves focus to the option whose label starts with the characters being typed if select is not editable. |
### Filter Input Keyboard Support
| Key | Function |
| --- | --- |
| _down arrow_ | Moves focus to the next option, if there is none then visual focus does not change. |
| _up arrow_ | Moves focus to the previous option, if there is none then visual focus does not change. |
| _left arrow_ | Removes the visual focus from the current option and moves input cursor to one character left. |
| _right arrow_ | Removes the visual focus from the current option and moves input cursor to one character right. |
| _home_ | Moves input cursor at the end, if not then moves focus to the first option. |
| _end_ | Moves input cursor at the beginning, if not then moves focus to the last option. |
| _enter_ | Closes the popup and moves focus to the select element. |
| _escape_ | Closes the popup and moves focus to the select element. |
| _tab_ | Moves focus to the next focusable element in the popup. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page. |
- Import
- Basic
- Forms
- Checkmark
- Editable
- Group
- Template
- Filter
- Clear Icon
- Loading State
- Virtual Scroll
- Lazy Virtual Scroll
- Filled
- Float Label
- Ifta Label
- Sizes
- Invalid
- Disabled
- Accessibility
# Select API
API defines helper props, events and others for the PrimeVue Select module.
## Select [\#](https://primevue.org/select/\#api.select)
Select is used to choose an item from a collection of options.
### Props [\#](https://primevue.org/select/\#api.select.props)
Defines valid properties in Select component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| options | any\[\] | null | An array of select items to display as the available options. |  |
| optionLabel | string \| Function | null | Property name or getter function to use as the label of an option. |  |
| optionValue | string \| Function | null | Property name or getter function to use as the value of an option, defaults to the option itself when not defined. |  |
| optionDisabled | string \| Function | null | Property name or getter function to use as the disabled flag of an option, defaults to false when not defined. |  |
| optionGroupLabel | string \| Function | null | Property name or getter function to use as the label of an option group. |  |
| optionGroupChildren | string \| Function | null | Property name or getter function that refers to the children options of option group. |  |
| scrollHeight | string | 14rem | Height of the viewport, a scrollbar is defined if height of list exceeds this value. |  |
| filter | boolean | false | When specified, displays a filter input at header. |  |
| filterPlaceholder | string | null | Placeholder text to show when filter input is empty. |  |
| filterLocale | string | null | Locale to use in filtering. The default locale is the host environment's current locale. |  |
| filterMatchMode | HintedString<"startsWith" \| "contains" \| "endsWith"> | contains | Defines the filtering algorithm to use when searching the options. |  |
| filterFields | string\[\] | null | Fields used when filtering the options, defaults to optionLabel. |  |
| editable | boolean | false | When present, custom value instead of predefined options can be entered using the editable input field. |  |
| placeholder | string | null | Default text to display when no option is selected. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| dataKey | string | null | A property to uniquely identify an option. |  |
| showClear | boolean | false | When enabled, a clear icon is displayed to clear the value. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| inputId | string | null |  |  |
| inputStyle | object | null |  |  |
| inputClass | string \| object | null |  |  |
| labelId | string | null | Identifier of the underlying label element. |  |
| labelStyle | object | null | Inline style of the label field. |  |
| labelClass | string \| object | null | Style class of the label field. |  |
| panelStyle | object | null |  |  |
| panelClass | string \| object | null |  |  |
| overlayStyle | object | null | Inline style of the overlay. |  |
| overlayClass | string \| object | null | Style class of the overlay. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. |  |
| loading | boolean | false | Whether the select is in loading state. |  |
| clearIcon | string | null | Icon to display in clear button. |  |
| dropdownIcon | string | null | Icon to display in the select. |  |
| filterIcon | string | null | Icon to display in filter input. |  |
| loadingIcon | string | null | Icon to display in loading state. |  |
| resetFilterOnHide | boolean | false | Clears the filter value when hiding the select. |  |
| resetFilterOnClear | boolean | false | Clears the filter value when clicking on the clear icon. |  |
| virtualScrollerOptions | any | null | Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it. |  |
| autoOptionFocus | boolean | false | Whether to focus on the first visible or selected element when the overlay panel is shown. |  |
| autoFilterFocus | boolean | false | Whether to focus on the filter element when the overlay panel is shown. |  |
| selectOnFocus | boolean | false | When enabled, the focused option is selected. |  |
| focusOnHover | boolean | true | When enabled, the focus is placed on the hovered option. |  |
| highlightOnSelect | boolean | true | Whether the selected option will be add highlight class. |  |
| checkmark | boolean | false | Whether the selected option will be shown with a check mark. |  |
| filterMessage | string | '{0} results are available' | Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration. |  |
| selectionMessage | string | '{0} items selected' | Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySelectionMessage | string | No selected item | Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration. |  |
| emptyFilterMessage | string | No results found | Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration. |  |
| emptyMessage | string | No available options | Text to display when there are no options available. Defaults to value from PrimeVue locale configuration. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying input element. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SelectPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/select/\#api.select.emits)
Defines valid emits in Select component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [SelectChangeEvent](https://primevue.org/select/#api.select.events.SelectChangeEvent) | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| before-show |  | void | Callback to invoke before the overlay is shown. |  |
| before-hide |  | void | Callback to invoke before the overlay is hidden. |  |
| show |  | void | Callback to invoke when the overlay is shown. |  |
| hide |  | void | Callback to invoke when the overlay is hidden. |  |
| filter | event: [SelectFilterEvent](https://primevue.org/select/#api.select.events.SelectFilterEvent) | void | Callback to invoke on filter input. |  |
### Slots [\#](https://primevue.org/select/\#api.select.slots)
Defines valid slots in Select component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| value | scope: {<br>value: any, // Value of the componentplaceholder: string, // Placeholder prop value<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom value template. |  |
| header | scope: {<br>value: any, // Value of the componentoptions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template of panel. |  |
| footer | scope: {<br>value: any, // Value of the componentoptions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template of panel. |  |
| option | scope: {<br>option: any, // Option instanceselected: boolean, // Selection stateindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option template. |  |
| optiongroup | scope: {<br>option: any, // Option instanceindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option group template. |  |
| emptyfilter |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty filter template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template. |  |
| content | scope: {<br>items: any, // An array of objects to display for virtualscrollerstyleClass: string, // Style class of the componentcontentRef: (el: any) â‡’ void, // Referance of the contentgetItemOptions: (index: number) â‡’ VirtualScrollerItemOptions, // Options of the items<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| loader | scope: {<br>options: any, // Options of the loader items for virtualscroller<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loader template. |  |
| clearicon | scope: {<br>clearCallback: (event: Event) â‡’ void, // Clear icon click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom clear icon template. |  |
| dropdownicon | scope: {<br>class: any, // Style class of the select icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom select icon template. |  |
| loadingicon | scope: {<br>class: any, // Style class of the loading icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading icon template. |  |
| filtericon | scope: {<br>class: any, // Style class of the filter icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter icon template. |  |
### Events [\#](https://primevue.org/select/\#api.select.events)
Defines the custom events used by the component's emit.
#### SelectChangeEvent [\#](https://primevue.org/select/\#api.select.events.SelectChangeEvent)
Custom change event.
See [change](https://primevue.org/select/#api.select.emitsoptions.change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| value | any | Selected option value |
#### SelectFilterEvent [\#](https://primevue.org/select/\#api.select.events.SelectFilterEvent)
Custom filter event.
See [filter](https://primevue.org/select/#api.select.emitsoptions.filter)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| value | any | Filter value |
### Interfaces [\#](https://primevue.org/select/\#api.select.interfaces)
Defines the custom interfaces used by the module.
#### SelectPassThroughMethodOptions [\#](https://primevue.org/select/\#api.select.interfaces.SelectPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SelectProps](https://primevue.org/select/#api.select.interfaces.SelectProps) | null | Defines valid properties. |
| state | [SelectState](https://primevue.org/select/#api.select.interfaces.SelectState) | null | Defines current inline state. |
| parent | any | null | Defines parent instance. |
| context | [SelectContext](https://primevue.org/select/#api.select.interfaces.SelectContext) | null | Defines current options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### SelectSharedPassThroughMethodOptions [\#](https://primevue.org/select/\#api.select.interfaces.SelectSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [SelectProps](https://primevue.org/select/#api.select.interfaces.SelectProps) | null | Defines valid properties. |
| state | [SelectState](https://primevue.org/select/#api.select.interfaces.SelectState) | null | Defines current inline state. |
#### SelectPassThroughOptions [\#](https://primevue.org/select/\#api.select.interfaces.SelectPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| label | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the label's DOM element. |
| clearIcon | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the clear icon's DOM element. |
| dropdown | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the dropdown's DOM element. |
| dropdownIcon | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the dropdown icon's DOM element. |
| loadingIcon | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the loading icon's DOM element. |
| overlay | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the overlay's DOM element. |
| header | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header's DOM element. |
| pcFilterContainer | any | null | Used to pass attributes to the IconField component. |
| pcFilter | any | null | Used to pass attributes to the InputText component. |
| pcFilterIconContainer | any | null | Used to pass attributes to the InputIcon component. |
| filterIcon | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the filter icon's DOM element. |
| listContainer | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the list container's DOM element. |
| virtualScroller | any | null | Used to pass attributes to the VirtualScroller component. |
| list | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the list's DOM element. |
| optionGroup | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option group's DOM element. |
| optionGroupLabel | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option group label's DOM element. |
| option | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option's DOM element. |
| optionLabel | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option label's DOM element. |
| optionCheckIcon | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option check icon's DOM element. |
| optionBlankIcon | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the option blank icon's DOM element. |
| emptyMessage | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the empty message's DOM element. |
| hiddenFirstFocusableEl | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden first focusable element's DOM element. |
| hiddenFilterResult | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden filter result's DOM element. |
| hiddenEmptyMessage | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden empty message's DOM element. |
| hiddenSelectedMessage | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden selected message's DOM element. |
| hiddenLastFocusableEl | [SelectPassThroughOptionType<T>](https://primevue.org/select/#api.select.types.SelectPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the hidden last focusable element's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [SelectPassThroughTransitionType<any>](https://primevue.org/select/#api.select.types.SelectPassThroughTransitionType%3Cany%3E) | null | Used to control Vue Transition API. |
#### SelectPassThroughAttributes [\#](https://primevue.org/select/\#api.select.interfaces.SelectPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### SelectState [\#](https://primevue.org/select/\#api.select.interfaces.SelectState)
Defines current inline state in Select component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| focused | boolean | false | Current focused state as a boolean. |
| focusedOptionIndex | number | -1 | Current focused item index as a number. |
| filterValue | string | null | Current filter value state as a string. |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |
#### SelectContext [\#](https://primevue.org/select/\#api.select.interfaces.SelectContext)
Defines current options in Select component.
| name | type | default | description |
| --- | --- | --- | --- |
| option | any | null | Current item option. |
| index | number | null | Current item index. |
| selected | boolean | false | Current selection state of the item as a boolean. |
| focused | boolean | false | Current focus state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |
## Types [\#](https://primevue.org/select/\#api.select.types)
Defines the custom types used by the module.
#### SelectPassThroughOptionType [\#](https://primevue.org/select/\#api.select.types.SelectPassThroughOptionType)
| values |
| --- |
| SelectPassThroughAttributes \| (options: SelectPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### SelectPassThroughTransitionType [\#](https://primevue.org/select/\#api.select.types.SelectPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: SelectPassThroughMethodOptions) => TransitionProps \| undefined |
#### SelectEmits [\#](https://primevue.org/select/\#api.select.types.SelectEmits)
| values |
| --- |
| EmitFn<SelectEmitsOptions> |
- Select
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Focus Trap Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
# Focus Trap
Focus Trap keeps focus within a certain DOM element while tabbing.
## Import [\#](https://primevue.org/focustrap/\#import)
```javascript
import FocusTrap from 'primevue/focustrap';
app.directive('focustrap', FocusTrap);
```
Copy
## Basic [\#](https://primevue.org/focustrap/\#basic)
FocusTrap is enabled by attaching the directive with the v- prefix.
I agree to the terms and conditions.
Submit
```markup
<div v-focustrap class="w-full sm:w-80 flex flex-col gap-6">
    <IconField>
        <InputIcon>
            <i class="pi pi-user" />
        </InputIcon>
        <InputText id="input" v-model="name" type="text" placeholder="Name" autofocus fluid />
    </IconField>
    <IconField>
        <InputIcon>
            <i class="pi pi-envelope" />
        </InputIcon>
        <InputText id="email" v-model="email" type="email" placeholder="Email" fluid />
    </IconField>
    <div class="flex items-center gap-2">
        <Checkbox id="accept" v-model="accept" name="accept" value="Accept" />
        <label for="accept">I agree to the terms and conditions.</label>
    </div>
    <Button type="submit" label="Submit" class="mt-2" />
</div>
```
Copy
- Import
- Basic
# Focus Trap API
API defines helper props, events and others for the PrimeVue Focus Trap module.
## FocusTrap [\#](https://primevue.org/focustrap/\#api.focustrap)
Focus Trap keeps focus within a certain DOM element while tabbing.
### Interfaces [\#](https://primevue.org/focustrap/\#api.focustrap.interfaces)
Defines the custom interfaces used by the module.
#### FocusTrapOptions [\#](https://primevue.org/focustrap/\#api.focustrap.interfaces.FocusTrapOptions)
Defines options of FocusTrap.
| name | type | default | description |
| --- | --- | --- | --- |
| disabled | boolean | false | When present, it specifies that the directive should be disabled. |
| autoFocus | boolean | true | When disabled, focustrap will not focus by default. |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |
| pt | PassThrough<FocusTrapDirectivePassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |
#### FocusTrapDirectivePassThroughOptions [\#](https://primevue.org/focustrap/\#api.focustrap.interfaces.FocusTrapDirectivePassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [FocusTrapDirectivePassThroughOptionType](https://primevue.org/focustrap/#api.focustrap.types.FocusTrapDirectivePassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| firstFocusableElement | [FocusTrapDirectivePassThroughOptionType](https://primevue.org/focustrap/#api.focustrap.types.FocusTrapDirectivePassThroughOptionType) | null | Used to pass attributes to the first focusable element's DOM element. |
| lastFocusableElement | [FocusTrapDirectivePassThroughOptionType](https://primevue.org/focustrap/#api.focustrap.types.FocusTrapDirectivePassThroughOptionType) | null | Used to pass attributes to the last focusable element's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### FocusTrapDirectivePassThroughAttributes [\#](https://primevue.org/focustrap/\#api.focustrap.interfaces.FocusTrapDirectivePassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### FocusTrapDirectiveBinding [\#](https://primevue.org/focustrap/\#api.focustrap.interfaces.FocusTrapDirectiveBinding)
Binding of FocusTrap directive.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | null \| ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, "", Object, any> \| Record<string, any> | null |  |
| oldValue | any | null |  |
| arg | string | null |  |
| dir | ObjectDirective<any, any, string, string> | null |  |
| value | [FocusTrapOptions](https://primevue.org/focustrap/#api.focustrap.interfaces.FocusTrapOptions) | null | Value of the FocusTrap. |
## Types [\#](https://primevue.org/focustrap/\#api.focustrap.types)
Defines the custom types used by the module.
#### FocusTrapDirectivePassThroughOptionType [\#](https://primevue.org/focustrap/\#api.focustrap.types.FocusTrapDirectivePassThroughOptionType)
| values |
| --- |
| FocusTrapDirectivePassThroughAttributes \| null \| undefined |
- FocusTrap
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Organization Chart
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# OrganizationChart
OrganizationChart visualizes hierarchical organization data.
## Import [\#](https://primevue.org/organizationchart/\#import)
```javascript
import OrganizationChart from 'primevue/organizationchart';
```
Copy
## Basic [\#](https://primevue.org/organizationchart/\#basic)
OrganizationChart requires a collection of _TreeNode_ instances as a _value_.
|     |     |     |     |
| --- | --- | --- | --- |
| Argentina |
|  |
|  |  |  |  |
| |     |     |     |     |
| --- | --- | --- | --- |
| Argentina |
|  |
|  |  |  |  |
| |     |
| --- |
| Argentina |
|  | | |     |
| --- |
| Croatia |
|  | | | |     |     |     |     |
| --- | --- | --- | --- |
| France |
|  |
|  |  |  |  |
| |     |
| --- |
| France |
|  | | |     |
| --- |
| Morocco |
|  | | |
```markup
<OrganizationChart :value="data">
    <template #default="slotProps">
        <span>{{ slotProps.node.label }}</span>
    </template>
</OrganizationChart>
```
Copy
## Template [\#](https://primevue.org/organizationchart/\#template)
The _type_ property of an OrganizationChartNode is used to map a template to a node. If it is undefined, the default template is used.
|     |     |     |     |
| --- | --- | --- | --- |
| ![Argentina](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)<br>Argentina |
|  |
|  |  |  |  |
| |     |     |     |     |
| --- | --- | --- | --- |
| ![Argentina](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)<br>Argentina |
|  |
|  |  |  |  |
| |     |
| --- |
| ![Argentina](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)<br>Argentina |
|  | | |     |
| --- |
| ![Croatia](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)<br>Croatia |
|  | | | |     |     |     |     |
| --- | --- | --- | --- |
| ![France](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)<br>France |
|  |
|  |  |  |  |
| |     |
| --- |
| ![France](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)<br>France |
|  | | |     |
| --- |
| ![Morocco](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)<br>Morocco |
|  | | |
```markup
<OrganizationChart :value="data" collapsible>
    <template #country="slotProps">
        <div class="flex flex-col items-center">
            <img :alt="slotProps.node.label" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`w-2rem flag flag-${slotProps.node.data}`" />
            <div class="mt-4 font-medium text-lg">{{ slotProps.node.label }}</div>
        </div>
    </template>
    <template #default="slotProps">
        <span>{{slotProps.node.data.label}}</span>
    </template>
</OrganizationChart>
```
Copy
## Selection [\#](https://primevue.org/organizationchart/\#selection)
Selection is enabled by defining the _selectionMode_ to either "single" or "multiple" and specifying the _selectionKeys_ with the v-model directive. Note that selection on a particular node can be disabled if the _selectable_ is false on the node instance.
|     |     |     |     |
| --- | --- | --- | --- |
| ![Amy Elsner](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)Amy ElsnerCEO |
|  |
|  |  |  |  |
| |     |     |     |     |
| --- | --- | --- | --- |
| ![Anna Fali](https://primefaces.org/cdn/primevue/images/avatar/annafali.png)Anna FaliCMO |
|  |
|  |  |  |  |
| |     |
| --- |
| Sales |
|  | | |     |
| --- |
| Marketing |
|  | | | |     |     |     |     |
| --- | --- | --- | --- |
| ![Stephen Shaw](https://primefaces.org/cdn/primevue/images/avatar/stephenshaw.png)Stephen ShawCTO |
|  |
|  |  |  |  |
| |     |
| --- |
| Development |
|  | | |     |
| --- |
| UI/UX Design |
|  | | |
```markup
<OrganizationChart v-model:selectionKeys="selection" :value="data" collapsible selectionMode="multiple">
    <template #person="slotProps">
        <div class="flex flex-col">
            <div class="flex flex-col items-center">
                <img :alt="slotProps.node.data.name" :src="slotProps.node.data.image" class="mb-4 w-12 h-12" />
                <span class="font-bold mb-2">{{ slotProps.node.data.name }}</span>
                <span>{{ slotProps.node.data.title }}</span>
            </div>
        </div>
    </template>
    <template #default="slotProps">
        <span>{{ slotProps.node.label }}</span>
    </template>
</OrganizationChart>
```
Copy
## Colored [\#](https://primevue.org/organizationchart/\#colored)
Styling a specific node is configured with _styleClass_ and _style_ options of a TreeNode.
|     |     |     |     |
| --- | --- | --- | --- |
| ![Amy Elsner](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)Amy ElsnerCEO |
|  |
|  |  |  |  |
| |     |     |     |     |
| --- | --- | --- | --- |
| ![Anna Fali](https://primefaces.org/cdn/primevue/images/avatar/annafali.png)Anna FaliCMO |
|  |
|  |  |  |  |
| |     |
| --- |
| Sales |
|  | | |     |
| --- |
| Marketing |
|  | | | |     |     |     |     |
| --- | --- | --- | --- |
| ![Stephen Shaw](https://primefaces.org/cdn/primevue/images/avatar/stephenshaw.png)Stephen ShawCTO |
|  |
|  |  |  |  |
| |     |
| --- |
| Development |
|  | | |     |
| --- |
| UI/UX Design |
|  | | |
```markup
<OrganizationChart :value="data" collapsible>
    <template #person="slotProps">
        <div class="flex flex-col">
            <div class="flex flex-col items-center">
                <img :alt="slotProps.node.data.name" :src="slotProps.node.data.image" class="mb-4 w-12 h-12" />
                <span class="font-bold mb-2">{{ slotProps.node.data.name }}</span>
                <span>{{ slotProps.node.data.title }}</span>
            </div>
        </div>
    </template>
    <template #default="slotProps">
        <span>{{ slotProps.node.label }}</span>
    </template>
</OrganizationChart>
```
Copy
## Accessibility [\#](https://primevue.org/organizationchart/\#accessibility)
### Screen Reader
Component currently uses a table based implementation and does not provide high level of screen reader support, a nested list implementation replacement is planned with aria roles and attributes aligned to a tree widget for high level of reader support in the upcoming versions.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the focusable elements within the chart. |
| _enter_ | Toggles the expanded state of a node. |
| _space_ | Toggles the expanded state of a node. |
- Import
- Basic
- Template
- Selection
- Colored
- Accessibility
# OrganizationChart API
API defines helper props, events and others for the PrimeVue OrganizationChart module.
## OrganizationChart [\#](https://primevue.org/organizationchart/\#api.organizationchart)
OrganizationChart visualizes hierarchical organization data.
### Props [\#](https://primevue.org/organizationchart/\#api.organizationchart.props)
Defines valid properties in OrganizationChart component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | [OrganizationChartNode](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartNode) | null | Value of the component. |  |
| selectionKeys | [OrganizationChartSelectionKeys](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartSelectionKeys) | null | A map instance of key-value pairs to represented the selected nodes. |  |
| selectionMode | HintedString<"single" \| "multiple"> | null | Type of the selection. |  |
| collapsedKeys | [OrganizationChartCollapsedKeys](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartCollapsedKeys) | null | A map instance of key-value pairs to represented the collapsed nodes. |  |
| collapsible | boolean | false | Whether the nodes can be expanded or toggled. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<OrganizationChartPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/organizationchart/\#api.organizationchart.emits)
Defines valid emits in OrganizationChart component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:selectionKeys | value: any | void | Emitted when the value changes. |  |
| update:collapsedKeys | value: boolean | void | Emitted when the value changes. |  |
| node-select | node: [OrganizationChartNode](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartNode) | void | Callback to invoke when a suggestion is selected. |  |
| node-unselect | node: [OrganizationChartNode](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartNode) | void | Callback to invoke when a node is unselected. |  |
| node-expand | node: [OrganizationChartNode](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartNode) | void | Callback to invoke when a node is expanded. |  |
| node-collapsed | node: [OrganizationChartNode](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartNode) | void | Callback to invoke when a node is collapsed. |  |
### Slots [\#](https://primevue.org/organizationchart/\#api.organizationchart.slots)
Defines valid slots in OrganizationChart component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default | scope: {<br>node: any, // Current node<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| togglericon | scope: {<br>expanded: boolean, // Curent state of the node<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| toggleicon | scope: {<br>expanded: boolean, // Curent state of the node<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom toggler icon template. |  |
### Interfaces [\#](https://primevue.org/organizationchart/\#api.organizationchart.interfaces)
Defines the custom interfaces used by the module.
#### OrganizationChartPassThroughMethodOptions [\#](https://primevue.org/organizationchart/\#api.organizationchart.interfaces.OrganizationChartPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [OrganizationChartProps](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartProps) | null | Defines valid properties. |
| state | [OrganizationChartState](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartState) | null | Defines current inline state. |
| context | [OrganizationChartContext](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### OrganizationChartNode [\#](https://primevue.org/organizationchart/\#api.organizationchart.interfaces.OrganizationChartNode)
Defines valid properties in OrganizationChartNode.
| name | type | default | description |
| --- | --- | --- | --- |
| key | any | null | Unique identifier of the node. (required) |
| type | string | null | Type of the node to match a template. |
| styleClass | string | null | Style class of the node content. |
| data | any | null | Data represented by the node. |
| selectable | boolean | true | Whether node is selectable when selection is enabled. |
| collapsible | boolean | true | Whether node is collapsible when node expansion is enabled. |
| children | [OrganizationChartNode\[\]](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartNode[]) | null | Children nodes array. |
| \[key: string\] | any | null |  |
#### OrganizationChartSelectionKeys [\#](https://primevue.org/organizationchart/\#api.organizationchart.interfaces.OrganizationChartSelectionKeys)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### OrganizationChartCollapsedKeys [\#](https://primevue.org/organizationchart/\#api.organizationchart.interfaces.OrganizationChartCollapsedKeys)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### OrganizationChartPassThroughOptions [\#](https://primevue.org/organizationchart/\#api.organizationchart.interfaces.OrganizationChartPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| table | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the table's DOM element. |
| body | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the body's DOM element. |
| row | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the row' DOM element. |
| cell | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the cell's DOM element. |
| node | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the node's DOM element. |
| nodeToggleButton | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the node toggle button's DOM element. |
| nodeToggleButtonIcon | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the node toggle button icon's DOM element. |
| connectors | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the connectors's DOM element. |
| lineCell | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the lineCell's DOM element. |
| connectorDown | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the connector down's DOM element. |
| connectorLeft | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the connector left's DOM element. |
| connectorRight | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the connector right's DOM element. |
| nodeChildren | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the node children's DOM element. |
| nodeCell | [OrganizationChartPassThroughOptionType](https://primevue.org/organizationchart/#api.organizationchart.types.OrganizationChartPassThroughOptionType) | null | Used to pass attributes to the nodeCell's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### OrganizationChartPassThroughAttributes [\#](https://primevue.org/organizationchart/\#api.organizationchart.interfaces.OrganizationChartPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### OrganizationChartState [\#](https://primevue.org/organizationchart/\#api.organizationchart.interfaces.OrganizationChartState)
Defines current inline state in OrganizationChart component.
| name | type | default | description |
| --- | --- | --- | --- |
| d\_collapsedKeys | [OrganizationChartCollapsedKeys](https://primevue.org/organizationchart/#api.organizationchart.interfaces.OrganizationChartCollapsedKeys) | false | Current collapsed keys' state. |
#### OrganizationChartContext [\#](https://primevue.org/organizationchart/\#api.organizationchart.interfaces.OrganizationChartContext)
Defines current options in OrganizationChart component.
| name | type | default | description |
| --- | --- | --- | --- |
| expanded | boolean | false | Current focus expanded of the node as a boolean. |
| selectable | boolean | false | Current selectable state of the node as a boolean. |
| selected | boolean | false | Current selection state of the node as a boolean. |
| toggleable | boolean | false | Current toggleable state of the node as a boolean. |
| active | boolean | false | Current active state of the node as a boolean. |
| lineTop | boolean | false | Current being top line state of the node as a boolean. |
## Types [\#](https://primevue.org/organizationchart/\#api.organizationchart.types)
Defines the custom types used by the module.
#### OrganizationChartPassThroughOptionType [\#](https://primevue.org/organizationchart/\#api.organizationchart.types.OrganizationChartPassThroughOptionType)
| values |
| --- |
| OrganizationChartPassThroughAttributes \| (options: OrganizationChartPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### OrganizationChartEmits [\#](https://primevue.org/organizationchart/\#api.organizationchart.types.OrganizationChartEmits)
| values |
| --- |
| EmitFn<OrganizationChartEmitsOptions> |
- OrganizationChart
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## SelectButton Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# SelectButton
SelectButton is used to choose single or multiple items from a list using buttons.
## Import [\#](https://primevue.org/SelectButton/\#import)
```javascript
import SelectButton from 'primevue/selectbutton';
```
Copy
## Basic [\#](https://primevue.org/SelectButton/\#basic)
SelectButton is used with the _v-model_ property for two-way value binding along with the _options_ collection. Label and value of an option are defined with the _optionLabel_ and _optionValue_ properties respectively. Note that, when options are simple primitive values such as a string array, no _optionLabel_ and _optionValue_ would be necessary.
One-WayReturn
```markup
<SelectButton v-model="value" :options="options" />
```
Copy
## Forms [\#](https://primevue.org/SelectButton/\#forms)
SelectButton integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
One-WayReturn
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col gap-1">
        <SelectButton name="selection" :options="options" />
        <Message v-if="$form.selection?.invalid" severity="error">{{ $form.selection.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Multiple [\#](https://primevue.org/SelectButton/\#multiple)
SelectButton allows selecting only one item by default and setting _multiple_ option enables choosing more than one item. In multiple case, model property should be an array.
Option 1Option 2Option 3
```markup
<SelectButton v-model="value" :options="options" optionLabel="name" multiple aria-labelledby="multiple" />
```
Copy
## Template [\#](https://primevue.org/SelectButton/\#template)
Label of an option is used as the display text of an item by default, for custom content support define an _option_ template that gets the option instance as a parameter.
```markup
<SelectButton v-model="value" :options="options" optionLabel="value" dataKey="value" aria-labelledby="custom">
    <template #option="slotProps">
        <i :class="slotProps.option.icon"></i>
    </template>
</SelectButton>
```
Copy
## Sizes [\#](https://primevue.org/SelectButton/\#sizes)
SelectButton provides _small_ and _large_ sizes as alternatives to the base.
BeginnerExpert
BeginnerExpert
BeginnerExpert
```markup
<SelectButton v-model="value1" :options="options" size="small" />
<SelectButton v-model="value2" :options="options" />
<SelectButton v-model="value3" :options="options" size="large" />
```
Copy
## Invalid [\#](https://primevue.org/SelectButton/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
One-WayReturn
```markup
<SelectButton v-model="value" :options="options" aria-labelledby="basic" allowEmpty :invalid="value === null"  />
```
Copy
## Disabled [\#](https://primevue.org/SelectButton/\#disabled)
When _disabled_ is present, the element cannot be edited and focused entirely. Certain options can also be disabled using the _optionDisabled_ property.
OffOn
Option 1Option 2
```markup
<SelectButton v-model="value" :options="options" disabled />
<SelectButton v-model="value" :options="options2" optionDisabled="constant" optionLabel="name" />
```
Copy
## Accessibility [\#](https://primevue.org/SelectButton/\#accessibility)
### Screen Reader
SelectButton component uses ToggleButton internally and has _group_ role. Value to describe the component can be provided via _aria-labelledby_ property.
### Keyboard Support
Keyboard interaction is derived from the native browser handling of checkboxs in a group.
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element in the page tab sequence. |
| _space_ | Toggles the checked state of a button. |
- Import
- Basic
- Forms
- Multiple
- Template
- Sizes
- Invalid
- Disabled
- Accessibility
# SelectButton API
API defines helper props, events and others for the PrimeVue SelectButton module.
## SelectButton [\#](https://primevue.org/SelectButton/\#api.selectbutton)
SelectButton is used to choose single or multiple items from a list using buttons.
### Props [\#](https://primevue.org/SelectButton/\#api.selectbutton.props)
Defines valid properties in SelectButton component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| options | any\[\] | null | An array of selectitems to display as the available options. |  |
| optionLabel | string \| Function | null | Property name or getter function to use as the label of an option. |  |
| optionValue | string \| Function | null | Property name or getter function to use as the value of an option, defaults to the option itself when not defined. |  |
| optionDisabled | string \| Function | null | Property name or getter function to use as the disabled flag of an option, defaults to false when not defined. |  |
| multiple | boolean | false | When specified, allows selecting multiple values. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the element should be disabled. |  |
| dataKey | string | null | A property to uniquely identify an option. |  |
| allowEmpty | boolean | true | Whether selection can be cleared. |  |
| ariaLabelledby | string | null | Identifier of the underlying element. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SelectButtonPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/SelectButton/\#api.selectbutton.emits)
Defines valid emits in SelectButton component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [SelectButtonChangeEvent](https://primevue.org/selectbutton/#api.selectbutton.events.SelectButtonChangeEvent) | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke on focus. |  |
| blur | event: Event | void | Callback to invoke on blur. |  |
### Slots [\#](https://primevue.org/SelectButton/\#api.selectbutton.slots)
Defines valid slots in SelectButton component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| option | scope: {<br>option: any, // Option instanceindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each option. |  |
### Events [\#](https://primevue.org/SelectButton/\#api.selectbutton.events)
Defines the custom events used by the component's emit.
#### SelectButtonChangeEvent [\#](https://primevue.org/SelectButton/\#api.selectbutton.events.SelectButtonChangeEvent)
Custom change event.
See [change](https://primevue.org/selectbutton/#api.selectbutton.emitsoptions.change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| value | any | Single value or an array of values that are selected. |
### Interfaces [\#](https://primevue.org/SelectButton/\#api.selectbutton.interfaces)
Defines the custom interfaces used by the module.
#### SelectButtonPassThroughMethodOptions [\#](https://primevue.org/SelectButton/\#api.selectbutton.interfaces.SelectButtonPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SelectButtonProps](https://primevue.org/selectbutton/#api.selectbutton.interfaces.SelectButtonProps) | null | Defines valid properties. |
| state | [SelectButtonState](https://primevue.org/selectbutton/#api.selectbutton.interfaces.SelectButtonState) | null | Defines current inline state. |
| context | [SelectButtonContext](https://primevue.org/selectbutton/#api.selectbutton.interfaces.SelectButtonContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### SelectButtonPassThroughOptions [\#](https://primevue.org/SelectButton/\#api.selectbutton.interfaces.SelectButtonPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [SelectButtonPassThroughOptionType](https://primevue.org/selectbutton/#api.selectbutton.types.SelectButtonPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcToggleButton | [SelectButtonPassThroughOptionType](https://primevue.org/selectbutton/#api.selectbutton.types.SelectButtonPassThroughOptionType) | null | Used to pass attributes to the ToggleButton component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### SelectButtonPassThroughAttributes [\#](https://primevue.org/SelectButton/\#api.selectbutton.interfaces.SelectButtonPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### SelectButtonState [\#](https://primevue.org/SelectButton/\#api.selectbutton.interfaces.SelectButtonState)
Defines current inline state in SelectButton component.
| name | type | default | description |
| --- | --- | --- | --- |
| focusedIndex | number | null | FocusedIndex state as a number. |
#### SelectButtonContext [\#](https://primevue.org/SelectButton/\#api.selectbutton.interfaces.SelectButtonContext)
Defines current options in SelectButton component.
| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | false | Current active state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |
| option | any | null | Available option. |
## Types [\#](https://primevue.org/SelectButton/\#api.selectbutton.types)
Defines the custom types used by the module.
#### SelectButtonPassThroughOptionType [\#](https://primevue.org/SelectButton/\#api.selectbutton.types.SelectButtonPassThroughOptionType)
| values |
| --- |
| SelectButtonPassThroughAttributes \| (options: SelectButtonPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### SelectButtonEmits [\#](https://primevue.org/SelectButton/\#api.selectbutton.types.SelectButtonEmits)
| values |
| --- |
| EmitFn<SelectButtonEmitsOptions> |
- SelectButton
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## MeterGroup Component Overview
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# MeterGroup
MeterGroup displays scalar measurements within a known range.
## Import [\#](https://primevue.org/metergroup/\#import)
```javascript
import MeterGroup from 'primevue/metergroup';
```
Copy
## Basic [\#](https://primevue.org/metergroup/\#basic)
MeterGroup requires a _value_ as the data to display where each item in the collection should be a type of _MeterItem_.
1. Space used (15%)
```markup
<MeterGroup :value="value" />
```
Copy
## Multiple [\#](https://primevue.org/metergroup/\#multiple)
Adding more items to the array displays the meters in a group.
1. Apps (16%)
2. Messages (8%)
3. Media (24%)
4. System (10%)
```markup
<MeterGroup :value="value" />
```
Copy
## Icon [\#](https://primevue.org/metergroup/\#icon)
Icons can be displayed next to the labels instead of the default marker.
1. Apps (16%)
2. Messages (8%)
3. Media (24%)
4. System (10%)
```markup
<MeterGroup :value="value" />
```
Copy
## Label [\#](https://primevue.org/metergroup/\#label)
The position of the labels relative to the meters is defined using the _labelPosition_ property. The default orientation of the labels is horizontal, and the vertical alternative is available through the _labelOrientation_ option.
1. Apps (16%)
2. Messages (8%)
3. Media (24%)
4. System (10%)
```markup
<MeterGroup :value="value" labelPosition="start" labelOrientation="vertical" />
```
Copy
## Vertical [\#](https://primevue.org/metergroup/\#vertical)
Layout of the MeterGroup is configured with the _orientation_ property that accepts either _horizontal_ or _vertical_ as available options.
1. Apps (24%)
2. Messages (16%)
3. Media (24%)
4. System (12%)
```markup
<MeterGroup :value="value" orientation="vertical" labelOrientation="vertical" />
```
Copy
## Min-Max [\#](https://primevue.org/metergroup/\#minmax)
Boundaries are configured with the _min_ and _max_ values whose defaults are 0 and 100 respectively.
1. Apps (8%)
2. Messages (4%)
3. Media (12%)
4. System (5%)
```markup
<MeterGroup :value="value" :max="200"  />
```
Copy
## Template [\#](https://primevue.org/metergroup/\#template)
MeterGroup provides templating support for labels, meter items, and content around the meters.
Apps25%
Messages15%
Media20%
System10%
Storage70%1TB
Manage StorageUpdate Plan
```markup
<MeterGroup :value="value" labelPosition="start">
    <template #label="{ value }">
        <div class="flex flex-wrap gap-4">
            <template v-for="val of value" :key="val.label">
                <Card class="flex-1 border border-surface shadow-none">
                    <template #content>
                        <div class="flex justify-between gap-8">
                            <div class="flex flex-col gap-1">
                                <span class="text-surface-500 dark:text-surface-400 text-sm">{{ val.label }}</span>
                                <span class="font-bold text-lg">{{ val.value }}%</span>
                            </div>
                            <span class="w-8 h-8 rounded-full inline-flex justify-center items-center text-center" :style="{ backgroundColor: `${val.color1}`, color: '#ffffff' }">
                                <i :class="val.icon" />
                            </span>
                        </div>
                    </template>
                </Card>
            </template>
        </div>
    </template>
    <template #meter="slotProps">
        <span :class="slotProps.class" :style="{ background: `linear-gradient(to right, ${slotProps.value.color1}, ${slotProps.value.color2})`, width: slotProps.size }" />
    </template>
    <template #start="{ totalPercent }">
        <div class="flex justify-between mt-4 mb-2 relative">
            <span>Storage</span>
            <span :style="{ width: totalPercent + '%' }" class="absolute text-right">{{ totalPercent }}%</span>
            <span class="font-medium">1TB</span>
        </div>
    </template>
    <template #end>
        <div class="flex justify-between mt-4">
            <Button label="Manage Storage" outlined size="small" />
            <Button label="Update Plan" size="small" />
        </div>
    </template>
</MeterGroup>
```
Copy
## Accessibility [\#](https://primevue.org/metergroup/\#accessibility)
### Screen Reader
MeterGroup component uses _meter_ role in addition to the _aria-valuemin_, _aria-valuemax_ and _aria-valuenow_ attributes. Value to describe the component can be defined using _aria-labelledby_ prop.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Multiple
- Icon
- Label
- Vertical
- Min-Max
- Template
- Accessibility
# MeterGroup API
API defines helper props, events and others for the PrimeVue MeterGroup module.
## MeterGroup [\#](https://primevue.org/metergroup/\#api.metergroup)
MeterGroup is a group of process status indicators.
### Props [\#](https://primevue.org/metergroup/\#api.metergroup.props)
Defines valid properties in MeterGroup component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | MeterItem\[\] | null | Current value of the metergroup. |  |
| min | number | 0 | Mininum boundary value. |  |
| max | number | 100 | Maximum boundary value. |  |
| orientation | "horizontal" \| "vertical" | horizontal | Specifies the layout of the component, valid values are 'horizontal' and 'vertical'. |  |
| labelPosition | "start" \| "end" | end | Specifies the label position of the component, valid values are 'start' and 'end'. |  |
| labelOrientation | "horizontal" \| "vertical" | horizontal | Specifies the label orientation of the component, valid values are 'horizontal' and 'vertical'. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<MeterGroupPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/metergroup/\#api.metergroup.slots)
Defines valid slots in MeterGroup component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| label | scope: {<br>value: MeterItem, // Current value of the componenttotalPercent: number, // Total percent of the metergroup itemspercentages: number, // Array of sequential sum of values of metergroup items<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom label template. |  |
| meter | scope: {<br>value: MeterItem, // Current value of the meter itemindex: number, // Current index of the meter itemclass: string, // Style class of the meter itemorientation: string, // Current orientation of the componentsize: string, // Current width of the meter itemtotalPercent: number, // Total percent of the metergroup items<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom meter template. |  |
| icon | scope: {<br>value: MeterItem, // Current value of the componentclass: string, // Style class of the icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| start | scope: {<br>value: MeterItem, // Current value of the componenttotalPercent: number, // Total percent of the metergroup itemspercentages: number, // Array of sequential sum of values of metergroup items<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom start template. |  |
| end | scope: {<br>value: MeterItem, // Current value of the componenttotalPercent: number, // Total percent of the metergroup itemspercentages: number, // Array of sequential sum of values of metergroup items<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom end template. |  |
### Interfaces [\#](https://primevue.org/metergroup/\#api.metergroup.interfaces)
Defines the custom interfaces used by the module.
#### MeterGroupPassThroughMethodOptions [\#](https://primevue.org/metergroup/\#api.metergroup.interfaces.MeterGroupPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [MeterGroupProps](https://primevue.org/metergroup/#api.metergroup.interfaces.MeterGroupProps) | null | Defines valid properties. |
| context | [MeterGroupContext](https://primevue.org/metergroup/#api.metergroup.interfaces.MeterGroupContext) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### MeterGroupPassThroughOptions [\#](https://primevue.org/metergroup/\#api.metergroup.interfaces.MeterGroupPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [MeterGroupPassThroughOptionType](https://primevue.org/metergroup/#api.metergroup.types.MeterGroupPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| meters | [MeterGroupPassThroughOptionType](https://primevue.org/metergroup/#api.metergroup.types.MeterGroupPassThroughOptionType) | null | Used to pass attributes to the meter container's DOM element. |
| meter | [MeterGroupPassThroughOptionType](https://primevue.org/metergroup/#api.metergroup.types.MeterGroupPassThroughOptionType) | null | Used to pass attributes to the meter's DOM element. |
| labelList | [MeterGroupPassThroughOptionType](https://primevue.org/metergroup/#api.metergroup.types.MeterGroupPassThroughOptionType) | null | Used to pass attributes to the label list's DOM element. |
| label | [MeterGroupPassThroughOptionType](https://primevue.org/metergroup/#api.metergroup.types.MeterGroupPassThroughOptionType) | null | Used to pass attributes to the label list item's DOM element. |
| labelIcon | [MeterGroupPassThroughOptionType](https://primevue.org/metergroup/#api.metergroup.types.MeterGroupPassThroughOptionType) | null | Used to pass attributes to the label icon type's DOM element. |
| labelMarker | [MeterGroupPassThroughOptionType](https://primevue.org/metergroup/#api.metergroup.types.MeterGroupPassThroughOptionType) | null | Used to pass attributes to the label list type's DOM element. |
| labelText | [MeterGroupPassThroughOptionType](https://primevue.org/metergroup/#api.metergroup.types.MeterGroupPassThroughOptionType) | null | Used to pass attributes to the label's DOM element. |
#### MeterGroupPassThroughAttributes [\#](https://primevue.org/metergroup/\#api.metergroup.interfaces.MeterGroupPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### MeterGroupContext [\#](https://primevue.org/metergroup/\#api.metergroup.interfaces.MeterGroupContext)
Defines current options in MeterGroup component.
| name | type | default | description |
| --- | --- | --- | --- |
| value | MeterItem | null | Current value of the meter item |
| index | number | null | Current index of the meter item |
#### MeterItem [\#](https://primevue.org/metergroup/\#api.metergroup.interfaces.MeterItem)
Defines valid properties of a meter item.
| name | type | default | description |
| --- | --- | --- | --- |
| label | string | null | Current label of the meter item. |
| value | number | null | Current value of the meter item. |
| color | string | null | Current color of the meter item. |
| icon | string | null | Current icon of the meter item. |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/metergroup/\#api.metergroup.types)
Defines the custom types used by the module.
#### MeterGroupPassThroughOptionType [\#](https://primevue.org/metergroup/\#api.metergroup.types.MeterGroupPassThroughOptionType)
| values |
| --- |
| MeterGroupPassThroughAttributes \| (options: MeterGroupPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### MeterGroupEmits [\#](https://primevue.org/metergroup/\#api.metergroup.types.MeterGroupEmits)
| values |
| --- |
| EmitFn<MeterGroupEmitsOptions> |
- MeterGroup
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Checkbox Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Checkbox
Checkbox is an extension to standard checkbox element with theming.
## Import [\#](https://primevue.org/checkbox/\#import)
```javascript
import Checkbox from 'primevue/checkbox';
```
Copy
## Basic [\#](https://primevue.org/checkbox/\#basic)
Binary checkbox is used with the _v-model_ for two-way value binding and the _binary_ property.
```markup
<Checkbox v-model="checked" binary />
```
Copy
## Group [\#](https://primevue.org/checkbox/\#group)
Multiple checkboxes can be grouped together.
Cheese
Mushroom
Pepper
Onion
```markup
<div class="card flex flex-wrap justify-center gap-4">
    <div class="flex items-center gap-2">
        <Checkbox v-model="pizza" inputId="ingredient1" name="pizza" value="Cheese" />
        <label for="ingredient1"> Cheese </label>
    </div>
    <div class="flex items-center gap-2">
        <Checkbox v-model="pizza" inputId="ingredient2" name="pizza" value="Mushroom" />
        <label for="ingredient2"> Mushroom </label>
    </div>
    <div class="flex items-center gap-2">
        <Checkbox v-model="pizza" inputId="ingredient3" name="pizza" value="Pepper" />
        <label for="ingredient3"> Pepper </label>
    </div>
    <div class="flex items-center gap-2">
        <Checkbox v-model="pizza" inputId="ingredient4" name="pizza" value="Onion" />
        <label for="ingredient4"> Onion </label>
    </div>
</div>
```
Copy
## Forms [\#](https://primevue.org/checkbox/\#forms)
Checkbox integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Cheese
Mushroom
Pepper
Onion
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex justify-center flex-col gap-4">
    <div class="flex flex-col gap-2">
        <CheckboxGroup name="ingredient" class="flex flex-wrap gap-4">
            <div class="flex items-center gap-2">
                <Checkbox inputId="cheese" value="Cheese" />
                <label for="cheese"> Cheese </label>
            </div>
            <div class="flex items-center gap-2">
                <Checkbox inputId="mushroom" value="Mushroom" />
                <label for="mushroom"> Mushroom </label>
            </div>
            <div class="flex items-center gap-2">
                <Checkbox inputId="pepper" value="Pepper" />
                <label for="pepper"> Pepper </label>
            </div>
            <div class="flex items-center gap-2">
                <Checkbox inputId="onion" value="Onion" />
                <label for="onion"> Onion </label>
            </div>
        </CheckboxGroup>
        <Message v-if="$form.ingredient?.invalid" severity="error" size="small" variant="simple">{{ $form.ingredient.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Dynamic [\#](https://primevue.org/checkbox/\#dynamic)
Checkboxes can be generated using a list of values.
Accounting
Marketing
Production
Research
```markup
<div v-for="category of categories" :key="category.key" class="flex items-center gap-2">
    <Checkbox v-model="selectedCategories" :inputId="category.key" name="category" :value="category.name" />
    <label :for="category.key">{{ category.name }}</label>
</div>
```
Copy
## Indeterminate [\#](https://primevue.org/checkbox/\#indeterminate)
When _indeterminate_ is present, the checkbox masks the actual value visually.
```markup
<Checkbox v-model="checked" indeterminate binary />
```
Copy
## Filled [\#](https://primevue.org/checkbox/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
```markup
<Checkbox v-model="checked" binary variant="filled" />
```
Copy
## Sizes [\#](https://primevue.org/checkbox/\#sizes)
Checkbox provides _small_ and _large_ sizes as alternatives to the base.
Small
Normal
Large
```markup
<div class="card flex flex-wrap justify-center gap-4">
    <div class="flex items-center gap-2">
        <Checkbox v-model="size" inputId="size_small" name="size" value="Small" size="small" />
        <label for="size_small" class="text-sm">Small</label>
    </div>
    <div class="flex items-center gap-2">
        <Checkbox v-model="size" inputId="size_normal" name="size" value="Normal" />
        <label for="size_normal">Normal</label>
    </div>
    <div class="flex items-center gap-2">
        <Checkbox v-model="size" inputId="size_large" name="size" value="Large" size="large" />
        <label for="size_large" class="text-lg">Large</label>
    </div>
</div>
```
Copy
## Invalid [\#](https://primevue.org/checkbox/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
```markup
<Checkbox v-model="checked" :invalid="!checked"  binary />
```
Copy
## Disabled [\#](https://primevue.org/checkbox/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
```markup
<Checkbox v-model="checked1" binary disabled />
<Checkbox v-model="checked2" binary disabled />
```
Copy
## Accessibility [\#](https://primevue.org/checkbox/\#accessibility)
### Screen Reader
Checkbox component uses a hidden native checkbox element internally that is only visible to screen readers. Value to describe the component can either be provided via _label_ tag combined with _inputId_ prop or using _aria-labelledby_, _aria-label_ props.
```markup
<label for="chkbox1">Remember Me</label>
<Checkbox inputId="chkbox1" />
<span id="chkbox2">Remember Me</span>
<Checkbox aria-labelledby="chkbox2" />
<Checkbox aria-label="Remember Me" />
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the checkbox. |
| _space_ | Toggles the checked state. |
- Import
- Basic
- Group
- Forms
- Dynamic
- Indeterminate
- Filled
- Sizes
- Invalid
- Disabled
- Accessibility
# Checkbox API
API defines helper props, events and others for the PrimeVue Checkbox module.
## Checkbox [\#](https://primevue.org/checkbox/\#api.checkbox)
Checkbox is an extension to standard checkbox element with theming.
### Props [\#](https://primevue.org/checkbox/\#api.checkbox.props)
Defines valid properties in Checkbox component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | any | null | Value of the checkbox. |  |
| modelValue | any | null | Value binding of the checkbox. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | Name of the input element. |  |
| binary | boolean | null | Allows to select a boolean value instead of multiple values. |  |
| indeterminate | boolean | null | When present, it specifies input state as indeterminate. |  |
| size | "small" \| "large" | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | null | When present, it specifies that the element should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| readonly | boolean | null | When present, it specifies that an input field is read-only. |  |
| required | boolean | null | When present, it specifies that the element is required. |  |
| tabindex | number | null | Index of the element in tabbing order. |  |
| trueValue | any | null | Value in checked state. |  |
| falseValue | any | null | Value in unchecked state. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputClass | object | null | Style class of the input field. |  |
| inputStyle | string \| object | null | Inline style of the input field. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<CheckboxPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/checkbox/\#api.checkbox.emits)
Defines valid emits in Checkbox component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| update:indeterminate | value: false | void | Emitted when the "indeterminate" changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: Event | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
### Slots [\#](https://primevue.org/checkbox/\#api.checkbox.slots)
Defines valid slots in Checkbox component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| icon | scope: {<br>checked: boolean, // State of the checkbox.indeterminate: boolean, // Indeterminate state of the checkbox.class: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
### Interfaces [\#](https://primevue.org/checkbox/\#api.checkbox.interfaces)
Defines the custom interfaces used by the module.
#### CheckboxPassThroughMethodOptions [\#](https://primevue.org/checkbox/\#api.checkbox.interfaces.CheckboxPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [CheckboxProps](https://primevue.org/checkbox/#api.checkbox.interfaces.CheckboxProps) | null | Defines valid properties. |
| state | [CheckboxState](https://primevue.org/checkbox/#api.checkbox.interfaces.CheckboxState) | null | Defines current inline state. |
| context | [CheckboxContext](https://primevue.org/checkbox/#api.checkbox.interfaces.CheckboxContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### CheckboxPassThroughOptions [\#](https://primevue.org/checkbox/\#api.checkbox.interfaces.CheckboxPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [CheckboxPassThroughOptionType](https://primevue.org/checkbox/#api.checkbox.types.CheckboxPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| input | [CheckboxPassThroughOptionType](https://primevue.org/checkbox/#api.checkbox.types.CheckboxPassThroughOptionType) | null | Used to pass attributes to the input's DOM element. |
| box | [CheckboxPassThroughOptionType](https://primevue.org/checkbox/#api.checkbox.types.CheckboxPassThroughOptionType) | null | Used to pass attributes to the box's DOM element. |
| icon | [CheckboxPassThroughOptionType](https://primevue.org/checkbox/#api.checkbox.types.CheckboxPassThroughOptionType) | null | Used to pass attributes to the icon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### CheckboxPassThroughAttributes [\#](https://primevue.org/checkbox/\#api.checkbox.interfaces.CheckboxPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### CheckboxState [\#](https://primevue.org/checkbox/\#api.checkbox.interfaces.CheckboxState)
Defines current inline state in Checkbox component.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### CheckboxContext [\#](https://primevue.org/checkbox/\#api.checkbox.interfaces.CheckboxContext)
Defines current options in Checkbox component.
| name | type | default | description |
| --- | --- | --- | --- |
| checked | boolean | false | Current checked state of the item as a boolean. |
| indeterminate | boolean | false | Current indeterminate state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |
## Types [\#](https://primevue.org/checkbox/\#api.checkbox.types)
Defines the custom types used by the module.
#### CheckboxPassThroughOptionType [\#](https://primevue.org/checkbox/\#api.checkbox.types.CheckboxPassThroughOptionType)
| values |
| --- |
| CheckboxPassThroughAttributes \| (options: CheckboxPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### CheckboxEmits [\#](https://primevue.org/checkbox/\#api.checkbox.types.CheckboxEmits)
| values |
| --- |
| EmitFn<CheckboxEmitsOptions> |
- Checkbox
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Menu Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Menu
Menu displays a list of items in vertical orientation.
## Import [\#](https://primevue.org/menu/\#import)
```javascript
import Menu from 'primevue/menu';
```
Copy
## Basic [\#](https://primevue.org/menu/\#basic)
Menu requires a collection of menuitems as its _model_.
- New
- Search
```markup
<Menu :model="items" />
```
Copy
## Group [\#](https://primevue.org/menu/\#group)
Menu supports single level of grouping by defining children with the _items_ property.
- Documents
- New
- Search
- Profile
- Settings
- Logout
```markup
<Menu :model="items" />
```
Copy
## Popup [\#](https://primevue.org/menu/\#popup)
Overlay mode is enabled by adding _popup_ property and calling _toggle_ function of the menu ref with an event of the target.
```markup
<Button type="button" icon="pi pi-ellipsis-v" @click="toggle" aria-haspopup="true" aria-controls="overlay_menu" />
<Menu ref="menu" id="overlay_menu" :model="items" :popup="true" />
```
Copy
## Template [\#](https://primevue.org/menu/\#template)
Menu offers item customization with the _item_ template that receives the menuitem instance from the model as a parameter. The submenu label has its own _submenulabel_ template, additional slots named _start_ and _end_ are provided to embed content before or after the menu.
PRIMEAPP
- Documents
- NewâŒ˜+N
- SearchâŒ˜+S
- Profile
- SettingsâŒ˜+O
- Messages2
- LogoutâŒ˜+Q
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
Amy ElsnerAdmin
```markup
<Menu :model="items" class="w-full md:w-60">
    <template #start>
        <span class="inline-flex items-center gap-1 px-2 py-2">
            <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-8">
                <path d="..." fill="var(--p-primary-color)" />
                <path d="..." fill="var(--p-text-color)" />
            </svg>
            <span class="text-xl font-semibold">PRIME<span class="text-primary">APP</span></span>
        </span>
    </template>
    <template #submenulabel="{ item }">
        <span class="text-primary font-bold">{{ item.label }}</span>
    </template>
    <template #item="{ item, props }">
        <a v-ripple class="flex items-center" v-bind="props.action">
            <span :class="item.icon" />
            <span>{{ item.label }}</span>
            <Badge v-if="item.badge" class="ml-auto" :value="item.badge" />
            <span v-if="item.shortcut" class="ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1">{{ item.shortcut }}</span>
        </a>
    </template>
    <template #end>
        <button v-ripple class="relative overflow-hidden w-full border-0 bg-transparent flex items-start p-2 pl-4 hover:bg-surface-100 dark:hover:bg-surface-800 rounded-none cursor-pointer transition-colors duration-200">
            <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" class="mr-2" shape="circle" />
            <span class="inline-flex flex-col items-start">
                <span class="font-bold">Amy Elsner</span>
                <span class="text-sm">Admin</span>
            </span>
        </button>
    </template>
</Menu>
```
Copy
## Command [\#](https://primevue.org/menu/\#command)
The _command_ property defines the callback to run when an item is activated by click or a key event.
- New
- Search
```markup
<Menu :model="items" />
<Toast />
```
Copy
## Router [\#](https://primevue.org/menu/\#router)
Items with navigation are defined with templating to be able to use a router link component, an external link or programmatic navigation.
- Navigate
- [Router Link](https://primevue.org/theming/unstyled)
- Programmatic
- [External](https://vuejs.org/)
```markup
<Menu :model="items">
    <template #item="{ item, props }">
        <router-link v-if="item.route" v-slot="{ href, navigate }" :to="item.route" custom>
            <a v-ripple :href="href" v-bind="props.action" @click="navigate">
                <span :class="item.icon" />
                <span class="ml-2">{{ item.label }}</span>
            </a>
        </router-link>
        <a v-else v-ripple :href="item.url" :target="item.target" v-bind="props.action">
            <span :class="item.icon" />
            <span class="ml-2">{{ item.label }}</span>
        </a>
    </template>
</Menu>
```
Copy
## Accessibility [\#](https://primevue.org/menu/\#accessibility)
### Screen Reader
Menu component uses the _menu_ role and the value to describe the menu can either be provided with _aria-labelledby_ or _aria-label_ props. Each list item has a _menuitem_ role with _aria-label_ referring to the label of the item and _aria-disabled_ defined if the item is disabled.
In popup mode, the component implicitly manages the _aria-expanded_, _aria-haspopup_ and _aria-controls_ attributes of the target element to define the relation between the target and the popup.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Add focus to the first item if focus moves in to the menu. If the focus is already within the menu, focus moves to the next focusable item in the page tab sequence. |
| _shift_ \+ _tab_ | Add focus to the first item if focus moves in to the menu. If the focus is already within the menu, focus moves to the previous focusable item in the page tab sequence. |
| _enter_ | Activates the focused menuitem. If menu is in overlay mode, popup gets closes and focus moves to target. |
| _space_ | Activates the focused menuitem. If menu is in overlay mode, popup gets closes and focus moves to target. |
| _escape_ | If menu is in overlay mode, popup gets closes and focus moves to target. |
| _down arrow_ | Moves focus to the next menuitem. |
| _up arrow_ | Moves focus to the previous menuitem. |
| _alt_ \+ _up arrow_ | If menu is in overlay mode, popup gets closes and focus moves to the target. |
| _home_ | Moves focus to the first menuitem. |
| _end_ | Moves focus to the last menuitem. |
- Import
- Basic
- Group
- Popup
- Template
- Command
- Router
- Accessibility
# Menu API
API defines helper props, events and others for the PrimeVue Menu module.
## Menu [\#](https://primevue.org/menu/\#api.menu)
Menu is a navigation / command component that supports dynamic and static positioning.
### Props [\#](https://primevue.org/menu/\#api.menu.props)
Defines valid properties in Menu component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | [MenuItem\[\]](https://primevue.org/menu/#api.menu.interfaces.MenuItem[]) | null | An array of menuitems. |  |
| popup | boolean | false | Defines if menu would displayed as a popup. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying input element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<MenuPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/menu/\#api.menu.emits)
Defines valid emits in Menu component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| show |  | void | Callback to invoke when the menu popup is shown. |  |
| hide |  | void | Callback to invoke when the menu popup is hidden. |  |
### Slots [\#](https://primevue.org/menu/\#api.menu.slots)
Defines valid slots in Menu component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| start |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom start template. |  |
| end |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom end template. |  |
| item | scope: {<br>item: MenuItem, // Menuitem instancelabel: undefined, // Label property of the menuitemprops: MenuRouterBindProps, // Binding properties of the menuitem<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item template. |  |
| itemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item icon template. |  |
| submenuheader | scope: {<br>item: MenuItem, // Menuitem instance<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| submenuitem | scope: {<br>item: MenuItem, // Menuitem instance<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom submenu item template. |  |
### Methods [\#](https://primevue.org/menu/\#api.menu.methods)
Defines methods that can be accessed by the component's reference.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| toggle | event: Event | void | Toggles the visibility of the overlay. |  |
| show | event: Event | void | Shows the overlay. |  |
| hide |  | void | Hides the overlay. |  |
### Interfaces [\#](https://primevue.org/menu/\#api.menu.interfaces)
Defines the custom interfaces used by the module.
#### MenuPassThroughMethodOptions [\#](https://primevue.org/menu/\#api.menu.interfaces.MenuPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [MenuProps](https://primevue.org/menu/#api.menu.interfaces.MenuProps) | null | Defines valid properties. |
| state | [MenuState](https://primevue.org/menu/#api.menu.interfaces.MenuState) | null | Defines current inline state. |
| context | [MenuContext](https://primevue.org/menu/#api.menu.interfaces.MenuContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### MenuPassThroughOptions [\#](https://primevue.org/menu/\#api.menu.interfaces.MenuPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [MenuPassThroughOptionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| list | [MenuPassThroughOptionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| submenuLabel | [MenuPassThroughOptionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughOptionType) | null | Used to pass attributes to the submenu item's DOM element. |
| item | [MenuPassThroughOptionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| itemContent | [MenuPassThroughOptionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughOptionType) | null | Used to pass attributes to the item content's DOM element. |
| itemLink | [MenuPassThroughOptionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughOptionType) | null | Used to pass attributes to the item link's DOM element. |
| itemIcon | [MenuPassThroughOptionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughOptionType) | null | Used to pass attributes to the item icon's DOM element. |
| itemLabel | [MenuPassThroughOptionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughOptionType) | null | Used to pass attributes to the item label's DOM element. |
| separator | [MenuPassThroughOptionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughOptionType) | null | Used to pass attributes to the separator's DOM element. |
| start | [MenuPassThroughOptionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughOptionType) | null | Used to pass attributes to the start of the component. |
| end | [MenuPassThroughOptionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughOptionType) | null | Used to pass attributes to the end of the component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [MenuPassThroughTransitionType](https://primevue.org/menu/#api.menu.types.MenuPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### MenuPassThroughAttributes [\#](https://primevue.org/menu/\#api.menu.interfaces.MenuPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### MenuState [\#](https://primevue.org/menu/\#api.menu.interfaces.MenuState)
Defines current inline state in Menu component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| overlayVisible | boolean | false | Current visible state as a boolean. |
| focused | boolean | false | Current focus state as a boolean. |
| focusedOptionIndex | number | null | Focused option index. |
| selectedOptionIndex | number | null | Selected option index. |
#### MenuContext [\#](https://primevue.org/menu/\#api.menu.interfaces.MenuContext)
Defines current options in Menu component.
| name | type | default | description |
| --- | --- | --- | --- |
| item | any | null | Current menuitem |
| index | number | null | Current index of the menuitem. |
| focused | boolean | false | Current focused state of menuitem as a boolean. |
| disabled | boolean | false | Current disabled state of menuitem as a boolean. |
## Types [\#](https://primevue.org/menu/\#api.menu.types)
Defines the custom types used by the module.
#### MenuPassThroughOptionType [\#](https://primevue.org/menu/\#api.menu.types.MenuPassThroughOptionType)
| values |
| --- |
| MenuPassThroughAttributes \| (options: MenuPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### MenuPassThroughTransitionType [\#](https://primevue.org/menu/\#api.menu.types.MenuPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: MenuPassThroughMethodOptions) => TransitionProps \| undefined |
#### MenuEmits [\#](https://primevue.org/menu/\#api.menu.types.MenuEmits)
| values |
| --- |
| EmitFn<MenuEmitsOptions> |
## MenuItem [\#](https://primevue.org/menu/\#api.menuitem)
PrimeVue menu components share a common api to specify the menuitems and submenus.
### Events [\#](https://primevue.org/menu/\#api.menuitem.events)
Defines the custom events used by the component's emit.
#### MenuItemCommandEvent [\#](https://primevue.org/menu/\#api.menuitem.events.MenuItemCommandEvent)
Custom command event.
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| item | [MenuItem](https://primevue.org/menu/#api.options.MenuItem) | Menuitem instance. |
| \[key: string\] | any |  |
### Options [\#](https://primevue.org/menu/\#api.options.MenuItem)
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string \| Function | null | Property name or getter function to use as the label of an item. |  |
| icon | string | null | Icon of the item. |  |
| command | Function | null |  |  |
| url | string | null | External link to navigate when item is clicked. |  |
| items | MenuItem\[\] | null | An array of children menuitems. |  |
| disabled | boolean \| Function | false | A boolean or a function to return a boolean to specify if the item is disabled. |  |
| visible | boolean \| Function | true | A boolean or a function to return a boolean to specify if the item is visible. |  |
| target | string | null | Specifies where to open the linked document. |  |
| separator | boolean | false | Defines the item as a separator. |  |
| style | any | null | Inline style of the menuitem. |  |
| class | any | null | Style class of the menuitem. |  |
| key | string | null | Unique identifier of an item. |  |
| \[key: string\] | any | null |  |  |
- Menu
  - Props
  - Emits
  - Slots
  - Methods
  - Interfaces
  - Types
- MenuItem
  - Events
  - Options
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue BlockUI Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# BlockUI
BlockUI can either block other components or the whole page.
## Import [\#](https://primevue.org/blockui/\#import)
```javascript
import BlockUI from 'primevue/blockui';
```
Copy
## Basic [\#](https://primevue.org/blockui/\#basic)
The element to block should be placed as a child of BlockUI and _blocked_ property is required to control the state.
BlockUnblock
Basic
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
```markup
<div class="mb-4">
    <Button label="Block" @click="blocked = true" class="mr-2"></Button>
    <Button label="Unblock" @click="blocked = false"></Button>
</div>
<BlockUI :blocked="blocked">
    <Panel header="Basic">
        <p class="m-0">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        </p>
    </Panel>
</BlockUI>
```
Copy
## Document [\#](https://primevue.org/blockui/\#document)
Enabling _fullScreen_ property controls the document.
Block
```markup
<BlockUI :blocked="blocked" fullScreen />
<Button label="Block" @click="blocked = true" />
```
Copy
## Accessibility [\#](https://primevue.org/blockui/\#accessibility)
### Screen Reader
BlockUI manages _aria-busy_ state attribute when the UI gets blocked and unblocked. Any valid attribute is passed to the root element so additional attributes like _role_ and _aria-live_ can be used to define live regions.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Document
- Accessibility
# BlockUI API
API defines helper props, events and others for the PrimeVue BlockUI module.
## BlockUI [\#](https://primevue.org/blockui/\#api.blockui)
BlockUI represents people using icons, labels and images.
### Props [\#](https://primevue.org/blockui/\#api.blockui.props)
Defines valid properties in BlockUI component
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| blocked | boolean | false | Controls the blocked state. |  |
| fullScreen | boolean | false | When enabled, the whole document gets blocked. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<BlockUIPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/blockui/\#api.blockui.emits)
Defines valid emits in BlockUI component
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| block |  | void | Fired when the element gets blocked. |  |
| unblock |  | void | Fired when the element gets unblocked. |  |
### Slots [\#](https://primevue.org/blockui/\#api.blockui.slots)
Defines valid slots in BlockUI component
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content's slot. |  |
### Interfaces [\#](https://primevue.org/blockui/\#api.blockui.interfaces)
Defines the custom interfaces used by the module.
#### BlockUIPassThroughMethodOptions [\#](https://primevue.org/blockui/\#api.blockui.interfaces.BlockUIPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [BlockUIProps](https://primevue.org/blockui/#api.blockui.interfaces.BlockUIProps) | null | Defines valid properties. |
| state | [BlockUIState](https://primevue.org/blockui/#api.blockui.interfaces.BlockUIState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### BlockUIPassThroughOptions [\#](https://primevue.org/blockui/\#api.blockui.interfaces.BlockUIPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [BlockUIPassThroughOptionType](https://primevue.org/blockui/#api.blockui.types.BlockUIPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| mask | [BlockUIPassThroughOptionType](https://primevue.org/blockui/#api.blockui.types.BlockUIPassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### BlockUIPassThroughAttributes [\#](https://primevue.org/blockui/\#api.blockui.interfaces.BlockUIPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### BlockUIState [\#](https://primevue.org/blockui/\#api.blockui.interfaces.BlockUIState)
Defines current inline state in BlockUI component.
| name | type | default | description |
| --- | --- | --- | --- |
| isBlocked | boolean | false | Current blocked state as a boolean. |
## Types [\#](https://primevue.org/blockui/\#api.blockui.types)
Defines the custom types used by the module.
#### BlockUIPassThroughOptionType [\#](https://primevue.org/blockui/\#api.blockui.types.BlockUIPassThroughOptionType)
| values |
| --- |
| BlockUIPassThroughAttributes \| (options: BlockUIPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### BlockUIEmits [\#](https://primevue.org/blockui/\#api.blockui.types.BlockUIEmits)
| values |
| --- |
| EmitFn<BlockUIEmitsOptions> |
- BlockUI
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Editor
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Editor
Editor is rich text editor component based on Quill.
## Import [\#](https://primevue.org/editor/\#import)
```javascript
import Editor from 'primevue/editor';
```
Copy
## Quill [\#](https://primevue.org/editor/\#quill)
Editor uses [Quill](https://quilljs.com/) editor underneath so it needs to be installed as a dependency.
```javascript
npm install quill
```
Copy
## Basic [\#](https://primevue.org/editor/\#basic)
Editor is used with the _v-model_ property for two-way value binding.
HeadingSubheadingNormal
```markup
<Editor v-model="value" editorStyle="height: 320px" />
```
Copy
## Forms [\#](https://primevue.org/editor/\#forms)
Editor integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
HeadingSubheadingNormal
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col gap-1">
        <Editor name="content" editorStyle="height: 320px" />
        <Message v-if="$form.content?.invalid" severity="error" size="small" variant="simple">{{ $form.content.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## ReadOnly [\#](https://primevue.org/editor/\#readonly)
When _readonly_ is present, the value cannot be edited.
HeadingSubheadingNormal
Always bet on Prime
```markup
<Editor v-model="value" editorStyle="height: 320px" readonly />
```
Copy
## Template [\#](https://primevue.org/editor/\#template)
Editor provides a default toolbar with common options, to customize it define your elements inside the header element. Refer to [Quill documentation](http://quilljs.com/docs/modules/toolbar/) for available controls.
Hello World!
PrimeVue **Editor** Rocks
```markup
<Editor v-model="value" editorStyle="height: 320px">
    <template v-slot:toolbar>
        <span class="ql-formats">
            <button v-tooltip.bottom="'Bold'" class="ql-bold"></button>
            <button v-tooltip.bottom="'Italic'" class="ql-italic"></button>
            <button v-tooltip.bottom="'Underline'" class="ql-underline"></button>
        </span>
    </template>
</Editor>
```
Copy
## Accessibility [\#](https://primevue.org/editor/\#accessibility)
### Screen Reader
Quill performs generally well in terms of accessibility. The elements in the toolbar can be tabbed and have the necessary ARIA roles/attributes for screen readers. One known limitation is the lack of arrow key support for [dropdowns](https://github.com/quilljs/quill/issues/1031) in the toolbar that may be overcome with a custom toolbar.
- Import
- Quill
- Basic
- Forms
- ReadOnly
- Template
- Accessibility
# Editor API
API defines helper props, events and others for the PrimeVue Editor module.
## Editor [\#](https://primevue.org/editor/\#api.editor)
Editor groups a collection of contents in tabs.
### Props [\#](https://primevue.org/editor/\#api.editor.props)
Defines valid properties in Editor component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | string | null | Value of the content. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| placeholder | string | null | Placeholder text to show when editor is empty. |  |
| readonly | boolean | false | Whether to instantiate the editor to readonly mode. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| formats | any\[\] | null | Whitelist of formats to display, see [here](https://quilljs.com/docs/formats/) for available options. |  |
| editorStyle | any | null | Inline style of the container. |  |
| modules | any | null | Modules configuration, see [here](https://quilljs.com/docs/modules/) for available options. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<EditorPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/editor/\#api.editor.emits)
Defines valid emits in Editor component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: string | void | Emitted when the value changes. |  |
| value-change | value: string | void | Emitted when the value changes in uncontrolled mode. |  |
| text-change | event: [EditorTextChangeEvent](https://primevue.org/editor/#api.editor.events.EditorTextChangeEvent) | void | Callback to invoke when text of editor changes. |  |
| selection-change | event: [EditorSelectionChangeEvent](https://primevue.org/editor/#api.editor.events.EditorSelectionChangeEvent) | void | Callback to invoke when selection of the text changes. |  |
| load | event: [EditorLoadEvent](https://primevue.org/editor/#api.editor.events.EditorLoadEvent) | void | Callback to invoke when the quill modules are loaded. |  |
### Events [\#](https://primevue.org/editor/\#api.editor.events)
Defines the custom events used by the component's emit.
#### EditorTextChangeEvent [\#](https://primevue.org/editor/\#api.editor.events.EditorTextChangeEvent)
Custom text change event.
See [text-change](https://primevue.org/editor/#api.editor.emitsoptions.text-change)
| name | type | description |
| --- | --- | --- |
| htmlValue | string | Current value as html. |
| textValue | any | Current value as text. |
| delta | any | Representation of the change. |
| source | string | Source of change. Will be either 'user' or 'api'. |
| instance | any | Text editor instance. |
#### EditorSelectionChangeEvent [\#](https://primevue.org/editor/\#api.editor.events.EditorSelectionChangeEvent)
Custom selection change event.
See [selection-change](https://primevue.org/editor/#api.editor.emitsoptions.selection-change)
| name | type | description |
| --- | --- | --- |
| htmlValue | string | Current value as html. |
| textValue | any | Current value as text. |
| range | any | Representation of the selection boundaries. |
| oldRange | any | Representation of the previous selection boundaries. |
| source | string | Source of change. Will be either 'user' or 'api'. |
| instance | any | Text editor instance. |
#### EditorLoadEvent [\#](https://primevue.org/editor/\#api.editor.events.EditorLoadEvent)
Custom load event.
See [load](https://primevue.org/editor/#api.editor.emitsoptions.load)
| name | type | description |
| --- | --- | --- |
| instance | any | Text editor instance. |
### Interfaces [\#](https://primevue.org/editor/\#api.editor.interfaces)
Defines the custom interfaces used by the module.
#### EditorPassThroughMethodOptions [\#](https://primevue.org/editor/\#api.editor.interfaces.EditorPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [EditorProps](https://primevue.org/editor/#api.editor.interfaces.EditorProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### EditorPassThroughOptions [\#](https://primevue.org/editor/\#api.editor.interfaces.EditorPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| toolbar | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the toolbar's DOM element. |
| formats | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the formats' DOM element. |
| header | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| option | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the option's DOM element. |
| bold | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the bold's DOM element. |
| italic | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the italic's DOM element. |
| underline | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the underline's DOM element. |
| color | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the color's DOM element. |
| background | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the background's DOM element. |
| list | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| select | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the select's DOM element. |
| link | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the link's DOM element. |
| image | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the image's DOM element. |
| codeBlock | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the code block's DOM element. |
| clean | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the clean's DOM element. |
| content | [EditorPassThroughOptionType](https://primevue.org/editor/#api.editor.types.EditorPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### EditorPassThroughAttributes [\#](https://primevue.org/editor/\#api.editor.interfaces.EditorPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/editor/\#api.editor.types)
Defines the custom types used by the module.
#### EditorPassThroughOptionType [\#](https://primevue.org/editor/\#api.editor.types.EditorPassThroughOptionType)
| values |
| --- |
| EditorPassThroughAttributes \| (options: EditorPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### EditorEmits [\#](https://primevue.org/editor/\#api.editor.types.EditorEmits)
| values |
| --- |
| EmitFn<EditorEmitsOptions> |
- Editor
  - Props
  - Emits
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Breadcrumb Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Breadcrumb
Breadcrumb provides contextual information about page hierarchy.
## Import [\#](https://primevue.org/breadcrumb/\#import)
```javascript
import Breadcrumb from 'primevue/breadcrumb';
```
Copy
## Basic [\#](https://primevue.org/breadcrumb/\#basic)
Breadcrumb requires a collection of menuitems as its _model_, the root item is defined with the _home_ property.
```markup
<Breadcrumb :home="home" :model="items" />
```
Copy
## Template [\#](https://primevue.org/breadcrumb/\#template)
Custom content can be placed inside the items using the _item_ template. The divider between the items has its own _separator_ template.
```markup
<Breadcrumb :home="home" :model="items">
    <template #item="{ item }">
        <a class="cursor-pointer" :href="item.url">
            <span :class="item.icon"></span>
        </a>
    </template>
    <template #separator> / </template>
</Breadcrumb>
```
Copy
## Router [\#](https://primevue.org/breadcrumb/\#router)
Items with navigation are defined with templating to be able to use a router link component, an external link or programmatic navigation.
```markup
<Breadcrumb :home="home" :model="items">
    <template #item="{ item, props }">
        <router-link v-if="item.route" v-slot="{ href, navigate }" :to="item.route" custom>
            <a :href="href" v-bind="props.action" @click="navigate">
                <span :class="[item.icon, 'text-color']" />
                <span class="text-primary font-semibold">{{ item.label }}</span>
            </a>
        </router-link>
        <a v-else :href="item.url" :target="item.target" v-bind="props.action">
            <span class="text-surface-700 dark:text-surface-0">{{ item.label }}</span>
        </a>
    </template>
</Breadcrumb>
```
Copy
## Accessibility [\#](https://primevue.org/breadcrumb/\#accessibility)
### Screen Reader
Breadcrumb uses the _nav_ element and since any attribute is passed to the root implicitly _aria-labelledby_ or _aria-label_ can be used to describe the component. Inside an ordered list is used where the list item separators have _aria-hidden_ to be able to ignored by the screen readers. If the last link represents the current route, _aria-current_ is added with "page" as the value.
### Keyboard Support
No special keyboard interaction is needed, all menuitems are focusable based on the page tab sequence.
- Import
- Basic
- Template
- Router
- Accessibility
# Breadcrumb API
API defines helper props, events and others for the PrimeVue Breadcrumb module.
## Breadcrumb [\#](https://primevue.org/breadcrumb/\#api.breadcrumb)
Breadcrumb provides contextual information about page hierarchy.
### Props [\#](https://primevue.org/breadcrumb/\#api.breadcrumb.props)
Defines valid properties in Breadcrumb component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | MenuItem\[\] | null | An array of menuitems. |  |
| home | any | null | Configuration for the home icon. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying menu element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<BreadcrumbPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/breadcrumb/\#api.breadcrumb.slots)
Defines valid slots in Breadcrumb component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| item | scope: {<br>item: MenuItem, // Menuitem instancelabel: undefined, // Label property of the menuitemprops: BreadcrumbRouterBindProps, // Binding properties of the menuitem<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item template. |  |
| separator |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom separator template. |  |
| itemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item icon template. |  |
### Interfaces [\#](https://primevue.org/breadcrumb/\#api.breadcrumb.interfaces)
Defines the custom interfaces used by the module.
#### BreadcrumbPassThroughMethodOptions [\#](https://primevue.org/breadcrumb/\#api.breadcrumb.interfaces.BreadcrumbPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [BreadcrumbProps](https://primevue.org/breadcrumb/#api.breadcrumb.interfaces.BreadcrumbProps) | null | Defines valid properties. |
| context | [BreadcrumbContext](https://primevue.org/breadcrumb/#api.breadcrumb.interfaces.BreadcrumbContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### BreadcrumbPassThroughOptions [\#](https://primevue.org/breadcrumb/\#api.breadcrumb.interfaces.BreadcrumbPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [BreadcrumbPassThroughOptionType](https://primevue.org/breadcrumb/#api.breadcrumb.types.BreadcrumbPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| list | [BreadcrumbPassThroughOptionType](https://primevue.org/breadcrumb/#api.breadcrumb.types.BreadcrumbPassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| item | [BreadcrumbPassThroughOptionType](https://primevue.org/breadcrumb/#api.breadcrumb.types.BreadcrumbPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| itemLink | [BreadcrumbPassThroughOptionType](https://primevue.org/breadcrumb/#api.breadcrumb.types.BreadcrumbPassThroughOptionType) | null | Used to pass attributes to the item link's DOM element. |
| itemIcon | [BreadcrumbPassThroughOptionType](https://primevue.org/breadcrumb/#api.breadcrumb.types.BreadcrumbPassThroughOptionType) | null | Used to pass attributes to the item icon's DOM element. |
| itemLabel | [BreadcrumbPassThroughOptionType](https://primevue.org/breadcrumb/#api.breadcrumb.types.BreadcrumbPassThroughOptionType) | null | Used to pass attributes to the item label's DOM element. |
| separator | [BreadcrumbPassThroughOptionType](https://primevue.org/breadcrumb/#api.breadcrumb.types.BreadcrumbPassThroughOptionType) | null | Used to pass attributes to the separator's DOM element. |
| separatorIcon | [BreadcrumbPassThroughOptionType](https://primevue.org/breadcrumb/#api.breadcrumb.types.BreadcrumbPassThroughOptionType) | null | Used to pass attributes to the separator icon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### BreadcrumbPassThroughAttributes [\#](https://primevue.org/breadcrumb/\#api.breadcrumb.interfaces.BreadcrumbPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### BreadcrumbContext [\#](https://primevue.org/breadcrumb/\#api.breadcrumb.interfaces.BreadcrumbContext)
Defines current options in Breadcrumb component.
| name | type | default | description |
| --- | --- | --- | --- |
| item | any | null | Current menuitem |
| index | number | null | Index of the menuitem |
## Types [\#](https://primevue.org/breadcrumb/\#api.breadcrumb.types)
Defines the custom types used by the module.
#### BreadcrumbPassThroughOptionType [\#](https://primevue.org/breadcrumb/\#api.breadcrumb.types.BreadcrumbPassThroughOptionType)
| values |
| --- |
| BreadcrumbPassThroughAttributes \| (options: BreadcrumbPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### BreadcrumbEmits [\#](https://primevue.org/breadcrumb/\#api.breadcrumb.types.BreadcrumbEmits)
| values |
| --- |
| EmitFn<BreadcrumbEmitsOptions> |
## MenuItem [\#](https://primevue.org/breadcrumb/\#api.menuitem)
PrimeVue menu components share a common api to specify the menuitems and submenus.
### Events [\#](https://primevue.org/breadcrumb/\#api.menuitem.events)
Defines the custom events used by the component's emit.
#### MenuItemCommandEvent [\#](https://primevue.org/breadcrumb/\#api.menuitem.events.MenuItemCommandEvent)
Custom command event.
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| item | [MenuItem](https://primevue.org/breadcrumb/#api.options.MenuItem) | Menuitem instance. |
| \[key: string\] | any |  |
### Options [\#](https://primevue.org/breadcrumb/\#api.options.MenuItem)
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string \| Function | null | Property name or getter function to use as the label of an item. |  |
| icon | string | null | Icon of the item. |  |
| command | Function | null |  |  |
| url | string | null | External link to navigate when item is clicked. |  |
| items | MenuItem\[\] | null | An array of children menuitems. |  |
| disabled | boolean \| Function | false | A boolean or a function to return a boolean to specify if the item is disabled. |  |
| visible | boolean \| Function | true | A boolean or a function to return a boolean to specify if the item is visible. |  |
| target | string | null | Specifies where to open the linked document. |  |
| separator | boolean | false | Defines the item as a separator. |  |
| style | any | null | Inline style of the menuitem. |  |
| class | any | null | Style class of the menuitem. |  |
| key | string | null | Unique identifier of an item. |  |
| \[key: string\] | any | null |  |  |
- Breadcrumb
  - Props
  - Slots
  - Interfaces
  - Types
- MenuItem
  - Events
  - Options
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Carousel Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Carousel
Carousel is a content slider featuring various customization options.
## Import [\#](https://primevue.org/carousel/\#import)
```javascript
import Carousel from 'primevue/carousel';
```
Copy
## Basic [\#](https://primevue.org/carousel/\#basic)
Carousel requires a collection of items as its value along with a template to render each item.
![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)INSTOCK
Bamboo Watch
$65
![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)INSTOCK
Black Watch
$72
![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)LOWSTOCK
Blue Band
$79
![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)INSTOCK
Blue T-Shirt
$29
![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)INSTOCK
Bracelet
$15
![Brown Purse](https://primefaces.org/cdn/primevue/images/product/brown-purse.jpg)OUTOFSTOCK
Brown Purse
$120
![Chakra Bracelet](https://primefaces.org/cdn/primevue/images/product/chakra-bracelet.jpg)LOWSTOCK
Chakra Bracelet
$32
![Galaxy Earrings](https://primefaces.org/cdn/primevue/images/product/galaxy-earrings.jpg)INSTOCK
Galaxy Earrings
$34
![Game Controller](https://primefaces.org/cdn/primevue/images/product/game-controller.jpg)LOWSTOCK
Game Controller
$99
```markup
<Carousel :value="products" :numVisible="3" :numScroll="3" :responsiveOptions="responsiveOptions">
    <template #item="slotProps">
        <div class="border border-surface-200 dark:border-surface-700 rounded m-2  p-4">
            <div class="mb-4">
                <div class="relative mx-auto">
                    <img :src="'https://primefaces.org/cdn/primevue/images/product/' + slotProps.data.image" :alt="slotProps.data.name" class="w-full rounded" />
                    <Tag :value="slotProps.data.inventoryStatus" :severity="getSeverity(slotProps.data.inventoryStatus)" class="absolute" style="left:5px; top: 5px"/>
                </div>
            </div>
            <div class="mb-4 font-medium">{{ slotProps.data.name }}</div>
            <div class="flex justify-between items-center">
                <div class="mt-0 font-semibold text-xl">${{ slotProps.data.price }}</div>
                <span>
                    <Button icon="pi pi-heart" severity="secondary" outlined />
                    <Button icon="pi pi-shopping-cart" class="ml-2"/>
                </span>
            </div>
        </div>
    </template>
</Carousel>
```
Copy
## Circular [\#](https://primevue.org/carousel/\#circular)
When _autoplayInterval_ is defined in milliseconds, items are scrolled automatically. In addition, for infinite scrolling _circular_ property needs to be added which is enabled automatically in auto play mode.
![Chakra Bracelet](https://primefaces.org/cdn/primevue/images/product/chakra-bracelet.jpg)LOWSTOCK
Chakra Bracelet
$32
![Galaxy Earrings](https://primefaces.org/cdn/primevue/images/product/galaxy-earrings.jpg)INSTOCK
Galaxy Earrings
$34
![Game Controller](https://primefaces.org/cdn/primevue/images/product/game-controller.jpg)LOWSTOCK
Game Controller
$99
![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)INSTOCK
Bamboo Watch
$65
![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)INSTOCK
Black Watch
$72
![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)LOWSTOCK
Blue Band
$79
![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)INSTOCK
Blue T-Shirt
$29
![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)INSTOCK
Bracelet
$15
![Brown Purse](https://primefaces.org/cdn/primevue/images/product/brown-purse.jpg)OUTOFSTOCK
Brown Purse
$120
![Chakra Bracelet](https://primefaces.org/cdn/primevue/images/product/chakra-bracelet.jpg)LOWSTOCK
Chakra Bracelet
$32
![Galaxy Earrings](https://primefaces.org/cdn/primevue/images/product/galaxy-earrings.jpg)INSTOCK
Galaxy Earrings
$34
![Game Controller](https://primefaces.org/cdn/primevue/images/product/game-controller.jpg)LOWSTOCK
Game Controller
$99
![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)INSTOCK
Bamboo Watch
$65
![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)INSTOCK
Black Watch
$72
![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)LOWSTOCK
Blue Band
$79
```markup
<Carousel :value="products" :numVisible="3" :numScroll="1" :responsiveOptions="responsiveOptions" circular :autoplayInterval="3000">
    <template #item="slotProps">
        <div class="border border-surface-200 dark:border-surface-700 rounded m-2  p-4">
            <div class="mb-4">
                <div class="relative mx-auto">
                    <img :src="'https://primefaces.org/cdn/primevue/images/product/' + slotProps.data.image" :alt="slotProps.data.name" class="w-full rounded" />
                    <Tag :value="slotProps.data.inventoryStatus" :severity="getSeverity(slotProps.data.inventoryStatus)" class="absolute" style="left:5px; top: 5px"/>
                </div>
            </div>
            <div class="mb-4 font-medium">{{ slotProps.data.name }}</div>
            <div class="flex justify-between items-center">
                <div class="mt-0 font-semibold text-xl">${{ slotProps.data.price }}</div>
                <span>
                    <Button icon="pi pi-heart" severity="secondary" outlined />
                    <Button icon="pi pi-shopping-cart" class="ml-2"/>
                </span>
            </div>
        </div>
    </template>
</Carousel>
```
Copy
## Responsive [\#](https://primevue.org/carousel/\#responsive)
Carousel supports specific configuration per screen size with the _responsiveOptions_ property that takes an array of objects where each object defines the max-width _breakpoint_, _numVisible_ for the number of items items per page and _numScroll_ for number of items to scroll. When _responsiveOptions_ is defined, the _numScroll_ and _numVisible_ properties of the Carousel are used as default when there is breakpoint that applies.
![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)INSTOCK
Bamboo Watch
$65
![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)INSTOCK
Black Watch
$72
![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)LOWSTOCK
Blue Band
$79
![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)INSTOCK
Blue T-Shirt
$29
![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)INSTOCK
Bracelet
$15
![Brown Purse](https://primefaces.org/cdn/primevue/images/product/brown-purse.jpg)OUTOFSTOCK
Brown Purse
$120
![Chakra Bracelet](https://primefaces.org/cdn/primevue/images/product/chakra-bracelet.jpg)LOWSTOCK
Chakra Bracelet
$32
![Galaxy Earrings](https://primefaces.org/cdn/primevue/images/product/galaxy-earrings.jpg)INSTOCK
Galaxy Earrings
$34
![Game Controller](https://primefaces.org/cdn/primevue/images/product/game-controller.jpg)LOWSTOCK
Game Controller
$99
```markup
<Carousel :value="products" :numVisible="3" :numScroll="1" :responsiveOptions="responsiveOptions">
    <template #item="slotProps">
        <div class="border border-surface-200 dark:border-surface-700 rounded m-2  p-4">
            <div class="mb-4">
                <div class="relative mx-auto">
                    <img :src="'https://primefaces.org/cdn/primevue/images/product/' + slotProps.data.image" :alt="slotProps.data.name" class="w-full rounded" />
                    <Tag :value="slotProps.data.inventoryStatus" :severity="getSeverity(slotProps.data.inventoryStatus)" class="absolute" style="left:5px; top: 5px"/>
                </div>
            </div>
            <div class="mb-4 font-medium">{{ slotProps.data.name }}</div>
            <div class="flex justify-between items-center">
                <div class="mt-0 font-semibold text-xl">${{ slotProps.data.price }}</div>
                <span>
                    <Button icon="pi pi-heart" severity="secondary" outlined />
                    <Button icon="pi pi-shopping-cart" class="ml-2"/>
                </span>
            </div>
        </div>
    </template>
</Carousel>
```
Copy
## Vertical [\#](https://primevue.org/carousel/\#vertical)
To create a vertical Carousel, _orientation_ needs to be set to _vertical_ along with a _verticalViewPortHeight_.
![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)INSTOCK
Bamboo Watch
$65
![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)INSTOCK
Black Watch
$72
![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)LOWSTOCK
Blue Band
$79
![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)INSTOCK
Blue T-Shirt
$29
![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)INSTOCK
Bracelet
$15
![Brown Purse](https://primefaces.org/cdn/primevue/images/product/brown-purse.jpg)OUTOFSTOCK
Brown Purse
$120
![Chakra Bracelet](https://primefaces.org/cdn/primevue/images/product/chakra-bracelet.jpg)LOWSTOCK
Chakra Bracelet
$32
![Galaxy Earrings](https://primefaces.org/cdn/primevue/images/product/galaxy-earrings.jpg)INSTOCK
Galaxy Earrings
$34
![Game Controller](https://primefaces.org/cdn/primevue/images/product/game-controller.jpg)LOWSTOCK
Game Controller
$99
```markup
<Carousel :value="products" :numVisible="1" :numScroll="1" orientation="vertical" verticalViewPortHeight="330px" containerClass="flex items-center">
    <template #item="slotProps">
        <div class="border border-surface-200 dark:border-surface-700 rounded m-2  p-4">
            <div class="mb-4">
                <div class="relative mx-auto">
                    <img :src="'https://primefaces.org/cdn/primevue/images/product/' + slotProps.data.image" :alt="slotProps.data.name" class="w-full rounded" />
                    <Tag :value="slotProps.data.inventoryStatus" :severity="getSeverity(slotProps.data.inventoryStatus)" class="absolute" style="left:5px; top: 5px"/>
                </div>
            </div>
            <div class="mb-4 font-medium">{{ slotProps.data.name }}</div>
            <div class="flex justify-between items-center">
                <div class="mt-0 font-semibold text-xl">${{ slotProps.data.price }}</div>
                <span>
                    <Button icon="pi pi-heart" severity="secondary" outlined />
                    <Button icon="pi pi-shopping-cart" class="ml-2"/>
                </span>
            </div>
        </div>
    </template>
</Carousel>
```
Copy
## Accessibility [\#](https://primevue.org/carousel/\#accessibility)
### Screen Reader
Carousel uses _region_ role and since any attribute is passed to the main container element, attributes such as _aria-label_ and _aria-roledescription_ can be used as well. The slides container has _aria-live_ attribute set as "polite" if carousel is not in autoplay mode, otherwise "off" would be the value in autoplay.
A slide has a _group_ role with an aria-label that refers to the _aria.slideNumber_ property of the [locale](https://primevue.org/configuration/#locale) API. Similarly _aria.slide_ is used as the _aria-roledescription_ of the item. Inactive slides are hidden from the readers with _aria-hidden_.
Next and Previous navigators are button elements with _aria-label_ attributes referring to the _aria.prevPageLabel_ and _aria.nextPageLabel_ properties of the [locale](https://primevue.org/configuration/#locale) API by default respectively, you may still use your own aria roles and attributes as any valid attribute is passed to the button elements implicitly by using _nextButtonProps_ and _prevButtonProps_.
Quick navigation elements are button elements with an _aria-label_ attribute referring to the _aria.pageLabel_ of the [locale](https://primevue.org/configuration/#locale) API. Current page is marked with _aria-current_.
### Next/Prev Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through interactive elements in the carousel. |
| _enter_ | Activates navigation. |
| _space_ | Activates navigation. |
### Quick Navigation Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the active slide link. |
| _enter_ | Activates the focused slide link. |
| _space_ | Activates the focused slide link. |
| _right arrow_ | Moves focus to the next slide link. |
| _left arrow_ | Moves focus to the previous slide link. |
| _home_ | Moves focus to the first slide link. |
| _end_ | Moves focus to the last slide link. |
- Import
- Basic
- Circular
- Responsive
- Vertical
- Accessibility
# Carousel API
API defines helper props, events and others for the PrimeVue Carousel module.
## Carousel [\#](https://primevue.org/carousel/\#api.carousel)
Carousel is a content slider featuring various customization options.
### Props [\#](https://primevue.org/carousel/\#api.carousel.props)
Defines valid properties in Carousel component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | any | null | An array of objects to display. |  |
| page | number | 0 | Index of the first item. |  |
| numVisible | number | 1 | Number of items per page. |  |
| numScroll | number | 1 | Number of items to scroll. |  |
| responsiveOptions | [CarouselResponsiveOptions\[\]](https://primevue.org/carousel/#api.carousel.interfaces.CarouselResponsiveOptions[]) | null | An array of options for responsive design. |  |
| orientation | "horizontal" \| "vertical" | horizontal | Specifies the layout of the component, valid values are 'horizontal' and 'vertical'. |  |
| verticalViewPortHeight | string | 300px | Height of the viewport in vertical layout. |  |
| containerClass | any | null | Style class of the viewport container. |  |
| contentClass | any | null | Style class of main content. |  |
| indicatorsContentClass | any | null | Style class of the indicator items. |  |
| circular | boolean | false | Defines if scrolling would be infinite. |  |
| autoplayInterval | number | 0 | Time in milliseconds to scroll items automatically. |  |
| showNavigators | boolean | true | Whether to display navigation buttons in container. |  |
| showIndicators | boolean | true | Whether to display indicator container. |  |
| prevButtonProps | object | null | Used to pass attributes to the previous Button component. |  |
| nextButtonProps | object | null | Used to pass attributes to the next Button component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<CarouselPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/carousel/\#api.carousel.emits)
Defines valid emits in Carousel component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:page | value: number | void | Emitted when the page changes. |  |
### Slots [\#](https://primevue.org/carousel/\#api.carousel.slots)
Defines valid slots in Carousel slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| item | scope: {<br>data: any, // Data of the componentindex: number, // Index of the item<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each item. |  |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| previcon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom previous icon template. |  |
| nexticon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom next icon template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template. |  |
### Interfaces [\#](https://primevue.org/carousel/\#api.carousel.interfaces)
Defines the custom interfaces used by the module.
#### CarouselPassThroughMethodOptions [\#](https://primevue.org/carousel/\#api.carousel.interfaces.CarouselPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [CarouselProps](https://primevue.org/carousel/#api.carousel.interfaces.CarouselProps) | null | Defines valid properties. |
| state | [CarouselState](https://primevue.org/carousel/#api.carousel.interfaces.CarouselState) | null | Defines current inline state. |
| context | [CarouselContext](https://primevue.org/carousel/#api.carousel.interfaces.CarouselContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### CarouselSharedPassThroughMethodOptions [\#](https://primevue.org/carousel/\#api.carousel.interfaces.CarouselSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [CarouselProps](https://primevue.org/carousel/#api.carousel.interfaces.CarouselProps) | null | Defines valid properties. |
| state | [CarouselState](https://primevue.org/carousel/#api.carousel.interfaces.CarouselState) | null | Defines current inline state. |
#### CarouselPassThroughOptions [\#](https://primevue.org/carousel/\#api.carousel.interfaces.CarouselPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| contentContainer | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the content container's DOM element. |
| content | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| pcPrevButton | any | null | Used to pass attributes to the previous button's DOM element. |
| viewport | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the viewport's DOM element. |
| itemList | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the items list's DOM element. |
| itemClone | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the item clone's DOM element. |
| item | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| pcNextButton | any | null | Used to pass attributes to the next button's DOM element. |
| indicatorList | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the indicator list's DOM element. |
| indicator | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the indicator's DOM element. |
| indicatorButton | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the indicator button's DOM element. |
| footer | [CarouselPassThroughOptionType](https://primevue.org/carousel/#api.carousel.types.CarouselPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### CarouselPassThroughAttributes [\#](https://primevue.org/carousel/\#api.carousel.interfaces.CarouselPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### CarouselState [\#](https://primevue.org/carousel/\#api.carousel.interfaces.CarouselState)
Defines current inline state in Carousel component.
| name | type | default | description |
| --- | --- | --- | --- |
| remainingItems | number | 0 | Remaining items' count as a number. |
| d\_numVisible | number | 1 | Number of items per page as a number. |
| d\_numScroll | number | 1 | Number of items to scroll as a number. |
| d\_oldNumScroll | number | 0 | Old number of items to scroll as a number. |
| d\_oldNumVisible | number | 0 | Old number of items per page as a number. |
| d\_oldValue | number | null | Old array of objects to display. |
| d\_page | number | 0 | Index of the first item. |
| totalShiftedItems | number | 0 | Total shifted items' count as a number. |
| allowAutoplay | boolean | false | Allow autoplay as a boolean. |
| d\_circular | boolean | false | Defines if scrolling would be infinite as a boolean. |
| swipeThreshold | number | 20 | Swipe threshold count as a number. |
#### CarouselContext [\#](https://primevue.org/carousel/\#api.carousel.interfaces.CarouselContext)
Defines current inline options in Carousel component.
| name | type | default | description |
| --- | --- | --- | --- |
| highlighted | boolean | false | Current highlighted state of the indicator as a boolean. |
| index | number | null | Index of the item as a number. |
| active | boolean | false | Current active state of the item as a boolean. |
| start | boolean | false | Current start state of the item as a boolean. |
| end | boolean | false | Current end state of the item as a boolean. |
#### CarouselResponsiveOptions [\#](https://primevue.org/carousel/\#api.carousel.interfaces.CarouselResponsiveOptions)
| name | type | default | description |
| --- | --- | --- | --- |
| breakpoint | string | null | Breakpoint for responsive mode. Exp; |
| numVisible | number | null | The number of visible items on breakpoint. |
| numScroll | number | null | The number of scrolled items on breakpoint. |
## Types [\#](https://primevue.org/carousel/\#api.carousel.types)
Defines the custom types used by the module.
#### CarouselPassThroughOptionType [\#](https://primevue.org/carousel/\#api.carousel.types.CarouselPassThroughOptionType)
| values |
| --- |
| CarouselPassThroughAttributes \| (options: CarouselPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### CarouselEmits [\#](https://primevue.org/carousel/\#api.carousel.types.CarouselEmits)
| values |
| --- |
| EmitFn<CarouselEmitsOptions> |
- Carousel
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Ripple Effect
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Ripple
Ripple directive adds ripple effect to the host element.
## Import [\#](https://primevue.org/ripple/\#import)
Ripple is an optional animation for the supported components such as buttons. It is disabled by default and needs to be enabled at your app's entry file (e.g. main.js) during the PrimeVue setup.
```javascript
import { createApp } from 'vue';
import PrimeVue from 'primevue/config';
const app = createApp(App);
app.use(PrimeVue, { ripple: true });
```
Copy
Ripple describes how to use it with your own components and standard elements that needs to be imported and configured with a name of your choice. Global configuration is done with the _app.directive_ function.
```javascript
import Ripple from 'primevue/ripple';
app.directive('ripple', Ripple);
```
Copy
## Configuration [\#](https://primevue.org/ripple/\#configuration)
To start with, Ripple needs to be enabled globally. See the [Configuration API](https://primevue.org/configuration/#ripple) for details.
```javascript
mounted() {
    this.$primevue.config.ripple = true;
}
```
Copy
## Default [\#](https://primevue.org/ripple/\#default)
Ripple is enabled by adding add _p-ripple_ class to the target and attach the directive with the v- prefix.
Ripple option at the  configurator needs to be turned on for the demo.
Default
```markup
<div v-ripple class="ripple-box">Default</div>
```
Copy
## Custom [\#](https://primevue.org/ripple/\#custom)
Default styling of the animation adds a shade of white. This can easily be customized using css that changes the color of _p-ink_ element.
Ripple option at the  configurator needs to be turned on for the demo.
Green
Orange
Purple
```markup
<div v-ripple class="box" style="border: 1px solid rgba(75, 175, 80, 0.3); --p-ripple-background: rgba(75, 175, 80, 0.3)">Green</div>
<div v-ripple class="box" style="border: 1px solid rgba(255, 193, 6, 0.3); --p-ripple-background: rgba(255, 193, 6, 0.3)">Orange</div>
<div v-ripple class="box" style="border: 1px solid rgba(156, 39, 176, 0.3); --p-ripple-background: rgba(156, 39, 176, 0.3)">Purple</div>
```
Copy
## Accessibility [\#](https://primevue.org/ripple/\#accessibility)
### Screen Reader
Ripple element has the _aria-hidden_ attribute as true so that it gets ignored by the screen readers.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Configuration
- Default
- Custom
- Accessibility
# Ripple API
API defines helper props, events and others for the PrimeVue Ripple module.
## Ripple [\#](https://primevue.org/ripple/\#api.ripple)
Ripple directive adds ripple effect to the host element.
### Interfaces [\#](https://primevue.org/ripple/\#api.ripple.interfaces)
Defines the custom interfaces used by the module.
#### RippleOptions [\#](https://primevue.org/ripple/\#api.ripple.interfaces.RippleOptions)
Defines options of Ripple.
| name | type | default | description |
| --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |
| pt | PassThrough<RippleDirectivePassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |
#### RippleDirectivePassThroughOptions [\#](https://primevue.org/ripple/\#api.ripple.interfaces.RippleDirectivePassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [RippleDirectivePassThroughOptionType](https://primevue.org/ripple/#api.ripple.types.RippleDirectivePassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### RippleDirectivePassThroughAttributes [\#](https://primevue.org/ripple/\#api.ripple.interfaces.RippleDirectivePassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### RippleDirectiveBinding [\#](https://primevue.org/ripple/\#api.ripple.interfaces.RippleDirectiveBinding)
Binding of Ripple directive.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | null \| ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, "", Object, any> \| Record<string, any> | null |  |
| oldValue | any | null |  |
| arg | string | null |  |
| dir | ObjectDirective<any, any, string, string> | null |  |
| value | [RippleOptions](https://primevue.org/ripple/#api.ripple.interfaces.RippleOptions) | null | Value of the Ripple. |
## Types [\#](https://primevue.org/ripple/\#api.ripple.types)
Defines the custom types used by the module.
#### RippleDirectivePassThroughOptionType [\#](https://primevue.org/ripple/\#api.ripple.types.RippleDirectivePassThroughOptionType)
| values |
| --- |
| RippleDirectivePassThroughAttributes \| null \| undefined |
- Ripple
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Avatar Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Avatar
Avatar represents people using icons, labels and images.
## Import [\#](https://primevue.org/avatar/\#import)
```javascript
import Avatar from 'primevue/avatar';
import AvatarGroup from 'primevue/avatargroup';   //Optional for grouping
```
Copy
## Label [\#](https://primevue.org/avatar/\#label)
A letter Avatar is defined with the _label_ property.
##### Label
P
V
U
##### Circle
P
V
U
##### Badge
U
4
```markup
<Avatar label="P" class="mr-2" size="xlarge" />
<Avatar label="V" class="mr-2" size="large" style="background-color: #ece9fc; color: #2a1261" />
<Avatar label="U" class="mr-2" style="background-color: #dee9fc; color: #1a2551" />
<Avatar label="P" class="mr-2" size="xlarge" shape="circle" />
<Avatar label="V" class="mr-2" size="large" style="background-color: #ece9fc; color: #2a1261" shape="circle" />
<Avatar label="U" class="mr-2" style="background-color: #dee9fc; color: #1a2551" shape="circle" />
<OverlayBadge value="4" severity="danger" class="inline-flex">
    <Avatar label="U" size="xlarge" />
</OverlayBadge>
```
Copy
## Icon [\#](https://primevue.org/avatar/\#icon)
A font icon is displayed as an Avatar with the _icon_ property.
##### Icon
##### Circle
##### Badge
4
```markup
<Avatar icon="pi pi-user" class="mr-2" size="xlarge" />
<Avatar icon="pi pi-user" class="mr-2" size="large" style="background-color: #ece9fc; color: #2a1261" />
<Avatar icon="pi pi-user" style="background-color: #dee9fc; color: #1a2551" />
<Avatar icon="pi pi-user" class="mr-2" size="xlarge" shape="circle" />
<Avatar icon="pi pi-user" class="mr-2" size="large" style="background-color: #ece9fc; color: #2a1261" shape="circle" />
<Avatar icon="pi pi-user" style="background-color: #dee9fc; color: #1a2551" shape="circle" />
<OverlayBadge value="4" severity="danger" class="inline-flex">
    <Avatar icon="pi pi-user" size="xlarge" />
</OverlayBadge>
```
Copy
## Image [\#](https://primevue.org/avatar/\#image)
Use the _image_ property to display an image as an Avatar.
##### Image
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
![](https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png)
![](https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png)
##### Badge
![](https://primefaces.org/cdn/primevue/images/organization/walter.jpg)
4
##### Gravatar
![](https://www.gravatar.com/avatar/05dfd4b41340d09cae045235eb0893c3?d=mp)
```markup
<Avatar image="/images/avatar/amyelsner.png" class="mr-2" size="xlarge" shape="circle" />
<Avatar image="/images/avatar/asiyajavayant.png" class="mr-2" size="large" shape="circle" />
<Avatar image="/images/avatar/onyamalimba.png" shape="circle" />
<OverlayBadge value="4" severity="danger" class="inline-flex">
    <Avatar class="p-overlay-badge" image="https://primefaces.org/cdn/primevue/images/organization/walter.jpg" size="xlarge" />
</OverlayBadge>
<Avatar image="https://www.gravatar.com/avatar/05dfd4b41340d09cae045235eb0893c3?d=mp" class="flex items-center justify-center mr-2" size="xlarge" />
```
Copy
## AvatarGroup [\#](https://primevue.org/avatar/\#avatargroup)
Grouping is available by wrapping multiple Avatar components inside an AvatarGroup.
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
![](https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png)
![](https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png)
![](https://primefaces.org/cdn/primevue/images/avatar/ionibowcher.png)
![](https://primefaces.org/cdn/primevue/images/avatar/xuxuefeng.png)
+2
```markup
<AvatarGroup>
    <Avatar image="/images/avatar/amyelsner.png" shape="circle" />
    <Avatar image="/images/avatar/asiyajavayant.png" shape="circle" />
    <Avatar image="/images/avatar/onyamalimba.png" shape="circle" />
    <Avatar image="/images/avatar/ionibowcher.png" shape="circle" />
    <Avatar image="/images/avatar/xuxuefeng.png" shape="circle" />
    <Avatar label="+2" shape="circle" />
</AvatarGroup>
```
Copy
## Accessibility [\#](https://primevue.org/avatar/\#accessibility)
### Screen Reader
Avatar does not include any roles and attributes by default. Any attribute is passed to the root element so you may add a role like _img_ along with _aria-labelledby_ or _aria-label_ to describe the component. In case avatars need to be tabbable, _tabindex_ can be added as well to implement custom key handlers.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Label
- Icon
- Image
- AvatarGroup
- Accessibility
# Avatar API
API defines helper props, events and others for the PrimeVue Avatar module.
## Avatar [\#](https://primevue.org/avatar/\#api.avatar)
Avatar represents people using icons, labels and images.
\-
### Props [\#](https://primevue.org/avatar/\#api.avatar.props)
Defines valid properties in Avatar component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string | null | Defines the text to display. |  |
| icon | string | null | Defines the icon to display. |  |
| image | string | null | Defines the image to display. |  |
| size | HintedString<"large" \| "normal" \| "xlarge"> | normal | Size of the element. |  |
| shape | HintedString<"square" \| "circle"> | square | Shape of the element. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AvatarPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/avatar/\#api.avatar.emits)
Defines valid emits in Avatar component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| error | event: Event | void | Triggered when an error occurs while loading an image file. |  |
### Slots [\#](https://primevue.org/avatar/\#api.avatar.slots)
Defines valid slots in Avatar component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Content can easily be customized with the default slot instead of using the built-in modes. |  |
| icon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
### Interfaces [\#](https://primevue.org/avatar/\#api.avatar.interfaces)
Defines the custom interfaces used by the module.
#### AvatarPassThroughMethodOptions [\#](https://primevue.org/avatar/\#api.avatar.interfaces.AvatarPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AvatarProps](https://primevue.org/avatar/#api.avatar.interfaces.AvatarProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### AvatarPassThroughAttributes [\#](https://primevue.org/avatar/\#api.avatar.interfaces.AvatarPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### AvatarPassThroughOptions [\#](https://primevue.org/avatar/\#api.avatar.interfaces.AvatarPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [AvatarPassThroughOptionType](https://primevue.org/avatar/#api.avatar.types.AvatarPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| label | [AvatarPassThroughOptionType](https://primevue.org/avatar/#api.avatar.types.AvatarPassThroughOptionType) | null | Used to pass attributes to the label's DOM element. |
| icon | [AvatarPassThroughOptionType](https://primevue.org/avatar/#api.avatar.types.AvatarPassThroughOptionType) | null | Used to pass attributes to the icon's DOM element. |
| image | [AvatarPassThroughOptionType](https://primevue.org/avatar/#api.avatar.types.AvatarPassThroughOptionType) | null | Used to pass attributes to the image's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
## Types [\#](https://primevue.org/avatar/\#api.avatar.types)
Defines the custom types used by the module.
#### AvatarPassThroughOptionType [\#](https://primevue.org/avatar/\#api.avatar.types.AvatarPassThroughOptionType)
| values |
| --- |
| AvatarPassThroughAttributes \| (options: AvatarPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### AvatarEmits [\#](https://primevue.org/avatar/\#api.avatar.types.AvatarEmits)
| values |
| --- |
| EmitFn<AvatarEmitsOptions> |
## AvatarGroup [\#](https://primevue.org/avatar/\#api.avatargroup)
A set of Avatars can be displayed together using the AvatarGroup component.
### Props [\#](https://primevue.org/avatar/\#api.avatargroup.props)
Defines valid properties in AvatarGroup component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<AvatarGroupPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/avatar/\#api.avatargroup.slots)
Defines valid slots in AvatarGroup component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default slot to detect Avatar components. |  |
### Interfaces [\#](https://primevue.org/avatar/\#api.avatargroup.interfaces)
Defines the custom interfaces used by the module.
#### AvatarGroupPassThroughMethodOptions [\#](https://primevue.org/avatar/\#api.avatargroup.interfaces.AvatarGroupPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [AvatarGroupProps](https://primevue.org/avatar/#api.avatargroup.interfaces.AvatarGroupProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### AvatarGroupPassThroughAttributes [\#](https://primevue.org/avatar/\#api.avatargroup.interfaces.AvatarGroupPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### AvatarGroupPassThroughOptions [\#](https://primevue.org/avatar/\#api.avatargroup.interfaces.AvatarGroupPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [AvatarGroupPassThroughOptionType](https://primevue.org/avatar/#api.avatargroup.types.AvatarGroupPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
## Types [\#](https://primevue.org/avatar/\#api.avatargroup.types)
Defines the custom types used by the module.
#### AvatarGroupPassThroughOptionType [\#](https://primevue.org/avatar/\#api.avatargroup.types.AvatarGroupPassThroughOptionType)
| values |
| --- |
| AvatarGroupPassThroughAttributes \| (options: AvatarGroupPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### AvatarGroupEmits [\#](https://primevue.org/avatar/\#api.avatargroup.types.AvatarGroupEmits)
| values |
| --- |
| EmitFn<AvatarGroupEmitsOptions> |
- Avatar
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
- AvatarGroup
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue ColorPicker
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# ColorPicker
ColorPicker is an input component to select a color.
## Import [\#](https://primevue.org/colorpicker/\#import)
```javascript
import ColorPicker from 'primevue/colorpicker';
```
Copy
## Basic [\#](https://primevue.org/colorpicker/\#basic)
ColorPicker is used with the _v-model_ property for two-way value binding.
```markup
<ColorPicker v-model="color" />
```
Copy
## Forms [\#](https://primevue.org/colorpicker/\#forms)
ColorPicker integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col items-center gap-2">
        <ColorPicker name="color" />
        <Message v-if="$form.color?.invalid" severity="error" size="small" variant="simple">{{ $form.color.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Inline [\#](https://primevue.org/colorpicker/\#inline)
ColorPicker is displayed as a popup by default, add _inline_ property to customize this behavior.
```markup
<ColorPicker v-model="color" inline />
```
Copy
## Format [\#](https://primevue.org/colorpicker/\#format)
Default color format to use in value binding is _hex_ and other possible values can be _rgb_ and _hsb_ using the _format_ property.
HEX
6466f1
RGB
{"r":100,"g":102,"b":241}
HSB
{"h":239,"s":59,"b":95}
```markup
<ColorPicker v-model="colorHEX" inputId="cp-hex" format="hex" class="mb-4" />
<ColorPicker v-model="colorRGB" inputId="cp-rgb" format="rgb" class="mb-4" />
<ColorPicker v-model="colorHSB" inputId="cp-hsb" format="hsb" class="mb-4" />
```
Copy
## Disabled [\#](https://primevue.org/colorpicker/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
```markup
<ColorPicker v-model="color" disabled />
```
Copy
## Accessibility [\#](https://primevue.org/colorpicker/\#accessibility)
### Screen Reader
Specification does not cover a color picker [yet](https://github.com/w3c/aria/issues/930) and using a semantic native color picker is not consistent across browsers so currently component is not compatible with screen readers. In the upcoming versions, text fields will be introduced below the slider section to be able to pick a color using accessible text boxes in hsl, rgba and hex formats.
### Closed State Keyboard Support of Popup ColorPicker
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the color picker button. |
| _space_ | Opens the popup and moves focus to the color slider. |
### Popup Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Selects the color and closes the popup. |
| _space_ | Selects the color and closes the popup. |
| _escape_ | Closes the popup, moves focus to the input. |
### Color Picker Slider
| Key | Function |
| --- | --- |
| _arrow keys_ | Changes color. |
### Hue Slider
| Key | Function |
| --- | --- |
| _up arrow_ _down arrow_ | Changes hue. |
- Import
- Basic
- Forms
- Inline
- Format
- Disabled
- Accessibility
# ColorPicker API
API defines helper props, events and others for the PrimeVue ColorPicker module.
## ColorPicker [\#](https://primevue.org/colorpicker/\#api.colorpicker)
ColorPicker groups a collection of contents in tabs.
### Props [\#](https://primevue.org/colorpicker/\#api.colorpicker.props)
Defines valid properties in ColorPicker component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultColor | any | ff0000 | Initial color to display when value is not defined. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| inline | boolean | false | Whether to display as an overlay or not. |  |
| format | HintedString<"hex" \| "rgb" \| "hsb"> | hex | Format to use in value binding, supported formats are 'hex', 'rgb' and 'hsb'. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| tabindex | string | null | Index of the element in tabbing order. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| inputId | string | null | Identifier of the focus input to match a label defined for the dropdown. |  |
| panelClass | any | null | Style class of the overlay panel. |  |
| overlayClass | any | null | Style class of the overlay panel. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ColorPickerPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/colorpicker/\#api.colorpicker.emits)
Defines valid emits in ColorPicker component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [ColorPickerChangeEvent](https://primevue.org/colorpicker/#api.colorpicker.events.ColorPickerChangeEvent) | void | Callback to invoke when a color is selected. |  |
| show |  | void | Callback to invoke when input is cleared by the user. |  |
| hide |  | void | Callback to invoke when input is cleared by the user. |  |
### Events [\#](https://primevue.org/colorpicker/\#api.colorpicker.events)
Defines the custom events used by the component's emit.
#### ColorPickerChangeEvent [\#](https://primevue.org/colorpicker/\#api.colorpicker.events.ColorPickerChangeEvent)
Custom change event.
See [change](https://primevue.org/colorpicker/#api.colorpicker.emitsoptions.change)
| name | type | description |
| --- | --- | --- |
| event | Event | Browser event |
| value | any | Selected color value. |
### Interfaces [\#](https://primevue.org/colorpicker/\#api.colorpicker.interfaces)
Defines the custom interfaces used by the module.
#### ColorPickerPassThroughMethodOptions [\#](https://primevue.org/colorpicker/\#api.colorpicker.interfaces.ColorPickerPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ColorPickerProps](https://primevue.org/colorpicker/#api.colorpicker.interfaces.ColorPickerProps) | null | Defines valid properties. |
| state | [ColorPickerState](https://primevue.org/colorpicker/#api.colorpicker.interfaces.ColorPickerState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ColorPickerPassThroughOptions [\#](https://primevue.org/colorpicker/\#api.colorpicker.interfaces.ColorPickerPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ColorPickerPassThroughOptionType](https://primevue.org/colorpicker/#api.colorpicker.types.ColorPickerPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| preview | [ColorPickerPassThroughOptionType](https://primevue.org/colorpicker/#api.colorpicker.types.ColorPickerPassThroughOptionType) | null | Used to pass attributes to the preview's DOM element. |
| overlay | [ColorPickerPassThroughOptionType](https://primevue.org/colorpicker/#api.colorpicker.types.ColorPickerPassThroughOptionType) | null | Used to pass attributes to the panel's DOM element. |
| content | [ColorPickerPassThroughOptionType](https://primevue.org/colorpicker/#api.colorpicker.types.ColorPickerPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| colorSelector | [ColorPickerPassThroughOptionType](https://primevue.org/colorpicker/#api.colorpicker.types.ColorPickerPassThroughOptionType) | null | Used to pass attributes to the color selector's DOM element. |
| colorBackground | [ColorPickerPassThroughOptionType](https://primevue.org/colorpicker/#api.colorpicker.types.ColorPickerPassThroughOptionType) | null | Used to pass attributes to the color background's DOM element. |
| colorHandle | [ColorPickerPassThroughOptionType](https://primevue.org/colorpicker/#api.colorpicker.types.ColorPickerPassThroughOptionType) | null | Used to pass attributes to the color handler's DOM element. |
| hue | [ColorPickerPassThroughOptionType](https://primevue.org/colorpicker/#api.colorpicker.types.ColorPickerPassThroughOptionType) | null | Used to pass attributes to the hue's DOM element. |
| hueHandle | [ColorPickerPassThroughOptionType](https://primevue.org/colorpicker/#api.colorpicker.types.ColorPickerPassThroughOptionType) | null | Used to pass attributes to the hue handler's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [ColorPickerPassThroughTransitionType](https://primevue.org/colorpicker/#api.colorpicker.types.ColorPickerPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### ColorPickerPassThroughAttributes [\#](https://primevue.org/colorpicker/\#api.colorpicker.interfaces.ColorPickerPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ColorPickerState [\#](https://primevue.org/colorpicker/\#api.colorpicker.interfaces.ColorPickerState)
Defines current inline state in ColorPicker component.
| name | type | default | description |
| --- | --- | --- | --- |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |
## Types [\#](https://primevue.org/colorpicker/\#api.colorpicker.types)
Defines the custom types used by the module.
#### ColorPickerPassThroughOptionType [\#](https://primevue.org/colorpicker/\#api.colorpicker.types.ColorPickerPassThroughOptionType)
| values |
| --- |
| ColorPickerPassThroughAttributes \| (options: ColorPickerPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ColorPickerPassThroughTransitionType [\#](https://primevue.org/colorpicker/\#api.colorpicker.types.ColorPickerPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: ColorPickerPassThroughMethodOptions) => TransitionProps \| undefined |
#### ColorPickerEmits [\#](https://primevue.org/colorpicker/\#api.colorpicker.types.ColorPickerEmits)
| values |
| --- |
| EmitFn<ColorPickerEmitsOptions> |
- ColorPicker
  - Props
  - Emits
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## ToggleButton Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# ToggleButton
ToggleButton is used to select a boolean value using a button.
## Import [\#](https://primevue.org/togglebutton/\#import)
```javascript
import ToggleButton from 'primevue/togglebutton';
```
Copy
## Basic [\#](https://primevue.org/togglebutton/\#basic)
ToggleButton is used with the _v-model_ property for two-way value binding.
Off
```markup
<ToggleButton v-model="checked" onLabel="On" offLabel="Off" />
```
Copy
## Forms [\#](https://primevue.org/togglebutton/\#forms)
ToggleButton integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Reject All
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col items-center gap-1">
        <ToggleButton name="consent" class="w-48" onLabel="Accept All" offLabel="Reject All" />
        <Message v-if="$form.consent?.invalid" severity="error" variant="simple">{{ $form.consent.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Customized [\#](https://primevue.org/togglebutton/\#customized)
Icons and Labels can be customized using _onLabel_, _offLabel_, _onIcon_ and _offIcon_ properties.
Unlocked
```markup
<ToggleButton v-model="checked" onLabel="Locked" offLabel="Unlocked" onIcon="pi pi-lock"
    offIcon="pi pi-lock-open" class="w-36" aria-label="Do you confirm" />
```
Copy
## Sizes [\#](https://primevue.org/togglebutton/\#sizes)
ToggleButton provides _small_ and _large_ sizes as alternatives to the base.
OffOffOff
```markup
<ToggleButton v-model="value1" onLabel="On" offLabel="Off" size="small" class="min-w-16" />
<ToggleButton v-model="value2" onLabel="On" offLabel="Off" class="min-w-20" />
<ToggleButton v-model="value3" onLabel="On" offLabel="Off" size="large" class="min-w-24" />
```
Copy
## Invalid [\#](https://primevue.org/togglebutton/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
No
```markup
<ToggleButton v-model="checked" onIcon="pi pi-check" offIcon="pi pi-times" :invalid="!checked" class="w-full sm:w-40" aria-label="Confirmation" />
```
Copy
## Disabled [\#](https://primevue.org/togglebutton/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
No
```markup
<ToggleButton v-model="checked" disabled onIcon="pi pi-check" offIcon="pi pi-times"
    class="w-full sm:w-40" aria-label="Confirmation" />
```
Copy
## Accessibility [\#](https://primevue.org/togglebutton/\#accessibility)
### Screen Reader
ToggleButton component uses a native button element as the switch element internally that is only visible to screen readers. Value to describe the component can be defined with _aria-labelledby_ or _aria-label_ props, it is highly suggested to use either of these props as the component changes the label displayed which will result in screen readers to read different labels when the component receives focus. To prevent this, always provide an aria label that does not change related to state.
```markup
<span id="rememberme">Remember Me</span>
<ToggleButton aria-labelledby="rememberme" />
<ToggleButton aria-label="Remember Me" />
```
Copy
### Keyboard Support
Keyboard interaction is derived from the native browser handling of checkboxs in a group.
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the button. |
| _space_ | Toggles the checked state. |
- Import
- Basic
- Forms
- Customized
- Sizes
- Invalid
- Disabled
- Accessibility
# ToggleButton API
API defines helper props, events and others for the PrimeVue ToggleButton module.
## ToggleButton [\#](https://primevue.org/togglebutton/\#api.togglebutton)
ToggleButton is used to select a boolean value using a button.
### Props [\#](https://primevue.org/togglebutton/\#api.togglebutton.props)
Defines valid properties in ToggleButton component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | boolean | false | Value of the component. |  |
| defaultValue | boolean | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| onIcon | string | null | Icon for the on state. |  |
| offIcon | string | null | Icon for the off state. |  |
| onLabel | string | yes | Label for the on state. |  |
| offLabel | string | no | Label for the off state. |  |
| iconPos | HintedString<"left" \| "right"> | left | Position of the icon. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the element should be disabled. |  |
| readonly | boolean | null | When present, it specifies that an input field is read-only. |  |
| tabindex | string | null | Index of the element in tabbing order. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ToggleButtonPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/togglebutton/\#api.togglebutton.emits)
Defines valid emits in ToggleButton component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: boolean | void | Emitted when the value changes. |  |
| value-change | value: boolean | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: Event | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
### Slots [\#](https://primevue.org/togglebutton/\#api.togglebutton.slots)
Defines valid slots in ToggleButton component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content such as icons, images and text can be placed inside the button via the default slot. |  |
| icon | scope: {<br>value: any, // Current valueclass: any, // Icon style class<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
### Interfaces [\#](https://primevue.org/togglebutton/\#api.togglebutton.interfaces)
Defines the custom interfaces used by the module.
#### ToggleButtonPassThroughMethodOptions [\#](https://primevue.org/togglebutton/\#api.togglebutton.interfaces.ToggleButtonPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ToggleButtonProps](https://primevue.org/togglebutton/#api.togglebutton.interfaces.ToggleButtonProps) | null | Defines valid properties. |
| context | [ToggleButtonContext](https://primevue.org/togglebutton/#api.togglebutton.interfaces.ToggleButtonContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ToggleButtonPassThroughOptions [\#](https://primevue.org/togglebutton/\#api.togglebutton.interfaces.ToggleButtonPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ToggleButtonPassThroughOptionType<T>](https://primevue.org/togglebutton/#api.togglebutton.types.ToggleButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| content | [ToggleButtonPassThroughOptionType<T>](https://primevue.org/togglebutton/#api.togglebutton.types.ToggleButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the content's DOM element. |
| icon | [ToggleButtonPassThroughOptionType<T>](https://primevue.org/togglebutton/#api.togglebutton.types.ToggleButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the icon's DOM element. |
| label | [ToggleButtonPassThroughOptionType<T>](https://primevue.org/togglebutton/#api.togglebutton.types.ToggleButtonPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the label's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ToggleButtonPassThroughAttributes [\#](https://primevue.org/togglebutton/\#api.togglebutton.interfaces.ToggleButtonPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ToggleButtonContext [\#](https://primevue.org/togglebutton/\#api.togglebutton.interfaces.ToggleButtonContext)
Defines current options in ToggleButton component.
| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | false | Current highlighted state as a boolean. |
| disabled | boolean | false | Current disabled state as a boolean. |
## Types [\#](https://primevue.org/togglebutton/\#api.togglebutton.types)
Defines the custom types used by the module.
#### ToggleButtonPassThroughOptionType [\#](https://primevue.org/togglebutton/\#api.togglebutton.types.ToggleButtonPassThroughOptionType)
| values |
| --- |
| ToggleButtonPassThroughAttributes \| (options: ToggleButtonPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ToggleButtonEmits [\#](https://primevue.org/togglebutton/\#api.togglebutton.types.ToggleButtonEmits)
| values |
| --- |
| EmitFn<ToggleButtonEmitsOptions> |
- ToggleButton
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Forms Library
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Forms
The PrimeVue Forms library provides comprehensive form state management with built-in validation support.
## Download [\#](https://primevue.org/forms/\#download)
Forms add-on is available for download on npm registry.
```markup
# Using npm
npm install @primevue/forms
# Using yarn
yarn add @primevue/forms
# Using pnpm
pnpm add @primevue/forms
```
Copy
## Import [\#](https://primevue.org/forms/\#import)
The form component is responsible for managing the form state and must encapsulate the form fields.
```javascript
import { Form } from '@primevue/forms';
```
Copy
## Basic [\#](https://primevue.org/forms/\#basic)
All PrimeVue form components are designed for seamless integration with the forms library. Instead of using the standard _v-model_, the _name_ property is used to link a state object that tracks values, errors, and actions. The form component provides four key properties for state management.
| Property | Description |
| --- | --- |
| v-slot="$form" | Exposes the main _$form_ object that tracks the state management of the fields. |
| initialValues | Specifies the default values to initiate the form with. |
| resolver | The validation handler to implement validations or to bind a schema like _Zod_, _Yup_, _Valibot_ and more. |
| @submit | The event handler to execute when the form is submitted. |
Submit
```markup
<Form v-slot="$form" :initialValues :resolver @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-56">
    <div class="flex flex-col gap-1">
        <InputText name="username" type="text" placeholder="Username" fluid />
        <Message v-if="$form.username?.invalid" severity="error" size="small" variant="simple">{{ $form.username.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## States [\#](https://primevue.org/forms/\#states)
The _$form_ object tracks the state management of the fields. Each field is linked with the _name_ property. View the _FormFieldState_ type in the API documentation for details about each property.
Submit
Form States
```
{
  "valid": true,
  "username": {
    "value": "",
    "touched": false,
    "dirty": false,
    "pristine": true,
    "valid": true,
    "invalid": false,
    "error": null,
    "errors": []
  }
}
```
```markup
<Form v-slot="$form" :initialValues :resolver @submit="onFormSubmit" class="grid lg:grid-cols-2 gap-4 w-full">
    <div class="flex flex-col justify-center items-center gap-4">
        <InputText name="username" type="text" placeholder="Username" class="w-full sm:w-56" />
        <Button type="submit" severity="secondary" label="Submit" class="w-full sm:w-56" />
    </div>
    <Fieldset legend="Form States" class="h-80 overflow-auto">
        <pre class="whitespace-pre-wrap">{{ $form }}</pre>
    </Fieldset>
</Form>
```
Copy
## Resolvers [\#](https://primevue.org/forms/\#resolvers)
Validations are implemented with the _resolver_ property. A custom resolver is responsible for handling the validation and returning an _errors_ object with key-value pairs where key is the form field name and value is an array of error object data. For productivity, we recommend using a schema validation library instead of building your own custom validation logic. The forms library provide built-in resolvers for popular options including [Zod](https://zod.dev/), [Yup](https://github.com/jquense/yup), [Joi](https://joi.dev/), [Valibot](https://valibot.dev/), and [Superstruct](https://docs.superstructjs.org/) that can be imported from _@primevue/forms/resolvers_ path.
Schema
Zod
Yup
Valibot
SuperStruct
Custom
Submit
```markup
<Form v-slot="$form" :initialValues :resolver="resolver" @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-56">
    <div class="flex flex-col gap-1">
        <InputText name="username" type="text" placeholder="Username" fluid />
        <Message v-if="$form.username?.invalid" severity="error" size="small" variant="simple">{{ $form.username.error.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## ValidateOn [\#](https://primevue.org/forms/\#validateon)
Form component supports flexible validation triggers, allowing validation on value updates, blur events, form mount, or submission. These behaviors can be configured at form level or on specific fields via the _validateOnValueUpdate_, _validateOnBlur_, _validateOnMount_, and _validateOnSubmit_ options of the _formControl_ property.
In this example, form disables _validateOnValueUpdate_ and enables _validateOnBlur_ at form level, and validates **firstName** on mount. The _firstName_ field, overrides the form level setting locally.
First name is required.
Submit
```markup
<Form v-slot="$form" :initialValues :resolver :validateOnValueUpdate="false" :validateOnBlur="true" :validateOnMount="['firstName']" @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-56">
    <div class="flex flex-col gap-1">
        <InputText name="username" type="text" placeholder="Username" fluid />
        <Message v-if="$form.username?.invalid" severity="error" size="small" variant="simple">{{ $form.username.error.message }}</Message>
    </div>
    <div class="flex flex-col gap-1">
        <InputText name="firstName" type="text" placeholder="First Name" fluid :formControl="{ validateOnValueUpdate: true }" />
        <Message v-if="$form.firstName?.invalid" severity="error" size="small" variant="simple">{{ $form.firstName.error.message }}</Message>
    </div>
    <div class="flex flex-col gap-1">
        <InputText name="lastName" type="text" placeholder="Last Name" fluid />
        <Message v-if="$form.lastName?.invalid" severity="error" size="small" variant="simple">{{ $form.lastName.error.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## FormField [\#](https://primevue.org/forms/\#formfield)
### Import [\#](https://primevue.org/forms/\#formfield-import)
The _FormField_ is a helper component that provides validation and tracking for input elements, offering a more flexible structure to bind PrimeVue, non-PrimeVue components or native HTML elements to Form API. Additionally, with props like _validateOn\*_, _initialValue_, _resolver_, and _name_, behaviors can be controlled directly from this component.
```javascript
import { FormField } from '@primevue/forms';
```
Copy
### Built-in [\#](https://primevue.org/forms/\#formfield-built-in)
Although PrimeVue components have built-in support for the Form API, you may still prefer to utilize the components as wrapped with the FormField. This is a matter of preference, for example in case you are also using FormField for other 3rd party components, your own custom components, and native elements, for consistency it may be an option.
Submit
```markup
<Form :resolver @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-56">
    <FormField v-slot="$field" name="username" initialValue="" class="flex flex-col gap-1">
        <InputText type="text" placeholder="Username" />
        <Message v-if="$field?.invalid" severity="error" size="small" variant="simple">{{ $field.error?.message }}</Message>
    </FormField>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
### Non PrimeVue [\#](https://primevue.org/forms/\#formfield-non-primevue)
Form API is not strictly tied to PrimeVue components, providing a flexible way to manage validation and state for any native HTML elements, your own custom components or third-party libraries.
Submit
```markup
<Form :resolver @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-56">
    <FormField v-slot="$field" name="username" initialValue="" class="flex flex-col gap-1">
        <input type="text" placeholder="Username" :class="[{ error: $field?.invalid }]" v-bind="$field.props" />
        <Message v-if="$field?.invalid" severity="error" size="small" variant="simple">{{ $field.error?.message }}</Message>
    </FormField>
    <FormField v-slot="$field" name="password" initialValue="PrimeVue" class="flex flex-col gap-1">
        <input v-model="$field.value" type="password" placeholder="Password" :class="[{ error: $field?.invalid }]" @input="$field.onInput" @blur="$field.onBlur" @change="$field.onChange" />
        <Message v-if="$field?.invalid" severity="error" size="small" variant="simple">{{ $field.error?.message }}</Message>
    </FormField>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
### Resolver [\#](https://primevue.org/forms/\#formfield-resolver)
Each FormField can have its own dedicated resolver, allowing you to define custom validation logic for individual fields. This flexibility enables tailored validation rules, ensuring that each form field meets specific criteria.
Enter a password
Submit
```markup
<Form :initialValues :resolver @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-80">
    <FormField v-slot="$field" name="username" initialValue="" :resolver="zodUserNameResolver" class="flex flex-col gap-1">
        <InputText type="text" placeholder="Username" />
        <Message v-if="$field?.invalid" severity="error" size="small" variant="simple">{{ $field.error?.message }}</Message>
    </FormField>
    <FormField v-slot="$field" name="firstname" initialValue="" :resolver="yupFirstNameResolver" class="flex flex-col gap-1">
        <InputText type="text" placeholder="First Name" />
        <Message v-if="$field?.invalid" severity="error" size="small" variant="simple">{{ $field.error?.message }}</Message>
    </FormField>
    <FormField v-slot="$field" name="lastname" initialValue="" :resolver="valibotLastNameResolver" class="flex flex-col gap-1">
        <InputText type="text" placeholder="Last Name" />
        <Message v-if="$field?.invalid" severity="error" size="small" variant="simple">{{ $field.error?.message }}</Message>
    </FormField>
    <FormField v-slot="$field" name="password" initialValue="" :resolver="customPasswordResolver" class="flex flex-col gap-1">
        <Password type="text" placeholder="Password" :feedback="false" toggleMask fluid />
        <Message v-if="$field?.invalid" severity="error" size="small" variant="simple">{{ $field.error?.message }}</Message>
    </FormField>
    <FormField v-slot="$field" name="details" class="flex flex-col gap-1">
        <Textarea placeholder="Details" />
        <Message v-if="$field?.invalid" severity="error" size="small" variant="simple">{{ $field.error?.message }}</Message>
    </FormField>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
### Template [\#](https://primevue.org/forms/\#formfield-template)
It renders as a HTML div element, but this behavior can be modified using the _as_ and _asChild_ props to render different HTML elements or to pass a custom component, allowing for greater flexibility in form structure.
Enter a password
Submit
```markup
<Form :resolver @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-56">
    <FormField v-slot="$field" as="section" name="username" initialValue="" class="flex flex-col gap-2">
        <InputText type="text" placeholder="Username" />
        <Message v-if="$field?.invalid" severity="error" size="small" variant="simple">{{ $field.error?.message }}</Message>
    </FormField>
    <FormField v-slot="$field" asChild name="password" initialValue="">
        <section class="flex flex-col gap-2">
            <Password type="text" placeholder="Password" :feedback="false" toggleMask fluid />
            <Message v-if="$field?.invalid" severity="error" size="small" variant="simple">{{ $field.error?.message }}</Message>
        </section>
    </FormField>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Submit [\#](https://primevue.org/forms/\#submit)
The _submit_ callback returns an object that encapsulates the form's validity, any existing errors, and its current state. This enables access to the form values, validation status, and any errors present at the time of submission. View the _FormSubmitEvent_ in the API documentation for more information about the available event data.
Enter a password
Submit
```markup
<Form v-slot="$form" :initialValues :resolver @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-60">
    <div class="flex flex-col gap-1">
        <InputText name="username" type="text" placeholder="Username" fluid />
        <Message v-if="$form.username?.invalid" severity="error" size="small" variant="simple">{{ $form.username.error.message }}</Message>
    </div>
    <div class="flex flex-col gap-1">
        <Password name="password" placeholder="Password" :feedback="false" toggleMask fluid />
        <Message v-if="$form.password?.invalid" severity="error" size="small" variant="simple">
            <ul class="my-0 px-4 flex flex-col gap-1">
                <li v-for="(error, index) of $form.password.errors" :key="index">{{ error.message }}</li>
            </ul>
        </Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Dynamic [\#](https://primevue.org/forms/\#dynamic)
This section demonstrates how to create a dynamic form using a custom Form component. It showcases an example where form fields are generated dynamically based on the provided configuration, allowing for flexible form structures. The components named _Dynamic\*_ shown in this example are not built-in, and only available for sampling purposes. First form uses a declarative approach whereas second form goes for a programmatic approach. We suggest running this sample in StackBlitz to view the comprehensive implementation.
Form 1
Username
Password
Enter a password
Submit
Form 2
Username
Password
Enter a password
Submit
```markup
<Fieldset legend="Form 1" pt:content:class="flex justify-center">
    <DynamicForm @submit="onFormSubmit('Form 1', $event)">
        <DynamicFormField groupId="userId_1" name="username">
            <DynamicFormLabel>Username</DynamicFormLabel>
            <DynamicFormControl defaultValue="PrimeVue" fluid :schema="userNameSchema" />
            <DynamicFormMessage />
        </DynamicFormField>
        <DynamicFormField groupId="passId_1" name="password">
            <DynamicFormLabel>Password</DynamicFormLabel>
            <DynamicFormControl as="Password" :feedback="false" toggleMask fluid :schema="passwordSchema" />
            <DynamicFormMessage errorType="minimum" />
            <DynamicFormMessage errorType="maximum" />
            <DynamicFormMessage errorType="uppercase" severity="warn" />
            <DynamicFormMessage errorType="lowercase" severity="warn" />
            <DynamicFormMessage errorType="number" severity="secondary" />
        </DynamicFormField>
        <DynamicFormSubmit />
    </DynamicForm>
</Fieldset>
<Fieldset legend="Form 2" pt:content:class="flex justify-center">
    <DynamicForm :fields @submit="onFormSubmit('Form 2', $event)" />
</Fieldset>
```
Copy
## Accessibility [\#](https://primevue.org/forms/\#accessibility)
### Screen Reader
Form does not require any roles and attributes.
### Keyboard Support
Component does not include any interactive elements.
- Download
- Import
- Basic
- States
- Resolvers
- ValidateOn
- FormField
  - Import
  - Built-in
  - Non PrimeVue
  - Resolver
  - Template
- Submit
- Dynamic
- Accessibility
# Forms API
API defines helper props, events and others for the PrimeVue Forms module.
## Form [\#](https://primevue.org/forms/\#api.form)
Form provides validation functionality and manages form state.
### Props [\#](https://primevue.org/forms/\#api.form.props)
Defines valid properties in Form component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| resolver | Function | null |  |  |
| initialValues | Record<string, any> | null | The initial values for the form fields. |  |
| validateOnValueUpdate | boolean \| string\[\] | true | Whether to validate the form fields when the values change. |  |
| validateOnBlur | boolean \| string\[\] | false | Whether to validate the form fields when they lose focus (on blur). |  |
| validateOnMount | boolean \| string\[\] | false | Whether to validate the form fields immediately after the form is mounted. |  |
| validateOnSubmit | boolean \| string\[\] | true | Whether to validate the form fields when the form is submitted. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<FormPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | PassThroughOptions | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Events [\#](https://primevue.org/forms/\#api.form.events)
Defines the custom events used by the component's emit.
#### FormSubmitEvent [\#](https://primevue.org/forms/\#api.form.events.FormSubmitEvent)
Submit events
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | The original DOM event. |
| values | any | The form values. |
| states | [Record<string, FormFieldState>](https://primevue.org/forms/#api.form.interfaces.Record%3Cstring,%20FormFieldState%3E) | The form state. |
| valid | boolean | Whether the form is valid. |
| errors | any\[\] | The form errors. |
| reset | Function |  |
#### FormResetEvent [\#](https://primevue.org/forms/\#api.form.events.FormResetEvent)
Reset events
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | The original DOM event. |
### Interfaces [\#](https://primevue.org/forms/\#api.form.interfaces)
Defines the custom interfaces used by the module.
#### FormPassThroughMethodOptions [\#](https://primevue.org/forms/\#api.form.interfaces.FormPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [FormProps](https://primevue.org/forms/#api.form.interfaces.FormProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### FormPassThroughOptions [\#](https://primevue.org/forms/\#api.form.interfaces.FormPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [FormPassThroughOptionType](https://primevue.org/forms/#api.form.types.FormPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### FormPassThroughAttributes [\#](https://primevue.org/forms/\#api.form.interfaces.FormPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### FormResolverOptions [\#](https://primevue.org/forms/\#api.form.interfaces.FormResolverOptions)
Resolver options for Form component.
| name | type | default | description |
| --- | --- | --- | --- |
| values | Record<string, any> | null | The values of the form fields. |
| names | undefined \| string\[\] | null | The names of the form fields. |
#### FormFieldState [\#](https://primevue.org/forms/\#api.form.interfaces.FormFieldState)
The state of a form field.
| name | type | default | description |
| --- | --- | --- | --- |
| value | any | null | The value of the form field. |
| touched | boolean | false | Whether the form field has been touched. |
| dirty | boolean | false | Whether the form field has been modified. |
| pristine | boolean | true | Whether the form field has not been modified. |
| valid | boolean | true | Whether the form field is valid. |
| invalid | boolean | false | Whether the form field is invalid. |
| error | any | null | The first error message of the form field. |
| errors | any\[\] | \[\] | All error messages of the form field. |
#### FormInstance [\#](https://primevue.org/forms/\#api.form.interfaces.FormInstance)
| name | type | default | description |
| --- | --- | --- | --- |
| setFieldValue | Function | null |  |
| getFieldState | Function | null |  |
| validate | Function | null |  |
| setValues | Function | null |  |
| reset | Function | null |  |
| submit | Function | null |  |
| valid | boolean | null | Whether the form is valid. |
| states | [Record<string, FormFieldState>](https://primevue.org/forms/#api.form.interfaces.Record%3Cstring,%20FormFieldState%3E) | null | The state of each form field, with the field name as the key and its state as the value. |
## Types [\#](https://primevue.org/forms/\#api.form.types)
Defines the custom types used by the module.
#### FormPassThroughOptionType [\#](https://primevue.org/forms/\#api.form.types.FormPassThroughOptionType)
| values |
| --- |
| FormPassThroughAttributes \| (options: FormPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### FormEmits [\#](https://primevue.org/forms/\#api.form.types.FormEmits)
| values |
| --- |
| EmitFn<FormEmitsOptions> |
## FormField [\#](https://primevue.org/forms/\#api.formfield)
FormField is a helper component that provides validation and tracking for form fields.
### Props [\#](https://primevue.org/forms/\#api.formfield.props)
Defines valid properties in Form component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| name | string | null | The name of the form field. |  |
| resolver | Function | null |  |  |
| initialValue | any | null | The initial value for the form field. |  |
| validateOnValueUpdate | boolean | null | Whether to validate the form field when the value change. |  |
| validateOnBlur | boolean | null | Whether to validate the form field when it loses focus (on blur). |  |
| validateOnMount | boolean | null | Whether to validate the form field immediately after the form is mounted. |  |
| validateOnSubmit | boolean | null | Whether to validate the form field when the form is submitted. |  |
| as | string \| Component | DIV | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<FormFieldPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | PassThroughOptions | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Interfaces [\#](https://primevue.org/forms/\#api.formfield.interfaces)
Defines the custom interfaces used by the module.
#### FormFieldPassThroughMethodOptions [\#](https://primevue.org/forms/\#api.formfield.interfaces.FormFieldPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [FormFieldProps](https://primevue.org/forms/#api.formfield.interfaces.FormFieldProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### FormFieldPassThroughOptions [\#](https://primevue.org/forms/\#api.formfield.interfaces.FormFieldPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [FormFieldPassThroughOptionType](https://primevue.org/forms/#api.formfield.types.FormFieldPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### FormFieldPassThroughAttributes [\#](https://primevue.org/forms/\#api.formfield.interfaces.FormFieldPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### FormFieldResolverOptions [\#](https://primevue.org/forms/\#api.formfield.interfaces.FormFieldResolverOptions)
Resolver options for Form component.
| name | type | default | description |
| --- | --- | --- | --- |
| value | any | null | The value of the form field. |
| name | undefined \| string | null | The name of the form field. |
## Types [\#](https://primevue.org/forms/\#api.formfield.types)
Defines the custom types used by the module.
#### FormFieldPassThroughOptionType [\#](https://primevue.org/forms/\#api.formfield.types.FormFieldPassThroughOptionType)
| values |
| --- |
| FormFieldPassThroughAttributes \| (options: FormFieldPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### FormEmits [\#](https://primevue.org/forms/\#api.formfield.types.FormEmits)
| values |
| --- |
| EmitFn<FormFieldEmitsOptions> |
- Form
  - Props
  - Events
  - Interfaces
  - Types
- FormField
  - Props
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Dialog Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Dialog
Dialog is a container to display content in an overlay window.
## Import [\#](https://primevue.org/dialog/\#import)
```javascript
import Dialog from 'primevue/dialog';
```
Copy
## Basic [\#](https://primevue.org/dialog/\#basic)
Dialog is used as a container and visibility is controlled with a binding to _visible_ property.
Show
```markup
<Button label="Show" @click="visible = true" />
<Dialog v-model:visible="visible" modal header="Edit Profile" :style="{ width: '25rem' }">
    <span class="text-surface-500 dark:text-surface-400 block mb-8">Update your information.</span>
    <div class="flex items-center gap-4 mb-4">
        <label for="username" class="font-semibold w-24">Username</label>
        <InputText id="username" class="flex-auto" autocomplete="off" />
    </div>
    <div class="flex items-center gap-4 mb-8">
        <label for="email" class="font-semibold w-24">Email</label>
        <InputText id="email" class="flex-auto" autocomplete="off" />
    </div>
    <div class="flex justify-end gap-2">
        <Button type="button" label="Cancel" severity="secondary" @click="visible = false"></Button>
        <Button type="button" label="Save" @click="visible = false"></Button>
    </div>
</Dialog>
```
Copy
## Template [\#](https://primevue.org/dialog/\#template)
Header and Footer sections allow customization via templating.
Show
```markup
<Button label="Show" @click="visible = true" />
<Dialog v-model:visible="visible" modal header="Edit Profile" :style="{ width: '25rem' }">
    <template #header>
        <div class="inline-flex items-center justify-center gap-2">
            <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" shape="circle" />
            <span class="font-bold whitespace-nowrap">Amy Elsner</span>
        </div>
    </template>
    <span class="text-surface-500 dark:text-surface-400 block mb-8">Update your information.</span>
    <div class="flex items-center gap-4 mb-4">
        <label for="username" class="font-semibold w-24">Username</label>
        <InputText id="username" class="flex-auto" autocomplete="off" />
    </div>
    <div class="flex items-center gap-4 mb-2">
        <label for="email" class="font-semibold w-24">Email</label>
        <InputText id="email" class="flex-auto" autocomplete="off" />
    </div>
    <template #footer>
        <Button label="Cancel" text severity="secondary" @click="visible = false" autofocus />
        <Button label="Save" outlined severity="secondary" @click="visible = false" autofocus />
    </template>
</Dialog>
```
Copy
## Position [\#](https://primevue.org/dialog/\#position)
The _position_ property defines the location of relative to the screen.
LeftRight
TopLeftTopTopRight
BottomLeftBottomBottomRight
```markup
<div class="flex flex-wrap justify-center gap-2 mb-2">
    <Button label="Left" icon="pi pi-arrow-right" @click="openPosition('left')" severity="secondary" style="min-width: 10rem" />
    <Button label="Right" icon="pi pi-arrow-left" @click="openPosition('right')" severity="secondary" style="min-width: 10rem" />
</div>
<div class="flex flex-wrap justify-center gap-2 mb-2">
    <Button label="TopLeft" icon="pi pi-arrow-down-right" @click="openPosition('topleft')" severity="secondary" style="min-width: 10rem" />
    <Button label="Top" icon="pi pi-arrow-down" @click="openPosition('top')" severity="secondary" style="min-width: 10rem" />
    <Button label="TopRight" icon="pi pi-arrow-down-left" @click="openPosition('topright')" severity="secondary" style="min-width: 10rem" />
</div>
<div class="flex flex-wrap justify-center gap-2">
    <Button label="BottomLeft" icon="pi pi-arrow-up-right" @click="openPosition('bottomleft')" severity="secondary" style="min-width: 10rem" />
    <Button label="Bottom" icon="pi pi-arrow-up" @click="openPosition('bottom')" severity="secondary" style="min-width: 10rem" />
    <Button label="BottomRight" icon="pi pi-arrow-up-left" @click="openPosition('bottomright')" severity="secondary" style="min-width: 10rem" />
</div>
<Dialog v-model:visible="visible" header="Edit Profile" :style="{ width: '25rem' }" :position="position" :modal="true" :draggable="false">
    <span class="text-surface-500 dark:text-surface-400 block mb-8">Update your information.</span>
    <div class="flex items-center gap-4 mb-4">
        <label for="username" class="font-semibold w-24">Username</label>
        <InputText id="username" class="flex-auto" autocomplete="off" />
    </div>
    <div class="flex items-center gap-4 mb-8">
        <label for="email" class="font-semibold w-24">Email</label>
        <InputText id="email" class="flex-auto" autocomplete="off" />
    </div>
    <div class="flex justify-end gap-2">
        <Button type="button" label="Cancel" severity="secondary" @click="visible = false"></Button>
        <Button type="button" label="Save" @click="visible = false"></Button>
    </div>
</Dialog>
```
Copy
## Maximizable [\#](https://primevue.org/dialog/\#maximizable)
Adding _maximizable_ property enables the full screen mode.
Show
```markup
<Button label="Show" @click="visible = true" />
<Dialog v-model:visible="visible" maximizable modal header="Header" :style="{ width: '50rem' }" :breakpoints="{ '1199px': '75vw', '575px': '90vw' }">
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Dialog>
```
Copy
## Long Content [\#](https://primevue.org/dialog/\#longcontent)
When content exceeds viewport, Dialog automatically becomes scrollable.
Show
```markup
<Button label="Show" @click="visible = true" />
<Dialog v-model:visible="visible" modal header="Header" :style="{ width: '50rem' }" :breakpoints="{ '1199px': '75vw', '575px': '90vw' }">
    <p class="mb-8">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
    <p class="mb-8">
        "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
        ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur,
        adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid
        ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?
    </p>
    <p class="mb-8">
        At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
        qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod
        maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae
        non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.
    </p>
    <p class="mb-8">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
    <p class="mb-8">
        "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim
        ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur,
        adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid
        ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?
    </p>
    <p>
        At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa
        qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod
        maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae
        non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.
    </p>
</Dialog>
```
Copy
## Without Modal
Mask layer behind the Dialog is configured with the _modal_ property. By default, no modal layer is added.
Show
```markup
<Button label="Show" @click="visible = true" />
<Dialog v-model:visible="visible" header="Edit Profile" :style="{ width: '25rem' }">
    <span class="text-surface-500 dark:text-surface-400 block mb-8">Update your information.</span>
    <div class="flex items-center gap-4 mb-4">
        <label for="username" class="font-semibold w-24">Username</label>
        <InputText id="username" class="flex-auto" autocomplete="off" />
    </div>
    <div class="flex items-center gap-4 mb-8">
        <label for="email" class="font-semibold w-24">Email</label>
        <InputText id="email" class="flex-auto" autocomplete="off" />
    </div>
    <div class="flex justify-end gap-2">
        <Button type="button" label="Cancel" severity="secondary" @click="visible = false"></Button>
        <Button type="button" label="Save" @click="visible = false"></Button>
    </div>
</Dialog>
```
Copy
## Responsive [\#](https://primevue.org/dialog/\#responsive)
Dialog width can be adjusted per screen size with the _breakpoints_ option where the max-width for the breakpoint and the width are defined as key-value pairs. When no breakpoint matches width defined in _style_ or _class_ is used. Alternatively responsive utility classes of libraries like Tailwind can also be used such as _md:w-screen_.
Show
```markup
<Button label="Show" @click="visible = true" />
<Dialog v-model:visible="visible" modal header="Header" :style="{ width: '50vw' }" :breakpoints="{ '1199px': '75vw', '575px': '90vw' }">
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Dialog>
```
Copy
## Headless [\#](https://primevue.org/dialog/\#headless)
Headless mode is enabled by defining a _container_ slot that lets you implement entire UI instead of the default elements.
Login
```markup
<Button label="Login" icon="pi pi-user" @click="visible = true" />
<Dialog v-model:visible="visible" pt:root:class="!border-0 !bg-transparent" pt:mask:class="backdrop-blur-sm">
    <template #container="{ closeCallback }">
        <div class="flex flex-col px-8 py-8 gap-6 rounded-2xl" style="background-image: radial-gradient(circle at left top, var(--p-primary-400), var(--p-primary-700))">
            <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg" class="block mx-auto">
                <path
                    d="M25.87 18.05L23.16 17.45L25.27 20.46V29.78L32.49 23.76V13.53L29.18 14.73L25.87 18.04V18.05ZM25.27 35.49L29.18 31.58V27.67L25.27 30.98V35.49ZM20.16 17.14H20.03H20.17H20.16ZM30.1 5.19L34.89 4.81L33.08 12.33L24.1 15.67L30.08 5.2L30.1 5.19ZM5.72 14.74L2.41 13.54V23.77L9.63 29.79V20.47L11.74 17.46L9.03 18.06L5.72 14.75V14.74ZM9.63 30.98L5.72 27.67V31.58L9.63 35.49V30.98ZM4.8 5.2L10.78 15.67L1.81 12.33L0 4.81L4.79 5.19L4.8 5.2ZM24.37 21.05V34.59L22.56 37.29L20.46 39.4H14.44L12.34 37.29L10.53 34.59V21.05L12.42 18.23L17.45 26.8L22.48 18.23L24.37 21.05ZM22.85 0L22.57 0.69L17.45 13.08L12.33 0.69L12.05 0H22.85Z"
                    fill="var(--p-primary-700)"
                />
                <path
                    d="M30.69 4.21L24.37 4.81L22.57 0.69L22.86 0H26.48L30.69 4.21ZM23.75 5.67L22.66 3.08L18.05 14.24V17.14H19.7H20.03H20.16H20.2L24.1 15.7L30.11 5.19L23.75 5.67ZM4.21002 4.21L10.53 4.81L12.33 0.69L12.05 0H8.43002L4.22002 4.21H4.21002ZM21.9 17.4L20.6 18.2H14.3L13 17.4L12.4 18.2L12.42 18.23L17.45 26.8L22.48 18.23L22.5 18.2L21.9 17.4ZM4.79002 5.19L10.8 15.7L14.7 17.14H14.74H15.2H16.85V14.24L12.24 3.09L11.15 5.68L4.79002 5.2V5.19Z"
                    fill="var(--p-primary-200)"
                />
            </svg>
            <div class="inline-flex flex-col gap-2">
                <label for="username" class="text-primary-50 font-semibold">Username</label>
                <InputText id="username" class="!bg-white/20 !border-0 !p-4 !text-primary-50 w-80"></InputText>
            </div>
            <div class="inline-flex flex-col gap-2">
                <label for="password" class="text-primary-50 font-semibold">Password</label>
                <InputText id="password" class="!bg-white/20 !border-0 !p-4 !text-primary-50 w-80" type="password"></InputText>
            </div>
            <div class="flex items-center gap-4">
                <Button label="Cancel" @click="closeCallback" text class="!p-4 w-full !text-primary-50 !border !border-white/30 hover:!bg-white/10"></Button>
                <Button label="Sign-In" @click="closeCallback" text class="!p-4 w-full !text-primary-50 !border !border-white/30 hover:!bg-white/10"></Button>
            </div>
        </div>
    </template>
</Dialog>
```
Copy
## Accessibility [\#](https://primevue.org/dialog/\#accessibility)
### Screen Reader
Dialog component uses _dialog_ role along with _aria-labelledby_ referring to the header element however any attribute is passed to the root element so you may use _aria-labelledby_ to override this default behavior. In addition _aria-modal_ is added since focus is kept within the popup.
Trigger element also requires _aria-expanded_ and _aria-controls_ to be handled explicitly.
Close element is a _button_ with an _aria-label_ that refers to the _aria.close_ property of the [locale](https://primevue.org/configuration/#locale) API by default, you may use _closeButtonProps_ to customize the element and override the default _aria-label_.
```markup
<Button label="Show" icon="pi pi-external-link" @click="visible = true" :aria-controls="visible ? 'dlg' : null" :aria-expanded="visible ? true : false" />
<Dialog id="dlg" header="Header" v-model:visible="visible" :style="{ width: '50vw' }">
    <p>Content</p>
</Dialog>
```
Copy
### Overlay Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element within the dialog if _modal_ is true. Otherwise, the focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element within the dialog if _modal_ is true. Otherwise, the focusable element in the page tab sequence. |
| _escape_ | Closes the dialog if _closeOnEscape_ is true. |
### Close Button Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Closes the dialog. |
| _space_ | Closes the dialog. |
- Import
- Basic
- Template
- Position
- Maximizable
- Long Content
- Without Modal
- Responsive
- Headless
- Accessibility
# Dialog API
API defines helper props, events and others for the PrimeVue Dialog module.
## Dialog [\#](https://primevue.org/dialog/\#api.dialog)
Dialog is a container to display content in an overlay window.
### Props [\#](https://primevue.org/dialog/\#api.dialog.props)
Defines valid properties in Dialog component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| header | string | null | Title content of the dialog. |  |
| footer | string | null | Footer content of the dialog. |  |
| visible | boolean | false | Specifies the visibility of the dialog. |  |
| modal | boolean | false | Defines if background should be blocked when dialog is displayed. |  |
| contentStyle | any | null | Style of the content section. |  |
| contentClass | any | null | Style class of the content section. |  |
| contentProps | HTMLAttributes | null | Used to pass all properties of the HTMLDivElement to the overlay Dialog inside the component. |  |
| closable | boolean | true | Adds a close icon to the header to hide the dialog. |  |
| dismissableMask | boolean | false | Specifies if clicking the modal background should hide the dialog. |  |
| closeOnEscape | boolean | true | Specifies if pressing escape key should hide the dialog. |  |
| showHeader | boolean | true | Whether to show the header or not. |  |
| blockScroll | boolean | false | Whether background scroll should be blocked when dialog is visible. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| position | HintedString<"left" \| "right" \| "top" \| "bottom" \| "center" \| "topleft" \| "topright" \| "bottomleft" \| "bottomright"> | center | Position of the dialog. |  |
| maximizable | boolean | false | Whether the dialog can be displayed full screen. |  |
| breakpoints | [DialogBreakpoints](https://primevue.org/dialog/#api.dialog.interfaces.DialogBreakpoints) | null | Object literal to define widths per screen size. |  |
| draggable | boolean | true | Enables dragging to change the position using header. |  |
| keepInViewport | boolean | true | Keeps dialog in the viewport when dragging. |  |
| minX | number | 0. | Minimum value for the left coordinate of dialog in dragging. |  |
| minY | number | 0 | Minimum value for the top coordinate of dialog in dragging. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the dialog gets attached. |  |
| style | any | null | Style of the dynamic dialog. |  |
| closeIcon | string | null | Icon to display in the dialog close button. |  |
| maximizeIcon | string | null | Icon to display in the dialog maximize button when dialog is not maximized. |  |
| minimizeIcon | string | null | Icon to display in the dialog maximize button when dialog is minimized. |  |
| closeButtonProps | object | null | Used to pass all properties of the ButtonProps to the Button component. |  |
| maximizeButtonProps | object | null | Used to pass all properties of the ButtonProps to the Button component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DialogPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/dialog/\#api.dialog.emits)
Defines valid emits in Dialog component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:visible | value: boolean | void | Emitted when the visible changes. |  |
| hide |  | void | Callback to invoke when dialog is hidden. |  |
| after-hide |  | void | Callback to invoke after dialog is hidden. |  |
| show |  | void | Callback to invoke when dialog is shown. |  |
| maximize | event: Event | void | Fired when a dialog gets maximized. |  |
| unmaximize | event: Event | void | Fired when a dialog gets unmaximized. |  |
| dragstart | event: Event | void | Fired when a dialog drag begins. |  |
| dragend | event: Event | void | Fired when a dialog drag completes. |  |
### Slots [\#](https://primevue.org/dialog/\#api.dialog.slots)
Defines valid slots in Dialog component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default content slot. |  |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| closebutton | scope: {<br>closeCallback: () â‡’ void, // Close function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close button template. |  |
| closeicon | scope: {<br>class: any, // Style class of the close icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom close icon template. |  |
| maximizebutton | scope: {<br>maximized: boolean, // Maximized state as a booleanmaximizeCallback: (event: Event) â‡’ void, // Toggle maximize function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom maximize button template. |  |
| maximizeicon | scope: {<br>maximized: boolean, // Maximized state as a booleanclass: any, // Style class of the maximize icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom maximize icon template of dialog. |  |
| container | scope: {<br>closeCallback: () â‡’ void, // Close dialog function.maximizeCallback: (event: Event) â‡’ void, // Maximize/minimize dialog function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |
### Interfaces [\#](https://primevue.org/dialog/\#api.dialog.interfaces)
Defines the custom interfaces used by the module.
#### DialogPassThroughMethodOptions [\#](https://primevue.org/dialog/\#api.dialog.interfaces.DialogPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DialogProps](https://primevue.org/dialog/#api.dialog.interfaces.DialogProps) | null | Defines valid properties. |
| state | [DialogState](https://primevue.org/dialog/#api.dialog.interfaces.DialogState) | null | Defines current inline state. |
| parent | any | null | Defines parent instance. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### DialogSharedPassThroughMethodOptions [\#](https://primevue.org/dialog/\#api.dialog.interfaces.DialogSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [DialogProps](https://primevue.org/dialog/#api.dialog.interfaces.DialogProps) | null | Defines valid properties. |
| state | [DialogState](https://primevue.org/dialog/#api.dialog.interfaces.DialogState) | null | Defines current inline state. |
#### DialogPassThroughOptions [\#](https://primevue.org/dialog/\#api.dialog.interfaces.DialogPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [DialogPassThroughOptionType<T>](https://primevue.org/dialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| header | [DialogPassThroughOptionType<T>](https://primevue.org/dialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header's DOM element. |
| title | [DialogPassThroughOptionType<T>](https://primevue.org/dialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header title's DOM element. |
| headerActions | [DialogPassThroughOptionType<T>](https://primevue.org/dialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the header actions' DOM element. |
| pcMaximizeButton | any | null | Used to pass attributes to the maximize Button component. |
| pcCloseButton | any | null | Used to pass attributes to the close Button component. |
| content | [DialogPassThroughOptionType<T>](https://primevue.org/dialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the content's DOM element. |
| footer | [DialogPassThroughOptionType<T>](https://primevue.org/dialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the footer's DOM element. |
| mask | [DialogPassThroughOptionType<T>](https://primevue.org/dialog/#api.dialog.types.DialogPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the mask's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [DialogPassThroughTransitionType<T>](https://primevue.org/dialog/#api.dialog.types.DialogPassThroughTransitionType%3CT%3E) | null | Used to control Vue Transition API. |
#### DialogPassThroughAttributes [\#](https://primevue.org/dialog/\#api.dialog.interfaces.DialogPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### DialogState [\#](https://primevue.org/dialog/\#api.dialog.interfaces.DialogState)
Defines current inline state in Dialog component.
| name | type | default | description |
| --- | --- | --- | --- |
| containerVisible | boolean | false | Current visible state of the container as a boolean. |
| maximized | boolean | false | Current maximized state as a boolean. |
#### DialogBreakpoints [\#](https://primevue.org/dialog/\#api.dialog.interfaces.DialogBreakpoints)
Custom breakpoint metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | string | null |  |
## Types [\#](https://primevue.org/dialog/\#api.dialog.types)
Defines the custom types used by the module.
#### DialogPassThroughOptionType [\#](https://primevue.org/dialog/\#api.dialog.types.DialogPassThroughOptionType)
| values |
| --- |
| DialogPassThroughAttributes \| (options: DialogPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### DialogPassThroughTransitionType [\#](https://primevue.org/dialog/\#api.dialog.types.DialogPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: DialogPassThroughMethodOptions) => TransitionProps \| undefined |
#### DialogEmits [\#](https://primevue.org/dialog/\#api.dialog.types.DialogEmits)
| values |
| --- |
| EmitFn<DialogEmitsOptions> |
- Dialog
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Terminal Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Terminal
Terminal is a text based user interface.
## Import [\#](https://primevue.org/terminal/\#import)
```javascript
import Terminal from 'primevue/terminal';
import TerminalService from 'primevue/terminalservice'
```
Copy
## Basic [\#](https://primevue.org/terminal/\#basic)
Commands are processed using an EventBus implementation called _TerminalService_. Import this service into your component and subscribe to the _command_ event to process the commands by sending replies with the _response_ event.
Enter " **date**" to display the current date, " **greet {0}**" for a message and " **random**" to get a random number.
Welcome to PrimeVue
primevue $
```markup
<Terminal
    welcomeMessage="Welcome to PrimeVue"
    prompt="primevue $"
    aria-label="PrimeVue Terminal Service"
/>
```
Copy
## Accessibility [\#](https://primevue.org/terminal/\#accessibility)
### Screen Reader
Terminal component has an input element that can be described with _aria-label_ or _aria-labelledby_ props. The element that lists the previous commands has _aria-live_ so that changes are received by the screen reader.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the input element. |
| _enter_ | Executes the command when focus in on the input element. |
- Import
- Basic
- Accessibility
# Terminal API
API defines helper props, events and others for the PrimeVue Terminal module.
## Terminal [\#](https://primevue.org/terminal/\#api.terminal)
Terminal is a text based user interface.
### Props [\#](https://primevue.org/terminal/\#api.terminal.props)
Defines valid properties in Terminal component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| welcomeMessage | string | null | Initial text to display on terminal. |  |
| prompt | string | null | Prompt text for each command. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TerminalPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Interfaces [\#](https://primevue.org/terminal/\#api.terminal.interfaces)
Defines the custom interfaces used by the module.
#### TerminalPassThroughMethodOptions [\#](https://primevue.org/terminal/\#api.terminal.interfaces.TerminalPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TerminalProps](https://primevue.org/terminal/#api.terminal.interfaces.TerminalProps) | null | Defines valid properties. |
| state | [TerminalState](https://primevue.org/terminal/#api.terminal.interfaces.TerminalState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TerminalPassThroughOptions [\#](https://primevue.org/terminal/\#api.terminal.interfaces.TerminalPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TerminalPassThroughOptionType](https://primevue.org/terminal/#api.terminal.types.TerminalPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| welcomeMessage | [TerminalPassThroughOptionType](https://primevue.org/terminal/#api.terminal.types.TerminalPassThroughOptionType) | null | Used to pass attributes to the welcome message's DOM element. |
| content | [TerminalPassThroughOptionType](https://primevue.org/terminal/#api.terminal.types.TerminalPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| commands | [TerminalPassThroughOptionType](https://primevue.org/terminal/#api.terminal.types.TerminalPassThroughOptionType) | null | Used to pass attributes to the commands' DOM element. |
| prompt | [TerminalPassThroughOptionType](https://primevue.org/terminal/#api.terminal.types.TerminalPassThroughOptionType) | null | Used to pass attributes to the prompt's DOM element. |
| command | [TerminalPassThroughOptionType](https://primevue.org/terminal/#api.terminal.types.TerminalPassThroughOptionType) | null | Used to pass attributes to the command's DOM element. |
| response | [TerminalPassThroughOptionType](https://primevue.org/terminal/#api.terminal.types.TerminalPassThroughOptionType) | null | Used to pass attributes to the response's DOM element. |
| container | [TerminalPassThroughOptionType](https://primevue.org/terminal/#api.terminal.types.TerminalPassThroughOptionType) | null | Used to pass attributes to the container's DOM element. |
| commandText | [TerminalPassThroughOptionType](https://primevue.org/terminal/#api.terminal.types.TerminalPassThroughOptionType) | null | Used to pass attributes to the command text's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### TerminalPassThroughAttributes [\#](https://primevue.org/terminal/\#api.terminal.interfaces.TerminalPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TerminalState [\#](https://primevue.org/terminal/\#api.terminal.interfaces.TerminalState)
Defines current inline state in Terminal component.
| name | type | default | description |
| --- | --- | --- | --- |
| commandText | string | null | Current command text as a string. |
| commands | string\[\] | null | Current commands as an array. |
## Types [\#](https://primevue.org/terminal/\#api.terminal.types)
Defines the custom types used by the module.
#### TerminalPassThroughOptionType [\#](https://primevue.org/terminal/\#api.terminal.types.TerminalPassThroughOptionType)
| values |
| --- |
| TerminalPassThroughAttributes \| (options: TerminalPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TerminalEmits [\#](https://primevue.org/terminal/\#api.terminal.types.TerminalEmits)
| values |
| --- |
| EmitFn<TerminalEmitsOptions> |
## TerminalService [\#](https://primevue.org/terminal/\#api.terminalservice)
### Services [\#](https://primevue.org/terminal/\#api.terminalservice.services)
Confirmation Service methods.
| name | parameters | returnType | description |
| --- | --- | --- | --- |
| on | action: undefined \| "command" \| "response" | void | Displays the terminal using the action options. |
| emit | action: undefined \| "command" \| "response" | void | Emits the terminal using the action options. |
| off | action: undefined \| "command" \| "response" | void | Closes the terminal using the action options. |
- Terminal
  - Props
  - Interfaces
  - Types
- TerminalService
  - Services
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Setup Guides
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Setup
Installation guides for popular development environments.
## Guides [\#](https://primevue.org/setup/\#guides)
[VITE](https://primevue.org/vite)
[NUXT](https://primevue.org/nuxt)
[CDN](https://primevue.org/cdn)
[LARAVEL](https://primevue.org/laravel)
- Guides
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Tooltip Guide
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Tooltip
Tooltip directive provides advisory information for a component.
## Import [\#](https://primevue.org/tooltip/\#import)
```javascript
import Tooltip from 'primevue/tooltip';
app.directive('tooltip', Tooltip);
```
Copy
## Position [\#](https://primevue.org/tooltip/\#position)
There are four choices to position the tooltip, default value is _right_ and alternatives are _top_, _bottom_, _left_.
```markup
<InputText v-tooltip="'Enter your username'" type="text" placeholder="Right" />
<InputText v-tooltip.top="'Enter your username'" type="text" placeholder="Top" />
<InputText v-tooltip.bottom="'Enter your username'" type="text" placeholder="Bottom" />
<InputText v-tooltip.left="'Enter your username'" type="text" placeholder="Left" />
```
Copy
## Event [\#](https://primevue.org/tooltip/\#event)
Event to display the tooltip is defined as a modifier, default event is hover.
```markup
<InputText v-tooltip.focus.top="'Enter your username'" type="text" placeholder="Focus" />
```
Copy
## Auto Hide [\#](https://primevue.org/tooltip/\#autohide)
Tooltip gets hidden when mouse leaves the target element by default, set _autoHide_ to false to customize this behavior so that tooltip stays open when the cursor is on the tooltip.
```markup
<InputText v-tooltip.bottom="{ value: 'Enter your username', autoHide: false }" type="text" placeholder="autoHide: false" />
<InputText v-tooltip.bottom="'Enter your username'" type="text" placeholder="autoHide: true" />
```
Copy
## Delay [\#](https://primevue.org/tooltip/\#delay)
Delays to the enter and leave events are defined with _showDelay_ and _hideDelay_ options respectively.
Save
```markup
<Button v-tooltip="{ value: 'Confirm to proceed', showDelay: 1000, hideDelay: 300 }" label="Save" />
```
Copy
## Custom [\#](https://primevue.org/tooltip/\#custom)
A tooltip sample with a custom style and content.
Button
```markup
<Button
    v-tooltip.bottom="{
        value: 'PrimeVue Rocks',
        pt: {
            arrow: {
                style: {
                    borderBottomColor: 'var(--p-primary-color)'
                }
            },
            text: '!bg-primary !text-primary-contrast !font-medium'
        }
    }"
    label="Button"
/>
```
Copy
## Accessibility [\#](https://primevue.org/tooltip/\#accessibility)
### Screen Reader
Tooltip component uses _tooltip_ role and when it becomes visible the generated id of the tooltip is defined as the _aria-describedby_ of the target.
### Keyboard Support
| Key | Function |
| --- | --- |
| _escape_ | Closes the tooltip when focus is on the target. |
- Import
- Position
- Event
- Auto Hide
- Delay
- Custom
- Accessibility
# Tooltip API
API defines helper props, events and others for the PrimeVue Tooltip module.
## Tooltip [\#](https://primevue.org/tooltip/\#api.tooltip)
Tooltip directive provides advisory information for a component.
### Interfaces [\#](https://primevue.org/tooltip/\#api.tooltip.interfaces)
Defines the custom interfaces used by the module.
#### TooltipPassThroughMethodOptions [\#](https://primevue.org/tooltip/\#api.tooltip.interfaces.TooltipPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| context | [TooltipContext](https://primevue.org/tooltip/#api.tooltip.interfaces.TooltipContext) | null |  |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TooltipOptions [\#](https://primevue.org/tooltip/\#api.tooltip.interfaces.TooltipOptions)
Defines options of Tooltip.
| name | type | default | description |
| --- | --- | --- | --- |
| value | string | null | Text of the tooltip. |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |
| id | string | null | When present, it adds a custom id to the tooltip. |
| class | string | null | When present, it adds a custom class to the tooltip. |
| escape | boolean | true | By default the tooltip contents are not rendered as text. Set to false to support html tags in the content. |
| fitContent | boolean | true | Automatically adjusts the element position when there is not enough space on the selected position. |
| showDelay | number | 0 | When present, it adds a custom delay to the tooltip's display. |
| hideDelay | number | 0 | When present, it adds a custom delay to the tooltip's hiding. |
| autoHide | boolean | true | Whether to hide tooltip when hovering over tooltip content. |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |
| pt | PassThrough<TooltipDirectivePassThroughOptions> | null | Uses to pass attributes to DOM elements inside the component. |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |
#### TooltipDirectivePassThroughOptions [\#](https://primevue.org/tooltip/\#api.tooltip.interfaces.TooltipDirectivePassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TooltipDirectivePassThroughOptionType](https://primevue.org/tooltip/#api.tooltip.types.TooltipDirectivePassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| text | [TooltipDirectivePassThroughOptionType](https://primevue.org/tooltip/#api.tooltip.types.TooltipDirectivePassThroughOptionType) | null | Used to pass attributes to the text's DOM element. |
| arrow | [TooltipDirectivePassThroughOptionType](https://primevue.org/tooltip/#api.tooltip.types.TooltipDirectivePassThroughOptionType) | null | Used to pass attributes to the arrow's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### TooltipDirectivePassThroughAttributes [\#](https://primevue.org/tooltip/\#api.tooltip.interfaces.TooltipDirectivePassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TooltipContext [\#](https://primevue.org/tooltip/\#api.tooltip.interfaces.TooltipContext)
Defines current options in Tooltip directive.
| name | type | default | description |
| --- | --- | --- | --- |
| top | boolean | null | Current top position state as a boolean. |
| right | boolean | null | Current right position state as a boolean. |
| bottom | boolean | null | Current bottom position state as a boolean. |
| left | boolean | null | Current left position state as a boolean. |
#### TooltipDirectiveModifiers [\#](https://primevue.org/tooltip/\#api.tooltip.interfaces.TooltipDirectiveModifiers)
Defines modifiers of Tooltip.
| name | type | default | description |
| --- | --- | --- | --- |
| right | boolean | true | Right position for Tooltip. |
| left | boolean | false | Left position for Tooltip. |
| top | boolean | false | Top position for Tooltip. |
| bottom | boolean | false | Bottom position for Tooltip. |
| focus | boolean | true | Focus event for Tooltip. |
#### TooltipDirectiveBinding [\#](https://primevue.org/tooltip/\#api.tooltip.interfaces.TooltipDirectiveBinding)
Binding of Tooltip directive.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | null \| ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, "", Object, any> \| Record<string, any> | null |  |
| oldValue | any | null |  |
| arg | string | null |  |
| dir | ObjectDirective<any, any, string, string> | null |  |
| value | string \| [TooltipOptions](https://primevue.org/tooltip/#api.tooltip.interfaces.TooltipOptions) | null | Value of the tooltip. |
| modifiers | [TooltipDirectiveModifiers](https://primevue.org/tooltip/#api.tooltip.interfaces.TooltipDirectiveModifiers) | null | Modifiers of the tooltip. |
## Types [\#](https://primevue.org/tooltip/\#api.tooltip.types)
Defines the custom types used by the module.
#### TooltipDirectivePassThroughOptionType [\#](https://primevue.org/tooltip/\#api.tooltip.types.TooltipDirectivePassThroughOptionType)
| values |
| --- |
| TooltipDirectivePassThroughAttributes \| (options: TooltipPassThroughMethodOptions) => TooltipDirectivePassThroughAttributes \| null \| undefined |
- Tooltip
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Fluid Layout Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Fluid
Fluid is a layout component to make descendant components span full width of their container.
## Import [\#](https://primevue.org/fluid/\#import)
```javascript
import Fluid from 'primevue/fluid';
```
Copy
## Basic [\#](https://primevue.org/fluid/\#basic)
Components with the _fluid_ option like _InputText_ have the ability to span the full width of their component. Enabling the _fluid_ for each component individually may be cumbersome so wrap the content with _Fluid_ to instead for an easier alternative.
Any component that has the _fluid_ property can be nested inside the _Fluid_ component. The _fluid_ property of a child component has higher precedence than the fluid container as shown in the last sample.
Non-Fluid
Fluid Prop
Fluid Container
```markup
<div>
    <label for="non-fluid" class="font-bold mb-2 block">Non-Fluid</label>
    <InputText id="non-fluid" />
</div>
<div>
    <label for="fluid" class="font-bold mb-2 block">Fluid Prop</label>
    <InputText id="non-fluid" fluid />
</div>
<Fluid>
    <span class="font-bold mb-2 block">Fluid Container</span>
    <div class="grid grid-cols-2 gap-4">
        <div><InputText /></div>
        <div><InputText /></div>
        <div class="col-span-full"><InputText /></div>
        <div><InputText :fluid="false" placeholder="Non-Fluid" /></div>
    </div>
</Fluid>
```
Copy
## Accessibility [\#](https://primevue.org/fluid/\#accessibility)
### Screen Reader
Fluid does not require any roles and attributes.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Accessibility
# Fluid API
API defines helper props, events and others for the PrimeVue Fluid module.
## Fluid [\#](https://primevue.org/fluid/\#api.fluid)
Fluid is a layout component to make descendant components span full width of their container.
### Props [\#](https://primevue.org/fluid/\#api.fluid.props)
Defines valid properties in Fluid component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<FluidPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Interfaces [\#](https://primevue.org/fluid/\#api.fluid.interfaces)
Defines the custom interfaces used by the module.
#### FluidPassThroughMethodOptions [\#](https://primevue.org/fluid/\#api.fluid.interfaces.FluidPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [FluidProps](https://primevue.org/fluid/#api.fluid.interfaces.FluidProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### FluidPassThroughOptions [\#](https://primevue.org/fluid/\#api.fluid.interfaces.FluidPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [FluidPassThroughOptionType](https://primevue.org/fluid/#api.fluid.types.FluidPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### FluidPassThroughAttributes [\#](https://primevue.org/fluid/\#api.fluid.interfaces.FluidPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/fluid/\#api.fluid.types)
Defines the custom types used by the module.
#### FluidPassThroughOptionType [\#](https://primevue.org/fluid/\#api.fluid.types.FluidPassThroughOptionType)
| values |
| --- |
| FluidPassThroughAttributes \| (options: FluidPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### FluidPassThroughTransitionType [\#](https://primevue.org/fluid/\#api.fluid.types.FluidPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: FluidPassThroughMethodOptions) => TransitionProps \| undefined |
#### FluidEmits [\#](https://primevue.org/fluid/\#api.fluid.types.FluidEmits)
| values |
| --- |
| EmitFn<FluidEmitsOptions> |
- Fluid
  - Props
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## ToggleSwitch Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# ToggleSwitch
ToggleSwitch is used to select a boolean value.
## Import [\#](https://primevue.org/toggleswitch/\#import)
```javascript
import ToggleSwitch from 'primevue/toggleswitch';
```
Copy
## Basic [\#](https://primevue.org/toggleswitch/\#basic)
ToggleSwitch is used with the _v-model_ property for two-way value binding.
```markup
<ToggleSwitch v-model="checked" />
```
Copy
## Forms [\#](https://primevue.org/toggleswitch/\#forms)
ToggleSwitch integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-48">
    <div class="flex flex-col items-center gap-2">
        <ToggleSwitch name="activation" />
        <Message v-if="$form.activation?.invalid" severity="error" size="small" variant="simple">{{ $form.activation.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Preselection [\#](https://primevue.org/toggleswitch/\#preselection)
Enabling _checked_ property displays the component as active initially.
```markup
<ToggleSwitch v-model="checked" />
```
Copy
## Invalid [\#](https://primevue.org/toggleswitch/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
```markup
<ToggleSwitch v-model="checked" :invalid="!checked" />
```
Copy
## Template [\#](https://primevue.org/toggleswitch/\#template)
The _handle_ slot is available to display custom content.
```markup
<ToggleSwitch v-model="checked">
    <template #handle="{ checked }">
        <i :class="['!text-xs pi', { 'pi-check': checked, 'pi-times': !checked }]" />
    </template>
</ToggleSwitch>
```
Copy
## Disabled [\#](https://primevue.org/toggleswitch/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
```markup
<ToggleSwitch v-model="checked" disabled />
```
Copy
## Accessibility [\#](https://primevue.org/toggleswitch/\#accessibility)
### Screen Reader
ToggleSwitch component uses a hidden native checkbox element with _switch_ role internally that is only visible to screen readers. Value to describe the component can either be provided via _label_ tag combined with _id_ prop or using _aria-labelledby_, _aria-label_ props.
```markup
<label for="switch1">Remember Me</label>
<ToggleSwitch inputId="switch1" />
<span id="switch2">Remember Me</span>
<ToggleSwitch aria-labelledby="switch2" />
<ToggleSwitch aria-label="Remember Me" />
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the switch. |
| _space_ | Toggles the checked state. |
- Import
- Basic
- Forms
- Preselection
- Invalid
- Template
- Disabled
- Accessibility
# ToggleSwitch API
API defines helper props, events and others for the PrimeVue ToggleSwitch module.
## ToggleSwitch [\#](https://primevue.org/toggleswitch/\#api.toggleswitch)
ToggleSwitch is used to select a boolean value.
### Props [\#](https://primevue.org/toggleswitch/\#api.toggleswitch.props)
Defines valid properties in ToggleSwitch component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | string \| boolean | false | Specifies whether a toggleswitch should be checked or not. |  |
| defaultValue | string \| boolean | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| trueValue | any | true | Value in checked state. |  |
| falseValue | any | false | Value in unchecked state. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| readonly | boolean | null | When present, it specifies that an input field is read-only. |  |
| tabindex | number | null | Index of the element in tabbing order. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ToggleSwitchPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/toggleswitch/\#api.toggleswitch.emits)
Defines valid emits in ToggleSwitch component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: boolean | void | Emitted when the value changes. |  |
| value-change | value: boolean | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: Event | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
### Slots [\#](https://primevue.org/toggleswitch/\#api.toggleswitch.slots)
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| handle | scope: {<br>checked: boolean, // Current checked state of the item as a boolean.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom handle template. |  |
### Interfaces [\#](https://primevue.org/toggleswitch/\#api.toggleswitch.interfaces)
Defines the custom interfaces used by the module.
#### ToggleSwitchPassThroughMethodOptions [\#](https://primevue.org/toggleswitch/\#api.toggleswitch.interfaces.ToggleSwitchPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ToggleSwitchProps](https://primevue.org/toggleswitch/#api.toggleswitch.interfaces.ToggleSwitchProps) | null | Defines valid properties. |
| context | [ToggleSwitchContext](https://primevue.org/toggleswitch/#api.toggleswitch.interfaces.ToggleSwitchContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ToggleSwitchPassThroughOptions [\#](https://primevue.org/toggleswitch/\#api.toggleswitch.interfaces.ToggleSwitchPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ToggleSwitchPassThroughOptionType](https://primevue.org/toggleswitch/#api.toggleswitch.types.ToggleSwitchPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| input | [ToggleSwitchPassThroughOptionType](https://primevue.org/toggleswitch/#api.toggleswitch.types.ToggleSwitchPassThroughOptionType) | null | Used to pass attributes to the input's DOM element. |
| slider | [ToggleSwitchPassThroughOptionType](https://primevue.org/toggleswitch/#api.toggleswitch.types.ToggleSwitchPassThroughOptionType) | null | Used to pass attributes to the slider's DOM element. |
| handle | [ToggleSwitchPassThroughOptionType](https://primevue.org/toggleswitch/#api.toggleswitch.types.ToggleSwitchPassThroughOptionType) | null | Used to pass attributes to the handle's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ToggleSwitchPassThroughAttributes [\#](https://primevue.org/toggleswitch/\#api.toggleswitch.interfaces.ToggleSwitchPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ToggleSwitchContext [\#](https://primevue.org/toggleswitch/\#api.toggleswitch.interfaces.ToggleSwitchContext)
Defines current options in ToggleSwitch component.
| name | type | default | description |
| --- | --- | --- | --- |
| checked | boolean | false | Current checked state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |
## Types [\#](https://primevue.org/toggleswitch/\#api.toggleswitch.types)
Defines the custom types used by the module.
#### ToggleSwitchPassThroughOptionType [\#](https://primevue.org/toggleswitch/\#api.toggleswitch.types.ToggleSwitchPassThroughOptionType)
| values |
| --- |
| ToggleSwitchPassThroughAttributes \| (options: ToggleSwitchPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ToggleSwitchEmits [\#](https://primevue.org/toggleswitch/\#api.toggleswitch.types.ToggleSwitchEmits)
| values |
| --- |
| EmitFn<ToggleSwitchEmitsOptions> |
- ToggleSwitch
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Popover Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Popover
Popover is a container component that can overlay other components on page.
## Import [\#](https://primevue.org/popover/\#import)
```javascript
import Popover from 'primevue/popover';
```
Copy
## Basic [\#](https://primevue.org/popover/\#basic)
Popover is accessed via its ref and visibility is controlled using _toggle_, _show_ and _hide_ functions with an event of the target.
Share
```markup
<Button type="button" icon="pi pi-share-alt" label="Share" @click="toggle" />
<Popover ref="op">
    <div class="flex flex-col gap-4 w-[25rem]">
        <div>
            <span class="font-medium block mb-2">Share this document</span>
            <InputGroup>
                <InputText value="https://primevue.org/12323ff26t2g243g423g234gg52hy25XADXAG3" readonly class="w-[25rem]"></InputText>
                <InputGroupAddon>
                    <i class="pi pi-copy"></i>
                </InputGroupAddon>
            </InputGroup>
        </div>
        <div>
            <span class="font-medium block mb-2">Invite Member</span>
            <InputGroup>
                <InputText disabled />
                <Button label="Invite" icon="pi pi-users"></Button>
            </InputGroup>
        </div>
        <div>
            <span class="font-medium block mb-2">Team Members</span>
            <ul class="list-none p-0 m-0 flex flex-col gap-4">
                <li v-for="member in members" :key="member.name" class="flex items-center gap-2">
                    <img :src="`https://primefaces.org/cdn/primevue/images/avatar/${member.image}`" style="width: 32px" />
                    <div>
                        <span class="font-medium">{{ member.name }}</span>
                        <div class="text-sm text-surface-500 dark:text-surface-400">{{ member.email }}</div>
                    </div>
                    <div class="flex items-center gap-2 text-surface-500 dark:text-surface-400 ml-auto text-sm">
                        <span>{{ member.role }}</span>
                        <i class="pi pi-angle-down"></i>
                    </div>
                </li>
            </ul>
        </div>
    </div>
</Popover>
```
Copy
## Select Data [\#](https://primevue.org/popover/\#selectdata)
In this sample, data is retrieved from the content inside the popover.
Select Member
```markup
<Button type="button" :label="selectedMember ? selectedMember.name : 'Select Member'" @click="toggle" class="min-w-48" />
<Popover ref="op">
    <div class="flex flex-col gap-4">
        <div>
            <span class="font-medium block mb-2">Team Members</span>
            <ul class="list-none p-0 m-0 flex flex-col">
                <li v-for="member in members" :key="member.name" class="flex items-center gap-2 px-2 py-3 hover:bg-emphasis cursor-pointer rounded-border" @click="selectMember(member)">
                    <img :src="`https://primefaces.org/cdn/primevue/images/avatar/${member.image}`" style="width: 32px" />
                    <div>
                        <span class="font-medium">{{ member.name }}</span>
                        <div class="text-sm text-surface-500 dark:text-surface-400">{{ member.email }}</div>
                    </div>
                </li>
            </ul>
        </div>
    </div>
</Popover>
```
Copy
## DataTable [\#](https://primevue.org/popover/\#datatable)
Place the Popover outside of the data iteration components to avoid rendering it multiple times.
| Id | Code | Name | Price | Image | Details |
| --- | --- | --- | --- | --- | --- |
| 1000 | f230fh0g3 | Bamboo Watch | $ 65 | ![bamboo-watch.jpg](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg) |  |
| 1001 | nvklal433 | Black Watch | $ 72 | ![black-watch.jpg](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg) |  |
| 1002 | zz21cz3c1 | Blue Band | $ 79 | ![blue-band.jpg](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg) |  |
| 1003 | 244wgerg2 | Blue T-Shirt | $ 29 | ![blue-t-shirt.jpg](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg) |  |
| 1004 | h456wer53 | Bracelet | $ 15 | ![bracelet.jpg](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg) |  |
```markup
<DataTable :value="products" :rows="5" paginator tableStyle="min-width: 50rem">
    <Column field="id" header="Id" class="w-1/6"></Column>
    <Column field="code" header="Code" class="w-1/6"></Column>
    <Column field="name" header="Name" class="w-1/6" bodyClass="whitespace-nowrap"></Column>
    <Column field="price" header="Price" sortable class="w-1/6">
        <template #body="slotProps"> $ {{ slotProps.data.price }} </template>
    </Column>
    <Column header="Image" class="w-1/6">
        <template #body="slotProps">
            <img :src="`https://primefaces.org/cdn/primevue/images/product/${slotProps.data.image}`" :alt="slotProps.data.image" class="w-16 shadow-sm" />
        </template>
    </Column>
    <Column header="Details" class="w-1/6">
        <template #body="slotProps">
            <Button type="button" @click="displayProduct($event, slotProps.data)" icon="pi pi-search" severity="secondary" rounded></Button>
        </template>
    </Column>
</DataTable>
<Popover ref="op">
    <div v-if="selectedProduct" class="rounded flex flex-col">
        <div class="flex justify-center rounded">
            <div class="relative mx-auto">
                <img class="rounded w-44 sm:w-64" :src="`https://primefaces.org/cdn/primevue/images/product/${selectedProduct.image}`" :alt="selectedProduct.name" />
                <Tag :value="selectedProduct.inventoryStatus" :severity="getSeverity(selectedProduct)" class="absolute dark:!bg-surface-900" style="left: 4px; top: 4px"></Tag>
            </div>
        </div>
        <div class="pt-4">
            <div class="flex flex-row justify-between items-start gap-2 mb-4">
                <div>
                    <span class="font-medium text-surface-500 dark:text-surface-400 text-sm">{{ selectedProduct.category }}</span>
                    <div class="text-lg font-medium mt-1">{{ selectedProduct.name }}</div>
                </div>
                <div class="bg-surface-100 p-1" style="border-radius: 30px">
                    <div class="bg-surface-0 flex items-center gap-2 justify-center py-1 px-2" style="border-radius: 30px; box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)">
                        <span class="text-surface-900 font-medium text-sm">{{ selectedProduct.rating }}</span>
                        <i class="pi pi-star-fill text-yellow-500"></i>
                    </div>
                </div>
            </div>
            <div class="flex gap-2">
                <Button icon="pi pi-shopping-cart" :label="`Buy Now | \$${selectedProduct.price}`" :disabled="selectedProduct.inventoryStatus === 'OUTOFSTOCK'" class="flex-auto whitespace-nowrap" @click="hidePopover"></Button>
                <Button icon="pi pi-heart" outlined @click="hidePopover"></Button>
            </div>
        </div>
    </div>
</Popover>
```
Copy
## Accessibility [\#](https://primevue.org/popover/\#accessibility)
### Screen Reader
Popover component uses _dialog_ role and since any attribute is passed to the root element you may define attributes like _aria-label_ or _aria-labelledby_ to describe the popup contents. In addition _aria-modal_ is added since focus is kept within the popup.
Popover adds _aria-expanded_ state attribute and _aria-controls_ to the trigger so that the relation between the trigger and the popup is defined.
### Popover Keyboard Support
When the popup gets opened, the first focusable element receives the focus and this can be customized by adding _autofocus_ to an element within the popup.
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element within the popup. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element within the popup. |
| _escape_ | Closes the popup and moves focus to the trigger. |
- Import
- Basic
- Select Data
- DataTable
- Accessibility
# Popover API
API defines helper props, events and others for the PrimeVue Popover module.
## Popover [\#](https://primevue.org/popover/\#api.popover)
Popover is a container component positioned as connected to its target.
### Props [\#](https://primevue.org/popover/\#api.popover.props)
Defines valid properties in Popover component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dismissable | boolean | true | Enables to hide the overlay when outside is clicked. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| breakpoints | [PopoverBreakpoints](https://primevue.org/popover/#api.popover.interfaces.PopoverBreakpoints) | null | Object literal to define widths per screen size. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<PopoverPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
| closeOnEscape | boolean | true | Specifies if pressing escape key should hide the dialog. |  |
### Emits [\#](https://primevue.org/popover/\#api.popover.emits)
Defines valid emits in Popover component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| show |  | void | Callback to invoke when the overlay is shown. |  |
| hide |  | void | Callback to invoke when the overlay is hidden. |  |
### Slots [\#](https://primevue.org/popover/\#api.popover.slots)
Defines valid slots in Popover component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| container | scope: {<br>closeCallback: () â‡’ void, // Close overlay panel function.keydownCallback: (event: Event) â‡’ void, // Close button keydown function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |
### Methods [\#](https://primevue.org/popover/\#api.popover.methods)
Defines methods that can be accessed by the component's reference.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| alignOverlay |  | void | Aligns overlay panel based on the current position of the container. |  |
| toggle | event: Event | void | Toggles the visibility of the overlay. |  |
| show | event: Event | void | Shows the overlay. |  |
| hide |  | void | Hides the overlay. |  |
### Interfaces [\#](https://primevue.org/popover/\#api.popover.interfaces)
Defines the custom interfaces used by the module.
#### PopoverPassThroughMethodOptions [\#](https://primevue.org/popover/\#api.popover.interfaces.PopoverPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [PopoverProps](https://primevue.org/popover/#api.popover.interfaces.PopoverProps) | null | Defines valid properties. |
| state | [PopoverState](https://primevue.org/popover/#api.popover.interfaces.PopoverState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### PopoverPassThroughOptions [\#](https://primevue.org/popover/\#api.popover.interfaces.PopoverPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [PopoverPassThroughOptionType](https://primevue.org/popover/#api.popover.types.PopoverPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| content | [PopoverPassThroughOptionType](https://primevue.org/popover/#api.popover.types.PopoverPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [PopoverPassThroughTransitionType](https://primevue.org/popover/#api.popover.types.PopoverPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### PopoverPassThroughAttributes [\#](https://primevue.org/popover/\#api.popover.interfaces.PopoverPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### PopoverState [\#](https://primevue.org/popover/\#api.popover.interfaces.PopoverState)
Defines current inline state in Popover component.
| name | type | default | description |
| --- | --- | --- | --- |
| visible | boolean | false | Current visible state as a boolean. |
#### PopoverBreakpoints [\#](https://primevue.org/popover/\#api.popover.interfaces.PopoverBreakpoints)
Popover breakpoint metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | string | null |  |
## Types [\#](https://primevue.org/popover/\#api.popover.types)
Defines the custom types used by the module.
#### PopoverPassThroughOptionType [\#](https://primevue.org/popover/\#api.popover.types.PopoverPassThroughOptionType)
| values |
| --- |
| PopoverPassThroughAttributes \| (options: PopoverPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### PopoverPassThroughTransitionType [\#](https://primevue.org/popover/\#api.popover.types.PopoverPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: PopoverPassThroughMethodOptions) => TransitionProps \| undefined |
#### PopoverEmits [\#](https://primevue.org/popover/\#api.popover.types.PopoverEmits)
| values |
| --- |
| EmitFn<PopoverEmitsOptions> |
- Popover
  - Props
  - Emits
  - Slots
  - Methods
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Animate On Scroll
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
# AnimateOnScroll
AnimateOnScroll is used to apply animations to elements when entering or leaving the viewport during scrolling.
## Import [\#](https://primevue.org/animateonscroll/\#import)
```javascript
import AnimateOnScroll from 'primevue/animateonscroll';
app.directive('animateonscroll', AnimateOnScroll);
```
Copy
## Basic [\#](https://primevue.org/animateonscroll/\#basic)
Animation classes are defined with the _enterClass_ and _leaveClass_ properties. This example utilizes _tailwindcss-primeui_ plugin animations however any valid CSS animation is supported.
Scroll Down
IndividualLorem ipsum dolor sit amet consectetur adipisicing elit.
TeamLorem ipsum dolor sit amet consectetur adipisicing elit.
EnterpriseLorem ipsum dolor sit amet consectetur adipisicing elit.
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
Jenna ThompsonLorem ipsum dolor sit amet consectetur adipisicing elit.
![](https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png)
Isabel GarciaLorem ipsum dolor sit amet consectetur adipisicing elit.
![](https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png)
Xavier MasonLorem ipsum dolor sit amet consectetur adipisicing elit.
850KCustomersLorem ipsum dolor sit amet consectetur adipisicing elit.
$1.5MRevenueLorem ipsum dolor sit amet consectetur adipisicing elit.
140KSalesLorem ipsum dolor sit amet consectetur adipisicing elit.
BandwidthLorem ipsum dolor sit amet consectetur adipisicing elit.
StorageLorem ipsum dolor sit amet consectetur adipisicing elit.
RequestsLorem ipsum dolor sit amet consectetur adipisicing elit.
```markup
<div class="flex flex-wrap justify-center gap-8">
    <div
        v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 slide-in-from-l-8 animate-duration-1000', leaveClass: 'animate-leave fade-out-0' }"
        class="flex flex-col border border-surface shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4"
    >
        <div class="rounded-full bg-primary text-primary-contrast w-12 h-12 flex items-center justify-center">
            <i class="pi pi-user !text-2xl"></i>
        </div>
        <span class="text-2xl font-bold">Individual</span>
        <span class="text-muted-color text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
    <div
        v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 animate-duration-1000', leaveClass: 'animate-leave fade-out-0' }"
        class="flex flex-col border border-surface shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4"
    >
        <div class="rounded-full bg-primary text-primary-contrast w-12 h-12 flex items-center justify-center">
            <i class="pi pi-users !text-2xl"></i>
        </div>
        <span class="text-2xl font-bold">Team</span>
        <span class="text-muted-color text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
    <div
        v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 slide-in-from-r-8 animate-duration-1000', leaveClass: 'animate-leave fade-out-0' }"
        class="flex flex-col border border-surface shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4"
    >
        <div class="rounded-full bg-primary text-primary-contrast w-12 h-12 flex items-center justify-center">
            <i class="pi pi-building !text-2xl"></i>
        </div>
        <span class="text-2xl font-bold">Enterprise</span>
        <span class="text-muted-color text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
</div>
<div class="flex flex-wrap justify-center gap-8">
    <div v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 slide-in-from-t-20 animate-duration-1000' }" class="flex flex-col border border-primary-200 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4">
        <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png" shape="circle" size="xlarge" />
        <span class="text-2xl font-medium">Jenna Thompson</span>
        <span class="text-muted-color text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
    <div v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 slide-in-from-b-20 animate-duration-1000' }" class="flex flex-col border border-primary-200 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4">
        <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png" shape="circle" size="xlarge" />
        <span class="text-2xl font-medium">Isabel Garcia</span>
        <span class="text-muted-color text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
    <div v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 slide-in-from-t-20 animate-duration-1000' }" class="flex flex-col border border-primary-200 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4">
        <Avatar image="https://primefaces.org/cdn/primevue/images/avatar/onyamalimba.png" shape="circle" size="xlarge" />
        <span class="text-2xl font-medium">Xavier Mason</span>
        <span class="text-muted-color text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
</div>
<div class="flex flex-wrap justify-center gap-8">
    <div
        v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 spin-in-45 slide-in-from-t-12 animate-duration-1000' }"
        class="flex flex-col bg-primary text-primary-contrast border-primary shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4"
    >
        <span class="bg-white/20 text-xl font-medium rounded-xl px-4 py-2">850K</span>
        <span class="text-2xl font-bold">Customers</span>
        <span class="text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
    <div
        v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 zoom-in-50 slide-in-from-t-20 animate-duration-1000' }"
        class="flex flex-col bg-primary text-primary-contrast border-primary shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4"
    >
        <span class="bg-white/20 text-xl font-medium rounded-xl px-4 py-2">$1.5M</span>
        <span class="text-2xl font-bold">Revenue</span>
        <span class="text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
    <div
        v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 spin-in-[-45deg] slide-in-from-t-16 animate-duration-1000' }"
        class="flex flex-col bg-primary text-primary-contrast border-primary shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4"
    >
        <span class="bg-white/20 text-xl font-medium rounded-xl px-4 py-2">140K</span>
        <span class="text-2xl font-bold">Sales</span>
        <span class="text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
</div>
<div class="flex flex-wrap justify-center gap-8">
    <div v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 zoom-in-50 animate-duration-1000' }" class="flex flex-col bg-purple-500 text-white border-purple-500 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4">
        <div class="rounded-full border-2 border-white w-12 h-12 flex items-center justify-center">
            <i class="pi pi-wifi !text-2xl"></i>
        </div>
        <span class="text-2xl font-bold">Bandwidth</span>
        <span class="text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
    <div v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 zoom-in-75 animate-duration-1000' }" class="flex flex-col bg-teal-500 text-white border-teal-500 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4">
        <div class="rounded-full border-2 border-white w-12 h-12 flex items-center justify-center">
            <i class="pi pi-database !text-2xl"></i>
        </div>
        <span class="text-2xl font-bold">Storage</span>
        <span class="text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
    <div v-animateonscroll="{ enterClass: 'animate-enter fade-in-10 zoom-in-50 animate-duration-1000' }" class="flex flex-col bg-indigo-500 text-white border-indigo-500 shadow-lg justify-center items-center max-w-80 rounded-2xl p-8 gap-4">
        <div class="rounded-full border-2 border-white w-12 h-12 flex items-center justify-center">
            <i class="pi pi-arrows-v !text-2xl"></i>
        </div>
        <span class="text-2xl font-bold">Requests</span>
        <span class="text-center">Lorem ipsum dolor sit amet consectetur adipisicing elit.</span>
    </div>
</div>
```
Copy
## Accessibility [\#](https://primevue.org/animateonscroll/\#accessibility)
### Screen Reader
AnimateOnScroll does not require any roles and attributes.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Accessibility
# AnimateOnScroll API
API defines helper props, events and others for the PrimeVue AnimateOnScroll module.
## AnimateOnScroll [\#](https://primevue.org/animateonscroll/\#api.animateonscroll)
AnimateOnScroll manages CSS classes declaratively to during enter/leave animations on scroll or on page load.
### Interfaces [\#](https://primevue.org/animateonscroll/\#api.animateonscroll.interfaces)
Defines the custom interfaces used by the module.
#### AnimateOnScrollOptions [\#](https://primevue.org/animateonscroll/\#api.animateonscroll.interfaces.AnimateOnScrollOptions)
Defines options of AnimateOnScroll.
| name | type | default | description |
| --- | --- | --- | --- |
| enterClass | string | null | Style class to add when item goes into viewport, use white space as a delimeter to define multiple classes. |
| leaveClass | string | null | Style class to add when item leaves the viewport, use white space as a delimeter to define multiple classes. |
| root | null \| Element \| Document | null | Specifies the \`root\` option of the IntersectionObserver API |
| rootMargin | string | null | Specifies the \`rootMargin\` option of the IntersectionObserver API |
| threshold | readonly number\[\] | null | Specifies the \`threshold\` option of the IntersectionObserver API |
#### AnimateOnScrollDirectivePassThroughOptions [\#](https://primevue.org/animateonscroll/\#api.animateonscroll.interfaces.AnimateOnScrollDirectivePassThroughOptions)
Custom passthrough(pt) directive options.
| name | type | default | description |
| --- | --- | --- | --- |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### AnimateOnScrollDirectiveModifiers [\#](https://primevue.org/animateonscroll/\#api.animateonscroll.interfaces.AnimateOnScrollDirectiveModifiers)
Defines modifiers of AnimateOnScroll.
| name | type | default | description |
| --- | --- | --- | --- |
| once | boolean | true | Whether the scroll event listener should be removed after initial run. |
#### AnimateOnScrollDirectiveBinding [\#](https://primevue.org/animateonscroll/\#api.animateonscroll.interfaces.AnimateOnScrollDirectiveBinding)
Binding of AnimateOnScroll directive.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | null \| ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, "", Object, any> \| Record<string, any> | null |  |
| oldValue | any | null |  |
| arg | string | null |  |
| dir | ObjectDirective<any, any, string, string> | null |  |
| value | [AnimateOnScrollOptions](https://primevue.org/animateonscroll/#api.animateonscroll.interfaces.AnimateOnScrollOptions) | null | Value of the AnimateOnScroll. |
| modifiers | [AnimateOnScrollDirectiveModifiers](https://primevue.org/animateonscroll/#api.animateonscroll.interfaces.AnimateOnScrollDirectiveModifiers) | null | Modifiers of the AnimateOnScroll. |
- AnimateOnScroll
  - Interfaces
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue CDN Setup
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Install PrimeVue with Vite
Setting up PrimeVue in a Vite project.
## Script [\#](https://primevue.org/cdn/\#script)
You can use PrimeVue and Vue.js from a CDN with a script tag. This approach does not involve any build step, and is suitable for enhancing static HTML. This guide uses [unpkg](https://www.unpkg.com/) however other providers such as [jsdeliver](https://www.jsdelivr.com/) and [cdnjs](https://cdnjs.com/) can also be used.
```markup
https://unpkg.com/vue@3/dist/vue.global.js
https://unpkg.com/primevue/umd/primevue.min.js
https://unpkg.com/@primeuix/themes/umd/aura.js  // see theming for alternatives
```
Copy
## CreateApp [\#](https://primevue.org/cdn/\#createapp)
Create an app container element and setup the application using _createApp_.
```markup
<body>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <div id="app">
    </div>
    <script>
        const { createApp, ref } = Vue;
        const app = createApp({
            setup() {
            }
        });
        app.mount('#app');
    </script>
</body>
```
Copy
## Plugin [\#](https://primevue.org/cdn/\#plugin)
PrimeVue plugin is required to be installed as an application plugin to set up the default [configuration](https://primevue.org/configuration).
```javascript
app.use(PrimeVue.Config);
```
Copy
## Theming [\#](https://primevue.org/cdn/\#theming)
Include the theme preset via a script element after adding PrimeVue, valid options are Aura, Lara, Nora and Material.
```markup
<!-- <script src="https://unpkg.com/@primeuix/themes/umd/{preset}.js"></script> -->
<script src="https://unpkg.com/@primeuix/themes/umd/aura.js"></script>
<script src="https://unpkg.com/@primeuix/themes/umd/lara.js"></script>
<script src="https://unpkg.com/@primeuix/themes/umd/nora.js"></script>
<script src="https://unpkg.com/@primeuix/themes/umd/material.js"></script>
```
Copy
## Example [\#](https://primevue.org/cdn/\#example)
A complete example using a PrimeVue DatePicker. You can also view this sample live at [Stackblitz](https://stackblitz.com/edit/web-platform-jt1jz4?file=index.html).
```markup
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>PrimeVue + CDN</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
  </head>
  <body>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://unpkg.com/primevue/umd/primevue.min.js"></script>
    <script src="https://unpkg.com/@primeuix/themes/umd/aura.js"></script>
    <div id="app">
      <p-datepicker v-model="date"></p-datepicker>
      <br /><br />
      {{ date }}
    </div>
    <script>
      const { createApp, ref } = Vue;
      const app = createApp({
        setup() {
          const date = ref();
          return {
            date
          };
        },
      });
      app.use(PrimeVue.Config, {
        theme: {
            preset: PrimeVue.Themes.Aura
        }
      });
      app.component('p-datepicker', PrimeVue.DatePicker);
      app.mount('#app');
    </script>
  </body>
</html>
```
Copy
- Script
- CreateApp
- Plugin
- Theming
- Example
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Chart Components
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Chart
Chart components are based on Chart.js, an open source HTML5 based charting library.
## Import [\#](https://primevue.org/chart/\#import)
```javascript
import Chart from 'primevue/chart';
```
Copy
## Chart.js [\#](https://primevue.org/chart/\#chartjs)
Chart component uses [Chart.JS](https://chartjs.org/) underneath so it needs to be installed as a dependency.
```javascript
npm install chart.js
```
Copy
## Basic [\#](https://primevue.org/chart/\#basic)
A chart is configured with 3 properties; _type_, _data_ and _options_. Chart type is defined using the _type_ property that accepts _pie_, _doughtnut_, _line_, _bar_, _radar_ and _polarArea_ as a value. The _data_ defines datasets represented with the chart and the _options_ provide numerous customization options to customize the presentation.
```markup
<Chart type="bar" :data="chartData" :options="chartOptions" />
```
Copy
## Pie [\#](https://primevue.org/chart/\#pie)
A pie chart is a circular statistical graphic which is divided into slices to illustrate numerical proportion.
```markup
<Chart type="pie" :data="chartData" :options="chartOptions" class="w-full md:w-[30rem]" />
```
Copy
## Doughnut [\#](https://primevue.org/chart/\#doughnut)
A doughnut chart is a variant of the pie chart, with a blank center allowing for additional information about the data as a whole to be included.
```markup
<Chart type="doughnut" :data="chartData" :options="chartOptions" class="w-full md:w-[30rem]" />
```
Copy
## Vertical Bar [\#](https://primevue.org/chart/\#vertical)
A bar chart or bar graph is a chart that presents grouped data with rectangular bars with lengths proportional to the values that they represent.
```markup
<Chart type="bar" :data="chartData" :options="chartOptions" class="h-[30rem]"  />
```
Copy
## Horizontal Bar [\#](https://primevue.org/chart/\#horizontal)
A bar chart is rendered horizontally when _indexAxis_ option is set as _y_.
```markup
<Chart type="bar" :data="chartData" :options="chartOptions" class="h-[30rem]"  />
```
Copy
## Stacked Bar [\#](https://primevue.org/chart/\#stacked)
Bars can be stacked on top of each other when _stacked_ option of a scale is enabled.
```markup
<Chart type="bar" :data="chartData" :options="chartOptions" class="h-[30rem]" />
```
Copy
## Line [\#](https://primevue.org/chart/\#line)
A line chart or line graph is a type of chart which displays information as a series of data points called 'markers' connected by straight line segments.
```markup
<Chart type="line" :data="chartData" :options="chartOptions" class="h-[30rem]" />
```
Copy
## Multi Axis [\#](https://primevue.org/chart/\#multiaxis)
Multiple axes can be added using the _scales_ option.
```markup
<Chart type="line" :data="chartData" :options="chartOptions" class="h-[30rem]" />
```
Copy
## Line Styles [\#](https://primevue.org/chart/\#linestyles)
Various styles of a line series can be customized to display customizations like an area chart.
```markup
<Chart type="line" :data="chartData" :options="chartOptions" class="h-[30rem]" />
```
Copy
## Polar Area [\#](https://primevue.org/chart/\#polararea)
Polar area charts are similar to pie charts, but each segment has the same angle - the radius of the segment differs depending on the value.
```markup
<Chart type="polarArea" :data="chartData" :options="chartOptions" class="w-full md:w-[30rem]" />
```
Copy
## Radar [\#](https://primevue.org/chart/\#radar)
A radar chart is a graphical method of displaying multivariate data in the form of a two-dimensional chart of three or more quantitative variables represented on axes starting from the same point.
```markup
<Chart type="radar" :data="chartData" :options="chartOptions" class="w-full md:w-[30rem]" />
```
Copy
## Combo [\#](https://primevue.org/chart/\#combo)
Different chart types can be combined in the same graph usign the _type_ option of a dataset.
```markup
<Chart type="bar" :data="chartData" :options="chartOptions" class="h-[30rem]" />
```
Copy
## Accessibility [\#](https://primevue.org/chart/\#accessibility)
### Screen Reader
Chart components internally use _canvas_ element, refer to the [Chart.js accessibility](https://www.chartjs.org/docs/latest/general/accessibility.html) guide for more information. The canvas element can be customized with _canvasProps_ property to define aria roles and properties, in addition any content inside the component is directly passed as a child of the canvas to be able to provide fallback content like a table.
```markup
<Chart type="line" :data="data" :canvasProps="{'role': 'img', 'aria-label': 'Data'}" />
```
Copy
- Import
- Chart.js
- Basic
- Pie
- Doughnut
- Vertical Bar
- Horizontal Bar
- Stacked Bar
- Line
- Multi Axis
- Line Styles
- Polar Area
- Radar
- Combo
- Accessibility
# Chart API
API defines helper props, events and others for the PrimeVue Chart module.
## Chart [\#](https://primevue.org/chart/\#api.chart)
Chart groups a collection of contents in tabs.
### Props [\#](https://primevue.org/chart/\#api.chart.props)
Defines valid properties in Chart component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| type | string | null | Type of the chart. |  |
| data | object | null | Data to display. |  |
| options | object | null | Options to customize the chart. |  |
| plugins | any\[\] | null | Used to custom plugins of the chart. |  |
| width | number | 300 | Width of the chart in non-responsive mode. |  |
| height | number | 150 | Height of the chart in non-responsive mode. |  |
| canvasProps | CanvasHTMLAttributes | null | Used to pass all properties of the CanvasHTMLAttributes to canvas element inside the component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ChartPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/chart/\#api.chart.emits)
Defines valid emits in Chart component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| select | event: [ChartSelectEvent](https://primevue.org/chart/#api.chart.events.ChartSelectEvent) | void | Callback to invoke when a tab gets expanded. |  |
| loaded | chart: any | void | Callback to invoke when chart is loaded. |  |
### Methods [\#](https://primevue.org/chart/\#api.chart.methods)
Defines methods that can be accessed by the component's reference.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| refresh |  | void | Redraws the graph. |  |
| reinit |  | void | Destroys the graph first and then creates it again. |  |
| generateLegend |  | any | Returns an HTML string of a legend for that chart. The legend is generated from the legendCallback in the options. |  |
| getChart |  | any | Returns Chart instance. |  |
### Events [\#](https://primevue.org/chart/\#api.chart.events)
Defines the custom events used by the component's emit.
#### ChartSelectEvent [\#](https://primevue.org/chart/\#api.chart.events.ChartSelectEvent)
Custom select event.
See [select](https://primevue.org/chart/#api.chart.emitsoptions.select)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| element | any | Selected element. |
| dataset | any | Selected dataset. |
### Interfaces [\#](https://primevue.org/chart/\#api.chart.interfaces)
Defines the custom interfaces used by the module.
#### ChartPassThroughMethodOptions [\#](https://primevue.org/chart/\#api.chart.interfaces.ChartPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ChartProps](https://primevue.org/chart/#api.chart.interfaces.ChartProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ChartPassThroughOptions [\#](https://primevue.org/chart/\#api.chart.interfaces.ChartPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ChartPassThroughOptionType](https://primevue.org/chart/#api.chart.types.ChartPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| canvas | [ChartPassThroughOptionType](https://primevue.org/chart/#api.chart.types.ChartPassThroughOptionType) | null | Used to pass attributes to the canvas's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ChartPassThroughAttributes [\#](https://primevue.org/chart/\#api.chart.interfaces.ChartPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/chart/\#api.chart.types)
Defines the custom types used by the module.
#### ChartPassThroughOptionType [\#](https://primevue.org/chart/\#api.chart.types.ChartPassThroughOptionType)
| values |
| --- |
| ChartPassThroughAttributes \| (options: ChartPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ChartEmits [\#](https://primevue.org/chart/\#api.chart.types.ChartEmits)
| values |
| --- |
| EmitFn<ChartEmitsOptions> |
- Chart
  - Props
  - Emits
  - Methods
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## InputOtp Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# InputOtp
Input Otp is used to enter one time passwords.
## Import [\#](https://primevue.org/inputotp/\#import)
```javascript
import InputOtp from 'primevue/inputotp';
```
Copy
## Basic [\#](https://primevue.org/inputotp/\#basic)
InputOtp is used with the _v-model_ property for two-way value binding. The number of characters is defined with the _length_ option, which is set to 4 by default.
```markup
<InputOtp v-model="value" />
```
Copy
## Forms [\#](https://primevue.org/inputotp/\#forms)
InputOtp integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col gap-1">
        <InputOtp name="passcode" />
        <Message v-if="$form.passcode?.invalid" severity="error" size="small" variant="simple">{{ $form.passcode.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Mask [\#](https://primevue.org/inputotp/\#mask)
Enable the _mask_ option to hide the values in the input fields.
```markup
<InputOtp v-model="value" mask />
```
Copy
## Integer Only [\#](https://primevue.org/inputotp/\#integeronly)
When _integerOnly_ is present, only integers can be accepted as input.
```markup
<InputOtp v-model="value" integerOnly />
```
Copy
## Filled [\#](https://primevue.org/inputotp/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
```markup
<InputOtp v-model="value" variant="filled" />
```
Copy
## Sizes [\#](https://primevue.org/inputotp/\#sizes)
InputOtp provides _small_ and _large_ sizes as alternatives to the base.
```markup
<InputOtp v-model="value1" size="small" />
<InputOtp v-model="value2" />
<InputOtp v-model="value3" size="large" />
```
Copy
## Template [\#](https://primevue.org/inputotp/\#template)
Define a template with your own UI elements with bindings to the provided events and attributes to replace the default design.
```markup
<InputOtp v-model="value">
    <template #default="{ attrs, events }">
        <input type="text" v-bind="attrs" v-on="events" class="custom-otp-input" />
    </template>
</InputOtp>
```
Copy
## Sample [\#](https://primevue.org/inputotp/\#sample)
A sample UI implementation with templating and additional elements.
Authenticate Your Account
Please enter the code sent to your phone.
Resend CodeSubmit Code
```markup
<div class="flex flex-col items-center">
    <div class="font-bold text-xl mb-2">Authenticate Your Account</div>
    <p class="text-surface-500 dark:text-surface-400 block mb-8">Please enter the code sent to your phone.</p>
    <InputOtp v-model="value" :length="6" style="gap: 0">
        <template #default="{ attrs, events, index }">
            <input type="text" v-bind="attrs" v-on="events" class="custom-otp-input" />
            <div v-if="index === 3" class="px-4">
                <i class="pi pi-minus" />
            </div>
        </template>
    </InputOtp>
    <div class="flex justify-between mt-8 self-stretch">
        <Button label="Resend Code" link class="p-0"></Button>
        <Button label="Submit Code"></Button>
    </div>
</div>
```
Copy
## Accessibility [\#](https://primevue.org/inputotp/\#accessibility)
### Screen Reader
Input OTP uses a set of InputText components, refer to the [InputText](https://primevue.org/inputtext) component for more information about the screen reader support.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the input otp. |
| _right arrow_ | Moves focus to the next input element. |
| _left arrow_ | Moves focus to the previous input element. |
| _backspace_ | Deletes the input and moves focus to the previous input element. |
- Import
- Basic
- Forms
- Mask
- Integer Only
- Filled
- Sizes
- Template
- Sample
- Accessibility
# InputOtp API
API defines helper props, events and others for the PrimeVue InputOtp module.
## InputOtp [\#](https://primevue.org/inputotp/\#api.inputotp)
InputOtp is used to enter one time passwords.
### Props [\#](https://primevue.org/inputotp/\#api.inputotp.props)
Defines valid properties in InputOtp component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | string \| boolean | null | Specifies whether a inputotp should be checked or not. |  |
| defaultValue | string \| boolean | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| readonly | boolean | false | When present, it specifies that an input field is read-only. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| tabindex | number | null | Index of the element in tabbing order. |  |
| length | number | 4 | Number of characters to initiate. |  |
| mask | boolean | false | Mask pattern. |  |
| integerOnly | boolean | false | When present, it specifies that an input field is integer-only. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<InputOtpPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/inputotp/\#api.inputotp.emits)
Defines valid emits in InputOtp component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: string | void | Emitted when the value changes. |  |
| value-change | value: string | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [InputOtpChangeEvent](https://primevue.org/inputotp/#api.inputotp.events.InputOtpChangeEvent) | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
### Slots [\#](https://primevue.org/inputotp/\#api.inputotp.slots)
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default | scope: {<br>events: (index: number) â‡’ InputOtpTemplateEvents, // Events of the componentattrs: (index: number) â‡’ InputOtpTemplateAttrsOptions, // Attributes of the componentindex: number, // Index of the input field<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Default content slot. |  |
### Events [\#](https://primevue.org/inputotp/\#api.inputotp.events)
Defines the custom events used by the component's emit.
#### InputOtpChangeEvent [\#](https://primevue.org/inputotp/\#api.inputotp.events.InputOtpChangeEvent)
Custom change event.
See [change](https://primevue.org/inputotp/#api.inputotp.emitsoptions.change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | string | Value of the input |
#### InputOtpTemplateEvents [\#](https://primevue.org/inputotp/\#api.inputotp.events.InputOtpTemplateEvents)
InputOtp templating events
| name | type | description |
| --- | --- | --- |
| input | Function |  |
| keydown | Function |  |
| focus | Function |  |
| blur | Function |  |
| paste | Function |  |
### Interfaces [\#](https://primevue.org/inputotp/\#api.inputotp.interfaces)
Defines the custom interfaces used by the module.
#### InputOtpPassThroughMethodOptions [\#](https://primevue.org/inputotp/\#api.inputotp.interfaces.InputOtpPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [InputOtpProps](https://primevue.org/inputotp/#api.inputotp.interfaces.InputOtpProps) | null | Defines valid properties. |
| state | [InputOtpState](https://primevue.org/inputotp/#api.inputotp.interfaces.InputOtpState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### InputOtpSharedPassThroughMethodOptions [\#](https://primevue.org/inputotp/\#api.inputotp.interfaces.InputOtpSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [InputOtpProps](https://primevue.org/inputotp/#api.inputotp.interfaces.InputOtpProps) | null | Defines valid properties. |
| state | [InputOtpState](https://primevue.org/inputotp/#api.inputotp.interfaces.InputOtpState) | null | Defines current inline state. |
#### InputOtpPassThroughOptions [\#](https://primevue.org/inputotp/\#api.inputotp.interfaces.InputOtpPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [InputOtpPassThroughOptionType](https://primevue.org/inputotp/#api.inputotp.types.InputOtpPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcInputText | any | null | Used to pass attributes to the InputText component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### InputOtpPassThroughAttributes [\#](https://primevue.org/inputotp/\#api.inputotp.interfaces.InputOtpPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### InputOtpState [\#](https://primevue.org/inputotp/\#api.inputotp.interfaces.InputOtpState)
Defines current inline state in InputOtp component.
| name | type | default | description |
| --- | --- | --- | --- |
| tokens | string\[\] \| number\[\] | null | Array of input tokens |
#### InputOtpTemplateAttrsOptions [\#](https://primevue.org/inputotp/\#api.inputotp.interfaces.InputOtpTemplateAttrsOptions)
InputOtp attr options
| name | type | default | description |
| --- | --- | --- | --- |
| value | string | null | Input token value |
## Types [\#](https://primevue.org/inputotp/\#api.inputotp.types)
Defines the custom types used by the module.
#### InputOtpPassThroughOptionType [\#](https://primevue.org/inputotp/\#api.inputotp.types.InputOtpPassThroughOptionType)
| values |
| --- |
| InputOtpPassThroughAttributes \| (options: InputOtpPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### InputOtpEmits [\#](https://primevue.org/inputotp/\#api.inputotp.types.InputOtpEmits)
| values |
| --- |
| EmitFn<InputOtpEmitsOptions> |
- InputOtp
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## ScrollTop Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# ScrollTop
ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.
## Import [\#](https://primevue.org/scrolltop/\#import)
```javascript
import ScrollTop from 'primevue/scrolltop';
```
Copy
## Basic [\#](https://primevue.org/scrolltop/\#basic)
ScrollTop listens window scroll by default.
Scroll down the page to display the ScrollTop component.
```markup
<ScrollTop />
```
Copy
## Element [\#](https://primevue.org/scrolltop/\#element)
Setting the _target_ property to _parent_ binds ScrollTop to its parent element that has scrolling content.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae et leo duis ut diam. Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut. Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna. Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris. Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus. Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas. Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris. Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer. Mattis aliquam faucibus purus in massa tempor nec.
```markup
<ScrollPanel style="width: 250px; height: 200px">
    <p>
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae et leo duis ut diam. Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing
        elit ut. Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna. Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris. Semper
        feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus. Cursus sit amet
        dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas. Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris. Eget egestas purus viverra accumsan in nisl nisi.
        Suscipit adipiscing bibendum est ultricies integer. Mattis aliquam faucibus purus in massa tempor nec.
    </p>
    <ScrollTop target="parent" :threshold="100" icon="pi pi-arrow-up" :buttonProps="{ severity: 'contrast', raised: true, rounded: true }" />
</ScrollPanel>
```
Copy
## Accessibility [\#](https://primevue.org/scrolltop/\#accessibility)
### Screen Reader
ScrollTop uses a button element with an _aria-label_ that refers to the _aria.scrollTop_ property of the [locale](https://primevue.org/configuration/#locale) API by default, you may use your own aria roles and attributes as any valid attribute is passed to the button element implicitly.
### Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Scrolls to top. |
| _space_ | Scrolls to top. |
- Import
- Basic
- Element
- Accessibility
# ScrollTop API
API defines helper props, events and others for the PrimeVue ScrollTop module.
## ScrollTop [\#](https://primevue.org/scrolltop/\#api.scrolltop)
ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.
### Props [\#](https://primevue.org/scrolltop/\#api.scrolltop.props)
Defines valid properties in ScrollTop component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| target | HintedString<"window" \| "parent"> | window | Target of the ScrollTop. |  |
| threshold | number | 400 | Defines the threshold value of the vertical scroll position of the target to toggle the visibility. |  |
| icon | string | null | Icon to display. |  |
| behavior | string | smooth | Defines the scrolling behaviour, 'smooth' adds an animation and 'auto' scrolls with a jump. |  |
| buttonProps | object | null | Used to pass all properties of the ButtonProps to the Button component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ScrollTopPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/scrolltop/\#api.scrolltop.slots)
Defines valid slots in ScrollTop component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| icon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom scrolltop icon template. |  |
### Interfaces [\#](https://primevue.org/scrolltop/\#api.scrolltop.interfaces)
Defines the custom interfaces used by the module.
#### ScrollTopPassThroughMethodOptions [\#](https://primevue.org/scrolltop/\#api.scrolltop.interfaces.ScrollTopPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ScrollTopProps](https://primevue.org/scrolltop/#api.scrolltop.interfaces.ScrollTopProps) | null | Defines valid properties. |
| state | [ScrollTopState](https://primevue.org/scrolltop/#api.scrolltop.interfaces.ScrollTopState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ScrollTopSharedPassThroughMethodOptions [\#](https://primevue.org/scrolltop/\#api.scrolltop.interfaces.ScrollTopSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [ScrollTopProps](https://primevue.org/scrolltop/#api.scrolltop.interfaces.ScrollTopProps) | null | Defines valid properties. |
| state | [ScrollTopState](https://primevue.org/scrolltop/#api.scrolltop.interfaces.ScrollTopState) | null | Defines current inline state. |
#### ScrollTopPassThroughOptions [\#](https://primevue.org/scrolltop/\#api.scrolltop.interfaces.ScrollTopPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | any | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [ScrollTopPassThroughTransitionType](https://primevue.org/scrolltop/#api.scrolltop.types.ScrollTopPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### ScrollTopPassThroughAttributes [\#](https://primevue.org/scrolltop/\#api.scrolltop.interfaces.ScrollTopPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ScrollTopState [\#](https://primevue.org/scrolltop/\#api.scrolltop.interfaces.ScrollTopState)
Defines current inline state in ScrollTop component.
| name | type | default | description |
| --- | --- | --- | --- |
| visible | boolean | false | Current visible state as a boolean. |
## Types [\#](https://primevue.org/scrolltop/\#api.scrolltop.types)
Defines the custom types used by the module.
#### ScrollTopPassThroughOptionType [\#](https://primevue.org/scrolltop/\#api.scrolltop.types.ScrollTopPassThroughOptionType)
| values |
| --- |
| ScrollTopPassThroughAttributes \| (options: ScrollTopPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ScrollTopPassThroughTransitionType [\#](https://primevue.org/scrolltop/\#api.scrolltop.types.ScrollTopPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: ScrollTopPassThroughMethodOptions) => TransitionProps \| undefined |
#### ScrollTopEmits [\#](https://primevue.org/scrolltop/\#api.scrolltop.types.ScrollTopEmits)
| values |
| --- |
| EmitFn<ScrollTopEmitsOptions> |
- ScrollTop
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Stepper Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Stepper
The Stepper component displays a wizard-like workflow by guiding users through the multi-step progression.
## Import [\#](https://primevue.org/stepper/\#import)
```javascript
import Stepper from 'primevue/stepper';
import StepList from 'primevue/steplist';
import StepPanels from 'primevue/steppanels';
import StepItem from 'primevue/stepitem';
import Step from 'primevue/step';
import StepPanel from 'primevue/steppanel';
```
Copy
## Horizontal [\#](https://primevue.org/stepper/\#horizontal)
Stepper consists of a combination of _StepList_, _Step_, _StepPanels_ and _StepPanel_ components. The _value_ property is essential for associating Step and StepPanel with each other.
1Header I
2Header II
3Header III
Content I
Next
Content II
BackNext
Content III
Back
```markup
<Stepper value="1">
    <StepList>
        <Step value="1">Header I</Step>
        <Step value="2">Header II</Step>
        <Step value="3">Header III</Step>
    </StepList>
    <StepPanels>
        <StepPanel v-slot="{ activateCallback }" value="1">
            <div class="flex flex-col h-48">
                <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium">Content I</div>
            </div>
            <div class="flex pt-6 justify-end">
                <Button label="Next" icon="pi pi-arrow-right" iconPos="right" @click="activateCallback('2')" />
            </div>
        </StepPanel>
        <StepPanel v-slot="{ activateCallback }" value="2">
            <div class="flex flex-col h-48">
                <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium">Content II</div>
            </div>
            <div class="flex pt-6 justify-between">
                <Button label="Back" severity="secondary" icon="pi pi-arrow-left" @click="activateCallback('1')" />
                <Button label="Next" icon="pi pi-arrow-right" iconPos="right" @click="activateCallback('3')" />
            </div>
        </StepPanel>
        <StepPanel v-slot="{ activateCallback }" value="3">
            <div class="flex flex-col h-48">
                <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium">Content III</div>
            </div>
            <div class="pt-6">
                <Button label="Back" severity="secondary" icon="pi pi-arrow-left" @click="activateCallback('2')" />
            </div>
        </StepPanel>
    </StepPanels>
</Stepper>
```
Copy
## Vertical [\#](https://primevue.org/stepper/\#vertical)
Vertical layout requires _StepItem_ as a wrapper of _Step_ and _StepPanel_ components.
1Header I
Content I
Next
2Header II
Content II
BackNext
3Header III
Content III
Back
```markup
<Stepper value="1">
    <StepItem value="1">
        <Step>Header I</Step>
        <StepPanel v-slot="{ activateCallback }">
            <div class="flex flex-col h-48">
                <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium">Content I</div>
            </div>
             <div class="py-6">
                <Button label="Next" @click="activateCallback('2')" />
            </div>
        </StepPanel>
    </StepItem>
    <StepItem value="2">
        <Step>Header II</Step>
        <StepPanel v-slot="{ activateCallback }">
            <div class="flex flex-col h-48">
                <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium">Content II</div>
            </div>
            <div class="flex py-6 gap-2">
                <Button label="Back" severity="secondary" @click="activateCallback('1')" />
                <Button label="Next" @click="activateCallback('3')" />
            </div>
        </StepPanel>
    </StepItem>
    <StepItem value="3">
        <Step>Header III</Step>
        <StepPanel v-slot="{ activateCallback }">
            <div class="flex flex-col h-48">
                <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium">Content III</div>
            </div>
             <div class="py-6">
                <Button label="Back" severity="secondary" @click="activateCallback('2')" />
            </div>
        </StepPanel>
    </StepItem>
</Stepper>
```
Copy
## Linear [\#](https://primevue.org/stepper/\#linear)
When _linear_ property is present, current step must be completed in order to move to the next step.
1Header I
2Header II
3Header III
Content I
Next
Content II
BackNext
Content III
Back
```markup
<Stepper value="1" linear>
    <StepList>
        <Step value="1">Header I</Step>
        <Step value="2">Header II</Step>
        <Step value="3">Header III</Step>
    </StepList>
    <StepPanels>
        <StepPanel v-slot="{ activateCallback }" value="1">
            <div class="flex flex-col h-48">
                <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium">Content I</div>
            </div>
            <div class="flex pt-6 justify-end">
                <Button label="Next" icon="pi pi-arrow-right" @click="activateCallback('2')" />
            </div>
        </StepPanel>
        <StepPanel v-slot="{ activateCallback }" value="2">
            <div class="flex flex-col h-48">
                <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium">Content II</div>
            </div>
            <div class="flex pt-6 justify-between">
                <Button label="Back" severity="secondary" icon="pi pi-arrow-left" @click="activateCallback('1')" />
                <Button label="Next" icon="pi pi-arrow-right" iconPos="right" @click="activateCallback('3')" />
            </div>
        </StepPanel>
        <StepPanel v-slot="{ activateCallback }" value="3">
            <div class="flex flex-col h-48">
                <div class="border-2 border-dashed border-surface-200 dark:border-surface-700 rounded bg-surface-50 dark:bg-surface-950 flex-auto flex justify-center items-center font-medium">Content III</div>
            </div>
            <div class="pt-6">
                <Button label="Back" severity="secondary" icon="pi pi-arrow-left" @click="activateCallback('2')" />
            </div>
        </StepPanel>
    </StepPanels>
</Stepper>
```
Copy
## Steps Only [\#](https://primevue.org/stepper/\#stepsonly)
Use Stepper with a _StepList_ only for custom requirements where a progress indicator is needed.
1Design
2Development
3QA
```markup
<Stepper value="1" class="basis-[50rem]">
    <StepList>
        <Step value="1">Design</Step>
        <Step value="2">Development</Step>
        <Step value="3">QA</Step>
    </StepList>
</Stepper>
```
Copy
## Template [\#](https://primevue.org/stepper/\#template)
Custom content for a step is defined with the default slot. The optional _as_ property controls the default container element of a step, for example setting it to a _button_ renders a button for the header instead of a div. The _asChild_ option enables the headless mode for further customization by passing callbacks and properties to implement your own step.
Create your account
Enter a password
Next
Choose your interests
NatureArtMusicDesignPhotographyMoviesSportsGamingTravelingDancing
BackNext
Account created successfully
![logo](https://primefaces.org/cdn/primevue/images/stepper/content.svg)
Back
```markup
<Stepper v-model:value="activeStep" class="basis-[40rem]">
    <StepList>
        <Step v-slot="{ activateCallback, value, a11yAttrs }" asChild :value="1">
            <div class="flex flex-row flex-auto gap-2" v-bind="a11yAttrs.root">
                <button class="bg-transparent border-0 inline-flex flex-col gap-2" @click="activateCallback" v-bind="a11yAttrs.header">
                    <span
                        :class="[\
                            'rounded-full border-2 w-12 h-12 inline-flex items-center justify-center',\
                            { 'bg-primary text-primary-contrast border-primary': value <= activeStep, 'border-surface-200 dark:border-surface-700': value > activeStep }\
                        ]"
                    >
                        <i class="pi pi-user" />
                    </span>
                </button>
                <Divider />
            </div>
        </Step>
        <Step v-slot="{ activateCallback, value, a11yAttrs }" asChild :value="2">
            <div class="flex flex-row flex-auto gap-2 pl-2" v-bind="a11yAttrs.root">
                <button class="bg-transparent border-0 inline-flex flex-col gap-2" @click="activateCallback" v-bind="a11yAttrs.header">
                    <span
                        :class="[\
                            'rounded-full border-2 w-12 h-12 inline-flex items-center justify-center',\
                            { 'bg-primary text-primary-contrast border-primary': value <= activeStep, 'border-surface-200 dark:border-surface-700': value > activeStep }\
                        ]"
                    >
                        <i class="pi pi-star" />
                    </span>
                </button>
                <Divider />
            </div>
        </Step>
        <Step v-slot="{ activateCallback, value, a11yAttrs }" asChild :value="3">
            <div class="flex flex-row pl-2" v-bind="a11yAttrs.root">
                <button class="bg-transparent border-0 inline-flex flex-col gap-2" @click="activateCallback" v-bind="a11yAttrs.header">
                    <span
                        :class="[\
                            'rounded-full border-2 w-12 h-12 inline-flex items-center justify-center',\
                            { 'bg-primary text-primary-contrast border-primary': value <= activeStep, 'border-surface-200 dark:border-surface-700': value > activeStep }\
                        ]"
                    >
                        <i class="pi pi-id-card" />
                    </span>
                </button>
            </div>
        </Step>
    </StepList>
    <StepPanels>
        <StepPanel v-slot="{ activateCallback }" :value="1">
            <div class="flex flex-col gap-2 mx-auto" style="min-height: 16rem; max-width: 20rem">
                <div class="text-center mt-4 mb-4 text-xl font-semibold">Create your account</div>
                <div class="field">
                    <InputText id="input" v-model="name" type="text" placeholder="Name" fluid />
                </div>
                <div class="field">
                    <InputText id="email" v-model="email" type="email" placeholder="Email" fluid />
                </div>
                <div class="field">
                    <Password v-model="password" placeholder="Password" fluid />
                </div>
            </div>
            <div class="flex pt-6 justify-end">
                <Button label="Next" icon="pi pi-arrow-right" iconPos="right" @click="activateCallback(2)" />
            </div>
        </StepPanel>
        <StepPanel v-slot="{ activateCallback }" :value="2">
            <div class="flex flex-col gap-2 mx-auto" style="min-height: 16rem; max-width: 24rem">
                <div class="text-center mt-4 mb-4 text-xl font-semibold">Choose your interests</div>
                <div class="flex flex-wrap justify-center gap-4">
                    <ToggleButton v-model="option1" onLabel="Nature" offLabel="Nature" />
                    <ToggleButton v-model="option2" onLabel="Art" offLabel="Art" />
                    <ToggleButton v-model="option3" onLabel="Music" offLabel="Music" />
                    <ToggleButton v-model="option4" onLabel="Design" offLabel="Design" />
                    <ToggleButton v-model="option5" onLabel="Photography" offLabel="Photography" />
                    <ToggleButton v-model="option6" onLabel="Movies" offLabel="Movies" />
                    <ToggleButton v-model="option7" onLabel="Sports" offLabel="Sports" />
                    <ToggleButton v-model="option8" onLabel="Gaming" offLabel="Gaming" />
                    <ToggleButton v-model="option9" onLabel="Traveling" offLabel="Traveling" />
                    <ToggleButton v-model="option10" onLabel="Dancing" offLabel="Dancing" />
                </div>
            </div>
            <div class="flex pt-6 justify-between">
                <Button label="Back" severity="secondary" icon="pi pi-arrow-left" @click="activateCallback(1)" />
                <Button label="Next" icon="pi pi-arrow-right" iconPos="right" @click="activateCallback(3)" />
            </div>
        </StepPanel>
        <StepPanel v-slot="{ activateCallback }" :value="3">
            <div class="flex flex-col gap-2 mx-auto" style="min-height: 16rem; max-width: 24rem">
                <div class="text-center mt-4 mb-4 text-xl font-semibold">Account created successfully</div>
                <div class="flex justify-center">
                    <img alt="logo" src="https://primefaces.org/cdn/primevue/images/stepper/content.svg" />
                </div>
            </div>
            <div class="flex pt-6 justify-start">
                <Button label="Back" severity="secondary" icon="pi pi-arrow-left" @click="activateCallback(2)" />
            </div>
        </StepPanel>
    </StepPanels>
</Stepper>
```
Copy
## Accessibility [\#](https://primevue.org/stepper/\#accessibility)
### Screen Reader
Stepper container is defined with the _tablist_ role, as any attribute is passed to the container element _aria-labelledby_ can be optionally used to specify an element to describe the Stepper. Each stepper header has a _tab_ role and _aria-controls_ to refer to the corresponding stepper content element. The content element of each stepper has _tabpanel_ role, an id to match the _aria-controls_ of the header and _aria-labelledby_ reference to the header as the accessible name.
### Tab Header Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus through the header. |
| _enter_ | Activates the focused stepper header. |
| _space_ | Activates the focused stepper header. |
- Import
- Horizontal
- Vertical
- Linear
- Steps Only
- Template
- Accessibility
# Stepper API
API defines helper props, events and others for the PrimeVue Stepper module.
## Stepper [\#](https://primevue.org/stepper/\#api.stepper)
Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multi-step process.
### Props [\#](https://primevue.org/stepper/\#api.stepper.props)
Defines valid properties in Stepper component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | string \| number | null | Active value of stepper. |  |
| linear | boolean | false | Whether the steps are clickable or not. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<StepperPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/stepper/\#api.stepper.emits)
Defines valid emits in Stepper component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:value | value: any | void | Emitted when the value changes. |  |
### Slots [\#](https://primevue.org/stepper/\#api.stepper.slots)
Defines valid slots in Stepper component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom default template. |  |
| start |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom start template. |  |
| end |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom end template. |  |
### Interfaces [\#](https://primevue.org/stepper/\#api.stepper.interfaces)
Defines the custom interfaces used by the module.
#### StepperPassThroughMethodOptions [\#](https://primevue.org/stepper/\#api.stepper.interfaces.StepperPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [StepperProps](https://primevue.org/stepper/#api.stepper.interfaces.StepperProps) | null | Defines valid properties. |
| state | [StepperState](https://primevue.org/stepper/#api.stepper.interfaces.StepperState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### StepperPassThroughOptions [\#](https://primevue.org/stepper/\#api.stepper.interfaces.StepperPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [StepperPassThroughOptionType](https://primevue.org/stepper/#api.stepper.types.StepperPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| separator | [StepperPassThroughOptionType](https://primevue.org/stepper/#api.stepper.types.StepperPassThroughOptionType) | null | Used to pass attributes to the separator's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### StepperPassThroughAttributes [\#](https://primevue.org/stepper/\#api.stepper.interfaces.StepperPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### StepperState [\#](https://primevue.org/stepper/\#api.stepper.interfaces.StepperState)
Defines current inline state in Stepper component.
| name | type | default | description |
| --- | --- | --- | --- |
| d\_value | any | null | Current active value state. |
| id | string | null | Unique id for the Stepper component. |
## Types [\#](https://primevue.org/stepper/\#api.stepper.types)
Defines the custom types used by the module.
#### StepperPassThroughOptionType [\#](https://primevue.org/stepper/\#api.stepper.types.StepperPassThroughOptionType)
| values |
| --- |
| StepperPassThroughAttributes \| (options: StepperPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### StepperEmits [\#](https://primevue.org/stepper/\#api.stepper.types.StepperEmits)
| values |
| --- |
| EmitFn<StepperEmitsOptions> |
## StepList [\#](https://primevue.org/stepper/\#api.steplist)
StepList is a helper component for Stepper component.
### Props [\#](https://primevue.org/stepper/\#api.steplist.props)
Defines valid properties in StepList component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<StepListPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/stepper/\#api.steplist.slots)
Defines valid slots in StepList slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
### Interfaces [\#](https://primevue.org/stepper/\#api.steplist.interfaces)
Defines the custom interfaces used by the module.
#### StepListPassThroughMethodOptions [\#](https://primevue.org/stepper/\#api.steplist.interfaces.StepListPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [StepListProps](https://primevue.org/stepper/#api.steplist.interfaces.StepListProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### StepListPassThroughOptions [\#](https://primevue.org/stepper/\#api.steplist.interfaces.StepListPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [StepListPassThroughOptionType](https://primevue.org/stepper/#api.steplist.types.StepListPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### StepListPassThroughAttributes [\#](https://primevue.org/stepper/\#api.steplist.interfaces.StepListPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/stepper/\#api.steplist.types)
Defines the custom types used by the module.
#### StepListPassThroughOptionType [\#](https://primevue.org/stepper/\#api.steplist.types.StepListPassThroughOptionType)
| values |
| --- |
| StepListPassThroughAttributes \| (options: StepListPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### StepListEmits [\#](https://primevue.org/stepper/\#api.steplist.types.StepListEmits)
| values |
| --- |
| EmitFn<StepListEmitsOptions> |
## StepPanels [\#](https://primevue.org/stepper/\#api.steppanels)
StepPanels is a helper component for Stepper component.
### Props [\#](https://primevue.org/stepper/\#api.steppanels.props)
Defines valid properties in StepPanels component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<StepPanelsPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/stepper/\#api.steppanels.slots)
Defines valid slots in StepPanels slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
### Interfaces [\#](https://primevue.org/stepper/\#api.steppanels.interfaces)
Defines the custom interfaces used by the module.
#### StepPanelsPassThroughMethodOptions [\#](https://primevue.org/stepper/\#api.steppanels.interfaces.StepPanelsPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [StepPanelsProps](https://primevue.org/stepper/#api.steppanels.interfaces.StepPanelsProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### StepPanelsPassThroughOptions [\#](https://primevue.org/stepper/\#api.steppanels.interfaces.StepPanelsPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [StepPanelsPassThroughOptionType](https://primevue.org/stepper/#api.steppanels.types.StepPanelsPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### StepPanelsPassThroughAttributes [\#](https://primevue.org/stepper/\#api.steppanels.interfaces.StepPanelsPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/stepper/\#api.steppanels.types)
Defines the custom types used by the module.
#### StepPanelsPassThroughOptionType [\#](https://primevue.org/stepper/\#api.steppanels.types.StepPanelsPassThroughOptionType)
| values |
| --- |
| StepPanelsPassThroughAttributes \| (options: StepPanelsPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### StepPanelsEmits [\#](https://primevue.org/stepper/\#api.steppanels.types.StepPanelsEmits)
| values |
| --- |
| EmitFn<StepPanelsEmitsOptions> |
## StepItem [\#](https://primevue.org/stepper/\#api.stepitem)
StepItem is a helper component for Stepper component.
### Props [\#](https://primevue.org/stepper/\#api.stepitem.props)
Defines valid properties in StepItem component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | string \| number | null | Value of step. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<StepItemPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/stepper/\#api.stepitem.slots)
Defines valid slots in StepItem slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
### Interfaces [\#](https://primevue.org/stepper/\#api.stepitem.interfaces)
Defines the custom interfaces used by the module.
#### StepItemPassThroughMethodOptions [\#](https://primevue.org/stepper/\#api.stepitem.interfaces.StepItemPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [StepItemProps](https://primevue.org/stepper/#api.stepitem.interfaces.StepItemProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### StepItemPassThroughOptions [\#](https://primevue.org/stepper/\#api.stepitem.interfaces.StepItemPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [StepItemPassThroughOptionType](https://primevue.org/stepper/#api.stepitem.types.StepItemPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### StepItemPassThroughAttributes [\#](https://primevue.org/stepper/\#api.stepitem.interfaces.StepItemPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/stepper/\#api.stepitem.types)
Defines the custom types used by the module.
#### StepItemPassThroughOptionType [\#](https://primevue.org/stepper/\#api.stepitem.types.StepItemPassThroughOptionType)
| values |
| --- |
| StepItemPassThroughAttributes \| (options: StepItemPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### StepItemEmits [\#](https://primevue.org/stepper/\#api.stepitem.types.StepItemEmits)
| values |
| --- |
| EmitFn<StepItemEmitsOptions> |
## Step [\#](https://primevue.org/stepper/\#api.step)
Step is a helper component for Stepper component.
### Props [\#](https://primevue.org/stepper/\#api.step.props)
Defines valid properties in Step component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | string \| number | null | Value of step. |  |
| disabled | boolean | false | Whether the step is disabled. |  |
| as | string \| Component | BUTTON | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<StepPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/stepper/\#api.step.slots)
Defines valid slots in Step slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default | scope: {<br>class: string, // Style class of the loader.active: boolean, // Whether the step is active.value: undefined, // Value of step.a11yAttrs: any, // A11t attributesactivateCallback: () â‡’ void, // Click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. Slot attributes can be used when asChild prop is true. |  |
### Interfaces [\#](https://primevue.org/stepper/\#api.step.interfaces)
Defines the custom interfaces used by the module.
#### StepPassThroughMethodOptions [\#](https://primevue.org/stepper/\#api.step.interfaces.StepPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [StepProps](https://primevue.org/stepper/#api.step.interfaces.StepProps) | null | Defines valid properties. |
| context | [StepContext](https://primevue.org/stepper/#api.step.interfaces.StepContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### StepPassThroughOptions [\#](https://primevue.org/stepper/\#api.step.interfaces.StepPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [StepPassThroughOptionType](https://primevue.org/stepper/#api.step.types.StepPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [StepPassThroughOptionType](https://primevue.org/stepper/#api.step.types.StepPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| number | [StepPassThroughOptionType](https://primevue.org/stepper/#api.step.types.StepPassThroughOptionType) | null | Used to pass attributes to the number's DOM element. |
| title | [StepPassThroughOptionType](https://primevue.org/stepper/#api.step.types.StepPassThroughOptionType) | null | Used to pass attributes to the title's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### StepPassThroughAttributes [\#](https://primevue.org/stepper/\#api.step.interfaces.StepPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### StepContext [\#](https://primevue.org/stepper/\#api.step.interfaces.StepContext)
Defines current options in Step component.
| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | null | Whether the step is active. |
| disabled | boolean | null | Whether the step is disabled. |
## Types [\#](https://primevue.org/stepper/\#api.step.types)
Defines the custom types used by the module.
#### StepPassThroughOptionType [\#](https://primevue.org/stepper/\#api.step.types.StepPassThroughOptionType)
| values |
| --- |
| StepPassThroughAttributes \| (options: StepPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### StepEmits [\#](https://primevue.org/stepper/\#api.step.types.StepEmits)
| values |
| --- |
| EmitFn<StepEmitsOptions> |
## StepPanel [\#](https://primevue.org/stepper/\#api.steppanel)
StepPanel is a helper component for Stepper component.
### Props [\#](https://primevue.org/stepper/\#api.steppanel.props)
Defines valid properties in StepPanel component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | string \| number | null | Value of step. |  |
| as | string \| Component | BUTTON | Use to change the HTML tag of root element. |  |
| asChild | boolean | false | When enabled, it changes the default rendered element for the one passed as a child element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<StepPanelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
### Slots [\#](https://primevue.org/stepper/\#api.steppanel.slots)
Defines valid slots in StepPanel slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default | scope: {<br>active: boolean, // Whether the step is active.value: undefined, // Value of step.a11yAttrs: any, // A11t attributesactivateCallback: (value: undefined) â‡’ void, // Click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. Slot attributes can be used when asChild prop is true. |  |
### Interfaces [\#](https://primevue.org/stepper/\#api.steppanel.interfaces)
Defines the custom interfaces used by the module.
#### StepPanelPassThroughMethodOptions [\#](https://primevue.org/stepper/\#api.steppanel.interfaces.StepPanelPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [StepPanelProps](https://primevue.org/stepper/#api.steppanel.interfaces.StepPanelProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### StepPanelPassThroughOptions [\#](https://primevue.org/stepper/\#api.steppanel.interfaces.StepPanelPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [StepPanelPassThroughOptionType](https://primevue.org/stepper/#api.steppanel.types.StepPanelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| content | [StepPanelPassThroughOptionType](https://primevue.org/stepper/#api.steppanel.types.StepPanelPassThroughOptionType) | null | Used to pass attributes to the content DOM element. |
| transition | [StepPanelPassThroughOptionType](https://primevue.org/stepper/#api.steppanel.types.StepPanelPassThroughOptionType) | null | Used to control Vue Transition API. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### StepPanelPassThroughAttributes [\#](https://primevue.org/stepper/\#api.steppanel.interfaces.StepPanelPassThroughAttributes)
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/stepper/\#api.steppanel.types)
Defines the custom types used by the module.
#### StepPanelPassThroughOptionType [\#](https://primevue.org/stepper/\#api.steppanel.types.StepPanelPassThroughOptionType)
| values |
| --- |
| StepPanelPassThroughAttributes \| (options: StepPanelPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### StepPanelEmits [\#](https://primevue.org/stepper/\#api.steppanel.types.StepPanelEmits)
| values |
| --- |
| EmitFn<StepPanelEmitsOptions> |
- Stepper
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
- StepList
  - Props
  - Slots
  - Interfaces
  - Types
- StepPanels
  - Props
  - Slots
  - Interfaces
  - Types
- StepItem
  - Props
  - Slots
  - Interfaces
  - Types
- Step
  - Props
  - Slots
  - Interfaces
  - Types
- StepPanel
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## IconField Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# IconField
IconField wraps an input and an icon.
## Import [\#](https://primevue.org/iconfield/\#import)
```javascript
import IconField from 'primevue/iconfield';
import InputIcon from 'primevue/inputicon';
```
Copy
## Basic [\#](https://primevue.org/iconfield/\#basic)
_IconField_ wraps the _InputIcon_ and the input field component.
```markup
<IconField>
    <InputIcon class="pi pi-search" />
    <InputText v-model="value1" placeholder="Search" />
</IconField>
<IconField>
    <InputText v-model="value2" variant="filled" />
    <InputIcon class="pi pi-spin pi-spinner" />
</IconField>
```
Copy
## Template [\#](https://primevue.org/iconfield/\#template)
Custom content inside an InputIcon is defined as children.
```markup
<IconField>
    <InputIcon>
        <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="..." fill="var(--p-primary-color)" />
            <path d="..." fill="var(--p-text-color)" />
        </svg>
    </InputIcon>
    <InputText v-model="value" placeholder="Search" />
</IconField>
```
Copy
## Float Label [\#](https://primevue.org/iconfield/\#floatlabel)
FloatLabel visually integrates a label with its form element. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
Over Label
In Label
On Label
```markup
<FloatLabel>
    <IconField>
        <InputIcon class="pi pi-search" />
        <InputText id="over_label" v-model="value1" autocomplete="off" />
    </IconField>
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel variant="in">
    <IconField>
        <InputIcon class="pi pi-search" />
        <InputText id="in_label" v-model="value2" autocomplete="off" variant="filled" />
    </IconField>
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel variant="on">
    <IconField>
        <InputIcon class="pi pi-search" />
        <InputText id="on_label" v-model="value3" autocomplete="off" />
    </IconField>
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/iconfield/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
Username
```markup
<IftaLabel>
    <IconField>
        <InputIcon class="pi pi-user" />
        <InputText id="username" v-model="value" variant="filled" />
    </IconField>
    <label for="username">Username</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/iconfield/\#sizes)
IconField is compatible with the size setting of the input field.
```markup
<IconField>
    <InputIcon class="pi pi-search" />
    <InputText v-model="value1" placeholder="Small" size="small" />
</IconField>
<IconField>
    <InputIcon class="pi pi-search" />
    <InputText v-model="value2" placeholder="Normal" />
</IconField>
<IconField>
    <InputText v-model="value3" placeholder="Large" size="large" />
    <InputIcon class="pi pi-spin pi-spinner" />
</IconField>
```
Copy
## Accessibility [\#](https://primevue.org/iconfield/\#accessibility)
### Screen Reader
IconField and InputIcon do not require any roles and attributes.
### Keyboard Support
Components does not include any interactive elements.
- Import
- Basic
- Template
- Float Label
- Ifta Label
- Sizes
- Accessibility
# IconField API
API defines helper props, events and others for the PrimeVue IconField module.
## IconField [\#](https://primevue.org/iconfield/\#api.iconfield)
IconField wraps an input and an icon.
### Props [\#](https://primevue.org/iconfield/\#api.iconfield.props)
Defines valid properties in IconField component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<IconFieldPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/iconfield/\#api.iconfield.slots)
Defines valid slots in IconField component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Default slot for content. |  |
### Interfaces [\#](https://primevue.org/iconfield/\#api.iconfield.interfaces)
Defines the custom interfaces used by the module.
#### IconFieldPassThroughMethodOptions [\#](https://primevue.org/iconfield/\#api.iconfield.interfaces.IconFieldPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [IconFieldProps](https://primevue.org/iconfield/#api.iconfield.interfaces.IconFieldProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### IconFieldPassThroughOptions [\#](https://primevue.org/iconfield/\#api.iconfield.interfaces.IconFieldPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [IconFieldPassThroughOptionType<T>](https://primevue.org/iconfield/#api.iconfield.types.IconFieldPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### IconFieldPassThroughAttributes [\#](https://primevue.org/iconfield/\#api.iconfield.interfaces.IconFieldPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/iconfield/\#api.iconfield.types)
Defines the custom types used by the module.
#### IconFieldPassThroughOptionType [\#](https://primevue.org/iconfield/\#api.iconfield.types.IconFieldPassThroughOptionType)
| values |
| --- |
| IconFieldPassThroughAttributes \| (options: IconFieldPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### IconFieldEmits [\#](https://primevue.org/iconfield/\#api.iconfield.types.IconFieldEmits)
| values |
| --- |
| EmitFn<IconFieldEmitsOptions> |
## InputIcon [\#](https://primevue.org/iconfield/\#api.inputicon)
InputIcon displays an icon.
### Props [\#](https://primevue.org/iconfield/\#api.inputicon.props)
Defines valid properties in InputIcon component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<InputIconPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/iconfield/\#api.inputicon.slots)
Defines valid slots in InputIcon component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom default template. |  |
### Interfaces [\#](https://primevue.org/iconfield/\#api.inputicon.interfaces)
Defines the custom interfaces used by the module.
#### InputIconPassThroughMethodOptions [\#](https://primevue.org/iconfield/\#api.inputicon.interfaces.InputIconPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### InputIconPassThroughOptions [\#](https://primevue.org/iconfield/\#api.inputicon.interfaces.InputIconPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [InputIconPassThroughOptionType<T>](https://primevue.org/iconfield/#api.inputicon.types.InputIconPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### InputIconPassThroughAttributes [\#](https://primevue.org/iconfield/\#api.inputicon.interfaces.InputIconPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/iconfield/\#api.inputicon.types)
Defines the custom types used by the module.
#### InputIconPassThroughOptionType [\#](https://primevue.org/iconfield/\#api.inputicon.types.InputIconPassThroughOptionType)
| values |
| --- |
| InputIconPassThroughAttributes \| (options: InputIconPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### InputIconEmits [\#](https://primevue.org/iconfield/\#api.inputicon.types.InputIconEmits)
| values |
| --- |
| EmitFn<InputIconEmitsOptions> |
- IconField
  - Props
  - Slots
  - Interfaces
  - Types
- InputIcon
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Dock Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Dock
Dock is a navigation component consisting of menuitems.
## Import [\#](https://primevue.org/dock/\#import)
```javascript
import Dock from 'primevue/dock';
```
Copy
## Basic [\#](https://primevue.org/dock/\#basic)
Menu requires a collection of menuitems as its _model_ and an _icon_ template. Default location is _bottom_ and other edges are also available when defined with the _position_ property.
Bottom
Top
Left
Right
- ![Finder](https://primefaces.org/cdn/primevue/images/dock/finder.svg)
- ![App Store](https://primefaces.org/cdn/primevue/images/dock/appstore.svg)
- ![Photos](https://primefaces.org/cdn/primevue/images/dock/photos.svg)
- ![Trash](https://primefaces.org/cdn/primevue/images/dock/trash.png)
```markup
<Dock :model="items" :position="position">
    <template #itemicon="{ item }">
        <img v-tooltip.top="item.label" :alt="item.label" :src="item.icon" style="width: 100%" />
    </template>
</Dock>
```
Copy
## Advanced [\#](https://primevue.org/dock/\#advance)
A sample desktop demo using various components.
- Finder
- File
  - New
    - Bookmark
    - Video
  - Delete
  - Export
- Edit
  - Left
  - Right
  - Center
  - Justify
- Users
  - New
  - Delete
  - Search
    - Filter
      - Print
    - List
- Events
  - Edit
    - Save
    - Delete
  - Archive
    - Remove
- Quit
Fri 13:07
- [![Finder](https://primefaces.org/cdn/primevue/images/dock/finder.svg)](https://primevue.org/dock#)
- [![Terminal](https://primefaces.org/cdn/primevue/images/dock/terminal.svg)](https://primevue.org/dock#)
- [![App Store](https://primefaces.org/cdn/primevue/images/dock/appstore.svg)](https://primevue.org/dock#)
- [![Safari](https://primefaces.org/cdn/primevue/images/dock/safari.svg)](https://primevue.org/dock#)
- [![Photos](https://primefaces.org/cdn/primevue/images/dock/photos.svg)](https://primevue.org/dock#)
- [![GitHub](https://primefaces.org/cdn/primevue/images/dock/github.svg)](https://primevue.org/dock#)
- [![Trash](https://primefaces.org/cdn/primevue/images/dock/trash.png)](https://primevue.org/dock#)
```markup
<Dock :model="items">
    <template #item="{ item }">
        <a v-tooltip.top="item.label" href="#" class="p-dock-item-link" @click="onDockItemClick($event, item)">
            <img :alt="item.label" :src="item.icon" style="width: 100%" />
        </a>
    </template>
</Dock>
```
Copy
## Accessibility [\#](https://primevue.org/dock/\#accessibility)
### Screen Reader
Dock component uses the _menu_ role with the _aria-orientation_ and the value to describe the menu can either be provided with _aria-labelledby_ or _aria-label_ props. Each list item has a _menuitem_ role with _aria-label_ referring to the label of the item and _aria-disabled_ defined if the item is disabled.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the first menuitem. |
| _enter_ | Activates the focused menuitem. |
| _space_ | Activates the focused menuitem. |
| _down arrow_ | Moves focus to the next menuitem in vertical layout. |
| _up arrow_ | Moves focus to the previous menuitem in vertical layout. |
| _right arrow_ | Moves focus to the next menuitem in horizontal layout. |
| _left arrow_ | Moves focus to the previous menuitem in horizontal layout. |
| _home_ | Moves focus to the first menuitem. |
| _end_ | Moves focus to the last menuitem. |
- Import
- Basic
- Advanced
- Accessibility
# Dock API
API defines helper props, events and others for the PrimeVue Dock module.
## Dock [\#](https://primevue.org/dock/\#api.dock)
Dock is a navigation component consisting of menuitems.
### Props [\#](https://primevue.org/dock/\#api.dock.props)
Defines valid properties in Dock component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | MenuItem\[\] | null | MenuModel instance to define the action items. |  |
| position | HintedString<"left" \| "right" \| "top" \| "bottom"> | bottom | Position of element. |  |
| class | any | null | Style class of the element. |  |
| style | any | null | Inline style of the element. |  |
| breakpoint | string | 960px | The breakpoint to define the maximum width boundary. |  |
| tooltipOptions | [DockTooltipOptions](https://primevue.org/dock/#api.dock.interfaces.DockTooltipOptions) | null | Whether to display the tooltip on items. The modifiers of Tooltip can be used like an object in it. Valid keys are 'event' and 'position'. |  |
| menuId | string | null | Unique identifier of the menu. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DockPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/dock/\#api.dock.emits)
Defines valid emits in Dock component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
### Slots [\#](https://primevue.org/dock/\#api.dock.slots)
Defines valid slots in Dock component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| item | scope: {<br>item: MenuItem, // Custom content for item.index: number, // Index of the menuitemlabel: undefined, // Label property of the menuitemprops: DockRouterBindProps, // Binding properties of the menuitem<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item content. |  |
| icon | scope: {<br>item: MenuItem, // Custom content for item icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| itemicon | scope: {<br>item: MenuItem, // Custom content for item icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon content. |  |
### Interfaces [\#](https://primevue.org/dock/\#api.dock.interfaces)
Defines the custom interfaces used by the module.
#### DockPassThroughMethodOptions [\#](https://primevue.org/dock/\#api.dock.interfaces.DockPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DockProps](https://primevue.org/dock/#api.dock.interfaces.DockProps) | null | Defines valid properties. |
| state | [DockState](https://primevue.org/dock/#api.dock.interfaces.DockState) | null | Defines current inline state. |
| context | [DockContext](https://primevue.org/dock/#api.dock.interfaces.DockContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### DockPassThroughOptions [\#](https://primevue.org/dock/\#api.dock.interfaces.DockPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [DockPassThroughOptionType](https://primevue.org/dock/#api.dock.types.DockPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| listContainer | [DockPassThroughOptionType](https://primevue.org/dock/#api.dock.types.DockPassThroughOptionType) | null | Used to pass attributes to the list container's DOM element. |
| list | [DockPassThroughOptionType](https://primevue.org/dock/#api.dock.types.DockPassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| item | [DockPassThroughOptionType](https://primevue.org/dock/#api.dock.types.DockPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| itemContent | [DockPassThroughOptionType](https://primevue.org/dock/#api.dock.types.DockPassThroughOptionType) | null | Used to pass attributes to the item content's DOM element. |
| itemLink | [DockPassThroughOptionType](https://primevue.org/dock/#api.dock.types.DockPassThroughOptionType) | null | Used to pass attributes to the item link's DOM element. |
| itemIcon | [DockPassThroughOptionType](https://primevue.org/dock/#api.dock.types.DockPassThroughOptionType) | null | Used to pass attributes to the item icon's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### DockPassThroughAttributes [\#](https://primevue.org/dock/\#api.dock.interfaces.DockPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### DockState [\#](https://primevue.org/dock/\#api.dock.interfaces.DockState)
Defines current inline state in Dock component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| currentIndex | number | -3 | Current index as a number. |
| focused | boolean | false | Current focus state as a boolean. |
| focusedOptionIndex | number | -1 | Current focused item index as a number. |
#### DockContext [\#](https://primevue.org/dock/\#api.dock.interfaces.DockContext)
Defines current options in Dock component.
| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Current index of the menuitem. |
| item | any | null | Current menuitem |
| active | boolean | false | Current active state of menuitem as a boolean. |
#### DockTooltipOptions [\#](https://primevue.org/dock/\#api.dock.interfaces.DockTooltipOptions)
Defines tooltip options
| name | type | default | description |
| --- | --- | --- | --- |
| event | undefined \| HintedString<"focus" \| "hover"> | null | Event to show the tooltip, valid values are hover and focus. |
| position | undefined \| HintedString<"left" \| "right" \| "top" \| "bottom"> | bottom | Position of element. |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/dock/\#api.dock.types)
Defines the custom types used by the module.
#### DockPassThroughOptionType [\#](https://primevue.org/dock/\#api.dock.types.DockPassThroughOptionType)
| values |
| --- |
| DockPassThroughAttributes \| (options: DockPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### DockEmits [\#](https://primevue.org/dock/\#api.dock.types.DockEmits)
| values |
| --- |
| EmitFn<DockEmitsOptions> |
- Dock
  - Props
  - Emits
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Timeline Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Timeline
Timeline visualizes a series of chained events.
## Import [\#](https://primevue.org/timeline/\#import)
```javascript
import Timeline from 'primevue/timeline';
```
Copy
## Basic [\#](https://primevue.org/timeline/\#basic)
Timeline requires a _value_ for the collection of events and _content_ slot that receives an object as a parameter to return content.
Ordered
Processing
Shipped
Delivered
```markup
<Timeline :value="events">
    <template #content="slotProps">
        {{ slotProps.item.status }}
    </template>
</Timeline>
```
Copy
## Alignment [\#](https://primevue.org/timeline/\#alignment)
Content location relative the line is defined with the _align_ property.
Ordered
Processing
Shipped
Delivered
Ordered
Processing
Shipped
Delivered
Ordered
Processing
Shipped
Delivered
```markup
<Timeline :value="events" class="w-full md:w-80">
    <template #content="slotProps">
        {{ slotProps.item.status }}
    </template>
</Timeline>
<Timeline :value="events" align="right" class="w-full md:w-80">
    <template #content="slotProps">
        {{ slotProps.item.status }}
    </template>
</Timeline>
<Timeline :value="events" align="alternate" class="w-full md:w-80">
    <template #content="slotProps">
        {{ slotProps.item.status }}
    </template>
</Timeline>
```
Copy
## Opposite [\#](https://primevue.org/timeline/\#opposite)
Additional content at the other side of the line can be provided with the _opposite_ property.
15/10/2020 10:30
Ordered
15/10/2020 14:00
Processing
15/10/2020 16:15
Shipped
16/10/2020 10:00
Delivered
```markup
<Timeline :value="events">
    <template #opposite="slotProps">
        <small class="text-surface-500 dark:text-surface-400">{{slotProps.item.date}}</small>
    </template>
    <template #content="slotProps">
        {{slotProps.item.status}}
    </template>
</Timeline>
```
Copy
## Template [\#](https://primevue.org/timeline/\#template)
Sample implementation with custom content and styled markers.
Ordered
15/10/2020 10:30
![](https://primefaces.org/cdn/primevue/images/product/game-controller.jpg)
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!
Read more
Processing
15/10/2020 14:00
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!
Read more
Shipped
15/10/2020 16:15
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!
Read more
Delivered
16/10/2020 10:00
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!
Read more
```markup
<Timeline :value="events" align="alternate" class="customized-timeline">
    <template #marker="slotProps">
        <span class="flex w-8 h-8 items-center justify-center text-white rounded-full z-10 shadow-sm" :style="{ backgroundColor: slotProps.item.color }">
            <i :class="slotProps.item.icon"></i>
        </span>
    </template>
    <template #content="slotProps">
        <Card class="mt-4">
            <template #title>
                {{ slotProps.item.status }}
            </template>
            <template #subtitle>
                {{ slotProps.item.date }}
            </template>
            <template #content>
                <img v-if="slotProps.item.image" :src="`/images/product/${slotProps.item.image}`" :alt="slotProps.item.name" width="200" class="shadow-sm" />
                <p>
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate
                    neque quas!
                </p>
                <Button label="Read more" text></Button>
            </template>
        </Card>
    </template>
</Timeline>
```
Copy
## Horizontal [\#](https://primevue.org/timeline/\#horizontal)
TimeLine orientation is controlled with the _layout_ property, default is _vertical_ having _horizontal_ as the alternative.
2020
2021
2022
2023
2020
2021
2022
2023
2020
2021
2022
2023
```markup
<Timeline :value="events" layout="horizontal" align="top">
    <template #content="slotProps">
        {{ slotProps.item }}
    </template>
</Timeline>
<Timeline :value="events" layout="horizontal" align="bottom">
    <template #content="slotProps">
        {{ slotProps.item }}
    </template>
</Timeline>
<Timeline :value="events" layout="horizontal" align="alternate">
    <template #opposite> &nbsp; </template>
    <template #content="slotProps">
        {{ slotProps.item }}
    </template>
</Timeline>
```
Copy
## Accessibility [\#](https://primevue.org/timeline/\#accessibility)
### Screen Reader
Timeline uses a semantic ordered list element to list the events. No specific role is enforced, still you may use any aria role and attributes as any valid attribute is passed to the list element.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Alignment
- Opposite
- Template
- Horizontal
- Accessibility
# Timeline API
API defines helper props, events and others for the PrimeVue Timeline module.
## Timeline [\#](https://primevue.org/timeline/\#api.timeline)
Timeline visualizes a series of chained events.
### Props [\#](https://primevue.org/timeline/\#api.timeline.props)
Defines valid properties in Timeline component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | any\[\] | null | An array of events to display. |  |
| align | HintedString<"left" \| "right" \| "top" \| "bottom" \| "alternate"> | left | Position of the timeline bar relative to the content. |  |
| layout | HintedString<"horizontal" \| "vertical"> | horizontal | Orientation of the timeline. |  |
| dataKey | string | null | Name of the field that uniquely identifies the a record in the data. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TimelinePassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/timeline/\#api.timeline.slots)
Defines valid slots in Timeline component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| content | scope: {<br>item: any, // Item dataindex: number, // Index of item<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template |  |
| opposite | scope: {<br>item: any, // Item dataindex: number, // Index of item<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom opposite template. |  |
| marker | scope: {<br>item: any, // Item dataindex: number, // Index of item<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom marker template. |  |
| connector | scope: {<br>item: any, // Item dataindex: number, // Index of item<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom connector template. |  |
### Interfaces [\#](https://primevue.org/timeline/\#api.timeline.interfaces)
Defines the custom interfaces used by the module.
#### TimelinePassThroughMethodOptions [\#](https://primevue.org/timeline/\#api.timeline.interfaces.TimelinePassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TimelineProps](https://primevue.org/timeline/#api.timeline.interfaces.TimelineProps) | null | Defines valid properties. |
| context | [TimelineContext](https://primevue.org/timeline/#api.timeline.interfaces.TimelineContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TimelinePassThroughOptions [\#](https://primevue.org/timeline/\#api.timeline.interfaces.TimelinePassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TimelinePassThroughOptionType](https://primevue.org/timeline/#api.timeline.types.TimelinePassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| event | [TimelinePassThroughOptionType](https://primevue.org/timeline/#api.timeline.types.TimelinePassThroughOptionType) | null | Used to pass attributes to the event's DOM element. |
| eventOpposite | [TimelinePassThroughOptionType](https://primevue.org/timeline/#api.timeline.types.TimelinePassThroughOptionType) | null | Used to pass attributes to the event opposite's DOM element. |
| eventSeparator | [TimelinePassThroughOptionType](https://primevue.org/timeline/#api.timeline.types.TimelinePassThroughOptionType) | null | Used to pass attributes to the event separator's DOM element. |
| eventMarker | [TimelinePassThroughOptionType](https://primevue.org/timeline/#api.timeline.types.TimelinePassThroughOptionType) | null | Used to pass attributes to the event marker's DOM element. |
| eventConnector | [TimelinePassThroughOptionType](https://primevue.org/timeline/#api.timeline.types.TimelinePassThroughOptionType) | null | Used to pass attributes to the event connector's DOM element. |
| eventContent | [TimelinePassThroughOptionType](https://primevue.org/timeline/#api.timeline.types.TimelinePassThroughOptionType) | null | Used to pass attributes to the event content's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### TimelinePassThroughAttributes [\#](https://primevue.org/timeline/\#api.timeline.interfaces.TimelinePassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TimelineContext [\#](https://primevue.org/timeline/\#api.timeline.interfaces.TimelineContext)
Defines current options in Timeline component.
| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Current index of the item as a number. |
| count | number | null | Total number of items in the timeline. |
## Types [\#](https://primevue.org/timeline/\#api.timeline.types)
Defines the custom types used by the module.
#### TimelinePassThroughOptionType [\#](https://primevue.org/timeline/\#api.timeline.types.TimelinePassThroughOptionType)
| values |
| --- |
| TimelinePassThroughAttributes \| (options: TimelinePassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TimelineEmits [\#](https://primevue.org/timeline/\#api.timeline.types.TimelineEmits)
| values |
| --- |
| EmitFn<TimelineEmitsOptions> |
- Timeline
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue ContextMenu
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# ContextMenu
ContextMenu displays an overlay menu to display actions related to an element.
## Import [\#](https://primevue.org/contextmenu/\#import)
```javascript
import ContextMenu from 'primevue/contextmenu';
```
Copy
## Basic [\#](https://primevue.org/contextmenu/\#basic)
ContextMenu requires a collection of menuitems as its _model_ and the _show_ method needs to be called explicity using an event of the target like _contextmenu_ to display the menu.
![Logo](https://primefaces.org/cdn/primevue/images/nature/nature2.jpg)
```markup
<img alt="Logo" src="/images/nature/nature2.jpg" class="w-full md:w-[30rem] rounded shadow-lg" @contextmenu="onImageRightClick" aria-haspopup="true" />
<ContextMenu ref="menu" :model="items" />
```
Copy
## Document [\#](https://primevue.org/contextmenu/\#document)
Setting global property attaches the context menu to the document.
Right-Click anywhere on this page to view the global ContextMenu.
```markup
<ContextMenu global :model="items" />
```
Copy
## Template [\#](https://primevue.org/contextmenu/\#template)
ContextMenu offers item customization with the _item_ template that receives the menuitem instance from the model as a parameter.
- ![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)
Bamboo Watch
Accessories
$65
- ![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)
Black Watch
Accessories
$72
- ![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)
Blue Band
Fitness
$79
- ![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)
Blue T-Shirt
Clothing
$29
- ![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)
Bracelet
Accessories
$15
```markup
<ul class="m-0 p-0 list-none border border-surface-200 dark:border-surface-700 rounded p-4 flex flex-col gap-2 w-full md:w-[30rem]">
    <li
        v-for="product in products"
        :key="product.id"
        :class="['p-2 hover:bg-surface-100 dark:hover:bg-surface-800 rounded border border-transparent transition-all transition-duration-200', { 'border-primary': selectedId === product.id }]"
        @contextmenu="onRightClick($event, product.id)"
    >
        <div class="flex flex-wrap p-2 items-center gap-4">
            <img class="w-16 shrink-0 rounded" :src="'/images/product/' + product.image" :alt="product.name" />
            <div class="flex-1 flex flex-col gap-1">
                <span class="font-bold">{{ product.name }}</span>
                <div class="flex items-center gap-2">
                    <i class="pi pi-tag text-sm"></i>
                    <span>{{ product.category }}</span>
                </div>
            </div>
            <span class="font-bold ml-8">${{ product.price }}</span>
        </div>
    </li>
</ul>
<ContextMenu ref="menu" :model="items" @hide="selectedId = null">
    <template #item="{ item, props }">
        <a v-ripple class="flex items-center" v-bind="props.action">
            <span :class="item.icon" />
            <span class="ml-2">{{ item.label }}</span>
            <Badge v-if="item.badge" class="ml-auto" :value="item.badge" />
            <span v-if="item.shortcut" class="ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1">{{ item.shortcut }}</span>
            <i v-if="item.items" class="pi pi-angle-right ml-auto"></i>
        </a>
    </template>
</ContextMenu>
```
Copy
## Command [\#](https://primevue.org/contextmenu/\#command)
The _command_ property defines the callback to run when an item is activated by click or a key event.
- ![Amy Elsner](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)Amy Elsner
Admin
- ![Anna Fali](https://primefaces.org/cdn/primevue/images/avatar/annafali.png)Anna Fali
Member
- ![Asiya Javayant](https://primefaces.org/cdn/primevue/images/avatar/asiyajavayant.png)Asiya Javayant
Member
- ![Bernardo Dominic](https://primefaces.org/cdn/primevue/images/avatar/bernardodominic.png)Bernardo Dominic
Guest
- ![Elwin Sharvill](https://primefaces.org/cdn/primevue/images/avatar/elwinsharvill.png)Elwin Sharvill
Member
```markup
<ul class="m-0 list-none border border-surface rounded p-4 flex flex-col gap-2 w-full sm:w-96">
    <li
        v-for="user in users"
        :key="user.id"
        :class="['p-2 hover:bg-emphasis rounded border border-transparent transition-all duration-200 flex items-center justify-content-between', { 'border-primary': selectedUser?.id === user.id }]"
        @contextmenu="onRightClick($event, user)"
    >
        <div class="flex flex-1 items-center gap-2">
            <img :alt="user.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${user.image}`" class="w-8 h-8" />
            <span class="font-bold">{{ user.name }}</span>
        </div>
        <Tag :value="user.role" :severity="getBadge(user)" />
    </li>
</ul>
<ContextMenu ref="menu" :model="items" @hide="selectedUser = null" />
<Toast />
```
Copy
## Router [\#](https://primevue.org/contextmenu/\#router)
Items with navigation are defined with templating to be able to use a router link component, an external link or programmatic navigation.
```markup
<span class="inline-flex items-center justify-center border-2 border-primary rounded w-16 h-16" @contextmenu="onRightClick" aria-haspopup="true">
    <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="..." fill="var(--p-primary-color)" />
        <path d="..." fill="var(--p-text-color)" />
    </svg>
</span>
<ContextMenu ref="routemenu" :model="items">
    <template #item="{ item, props }">
        <router-link v-if="item.route" v-slot="{ href, navigate }" :to="item.route" custom>
            <a v-ripple :href="href" v-bind="props.action" @click="navigate">
                <span :class="item.icon" />
                <span class="ml-2">{{ item.label }}</span>
            </a>
        </router-link>
        <a v-else v-ripple :href="item.url" :target="item.target" v-bind="props.action">
            <span :class="item.icon" />
            <span class="ml-2">{{ item.label }}</span>
        </a>
    </template>
</ContextMenu>
```
Copy
## DataTable [\#](https://primevue.org/contextmenu/\#datatable)
DataTable has built-in support for ContextMenu, see the [ContextMenu](https://primevue.org/datatable/#contextmenu) demo for an example.
## Accessibility [\#](https://primevue.org/contextmenu/\#accessibility)
### Screen Reader
ContextMenu component uses the _menubar_ role with _aria-orientation_ set to "vertical" and the value to describe the menu can either be provided with _aria-labelledby_ or _aria-label_ props. Each list item has a _menuitem_ role with _aria-label_ referring to the label of the item and _aria-disabled_ defined if the item is disabled. A submenu within a ContextMenu uses the _menu_ role with an _aria-labelledby_ defined as the id of the submenu root menuitem label. In addition, menuitems that open a submenu have _aria-haspopup_ and _aria-expanded_ to define the relation between the item and the submenu.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | When focus is in the menu, closes the context menu and moves focus to the next focusable element in the page sequence. |
| _enter_ | If menuitem has a submenu, toggles the visibility of the submenu otherwise activates the menuitem and closes all open overlays. |
| _space_ | If menuitem has a submenu, toggles the visibility of the submenu otherwise activates the menuitem and closes all open overlays. |
| _escape_ | Closes the context menu. |
| _down arrow_ | If focus is not inside the menu and menu is open, add focus to the first item. If an item is already focused, moves focus to the next menuitem within the submenu. |
| _up arrow_ | If focus is not inside the menu and menu is open, add focus to the last item. If an item is already focused, moves focus to the next menuitem within the submenu. |
| _right arrow_ | Opens a submenu if there is one available and moves focus to the first item. |
| _left arrow_ | Closes a submenu and moves focus to the root item of the closed submenu. |
| _home_ | Moves focus to the first menuitem within the submenu. |
| _end_ | Moves focus to the last menuitem within the submenu. |
| _any printable character_ | Moves focus to the menuitem whose label starts with the characters being typed. |
- Import
- Basic
- Document
- Template
- Command
- Router
- DataTable
- Accessibility
# ContextMenu API
API defines helper props, events and others for the PrimeVue ContextMenu module.
## ContextMenu [\#](https://primevue.org/contextmenu/\#api.contextmenu)
ContextMenu displays an overlay menu on right click of its target. Note that components like DataTable has special integration with ContextMenu.
Refer to documentation of the individual documentation of the with context menu support.
### Props [\#](https://primevue.org/contextmenu/\#api.contextmenu.props)
Defines valid properties in ContextMenu component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | MenuItem\[\] | null | An array of menuitems. |  |
| breakpoint | string | 960px | The breakpoint to define the maximum width boundary. |  |
| global | boolean | false | Attaches the menu to document instead of a particular item. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying menu element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ContextMenuPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/contextmenu/\#api.contextmenu.emits)
Defines valid emits in ContextMenu component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| before-show |  | void | Callback to invoke before the popup is shown. |  |
| before-hide |  | void | Callback to invoke before the popup is hidden. |  |
| show |  | void | Callback to invoke when the popup is shown. |  |
| hide |  | void | Callback to invoke when the popup is hidden. |  |
### Slots [\#](https://primevue.org/contextmenu/\#api.contextmenu.slots)
Defines valid slots in ContextMenu component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| item | scope: {<br>item: MenuItem, // Menuitem instancelabel: undefined, // Label property of the menuitemhasSubmenu: boolean, // Whether or not there is a submenuprops: ContextMenuRouterBindProps, // Binding properties of the menuitem<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item template. |  |
| itemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item icon template. |  |
| submenuicon | scope: {<br>active: boolean, // Whether item is active<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom submenu icon template. |  |
### Methods [\#](https://primevue.org/contextmenu/\#api.contextmenu.methods)
Defines methods that can be accessed by the component's reference.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| toggle | event: Event | void | Toggles the visibility of the menu. |  |
| show | event: Event | void | Shows the menu. |  |
| hide |  | void | Hides the menu. |  |
### Interfaces [\#](https://primevue.org/contextmenu/\#api.contextmenu.interfaces)
Defines the custom interfaces used by the module.
#### ContextMenuPassThroughMethodOptions [\#](https://primevue.org/contextmenu/\#api.contextmenu.interfaces.ContextMenuPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ContextMenuProps](https://primevue.org/contextmenu/#api.contextmenu.interfaces.ContextMenuProps) | null | Defines valid properties. |
| state | [ContextMenuState](https://primevue.org/contextmenu/#api.contextmenu.interfaces.ContextMenuState) | null | Defines current inline state. |
| context | [ContextMenuContext](https://primevue.org/contextmenu/#api.contextmenu.interfaces.ContextMenuContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ContextMenuPassThroughOptions [\#](https://primevue.org/contextmenu/\#api.contextmenu.interfaces.ContextMenuPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ContextMenuPassThroughOptionType](https://primevue.org/contextmenu/#api.contextmenu.types.ContextMenuPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| rootList | [ContextMenuPassThroughOptionType](https://primevue.org/contextmenu/#api.contextmenu.types.ContextMenuPassThroughOptionType) | null | Used to pass attributes to the root list's DOM element. |
| item | [ContextMenuPassThroughOptionType](https://primevue.org/contextmenu/#api.contextmenu.types.ContextMenuPassThroughOptionType) | null | Used to pass attributes to the item's DOM element. |
| itemContent | [ContextMenuPassThroughOptionType](https://primevue.org/contextmenu/#api.contextmenu.types.ContextMenuPassThroughOptionType) | null | Used to pass attributes to the item content's DOM element. |
| itemLink | [ContextMenuPassThroughOptionType](https://primevue.org/contextmenu/#api.contextmenu.types.ContextMenuPassThroughOptionType) | null | Used to pass attributes to the item link's DOM element. |
| itemIcon | [ContextMenuPassThroughOptionType](https://primevue.org/contextmenu/#api.contextmenu.types.ContextMenuPassThroughOptionType) | null | Used to pass attributes to the item icon's DOM element. |
| itemLabel | [ContextMenuPassThroughOptionType](https://primevue.org/contextmenu/#api.contextmenu.types.ContextMenuPassThroughOptionType) | null | Used to pass attributes to the item label's DOM element. |
| submenuIcon | [ContextMenuPassThroughOptionType](https://primevue.org/contextmenu/#api.contextmenu.types.ContextMenuPassThroughOptionType) | null | Used to pass attributes to the submenu icon's DOM element. |
| separator | [ContextMenuPassThroughOptionType](https://primevue.org/contextmenu/#api.contextmenu.types.ContextMenuPassThroughOptionType) | null | Used to pass attributes to the separator's DOM element. |
| submenu | [ContextMenuPassThroughOptionType](https://primevue.org/contextmenu/#api.contextmenu.types.ContextMenuPassThroughOptionType) | null | Used to pass attributes to the submenu's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [ContextMenuPassThroughTransitionType](https://primevue.org/contextmenu/#api.contextmenu.types.ContextMenuPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### ContextMenuPassThroughAttributes [\#](https://primevue.org/contextmenu/\#api.contextmenu.interfaces.ContextMenuPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ContextMenuFocusedItemInfo [\#](https://primevue.org/contextmenu/\#api.contextmenu.interfaces.ContextMenuFocusedItemInfo)
Defines focused item info
| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Active item index |
| level | number | null | Active item level |
| parentKey | string | null | Parent key info |
#### ContextMenuState [\#](https://primevue.org/contextmenu/\#api.contextmenu.interfaces.ContextMenuState)
Defines current inline state in ContextMenu component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| focused | boolean | false | Current focus state as a boolean. |
| focusedItemInfo | [ContextMenuFocusedItemInfo](https://primevue.org/contextmenu/#api.contextmenu.interfaces.ContextMenuFocusedItemInfo) | null | Current focused item info. |
| activeItemPath | [ContextMenuFocusedItemInfo\[\]](https://primevue.org/contextmenu/#api.contextmenu.interfaces.ContextMenuFocusedItemInfo[]) | null | Active item path. |
| visible | boolean | false | Current visible state as a boolean. |
| submenuVisible | boolean | false | Current submenu visible state as a boolean. |
#### ContextMenuContext [\#](https://primevue.org/contextmenu/\#api.contextmenu.interfaces.ContextMenuContext)
Defines current options in ContextMenu component.
| name | type | default | description |
| --- | --- | --- | --- |
| item | any | null | Current menuitem |
| index | number | null | Index of the menuitem |
| active | boolean | false | Current active state of menuitem as a boolean. |
| focused | boolean | false | Current focused state of menuitem as a boolean. |
| disabled | boolean | false | Current disabled state of menuitem as a boolean. |
## Types [\#](https://primevue.org/contextmenu/\#api.contextmenu.types)
Defines the custom types used by the module.
#### ContextMenuPassThroughOptionType [\#](https://primevue.org/contextmenu/\#api.contextmenu.types.ContextMenuPassThroughOptionType)
| values |
| --- |
| ContextMenuPassThroughAttributes \| (options: ContextMenuPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ContextMenuPassThroughTransitionType [\#](https://primevue.org/contextmenu/\#api.contextmenu.types.ContextMenuPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: ContextMenuPassThroughMethodOptions) => TransitionProps \| undefined |
#### ContextMenuEmits [\#](https://primevue.org/contextmenu/\#api.contextmenu.types.ContextMenuEmits)
| values |
| --- |
| EmitFn<ContextMenuEmitsOptions> |
## MenuItem [\#](https://primevue.org/contextmenu/\#api.menuitem)
PrimeVue menu components share a common api to specify the menuitems and submenus.
### Events [\#](https://primevue.org/contextmenu/\#api.menuitem.events)
Defines the custom events used by the component's emit.
#### MenuItemCommandEvent [\#](https://primevue.org/contextmenu/\#api.menuitem.events.MenuItemCommandEvent)
Custom command event.
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| item | [MenuItem](https://primevue.org/contextmenu/#api.options.MenuItem) | Menuitem instance. |
| \[key: string\] | any |  |
### Options [\#](https://primevue.org/contextmenu/\#api.options.MenuItem)
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string \| Function | null | Property name or getter function to use as the label of an item. |  |
| icon | string | null | Icon of the item. |  |
| command | Function | null |  |  |
| url | string | null | External link to navigate when item is clicked. |  |
| items | MenuItem\[\] | null | An array of children menuitems. |  |
| disabled | boolean \| Function | false | A boolean or a function to return a boolean to specify if the item is disabled. |  |
| visible | boolean \| Function | true | A boolean or a function to return a boolean to specify if the item is visible. |  |
| target | string | null | Specifies where to open the linked document. |  |
| separator | boolean | false | Defines the item as a separator. |  |
| style | any | null | Inline style of the menuitem. |  |
| class | any | null | Style class of the menuitem. |  |
| key | string | null | Unique identifier of an item. |  |
| \[key: string\] | any | null |  |  |
- ContextMenu
  - Props
  - Emits
  - Slots
  - Methods
  - Interfaces
  - Types
- MenuItem
  - Events
  - Options
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Tag Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Tag
Tag component is used to categorize content.
## Import [\#](https://primevue.org/tag/\#import)
```javascript
import Tag from 'primevue/tag';
```
Copy
## Basic [\#](https://primevue.org/tag/\#basic)
Label of the tag is defined with the _value_ property.
New
```markup
<Tag value="New"></Tag>
```
Copy
## Severity [\#](https://primevue.org/tag/\#severity)
Severity defines the variant of a tag.
PrimarySecondarySuccessInfoWarnDangerContrast
```markup
<Tag value="Primary"></Tag>
<Tag severity="secondary" value="Secondary"></Tag>
<Tag severity="success" value="Success"></Tag>
<Tag severity="info" value="Info"></Tag>
<Tag severity="warn" value="Warn"></Tag>
<Tag severity="danger" value="Danger"></Tag>
<Tag severity="contrast" value="Contrast"></Tag>
```
Copy
## Pill [\#](https://primevue.org/tag/\#pill)
Enabling _rounded_, displays a tag as a pill.
PrimarySecondarySuccessInfoWarnDangerContrast
```markup
<Tag value="Primary" rounded></Tag>
<Tag severity="secondary" value="Secondary" rounded></Tag>
<Tag severity="success" value="Success" rounded></Tag>
<Tag severity="info" value="Info" rounded></Tag>
<Tag severity="warn" value="Warn" rounded></Tag>
<Tag severity="danger" value="Danger" rounded></Tag>
<Tag severity="contrast" value="Contrast" rounded></Tag>
```
Copy
## Icon [\#](https://primevue.org/tag/\#icons)
A font icon next to the value can be displayed with the _icon_ property.
PrimarySecondarySuccessInfoWarnDangerContrast
```markup
<Tag icon="pi pi-user" value="Primary"></Tag>
<Tag icon="pi pi-search" severity="secondary" value="Secondary"></Tag>
<Tag icon="pi pi-check" severity="success" value="Success"></Tag>
<Tag icon="pi pi-info-circle" severity="info" value="Info"></Tag>
<Tag icon="pi pi-exclamation-triangle" severity="warn" value="Warn"></Tag>
<Tag icon="pi pi-times" severity="danger" value="Danger"></Tag>
<Tag icon="pi pi-cog" severity="contrast" value="Contrast"></Tag>
```
Copy
## Template [\#](https://primevue.org/tag/\#template)
Children of the component are passed as the content for templating.
![Country](https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png)Italy
```markup
<Tag style="border: 2px solid var(--border-color); background: transparent; color: var(--text-color)">
    <div class="flex items-center gap-2 px-1">
        <img alt="Country" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" class="flag flag-it" style="width: 18px" />
        <span class="text-base">Italy</span>
    </div>
</Tag>
```
Copy
## Accessibility [\#](https://primevue.org/tag/\#accessibility)
### Screen Reader
Tag does not include any roles and attributes by default, any attribute is passed to the root element so aria roles and attributes can be added if required. If the tags are dynamic, _aria-live_ may be utilized as well. In case badges need to be tabbable, _tabindex_ can be added to implement custom key handlers.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Severity
- Pill
- Icon
- Template
- Accessibility
# Tag API
API defines helper props, events and others for the PrimeVue Tag module.
## Tag [\#](https://primevue.org/tag/\#api.tag)
Tag component is used to categorize content.
### Props [\#](https://primevue.org/tag/\#api.tag.props)
Defines valid properties in Tag component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | any | null | Value to display inside the tag. |  |
| severity | HintedString<"secondary" \| "info" \| "success" \| "warn" \| "danger" \| "contrast"> | null | Severity type of the tag. |  |
| rounded | boolean | false | Whether the corners of the tag are rounded. |  |
| icon | string | null | Icon of the tag to display next to the value. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TagPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/tag/\#api.tag.slots)
Defines valid slots in Tag component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template |  |
| icon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template |  |
### Interfaces [\#](https://primevue.org/tag/\#api.tag.interfaces)
Defines the custom interfaces used by the module.
#### TagPassThroughMethodOptions [\#](https://primevue.org/tag/\#api.tag.interfaces.TagPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TagProps](https://primevue.org/tag/#api.tag.interfaces.TagProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TagPassThroughOptions [\#](https://primevue.org/tag/\#api.tag.interfaces.TagPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TagPassThroughOptionType](https://primevue.org/tag/#api.tag.types.TagPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| icon | [TagPassThroughOptionType](https://primevue.org/tag/#api.tag.types.TagPassThroughOptionType) | null | Used to pass attributes to the icon's DOM element. |
| label | [TagPassThroughOptionType](https://primevue.org/tag/#api.tag.types.TagPassThroughOptionType) | null | Used to pass attributes to the label's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### TagPassThroughAttributes [\#](https://primevue.org/tag/\#api.tag.interfaces.TagPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/tag/\#api.tag.types)
Defines the custom types used by the module.
#### TagPassThroughOptionType [\#](https://primevue.org/tag/\#api.tag.types.TagPassThroughOptionType)
| values |
| --- |
| TagPassThroughAttributes \| (options: TagPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TagEmits [\#](https://primevue.org/tag/\#api.tag.types.TagEmits)
| values |
| --- |
| EmitFn<TagEmitsOptions> |
- Tag
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Verona Template Overview
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![Template Hero Pattern](https://primefaces.org/cdn/primevue/images/templates/verona/verona-hero-pattern.png)
Prepare to be amazed by the remastered Verona for PrimeVue featuring a new gorgeous dark mode for the entire layout, 2 menu modes, reusable css widgets, utilities, modern icons and many more.
[Live Demo](https://verona.primevue.org/) [Buy Now](https://www.primefaces.org/store/)
[Community](https://github.com/orgs/primefaces/discussions/categories/primevue-templates) [Documentation](https://verona.primevue.org/documentation)
![Template Dashboard Image 1](https://primefaces.org/cdn/primevue/images/templates/verona/verona-hero-dashboard1.png)![Template Dashboard Image 2](https://primefaces.org/cdn/primevue/images/templates/verona/verona-hero-dashboard2.png)
Basic License
$49
Non Commercial Usage
Single End Product, No Multi-Use
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
Extended License
$490
Commercial Usage
Multiple End Products
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
The download package is a Vite-based project containing all application source codes deployed at the live demo. The project code is written in JavaScript.
Visit the [official documentation](https://verona.primevue.org/documentation) for more information.
## Features
01
01
01
##### Light and Dark Modes
The stunning dark and light modes will impress your users.
02
02
02
##### Component Themes
Verona offers 10 built-in component themes with dark and light options. You are also free to create your own theme by defining couple SASS variables.
03
03
03
##### 4 Menu Orientations
Choose from Static, Overlay, Slim and Slim+ menu orientations.
04
04
04
##### Menu Themes
Verona offers 10 special layout themes featuring gorgeous gradients.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/verona/features-animation-darkmode.png)
\> npm install or yarn
\> npm run dev or yarn dev
![Vue 3D Logo](https://primefaces.org/cdn/primevue/images/templates/vue-3d-logo.png)
### Vue based on Vite
Verona is powered by Vite to get started in no time following the best practices.
01
01
01
##### Tailwind CSS
The demo content is built with TailwindCSS, while the application shell uses custom CSS, offering flexibility and efficiency for responsive design.
02
02
02
##### PrimeBlocks
Fully compatible with [PrimeBlocks](https://primeblocks.org/), choose from the wide range of blocks and customize the way you like. Note that PrimeBlocks is not included in the
template and requires a separate purchase.
03
03
03
##### PrimeIcons
Verona ships with PrimeIcons, PrimeTekâ€™s modern icon library including a wide range of icons for your applications.
04
04
04
##### Figma File
Verona uses Figma as the design tool. It will be possible to download the Figma file after your purchase. You can
[preview the Figma file](https://www.figma.com/file/PgQXX4HXMPeCkT74tGajod/Preview-%7C-Verona-2022?node-id=1303%3A750) before the purchase. Note that PrimeVue UI components are excluded from the Verona Figma file as they
are available in PrimeOne for Figma only.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/common/tailwind.png)
![Fully Responsive](https://primefaces.org/cdn/primevue/images/templates/verona/verona-features2-responsive.png)
## Fully Responsive
Verona is crafted to provide optimal viewing and interaction experience for a wide range of devices.
![Cross Browser Compatible](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-compatible.png)
## Cross Browser Compatible
First class support for Firefox, Safari, Chrome and Edge.
![Support](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-lifetime.png)
## Support
PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users
can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and
[Forum](https://github.com/orgs/primefaces/discussions/categories/primevue-templates).
![Customizable Design](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-customizable.png)
## Customizable Design
Fully customizable with a mixture of Sass and CSS variables.
![Ready to Use Pages](https://primefaces.org/cdn/primevue/images/templates/verona/verona-features2-ready.png)
## Ready to Use Pages
Landing, login, invoice, help, user management and error pages are provided as template pages to get started with building your app.
![Mobile Experience](https://primefaces.org/cdn/primevue/images/templates/verona/verona-features2-mobile.png)
## Mobile Experience
Touch optimized enhanced mobile experience with responsive design.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Roadmap 2025
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Roadmap
At [PrimeTek](https://www.primetek.com.tr/), we are passionate about improving PrimeVue and would like to share our ideas for 2025 with the community. These are planned to be implemented in parallel to the regular maintenance work of the library involving review of issue tickets, PRs and PrimeVue PRO support.
Q1
Q2
Q3
Q4
COMPONENTS
## New Theme Editor
Advanced visual theme designer with support for the entire design token set, Figma to code and cloud storage.
## @primeuix/themes
Migrate to the new theming package that is shared between all Prime UI libraries.
## Tailwind v4
Update styled mode integration to support Tailwind v4.
## Drag Drop Utilities
Drag and Drop utilities implemented as Vue directives.
## Event Calendar
Calendar component to schedule and manage events. First component of the PrimeVue+ Suite.
## PrimeVue+
Advanced UI suite with complex enterprise grade components including Data Grid, Text Editor, Charts, TimeLine, PDF Viewer...
## PrimeVue+
Advanced UI suite with complex enterprise grade components including Data Grid, Text Editor, Charts, TimeLine, PDF Viewer...
FIGMA UI KIT
## Updates to Sync PrimeVue Design Tokens
Continuous updates to sync the design tokens in Figma with the theme code.
TEMPLATES
## Poseidon Remaster
Remastered version of Poseidon with a brand new design
## Avalon Remaster
Redesigned version of Avalon with a fresh look and feel.
## New Demo Content
Update the included shared demo pages such as Mail, Chat, File Manager, CMS and more.
## Sakai PRO
Advanced version of the free Sakai template with additional features.
PrimeBlocks
## Remastered Marketing Blocks with 30+ New blocks
Enhanced all marketing blocks and include 30 new blocks.
## Remastered Application and E-Commerce Blocks
Improve application and e-commerce blocks and include new blocks.
## New Blocks
Add all-new blocks.
## New Blocks
Add all-new blocks.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## TieredMenu Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# TieredMenu
TieredMenu displays submenus in nested overlays.
## Import [\#](https://primevue.org/tieredmenu/\#import)
```javascript
import TieredMenu from 'primevue/tieredmenu';
```
Copy
## Basic [\#](https://primevue.org/tieredmenu/\#basic)
TieredMenu requires a collection of menuitems as its _model_.
- File
- Edit
- Search
- Share
```markup
<TieredMenu :model="items" />
```
Copy
## Popup [\#](https://primevue.org/tieredmenu/\#popup)
Overlay mode is enabled by adding _popup_ property and calling _toggle_ function of the menu ref with an event of the target.
Toggle
```markup
<Button type="button" label="Toggle" @click="toggle" aria-haspopup="true" aria-controls="overlay_tmenu" />
<TieredMenu ref="menu" id="overlay_tmenu" :model="items" popup />
```
Copy
## Template [\#](https://primevue.org/tieredmenu/\#template)
TieredMenu offers item customization with the _item_ template that receives the menuitem instance from the model as a parameter.
- File
- Edit
- SearchâŒ˜+S
- Share
```markup
<TieredMenu :model="items">
    <template #item="{ item, props, hasSubmenu }">
        <a v-ripple class="flex items-center" v-bind="props.action">
            <span :class="item.icon" />
            <span class="ml-2">{{ item.label }}</span>
            <Badge v-if="item.badge" class="ml-auto" :value="item.badge" />
            <span v-if="item.shortcut" class="ml-auto border border-surface rounded bg-emphasis text-muted-color text-xs p-1">{{ item.shortcut }}</span>
            <i v-if="hasSubmenu" class="pi pi-angle-right ml-auto"></i>
        </a>
    </template>
</TieredMenu>
```
Copy
## Command [\#](https://primevue.org/tieredmenu/\#command)
The _command_ property defines the callback to run when an item is activated by click or a key event.
- File
- Search
- Sync
```markup
<TieredMenu :model="items" />
<Toast />
```
Copy
## Router [\#](https://primevue.org/tieredmenu/\#router)
Items with navigation are defined with templating to be able to use a router link component, an external link or programmatic navigation.
- Router
- Programmatic
- External
```markup
<TieredMenu :model="items">
    <template #item="{ item, props, hasSubmenu }">
        <router-link v-if="item.route" v-slot="{ href, navigate }" :to="item.route" custom>
            <a v-ripple :href="href" v-bind="props.action" @click="navigate">
                <span :class="item.icon" />
                <span class="ml-2">{{ item.label }}</span>
            </a>
        </router-link>
        <a v-else v-ripple :href="item.url" :target="item.target" v-bind="props.action">
            <span :class="item.icon" />
            <span class="ml-2">{{ item.label }}</span>
            <span v-if="hasSubmenu" class="pi pi-angle-right ml-auto" />
        </a>
    </template>
</TieredMenu>
```
Copy
## Accessibility [\#](https://primevue.org/tieredmenu/\#accessibility)
### Screen Reader
TieredMenu component uses the _menubar_ role with _aria-orientation_ set to "vertical" and the value to describe the menu can either be provided with _aria-labelledby_ or _aria-label_ props. Each list item has a _menuitem_ role with _aria-label_ referring to the label of the item and _aria-disabled_ defined if the item is disabled. A submenu within a TieredMenu uses the _menu_ role with an _aria-labelledby_ defined as the id of the submenu root menuitem label. In addition, menuitems that open a submenu have _aria-haspopup_ and _aria-expanded_ to define the relation between the item and the submenu.
In popup mode, the component implicitly manages the _aria-expanded_, _aria-haspopup_ and _aria-controls_ attributes of the target element to define the relation between the target and the popup.
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Add focus to the first item if focus moves in to the menu. If the focus is already within the menu, focus moves to the next focusable item in the page tab sequence. |
| _shift_ \+ _tab_ | Add focus to the first item if focus moves in to the menu. If the focus is already within the menu, focus moves to the previous focusable item in the page tab sequence. |
| _enter_ | If menuitem has a submenu, opens the submenu otherwise activates the menuitem and closes all open overlays. |
| _space_ | If menuitem has a submenu, opens the submenu otherwise activates the menuitem and closes all open overlays. |
| _escape_ | If focus is inside a popup submenu, closes the submenu and moves focus to the root item of the closed submenu. |
| _down arrow_ | Moves focus to the next menuitem within the submenu. |
| _up arrow_ | Moves focus to the previous menuitem within the submenu. |
| _alt_ \+ _up arrow_ | Closes the popup, then moves focus to the target element. |
| _right arrow_ | If option is closed, opens the option otherwise moves focus to the first child option. |
| _left arrow_ | If option is open, closes the option otherwise moves focus to the parent option. |
| _home_ | Moves focus to the first menuitem within the submenu. |
| _end_ | Moves focus to the last menuitem within the submenu. |
| _any printable character_ | Moves focus to the menuitem whose label starts with the characters being typed. |
- Import
- Basic
- Popup
- Template
- Command
- Router
- Accessibility
# TieredMenu API
API defines helper props, events and others for the PrimeVue TieredMenu module.
## TieredMenu [\#](https://primevue.org/tieredmenu/\#api.tieredmenu)
TieredMenu displays submenus in nested overlays.
### Props [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.props)
Defines valid properties in TieredMenuMenu component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| model | MenuItem\[\] | null | An array of menuitems. |  |
| popup | boolean | false | Defines if menu would displayed as a popup. |  |
| breakpoint | string | 960px | The breakpoint to define the maximum width boundary. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying menu element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<TieredMenuPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.emits)
Defines valid emits in TieredMenuMenu component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| before-show |  | void | Callback to invoke before the popup is shown. |  |
| before-hide |  | void | Callback to invoke before the popup is hidden. |  |
| show |  | void | Callback to invoke when the popup is shown. |  |
| hide |  | void | Callback to invoke when the popup is hidden. |  |
### Slots [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.slots)
Defines valid slots in TieredMenuMenu component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| item | scope: {<br>item: MenuItem, // Menuitem instancelabel: undefined, // Label property of the menuitemprops: TieredMenuRouterBindProps, // Binding properties of the menuitemhasSubmenu: boolean, // Whether or not there is a submenu<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each item. |  |
| submenuicon | scope: {<br>active: boolean, // Whether item is active<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom submenu icon template. |  |
| itemicon | scope: {<br>item: MenuItem, // Menuitem instanceclass: any, // Style class of the item icon element.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item icon template. |  |
| start |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom start template. |  |
| end |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom end template. |  |
### Methods [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.methods)
Defines methods that can be accessed by the component's reference.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| hide |  | void | Hides the overlay. |  |
### Interfaces [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.interfaces)
Defines the custom interfaces used by the module.
#### TieredMenuPassThroughMethodOptions [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.interfaces.TieredMenuPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [TieredMenuProps](https://primevue.org/tieredmenu/#api.tieredmenu.interfaces.TieredMenuProps) | null | Defines valid properties. |
| state | [TieredMenuState](https://primevue.org/tieredmenu/#api.tieredmenu.interfaces.TieredMenuState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent instance. |
| context | [TieredMenuContext](https://primevue.org/tieredmenu/#api.tieredmenu.interfaces.TieredMenuContext) | null | Defines current options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### TieredMenuPassThroughOptions [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.interfaces.TieredMenuPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [TieredMenuPassThroughOptionType<T>](https://primevue.org/tieredmenu/#api.tieredmenu.types.TieredMenuPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| rootList | [TieredMenuPassThroughOptionType<T>](https://primevue.org/tieredmenu/#api.tieredmenu.types.TieredMenuPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root list's DOM element. |
| item | [TieredMenuPassThroughOptionType<T>](https://primevue.org/tieredmenu/#api.tieredmenu.types.TieredMenuPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the list item's DOM element. |
| itemContent | [TieredMenuPassThroughOptionType<T>](https://primevue.org/tieredmenu/#api.tieredmenu.types.TieredMenuPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the item content's DOM element. |
| itemLink | [TieredMenuPassThroughOptionType<T>](https://primevue.org/tieredmenu/#api.tieredmenu.types.TieredMenuPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the item link's DOM element. |
| itemIcon | [TieredMenuPassThroughOptionType<T>](https://primevue.org/tieredmenu/#api.tieredmenu.types.TieredMenuPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the item icon's DOM element. |
| itemLabel | [TieredMenuPassThroughOptionType<T>](https://primevue.org/tieredmenu/#api.tieredmenu.types.TieredMenuPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the item label's DOM element. |
| submenuIcon | [TieredMenuPassThroughOptionType<T>](https://primevue.org/tieredmenu/#api.tieredmenu.types.TieredMenuPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the submenu icon's DOM element. |
| separator | [TieredMenuPassThroughOptionType<T>](https://primevue.org/tieredmenu/#api.tieredmenu.types.TieredMenuPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the separator's DOM element. |
| submenu | [TieredMenuPassThroughOptionType<T>](https://primevue.org/tieredmenu/#api.tieredmenu.types.TieredMenuPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the submenu's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [TieredMenuPassThroughTransitionType<any>](https://primevue.org/tieredmenu/#api.tieredmenu.types.TieredMenuPassThroughTransitionType%3Cany%3E) | null | Used to control Vue Transition API. |
#### TieredMenuPassThroughAttributes [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.interfaces.TieredMenuPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### TieredMenuFocusedItemInfo [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.interfaces.TieredMenuFocusedItemInfo)
Defines focused item info
| name | type | default | description |
| --- | --- | --- | --- |
| index | number | null | Active item index |
| level | number | null | Active item level |
| parentKey | string | null | Parent key info |
#### TieredMenuState [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.interfaces.TieredMenuState)
Defines current inline state in TieredMenu component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| focused | boolean | false | Current focus state as a boolean. |
| focusedItemInfo | [TieredMenuFocusedItemInfo](https://primevue.org/tieredmenu/#api.tieredmenu.interfaces.TieredMenuFocusedItemInfo) | null | Current focused item info. |
| activeItemPath | [TieredMenuFocusedItemInfo\[\]](https://primevue.org/tieredmenu/#api.tieredmenu.interfaces.TieredMenuFocusedItemInfo[]) | null | Active item path. |
| visible | boolean | true | Current visible state as a boolean. |
#### TieredMenuContext [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.interfaces.TieredMenuContext)
Defines current options in TieredMenu component.
| name | type | default | description |
| --- | --- | --- | --- |
| item | any | null | Current menuitem |
| index | number | null | Index of the menuitem. |
| active | boolean | false | Current active state of menuitem as a boolean. |
| focused | boolean | false | Current focused state of menuitem as a boolean. |
| disabled | boolean | false | Current disabled state of menuitem as a boolean. |
## Types [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.types)
Defines the custom types used by the module.
#### TieredMenuPassThroughOptionType [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.types.TieredMenuPassThroughOptionType)
| values |
| --- |
| TieredMenuPassThroughAttributes \| (options: TieredMenuPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### TieredMenuPassThroughTransitionType [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.types.TieredMenuPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: TieredMenuPassThroughMethodOptions) => TransitionProps \| undefined |
#### TieredMenuEmits [\#](https://primevue.org/tieredmenu/\#api.tieredmenu.types.TieredMenuEmits)
| values |
| --- |
| EmitFn<TieredMenuEmitsOptions> |
## MenuItem [\#](https://primevue.org/tieredmenu/\#api.menuitem)
PrimeVue menu components share a common api to specify the menuitems and submenus.
### Events [\#](https://primevue.org/tieredmenu/\#api.menuitem.events)
Defines the custom events used by the component's emit.
#### MenuItemCommandEvent [\#](https://primevue.org/tieredmenu/\#api.menuitem.events.MenuItemCommandEvent)
Custom command event.
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| item | [MenuItem](https://primevue.org/tieredmenu/#api.options.MenuItem) | Menuitem instance. |
| \[key: string\] | any |  |
### Options [\#](https://primevue.org/tieredmenu/\#api.options.MenuItem)
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| label | string \| Function | null | Property name or getter function to use as the label of an item. |  |
| icon | string | null | Icon of the item. |  |
| command | Function | null |  |  |
| url | string | null | External link to navigate when item is clicked. |  |
| items | MenuItem\[\] | null | An array of children menuitems. |  |
| disabled | boolean \| Function | false | A boolean or a function to return a boolean to specify if the item is disabled. |  |
| visible | boolean \| Function | true | A boolean or a function to return a boolean to specify if the item is visible. |  |
| target | string | null | Specifies where to open the linked document. |  |
| separator | boolean | false | Defines the item as a separator. |  |
| style | any | null | Inline style of the menuitem. |  |
| class | any | null | Style class of the menuitem. |  |
| key | string | null | Unique identifier of an item. |  |
| \[key: string\] | any | null |  |  |
- TieredMenu
  - Props
  - Emits
  - Slots
  - Methods
  - Interfaces
  - Types
- MenuItem
  - Events
  - Options
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Knob Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Knob
Knob is a form component to define number inputs with a dial.
## Import [\#](https://primevue.org/knob/\#import)
```javascript
import Knob from 'primevue/knob';
```
Copy
## Basic [\#](https://primevue.org/knob/\#basic)
Knob is used with the _v-model_ property for two-way value binding.
0
```markup
<Knob v-model="value" />
```
Copy
## Forms [\#](https://primevue.org/knob/\#forms)
Knob integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
15
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col items-center gap-1">
        <Knob name="knob" />
        <Message v-if="$form.knob?.invalid" severity="error" size="small" variant="simple">{{ $form.knob.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Min/Max [\#](https://primevue.org/knob/\#minmax)
Boundaries are configured with the _min_ and _max_ values whose defaults are 0 and 100 respectively.
10
```markup
<Knob v-model="value" :min="-50" :max="50" />
```
Copy
## Step [\#](https://primevue.org/knob/\#step)
Step factor is 1 by default and can be customized with _step_ option.
40
```markup
<Knob v-model="value5" :step="10" />
```
Copy
## Template [\#](https://primevue.org/knob/\#template)
The label can be customized with the _valueTemplate_ property using either a template string or a function.
60%
```markup
<Knob v-model="value" valueTemplate="{value}%" />
```
Copy
## Stroke [\#](https://primevue.org/knob/\#stroke)
The border size is specified with the _stroke_ property as a number in pixels.
40
```markup
<Knob v-model="value" :strokeWidth="5" />
```
Copy
## Size [\#](https://primevue.org/knob/\#size)
Diameter of the knob is defined in pixels using the _size_ property.
60
```markup
<Knob v-model="value" :size="200" />
```
Copy
## Color [\#](https://primevue.org/knob/\#color)
_valueColor_ defines the value color, _rangeColor_ defines the range background and similarly _textColor_ configures the color of the value text. In addition, _strokeWidth_ is used to determine the width of the stroke of range and value sections.
50
```markup
<Knob v-model="value" valueColor="SlateGray" rangeColor="MediumTurquoise" />
```
Copy
## Reactive [\#](https://primevue.org/knob/\#reactive)
Knob can be controlled with custom controls as well.
0
```markup
<Knob v-model="value" :size="150" readonly />
<div class="flex gap-2">
    <Button icon="pi pi-plus" @click="value++" :disabled="value >= 100" />
    <Button icon="pi pi-minus" @click="value--" :disabled="value <= 0" />
</div>
```
Copy
## ReadOnly [\#](https://primevue.org/knob/\#readonly)
When _readonly_ present, value cannot be edited.
50
```markup
<Knob v-model="value" readonly />
```
Copy
## Disabled [\#](https://primevue.org/knob/\#disabled)
When _disabled_ is present, a visual hint is applied to indicate that the Knob cannot be interacted with.
50
```markup
<Knob v-model="value" disabled />
```
Copy
## Accessibility [\#](https://primevue.org/knob/\#accessibility)
### Screen Reader
Knob element component uses _slider_ role in addition to the _aria-valuemin_, _aria-valuemax_ and _aria-valuenow_ attributes. Value to describe the component can be defined using _aria-labelledby_ and _aria-label_ props.
```markup
<span id="label_number">Number</span>
<Knob aria-labelledby="label_number" />
<Knob aria-label="Number" />
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the slider. |
| _left arrow_ _down arrow_ | Decrements the value. |
| _right arrow_ _up arrow_ | Increments the value. |
| _home_ | Set the minimum value. |
| _end_ | Set the maximum value. |
| _page up_ | Increments the value by 10 steps. |
| _page down_ | Decrements the value by 10 steps. |
- Import
- Basic
- Forms
- Min/Max
- Step
- Template
- Stroke
- Size
- Color
- Reactive
- ReadOnly
- Disabled
- Accessibility
# Knob API
API defines helper props, events and others for the PrimeVue Knob module.
## Knob [\#](https://primevue.org/knob/\#api.knob)
Knob is a form component to define number inputs with a dial.
### Props [\#](https://primevue.org/knob/\#api.knob.props)
Defines valid properties in Knob component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | number | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| size | number | 100 | Size of the component in pixels. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| readonly | boolean | false | When present, it specifies that the component value cannot be edited. |  |
| step | number | 1 | Step factor to increment/decrement the value. |  |
| min | number | 0 | Mininum boundary value. |  |
| max | number | 100 | Maximum boundary value. |  |
| valueColor | string | $dt('knob.value.background') | Background of the value. |  |
| rangeColor | string | $dt('knob.range.background') | Background color of the range. |  |
| textColor | string | $dt('knob.text.color') | Color of the value text. |  |
| strokeWidth | number | 14 | Width of the knob stroke. |  |
| showValue | boolean | true | Whether the show the value inside the knob. |  |
| valueTemplate | string \| Function | '{value}' | Template string of the value. |  |
| tabindex | number | 0 | Index of the element in tabbing order. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Used to define a string that labels the element. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<KnobPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/knob/\#api.knob.emits)
Defines valid emits in Knob component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: number | void | Emitted when the value changes. |  |
| value-change | value: number | void | Emitted when the value changes in uncontrolled mode. |  |
| change | value: number | void | Callback to invoke when the value changes. |  |
### Interfaces [\#](https://primevue.org/knob/\#api.knob.interfaces)
Defines the custom interfaces used by the module.
#### KnobPassThroughMethodOptions [\#](https://primevue.org/knob/\#api.knob.interfaces.KnobPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [KnobProps](https://primevue.org/knob/#api.knob.interfaces.KnobProps) | null | Defines valid properties. |
| state | [KnobState](https://primevue.org/knob/#api.knob.interfaces.KnobState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### KnobPassThroughOptions [\#](https://primevue.org/knob/\#api.knob.interfaces.KnobPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [KnobPassThroughOptionType](https://primevue.org/knob/#api.knob.types.KnobPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| svg | [KnobPassThroughOptionType](https://primevue.org/knob/#api.knob.types.KnobPassThroughOptionType) | null | Used to pass attributes to the svg's DOM element. |
| range | [KnobPassThroughOptionType](https://primevue.org/knob/#api.knob.types.KnobPassThroughOptionType) | null | Used to pass attributes to the range's DOM element. |
| value | [KnobPassThroughOptionType](https://primevue.org/knob/#api.knob.types.KnobPassThroughOptionType) | null | Used to pass attributes to the value' DOM element. |
| text | [KnobPassThroughOptionType](https://primevue.org/knob/#api.knob.types.KnobPassThroughOptionType) | null | Used to pass attributes to the text's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### KnobPassThroughAttributes [\#](https://primevue.org/knob/\#api.knob.interfaces.KnobPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### KnobState [\#](https://primevue.org/knob/\#api.knob.interfaces.KnobState)
Defines current inline state in Knob component.
| name | type | default | description |
| --- | --- | --- | --- |
| radius | number | 40 | Current radius state as a number. |
| midX | number | 50 | Current middle x axis state as a number. |
| midY | number | 50 | Current middle y axis state as a number. |
| minRadians | number | null | Current minimum radian state as a number. |
| maxRadians | number | null | Current maximum radian state as a number. |
## Types [\#](https://primevue.org/knob/\#api.knob.types)
Defines the custom types used by the module.
#### KnobPassThroughOptionType [\#](https://primevue.org/knob/\#api.knob.types.KnobPassThroughOptionType)
| values |
| --- |
| KnobPassThroughAttributes \| (options: KnobPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### KnobEmits [\#](https://primevue.org/knob/\#api.knob.types.KnobEmits)
| values |
| --- |
| EmitFn<KnobEmitsOptions> |
- Knob
  - Props
  - Emits
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Dynamic Imports Guide
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Dynamic Imports
Dynamic imports enable the loading of multiple items as needed, streamlining the import process.
## Overview [\#](https://primevue.org/guides/dynamicimports/\#overview)
With _@primevue/icons_ for icons and _primevue_ for components (except Editor and Chart), multiple items can be imported together.
```javascript
import { Button, InputText } from 'primevue';
import { SearchIcon, BellIcon } from '@primevue/icons';
```
Copy
On the other hand, they enable the loading of multiple items from a specific structure as needed, making code management easier.
```markup
<script setup>
import * as PrimeVue from 'primevue';
const items = [\
    { as: 'Button', class: 'my-button-class' },\
    { as: 'InputText', class: 'my-inputtext-class' }\
};\
</script>\
\
<template>\
    <component v-for="item of items" :is="PrimeVue[item.as]" :class="item.class" />\
</template>\
\
```\
\
Copy\
\
- Overview\
\
\
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue DatePicker
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# DatePicker
DatePicker is a form component for date inputs.
## Import [\#](https://primevue.org/datepicker/\#import)
```javascript
import DatePicker from 'primevue/datepicker';
```
Copy
## Basic [\#](https://primevue.org/datepicker/\#basic)
DatePicker is used with the _v-model_ property for two-way value binding.
```markup
<DatePicker v-model="date" />
```
Copy
## Forms [\#](https://primevue.org/datepicker/\#forms)
DatePicker integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col gap-1">
        <DatePicker name="date" fluid />
        <Message v-if="$form.date?.invalid" severity="error" size="small" variant="simple">{{ $form.date.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Format [\#](https://primevue.org/datepicker/\#format)
Default date format is _mm/dd/yy_ which can be customized using the _dateFormat_ property. Following options can be a part of the format.
- _d_ \- day of month (no leading zero)
- _dd_ \- day of month (two digit)
- _o_ \- day of the year (no leading zeros)
- _oo_ \- day of the year (three digit)
- _D_ \- day name short
- _DD_ \- day name long
- _m_ \- month of year (no leading zero)
- _mm_ \- month of year (two digit)
- _M_ \- month name short
- _MM_ \- month name long
- _y_ \- year (two digit)
- _yy_ \- year (four digit)
- _@_ \- Unix timestamp (ms since 01/01/1970)
- _!_ \- Windows ticks (100ns since 01/01/0001)
- _'...'_ \- literal text
- _''_ \- single quote
- _anything else_ \- literal text
```markup
<DatePicker v-model="date" dateFormat="dd/mm/yy" />
```
Copy
## Locale [\#](https://primevue.org/datepicker/\#locale)
Locale for different languages and formats is defined globally, refer to the [PrimeVue Locale](https://primevue.org/configuration/#locale) configuration for more information.
## Icon [\#](https://primevue.org/datepicker/\#icon)
An additional icon is displayed next to the input field when _showIcon_ is present.
Button
Default Icon
Custom Icon
```markup
<DatePicker v-model="buttondisplay" showIcon fluid :showOnFocus="false" />
<DatePicker v-model="icondisplay" showIcon fluid iconDisplay="input" />
<DatePicker v-model="templatedisplay" showIcon fluid iconDisplay="input" timeOnly>
    <template #inputicon="slotProps">
        <i class="pi pi-clock" @click="slotProps.clickCallback" />
    </template>
</DatePicker>
```
Copy
## Min / Max [\#](https://primevue.org/datepicker/\#minmax)
Boundaries for the permitted dates that can be entered are defined with _minDate_ and _maxDate_ properties.
```markup
<DatePicker v-model="date" :minDate="minDate" :maxDate="maxDate" :manualInput="false" />
```
Copy
## Multiple [\#](https://primevue.org/datepicker/\#multiple)
In order to choose multiple dates, set _selectionMode_ as _multiple_. In this mode, the value binding should be an array.
```markup
<DatePicker v-model="dates" selectionMode="multiple" :manualInput="false" />
```
Copy
## Range [\#](https://primevue.org/datepicker/\#range)
A range of dates can be selected by defining _selectionMode_ as _range_, in this case the bound value would be an array with two values where first date is the start of the range and second date is the end.
```markup
<DatePicker v-model="dates" selectionMode="range" :manualInput="false" />
```
Copy
## Button Bar [\#](https://primevue.org/datepicker/\#button)
When _showButtonBar_ is present, today and clear buttons are displayed at the footer.
```markup
<DatePicker v-model="date" showButtonBar />
```
Copy
## Time [\#](https://primevue.org/datepicker/\#time)
A time picker is displayed when _showTime_ is enabled where 12/24 hour format is configured with _hourFormat_ property. In case, only time needs to be selected, add _timeOnly_ to hide the date section.
12h Format
24h Format
Time Only
```markup
<DatePicker id="datepicker-12h" v-model="datetime12h" showTime hourFormat="12" fluid />
<DatePicker id="datepicker-24h" v-model="datetime24h" showTime hourFormat="24" fluid />
<DatePicker id="datepicker-timeonly" v-model="time" timeOnly fluid />
```
Copy
## Month Picker [\#](https://primevue.org/datepicker/\#monthpicker)
Month only picker is enabled by specifying _view_ as _month_ in addition to a suitable _dateFormat_.
```markup
<DatePicker v-model="date" view="month" dateFormat="mm/yy" />
```
Copy
## Year Picker [\#](https://primevue.org/datepicker/\#yearpicker)
Specifying _view_ as _year_ in addition to a suitable _dateFormat_ enables the year picker.
```markup
<DatePicker v-model="date" view="year" dateFormat="yy" />
```
Copy
## Multiple Months [\#](https://primevue.org/datepicker/\#multiplemonths)
Number of months to display is configured with the _numberOfMonths_ property.
```markup
<DatePicker v-model="date" :numberOfMonths="2" />
```
Copy
## Date Template [\#](https://primevue.org/datepicker/\#datetemplate)
Custom content can be placed inside date cells with the _date_ slot that takes a Date as a parameter.
```markup
<DatePicker v-model="date">
    <template #date="slotProps">
        <strong v-if="slotProps.date.day > 10 && slotProps.date.day < 15" style="text-decoration: line-through">{{ slotProps.date.day }}</strong>
        <template v-else>{{ slotProps.date.day }}</template>
    </template>
</DatePicker>
```
Copy
## Inline [\#](https://primevue.org/datepicker/\#inline)
DatePicker is displayed as a popup by default, add _inline_ property to customize this behavior.
April2025
| Wk | Su | Mo | Tu | We | Th | Fr | Sa |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 13 | 30 | 31 | 1 | 2 | 3 | 4 | 5 |
| 14 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |
| 15 | 13 | 14 | 15 | 16 | 17 | 18 | 19 |
| 16 | 20 | 21 | 22 | 23 | 24 | 25 | 26 |
| 17 | 27 | 28 | 29 | 30 | 1 | 2 | 3 |
```markup
<DatePicker v-model="date" inline showWeek class="w-full sm:w-[30rem]" />
```
Copy
## Filled [\#](https://primevue.org/datepicker/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
```markup
<DatePicker v-model="date" variant="filled" />
```
Copy
## Float Label [\#](https://primevue.org/datepicker/\#floatlabel)
A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
Over LabelIn LabelOn Label
```markup
<FloatLabel>
    <DatePicker v-model="value1" inputId="over_label" showIcon iconDisplay="input" />
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel variant="in">
    <DatePicker v-model="value2" inputId="in_label" showIcon iconDisplay="input" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel variant="on">
    <DatePicker v-model="value3" inputId="on_label" showIcon iconDisplay="input" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/datepicker/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
Date
```markup
<IftaLabel>
    <DatePicker v-model="value" inputId="date" showIcon iconDisplay="input" variant="filled" />
    <label for="date">Date</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/datepicker/\#sizes)
DatePicker provides _small_ and _large_ sizes as alternatives to the base.
```markup
<DatePicker v-model="value1" size="small" placeholder="Small" showIcon iconDisplay="input" />
<DatePicker v-model="value2" placeholder="Normal" showIcon iconDisplay="input" />
<DatePicker v-model="value3" size="large" placeholder="Large" showIcon iconDisplay="input" />
```
Copy
## Invalid [\#](https://primevue.org/datepicker/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
```markup
<DatePicker v-model="date1" :invalid="!date1" placeholder="Date" />
<DatePicker v-model="date2" :invalid="!date2" variant="filled" placeholder="Date" />
```
Copy
## Disabled [\#](https://primevue.org/datepicker/\#disabled)
DatePicker is used a controlled input component with _v-model_ property.
```markup
<DatePicker v-model="date" disabled />
```
Copy
## Accessibility [\#](https://primevue.org/datepicker/\#accessibility)
### Screen Reader
Value to describe the component can either be provided via _label_ tag combined with _inputId_ prop or using _aria-labelledby_, _aria-label_ props. The input element has _combobox_ role in addition to _aria-autocomplete_ as "none", _aria-haspopup_ as "dialog" and _aria-expanded_ attributes. The relation between the input and the popup is created with _aria-controls_ attribute that refers to the id of the popup.
The optional datepicker button requires includes _aria-haspopup_, _aria-expanded_ for states along with _aria-controls_ to define the relation between the popup and the button. The value to read is retrieved from the _chooseDate_ key of the aria property from the [locale](https://primevue.org/configuration/#locale) API. This label is also used for the _aria-label_ of the popup as well. When there is a value selected, it is formatted and appended to the label to be able to notify users about the current value.
Popup has a _dialog_ role along with _aria-modal_ and _aria-label_. The navigation buttons at the header has an _aria-label_ retrieved from the _prevYear_, _nextYear_, _prevMonth_, _nextMonth_, _prevDecade_ and _nextDecade_ keys of the locale aria API. Similarly month picker button uses the _chooseMonth_ and year picker button uses the _chooseYear_ keys.
Main date table uses _grid_ role that contains th elements with _col_ as the scope along with _abbr_ tag resolving to the full name of the month. Each date cell has an _aria-label_ referring to the full date value. Buttons at the footer utilize their readable labels as _aria-label_ as well. Selected date also receives the _aria-selected_ attribute.
Timepicker spinner buttons get their labels for _aria-label_ from the aria locale API using the _prevHour_, _nextHour_, _prevMinute_, _nextMinute_, _prevSecond_, _nextSecond_, _am_ and _pm_ keys.
DatePicker also includes a hidden section that is only available to screen readers with _aria-live_ as "polite". This element is updated when the selected date changes to instruct the user about the current date selected.
```markup
<label for="date1">Date</label>
<DatePicker inputId="date1" />
<span id="date2">Date</span>
<DatePicker aria-labelledby="date2" />
<DatePicker aria-label="Date" />
```
Copy
### Choose Date Button Keyboard Support
| Key | Function |
| --- | --- |
| _space_ | Opens popup and moves focus to the selected date, if there is none focuses on today. |
| _enter_ | Opens popup and moves focus to the selected date, if there is none focuses on today. |
### Popup Keyboard Support
| Key | Function |
| --- | --- |
| _escape_ | Closes the popup and moves focus to the input element. |
| _tab_ | Moves focus to the next focusable element within the popup. |
| _shift_ \+ _tab_ | Moves focus to the next focusable element within the popup. |
### Header Buttons Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Triggers the button action. |
| _space_ | Triggers the button action. |
### Date Grid Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Selects the date, closes the popup and moves focus to the input element. |
| _space_ | Closes the popup and moves focus to the input element. |
| _up arrow_ | Moves focus to the same day of the previous week. |
| _alt_ \+ _up arrow_ | Closes the popup and moves focus to the input element. |
| _down arrow_ | Moves focus to the same day of the next week. |
| _right arrow_ | Moves focus to the next day. |
| _left arrow_ | Moves focus to the previous day. |
| _home_ | Moves focus to the first day of the current week. |
| _end_ | Moves focus to the last day of the current week. |
| _page up_ | Changes the date to previous month in date picker mode. Moves to previous year in month picker mode and previous decade in year picker. |
| _shift_ \+ _page up_ | Changes the date to previous year in date picker mode. Has no effect in month or year picker. |
| _page down_ | Changes the date to next month in date picker mode. Moves to next year in month picker mode and next decade in year picker. |
| _shift_ \+ _page down_ | Changes the date to next year in date picker mode. Has no effect in month or year picker. |
### Footer Buttons Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Triggers the button action. |
| _space_ | Triggers the button action. |
- Import
- Basic
- Forms
- Format
- Locale
- Icon
- Min / Max
- Multiple
- Range
- Button Bar
- Time
- Month Picker
- Year Picker
- Multiple Months
- Date Template
- Inline
- Filled
- Float Label
- Ifta Label
- Sizes
- Invalid
- Disabled
- Accessibility
# DatePicker API
API defines helper props, events and others for the PrimeVue DatePicker module.
## DatePicker [\#](https://primevue.org/datepicker/\#api.datepicker)
DatePicker is a form component to work with dates.
### Props [\#](https://primevue.org/datepicker/\#api.datepicker.props)
Defines valid properties in DatePicker component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | null \| Date \| Date\[\] \| (null \| Date)\[\] | null | Value of the component. |  |
| defaultValue | null \| Date \| Date\[\] \| (null \| Date)\[\] | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| selectionMode | HintedString<"single" \| "multiple" \| "range"> | single | Defines the quantity of the selection. |  |
| dateFormat | string | null | Format of the date. Defaults to PrimeVue Locale configuration. |  |
| inline | boolean | false | When enabled, displays the datepicker as inline instead of an overlay. |  |
| showOtherMonths | boolean | true | Whether to display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use the selectOtherMonths option. |  |
| selectOtherMonths | boolean | false | Whether days in other months shown before or after the current month are selectable. This only applies if the showOtherMonths option is set to true. |  |
| showIcon | boolean | false | When enabled, displays a button with icon next to input. |  |
| iconDisplay | HintedString<"button" \| "input"> | 'button' | Icon position of the component. This only applies if the showIcon option is set to true. |  |
| icon | string | null | Icon of the datepicker button. |  |
| prevIcon | string | null | Icon to show in the previous button. |  |
| nextIcon | string | null | Icon to show in the next button. |  |
| incrementIcon | string | null | Icon to show in each of the increment buttons. |  |
| decrementIcon | string | null | Icon to show in each of the decrement buttons. |  |
| numberOfMonths | number | 1 | Number of months to display. |  |
| responsiveOptions | [DatePickerResponsiveOptions\[\]](https://primevue.org/datepicker/#api.datepicker.interfaces.DatePickerResponsiveOptions[]) | null | An array of options for responsive design. |  |
| breakpoint | string | 769px | The breakpoint to define the maximum width boundary for datepicker panel. |  |
| view | HintedString<"date" \| "month" \| "year"> | date | Type of view to display. |  |
| minDate | Date | null | The minimum selectable date. |  |
| maxDate | Date | null | The maximum selectable date. |  |
| disabledDates | Date\[\] | null | Array with dates to disable. |  |
| disabledDays | number\[\] | null | Array with disabled weekday numbers. |  |
| maxDateCount | number | null | Maximum number of selectable dates in multiple mode. |  |
| showOnFocus | boolean | true | When disabled, datepicker will not be visible with input focus. |  |
| autoZIndex | boolean | true | Whether to automatically manage layering. |  |
| baseZIndex | number | 0 | Base zIndex value to use in layering. |  |
| showButtonBar | boolean | false | Whether to display today and clear buttons at the footer. |  |
| shortYearCutoff | string | +10 | The cutoff year for determining the century for a date. |  |
| showTime | boolean | false | Whether to display timepicker. |  |
| timeOnly | boolean | false | Whether to display timepicker only. |  |
| hourFormat | HintedString<"12" \| "24"> | 24 | Specifies hour format. |  |
| stepHour | number | 1 | Hours to change per step. |  |
| stepMinute | number | 1 | Minutes to change per step. |  |
| stepSecond | number | 1 | Seconds to change per step. |  |
| showSeconds | boolean | false | Whether to show the seconds in time picker. |  |
| hideOnDateTimeSelect | boolean | false | Whether to hide the overlay on date selection when showTime is enabled. |  |
| hideOnRangeSelection | boolean | false | Whether to hide the overlay on date selection is completed when selectionMode is range. |  |
| timeSeparator | string | : | Separator of time selector. |  |
| showWeek | boolean | false | When enabled, datepicker will show week numbers. |  |
| manualInput | boolean | true | Whether to allow entering the date manually via typing. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| readonly | boolean | false | When present, it specifies that an input field is read-only. |  |
| placeholder | string | null | Placeholder text for the input. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| inputStyle | object | null | Inline style of the input field. |  |
| inputClass | string \| object | null | Style class of the input field. |  |
| panelStyle | object | null | Inline style of the overlay panel. |  |
| panelClass | string \| object | null | Style class of the overlay panel. |  |
| todayButtonProps | object | null | Used to pass all properties of the ButtonProps to the today button component. |  |
| clearButtonProps | object | null | Used to pass all properties of the ButtonProps to the clear button component. |  |
| navigatorButtonProps | object | null | Used to pass all properties of the ButtonProps to the navigator button component. |  |
| timepickerButtonProps | object | null | Used to pass all properties of the ButtonProps to the timepicker button component. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| ariaLabelledby | string | null | Establishes relationships between the component and label(s) where its value should be one or more element IDs. |  |
| ariaLabel | string | null | Establishes a string value that labels the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<DatePickerPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/datepicker/\#api.datepicker.emits)
Defines valid emits in DatePicker component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: undefined \| null \| Date \| Date\[\] \| (null \| Date)\[\] | void | Emitted when the value changes. |  |
| value-change | value: undefined \| null \| Date \| Date\[\] \| (null \| Date)\[\] | void | Emitted when the value changes in uncontrolled mode. |  |
| input | event: Event | void | Callback to invoke when input field is being typed. |  |
| date-select | value: Date | void | Callback to invoke when a date is selected. |  |
| show |  | void | Callback to invoke when datepicker panel is shown. |  |
| hide |  | void | Callback to invoke when datepicker panel is hidden. |  |
| today-click | date: Date | void | Callback to invoke when today button is clicked. |  |
| clear-click | event: Event | void | Callback to invoke when clear button is clicked. |  |
| month-change | event: [DatePickerMonthChangeEvent](https://primevue.org/datepicker/#api.datepicker.events.DatePickerMonthChangeEvent) | void | Callback to invoke when a month is changed using the navigators. |  |
| year-change | event: [DatePickerYearChangeEvent](https://primevue.org/datepicker/#api.datepicker.events.DatePickerYearChangeEvent) | void | Callback to invoke when a year is changed using the navigators. |  |
| focus | event: Event | void | Callback to invoke on focus of input field. |  |
| blur | event: [DatePickerBlurEvent](https://primevue.org/datepicker/#api.datepicker.events.DatePickerBlurEvent) | void | Callback to invoke on blur of input field. |  |
| keydown | event: Event | void | Callback to invoke when a key is pressed. |  |
### Slots [\#](https://primevue.org/datepicker/\#api.datepicker.slots)
Defines valid slots in DatePicker component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template of panel. |  |
| prevbutton | scope: {<br>actionCallback: (event: Event) â‡’ void, // Action function.keydownCallback: (event: Event) â‡’ void, // Keydown function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom prev button template |  |
| nextbutton | scope: {<br>actionCallback: (event: Event) â‡’ void, // Action function.keydownCallback: (event: Event) â‡’ void, // Keydown function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom next button template |  |
| todaybutton | scope: {<br>actionCallback: (event: Event) â‡’ void, // Action function.keydownCallback: (event: Event) â‡’ void, // Keydown function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom today button template |  |
| clearbutton | scope: {<br>actionCallback: (event: Event) â‡’ void, // Action function.keydownCallback: (event: Event) â‡’ void, // Keydown function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom clear button template |  |
| hourincrementbutton | scope: {<br>callbacks: object, // Event callbacks.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom increment hour button template |  |
| hourdecrementbutton | scope: {<br>callbacks: object, // Event callbacks.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom decrement hour button template |  |
| minuteincrementbutton | scope: {<br>callbacks: object, // Event callbacks.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom increment minute button template |  |
| minutedecrementbutton | scope: {<br>callbacks: object, // Event callbacks.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom decrement minute button template |  |
| secondincrementbutton | scope: {<br>callbacks: object, // Event callbacks.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom increment second button template |  |
| seconddecrementbutton | scope: {<br>callbacks: object, // Event callbacks.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom decrement second button template |  |
| ampmincrementbutton | scope: {<br>toggleCallback: (event: Event) â‡’ void, // Toggle function.keydownCallback: (event: Event) â‡’ void, // Keydown function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom ampm toggle increment button template |  |
| ampmdecrementbutton | scope: {<br>toggleCallback: (event: Event) â‡’ void, // Toggle function.keydownCallback: (event: Event) â‡’ void, // Keydown function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom ampm toggle decrement button template |  |
| footer |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template of panel. |  |
| date | scope: {<br>date: DatePickerDateSlotOptions, // Value of the component.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom date template. |  |
| decade | scope: {<br>years: undefined, // An array containing the start and and year of a decade to display at header of the year picker.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom decade template. |  |
| weekheaderlabel |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom week header label template. |  |
| weeklabel | scope: {<br>weekNumber: number, // Number of the week<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom week label template. |  |
| dropdownicon | scope: {<br>class: any, // Style class of the dropdown icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom dropdown icon template. |  |
| inputicon | scope: {<br>class: any, // Style class of the input iconclickCallback: () â‡’ void, // Click callback<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom input icon template. |  |
| previcon | scope: {<br>class: any, // Style class of the previous icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom previous icon template. |  |
| nexticon | scope: {<br>class: any, // Style class of the next icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom next icon template. |  |
| incrementicon | scope: {<br>class: any, // Style class of the increment icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom increment icon template. |  |
| decrementicon | scope: {<br>class: any, // Style class of the decrement icon<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom decrement icon template. |  |
| dropdownbutton | scope: {<br>toggleCallback: (event: Event) â‡’ void, // Toggle function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom dropdown button template. |  |
### Events [\#](https://primevue.org/datepicker/\#api.datepicker.events)
Defines the custom events used by the component's emit.
#### DatePickerMonthChangeEvent [\#](https://primevue.org/datepicker/\#api.datepicker.events.DatePickerMonthChangeEvent)
Custom DatePicker month change event.
See [month-change](https://primevue.org/datepicker/#api.datepicker.emitsoptions.month-change)
| name | type | description |
| --- | --- | --- |
| month | number | New month. |
| year | number | New year. |
#### DatePickerYearChangeEvent [\#](https://primevue.org/datepicker/\#api.datepicker.events.DatePickerYearChangeEvent)
Custom DatePicker year change event.
See [year-change](https://primevue.org/datepicker/#api.datepicker.emitsoptions.year-change)
| name | type | description |
| --- | --- | --- |
| month | number | New month. |
| year | number | New year. |
#### DatePickerBlurEvent [\#](https://primevue.org/datepicker/\#api.datepicker.events.DatePickerBlurEvent)
Custom DatePicker blur event.
See [blur](https://primevue.org/datepicker/#api.datepicker.emitsoptions.blur)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | string | Input value |
### Interfaces [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces)
Defines the custom interfaces used by the module.
#### DatePickerPassThroughMethodOptions [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces.DatePickerPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [DatePickerProps](https://primevue.org/datepicker/#api.datepicker.interfaces.DatePickerProps) | null | Defines valid properties. |
| state | [DatePickerState](https://primevue.org/datepicker/#api.datepicker.interfaces.DatePickerState) | null | Defines current inline state. |
| context | [DatePickerContext](https://primevue.org/datepicker/#api.datepicker.interfaces.DatePickerContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### DatePickerSharedPassThroughMethodOptions [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces.DatePickerSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [DatePickerProps](https://primevue.org/datepicker/#api.datepicker.interfaces.DatePickerProps) | null | Defines valid properties. |
| state | [DatePickerState](https://primevue.org/datepicker/#api.datepicker.interfaces.DatePickerState) | null | Defines current inline state. |
#### DatePickerResponsiveOptions [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces.DatePickerResponsiveOptions)
Custom DatePicker responsive options metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| breakpoint | string | null | Breakpoint for responsive mode. Exp; @media screen and (max-width: ${breakpoint}) {...} |
| numMonths | number | null | The number of visible months on breakpoint. |
#### DatePickerPassThroughOptions [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces.DatePickerPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcInputText | any | null | Used to pass attributes to the InputText component. |
| dropdown | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the dropdown's DOM element. |
| dropdownIcon | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the dropdown icon's DOM element. |
| inputIconContainer | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the input icon container's DOM element. |
| inputIcon | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the input icon's DOM element. |
| panel | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the panel's DOM element. |
| calendarContainer | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the calendar container's DOM element. |
| calendar | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the calendar's DOM element. |
| header | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| pcPrevButton | any | null | Used to pass attributes to the previous button's DOM element. |
| title | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the title's DOM element. |
| selectMonth | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the view month's DOM element. |
| selectYear | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the view year's DOM element. |
| decade | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the decade's DOM element. |
| pcNextButton | any | null | Used to pass attributes to the next button's DOM element. |
| dayView | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the table's DOM element. |
| tableHeader | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the table header's DOM element. |
| tableHeaderRow | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the table header row's DOM element. |
| weekHeader | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the week header's DOM element. |
| weekHeaderLabel | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the week header label's DOM element. |
| tableHeaderCell | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the table header cell's DOM element. |
| weekDayCell | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the week day cell's DOM element. |
| weekDay | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the week day's DOM element. |
| tableBody | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the table body's DOM element. |
| tableBodyRow | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the table body row's DOM element. |
| weekNumber | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the week number's DOM element. |
| weekLabelContainer | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the week label container's DOM element. |
| dayCell | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the day cell's DOM element. |
| day | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the day's DOM element. |
| monthView | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the month view's DOM element. |
| month | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the month's DOM element. |
| yearView | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the year view's DOM element. |
| year | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the year's DOM element. |
| timePicker | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the time picker's DOM element. |
| hourPicker | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the hour picker's DOM element. |
| hour | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the hour's DOM element. |
| separatorContainer | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the separator container's DOM element. |
| separator | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the separator's DOM element. |
| minutePicker | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the minute picker's DOM element. |
| minute | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the minute's DOM element. |
| secondPicker | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the second picker's DOM element. |
| second | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the second's DOM element. |
| ampmPicker | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the ampm picker's DOM element. |
| ampm | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the ampm's DOM element. |
| buttonbar | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the buttonbar's DOM element. |
| pcIncrementButton | any | null | Used to pass attributes to the increment button's DOM element. |
| pcDecrementButton | any | null | Used to pass attributes to the decrement button's DOM element. |
| pcTodayButton | any | null | Used to pass attributes to the today button's DOM element. |
| pcClearButton | any | null | Used to pass attributes to the clear button's DOM element. |
| hiddenSelectedDay | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the aria selected day's DOM element. |
| hiddenMonth | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the aria month's DOM element. |
| hiddenYear | [DatePickerPassThroughOptionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughOptionType) | null | Used to pass attributes to the aria year's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [DatePickerPassThroughTransitionType](https://primevue.org/datepicker/#api.datepicker.types.DatePickerPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### DatePickerPassThroughAttributes [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces.DatePickerPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### DatePickerState [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces.DatePickerState)
Defines current inline state in DatePicker component.
| name | type | default | description |
| --- | --- | --- | --- |
| currentMonth | number | null | Current month as a number. |
| currentYear | number | null | Current year as a number. |
| currentHour | number | null | Current hour as a number. |
| currentMinute | number | null | Current minute as a number. |
| currentSecond | number | null | Current second as a number. |
| pm | boolean | false | Current pm state as a boolean. |
| focused | boolean | false | Current focused state as a boolean. |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |
| currentView | string | 'date' | Current view state as a string. |
#### DatePickerDateContext [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces.DatePickerDateContext)
Defines current date options in DatePicker component.
| name | type | default | description |
| --- | --- | --- | --- |
| day | number | null | Current date. |
| month | number | null | Current month state. |
| year | number | null | Current year state. |
| today | boolean | null | Current today state of the calendar's day. |
| selectable | boolean | null | Selectable state of the day. |
#### DatePickerContext [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces.DatePickerContext)
Defines current options in DatePicker component.
| name | type | default | description |
| --- | --- | --- | --- |
| date | [DatePickerDateContext](https://primevue.org/datepicker/#api.datepicker.interfaces.DatePickerDateContext) | null | Current date. |
| today | boolean | false | Current today state of the calendar's day. |
| otherMonth | boolean | null | Current other month state of the calendar's day. |
| selected | boolean | false | Current selected state of the calendar's day or month or year. |
| disabled | boolean | false | Current disabled state of the calendar's day or month or year. |
| month | [DatePickerMonthOptions](https://primevue.org/datepicker/#api.datepicker.interfaces.DatePickerMonthOptions) | null | Current month state. |
| monthIndex | number | null | Current month index state. |
| year | [DatePickerYearOptions](https://primevue.org/datepicker/#api.datepicker.interfaces.DatePickerYearOptions) | null | Current year state. |
#### DatePickerMonthOptions [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces.DatePickerMonthOptions)
Defines current month options.
| name | type | default | description |
| --- | --- | --- | --- |
| value | string | null | Month value. |
| selectable | boolean | null | Selectable state of the month. |
#### DatePickerYearOptions [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces.DatePickerYearOptions)
Defines current year options.
| name | type | default | description |
| --- | --- | --- | --- |
| value | number | null | Year value. |
| selectable | boolean | null | Selectable state of the month. |
#### DatePickerDateSlotOptions [\#](https://primevue.org/datepicker/\#api.datepicker.interfaces.DatePickerDateSlotOptions)
Defines valid options of the date slot in DatePicker component.
| name | type | default | description |
| --- | --- | --- | --- |
| day | number | null | Current date. |
| month | number | null | Current month state. |
| year | number | null | Current year state. |
| today | boolean | null | Current today state of the calendar's day. |
| selectable | boolean | null | Selectable state of the day. |
## Types [\#](https://primevue.org/datepicker/\#api.datepicker.types)
Defines the custom types used by the module.
#### DatePickerPassThroughOptionType [\#](https://primevue.org/datepicker/\#api.datepicker.types.DatePickerPassThroughOptionType)
| values |
| --- |
| DatePickerPassThroughAttributes \| (options: DatePickerPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### DatePickerPassThroughTransitionType [\#](https://primevue.org/datepicker/\#api.datepicker.types.DatePickerPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: DatePickerPassThroughMethodOptions) => TransitionProps \| undefined |
#### DatePickerEmits [\#](https://primevue.org/datepicker/\#api.datepicker.types.DatePickerEmits)
| values |
| --- |
| EmitFn<DatePickerEmitsOptions> |
- DatePicker
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Sakai Vue Template
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![Template Hero Pattern](https://primefaces.org/cdn/primevue/images/templates/sakai/sakai-hero-pattern.png)
Sakai is a free application template for Vue based on Vite and Nuxt.
[Live Demo](https://sakai.primevue.org/) [Source Code](https://github.com/primefaces/sakai-vue)
[Open Issues](https://github.com/primefaces/sakai-vue/issues) [Documentation](https://sakai.primevue.org/documentation)
![Template Dashboard Image 1](https://primefaces.org/cdn/primevue/images/templates/sakai/sakai-hero-dashboard1.png)![Template Dashboard Image 2](https://primefaces.org/cdn/primevue/images/templates/sakai/sakai-hero-dashboard2.png)
![Open Source and Free to Use](https://primefaces.org/cdn/primevue/images/templates/sakai/sakai-github.png)
##### Open Source and Free to Use
Explore Sakai, our versatile, open-source Vue application template. It's free for your every innovation.
![Ready to Use Pages](https://primefaces.org/cdn/primevue/images/templates/sakai/sakai-ready.png)
##### Ready to Use Pages
Landing, login and error pages are provided as template pages to get started with building your app in no time.
## Features
01
01
01
##### Various Free Themes
Sakai has various free themes to choose from; PrimeOne Design, Bootstrap, Material Design with light and dark options.
02
02
02
##### 2 Menu Orientations
Sakai has 2 menu modes; Static and Overlay
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/sakai/features-animation-darkmode.png)
\> npm install or yarn
\> npm run dev or yarn dev
![Vue 3D Logo](https://primefaces.org/cdn/primevue/images/templates/vue-3d-logo.png)
### Vue based on Vite and Nuxt
Sakai is powered by Vite and Nuxt to get started in no time following the best practices.
01
01
01
##### Tailwind CSS
The demo content is built with TailwindCSS, while the application shell uses custom CSS, offering flexibility and efficiency for responsive design.
02
02
02
##### PrimeBlocks
Fully compatible with [PrimeBlocks](https://primeblocks.org/), choose from the wide range of blocks and customize the way you like. Note that PrimeBlocks is not included in the
template and requires a separate purchase.
03
03
03
##### PrimeIcons
Atlantis ships with PrimeIcons, PrimeTek's modern icon library including a wide range of icons for your applications.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/common/tailwind.png)
![Fully Responsive](https://primefaces.org/cdn/primevue/images/templates/sakai/sakai-features2-responsive.png)
## Fully Responsive
Sakai is crafted to provide optimal viewing and interaction experience for a wide range of devices.
![Cross Browser Compatible](https://primefaces.org/cdn/primevue/images/templates/sakai/sakai-features2-compatible.png)
## Cross Browser Compatible
First class support for Firefox, Safari, Chrome and Edge.
![Full SaSS Support](https://primefaces.org/cdn/primevue/images/templates/sakai/sakai-features2-customizable.png)
## Full SaSS Support
Sass is utilized for both the application and components to provide simplicity and flexibility.
![Mobile Experience](https://primefaces.org/cdn/primevue/images/templates/sakai/sakai-features2-mobile.png)
## Mobile Experience
Touch optimized enhanced mobile experience with responsive design.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## SelectButton Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# SelectButton
SelectButton is used to choose single or multiple items from a list using buttons.
## Import [\#](https://primevue.org/selectbutton/\#import)
```javascript
import SelectButton from 'primevue/selectbutton';
```
Copy
## Basic [\#](https://primevue.org/selectbutton/\#basic)
SelectButton is used with the _v-model_ property for two-way value binding along with the _options_ collection. Label and value of an option are defined with the _optionLabel_ and _optionValue_ properties respectively. Note that, when options are simple primitive values such as a string array, no _optionLabel_ and _optionValue_ would be necessary.
One-WayReturn
```markup
<SelectButton v-model="value" :options="options" />
```
Copy
## Forms [\#](https://primevue.org/selectbutton/\#forms)
SelectButton integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
One-WayReturn
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4">
    <div class="flex flex-col gap-1">
        <SelectButton name="selection" :options="options" />
        <Message v-if="$form.selection?.invalid" severity="error">{{ $form.selection.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Multiple [\#](https://primevue.org/selectbutton/\#multiple)
SelectButton allows selecting only one item by default and setting _multiple_ option enables choosing more than one item. In multiple case, model property should be an array.
Option 1Option 2Option 3
```markup
<SelectButton v-model="value" :options="options" optionLabel="name" multiple aria-labelledby="multiple" />
```
Copy
## Template [\#](https://primevue.org/selectbutton/\#template)
Label of an option is used as the display text of an item by default, for custom content support define an _option_ template that gets the option instance as a parameter.
```markup
<SelectButton v-model="value" :options="options" optionLabel="value" dataKey="value" aria-labelledby="custom">
    <template #option="slotProps">
        <i :class="slotProps.option.icon"></i>
    </template>
</SelectButton>
```
Copy
## Sizes [\#](https://primevue.org/selectbutton/\#sizes)
SelectButton provides _small_ and _large_ sizes as alternatives to the base.
BeginnerExpert
BeginnerExpert
BeginnerExpert
```markup
<SelectButton v-model="value1" :options="options" size="small" />
<SelectButton v-model="value2" :options="options" />
<SelectButton v-model="value3" :options="options" size="large" />
```
Copy
## Invalid [\#](https://primevue.org/selectbutton/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
One-WayReturn
```markup
<SelectButton v-model="value" :options="options" aria-labelledby="basic" allowEmpty :invalid="value === null"  />
```
Copy
## Disabled [\#](https://primevue.org/selectbutton/\#disabled)
When _disabled_ is present, the element cannot be edited and focused entirely. Certain options can also be disabled using the _optionDisabled_ property.
OffOn
Option 1Option 2
```markup
<SelectButton v-model="value" :options="options" disabled />
<SelectButton v-model="value" :options="options2" optionDisabled="constant" optionLabel="name" />
```
Copy
## Accessibility [\#](https://primevue.org/selectbutton/\#accessibility)
### Screen Reader
SelectButton component uses ToggleButton internally and has _group_ role. Value to describe the component can be provided via _aria-labelledby_ property.
### Keyboard Support
Keyboard interaction is derived from the native browser handling of checkboxs in a group.
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element in the page tab sequence. |
| _space_ | Toggles the checked state of a button. |
- Import
- Basic
- Forms
- Multiple
- Template
- Sizes
- Invalid
- Disabled
- Accessibility
# SelectButton API
API defines helper props, events and others for the PrimeVue SelectButton module.
## SelectButton [\#](https://primevue.org/selectbutton/\#api.selectbutton)
SelectButton is used to choose single or multiple items from a list using buttons.
### Props [\#](https://primevue.org/selectbutton/\#api.selectbutton.props)
Defines valid properties in SelectButton component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| options | any\[\] | null | An array of selectitems to display as the available options. |  |
| optionLabel | string \| Function | null | Property name or getter function to use as the label of an option. |  |
| optionValue | string \| Function | null | Property name or getter function to use as the value of an option, defaults to the option itself when not defined. |  |
| optionDisabled | string \| Function | null | Property name or getter function to use as the disabled flag of an option, defaults to false when not defined. |  |
| multiple | boolean | false | When specified, allows selecting multiple values. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the element should be disabled. |  |
| dataKey | string | null | A property to uniquely identify an option. |  |
| allowEmpty | boolean | true | Whether selection can be cleared. |  |
| ariaLabelledby | string | null | Identifier of the underlying element. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<SelectButtonPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/selectbutton/\#api.selectbutton.emits)
Defines valid emits in SelectButton component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [SelectButtonChangeEvent](https://primevue.org/selectbutton/#api.selectbutton.events.SelectButtonChangeEvent) | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke on focus. |  |
| blur | event: Event | void | Callback to invoke on blur. |  |
### Slots [\#](https://primevue.org/selectbutton/\#api.selectbutton.slots)
Defines valid slots in SelectButton component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| option | scope: {<br>option: any, // Option instanceindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content for each option. |  |
### Events [\#](https://primevue.org/selectbutton/\#api.selectbutton.events)
Defines the custom events used by the component's emit.
#### SelectButtonChangeEvent [\#](https://primevue.org/selectbutton/\#api.selectbutton.events.SelectButtonChangeEvent)
Custom change event.
See [change](https://primevue.org/selectbutton/#api.selectbutton.emitsoptions.change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| value | any | Single value or an array of values that are selected. |
### Interfaces [\#](https://primevue.org/selectbutton/\#api.selectbutton.interfaces)
Defines the custom interfaces used by the module.
#### SelectButtonPassThroughMethodOptions [\#](https://primevue.org/selectbutton/\#api.selectbutton.interfaces.SelectButtonPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [SelectButtonProps](https://primevue.org/selectbutton/#api.selectbutton.interfaces.SelectButtonProps) | null | Defines valid properties. |
| state | [SelectButtonState](https://primevue.org/selectbutton/#api.selectbutton.interfaces.SelectButtonState) | null | Defines current inline state. |
| context | [SelectButtonContext](https://primevue.org/selectbutton/#api.selectbutton.interfaces.SelectButtonContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### SelectButtonPassThroughOptions [\#](https://primevue.org/selectbutton/\#api.selectbutton.interfaces.SelectButtonPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [SelectButtonPassThroughOptionType](https://primevue.org/selectbutton/#api.selectbutton.types.SelectButtonPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| pcToggleButton | [SelectButtonPassThroughOptionType](https://primevue.org/selectbutton/#api.selectbutton.types.SelectButtonPassThroughOptionType) | null | Used to pass attributes to the ToggleButton component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### SelectButtonPassThroughAttributes [\#](https://primevue.org/selectbutton/\#api.selectbutton.interfaces.SelectButtonPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### SelectButtonState [\#](https://primevue.org/selectbutton/\#api.selectbutton.interfaces.SelectButtonState)
Defines current inline state in SelectButton component.
| name | type | default | description |
| --- | --- | --- | --- |
| focusedIndex | number | null | FocusedIndex state as a number. |
#### SelectButtonContext [\#](https://primevue.org/selectbutton/\#api.selectbutton.interfaces.SelectButtonContext)
Defines current options in SelectButton component.
| name | type | default | description |
| --- | --- | --- | --- |
| active | boolean | false | Current active state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |
| option | any | null | Available option. |
## Types [\#](https://primevue.org/selectbutton/\#api.selectbutton.types)
Defines the custom types used by the module.
#### SelectButtonPassThroughOptionType [\#](https://primevue.org/selectbutton/\#api.selectbutton.types.SelectButtonPassThroughOptionType)
| values |
| --- |
| SelectButtonPassThroughAttributes \| (options: SelectButtonPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### SelectButtonEmits [\#](https://primevue.org/selectbutton/\#api.selectbutton.types.SelectButtonEmits)
| values |
| --- |
| EmitFn<SelectButtonEmitsOptions> |
- SelectButton
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Genesis Template
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![Template Hero Pattern](https://primefaces.org/cdn/primevue/images/templates/genesis/hero-pattern.png)
Multipurpose
Genesis, crafted by Prime, is the ultimate multi-purpose website template built with Vue and Nuxt. It offers unmatched versatility and performance with a suite of example pages to elevate your projects.
[Live Demo](https://genesis.primevue.org/) [Buy Now](https://www.primefaces.org/store/)
[Community](https://github.com/orgs/primefaces/discussions/categories/primevue-templates)
![Template Dashboard Image 1](https://primefaces.org/cdn/primevue/images/templates/genesis/dashboard-2.png)![Template Dashboard Image 2](https://primefaces.org/cdn/primevue/images/templates/genesis/dashboard-1.png)
Basic License
$59
Non Commercial Usage
Single End Product, No Multi-Use
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
Extended License
$590
Commercial Usage
Multiple End Products
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
The download package is a Nuxt-based project containing all application source codes deployed at the live demo. The project code is written in JavaScript.
## Features
01
01
01
##### Various Landing Pages
Choose from 9 templates for industries like SaaS, Travel, and Real Estate, each tailored to specific business needs.
02
02
02
##### Secondary Pages
Includes essential pages like About, Pricing, Blog, and Contact for a complete user experience.
03
03
03
##### Dark & Light Modes
Easily switch between Light and Dark modes to match your aesthetic preferences.
04
04
04
##### Themes
Customize with 16 color themes to align with your brand effortlessly.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/genesis/animation-landing-pages.png)
\> npm install or yarn
\> npm run dev or yarn dev
![Vue 3D Logo](https://primefaces.org/cdn/primevue/images/templates/vue-3d-logo.png)
### Nuxt App with No Configuration
Genesis is powered by Nuxt to get started in no time following the best practices.
![Modern and Sleek Design](https://primefaces.org/cdn/primevue/images/templates/genesis/horizontal-features-img-1.png)
##### Modern and Sleek Design
Enjoy a contemporary design that looks great on all devices.
![SEO & Performance](https://primefaces.org/cdn/primevue/images/templates/genesis/horizontal-features-img-2.png)
##### SEO & Performance
Optimized for fast loading and high search engine rankings.
![Animation / Effects](https://primefaces.org/cdn/primevue/images/templates/genesis/horizontal-features-img-3.png)
##### Animation / Effects
Enhance engagement with captivating animations and effects.
## Features
01
01
01
##### Tailwind
Built with TailwindCSS, offering flexibility and efficiency for responsive design. Enjoy the power of Tailwind, a favorite among developers.
02
02
02
##### PrimeBlocks
Fully compatible with [PrimeBlocks](https://primeblocks.org/), choose from the wide range of blocks and customize the way you like. Note that
[PrimeBlocks](https://primeblocks.org/) is not included in the template and requires a separate purchase.
03
03
03
##### PrimeIcons
Genesis ships with PrimeIcons, PrimeTekâ€™s modern icon library including a wide range of icons for your applications.
04
04
04
##### Figma File
Genesis uses Figma as the design tool. It will be possible to download the Figma file after your purchase. You can
[preview the Figma file](https://www.figma.com/design/bGujrJyznnSatJFMtkXbTN/Preview-%7C-Genesis?node-id=0-1&t=etuXAwkUAEuhJ3p0-1) before the purchase. Note that PrimeVue UI components are
excluded from the Genesis Figma file as they are available in PrimeOne for Figma only.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/genesis/animation-tailwind.png)
![Fully Responsive](https://primefaces.org/cdn/primevue/images/templates/genesis/fully-responsive.png)
## Fully Responsive
Genesis is crafted to provide optimal viewing and interaction experience for a wide range of devices.
![Support](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-lifetime.png)
## Support
PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users
can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and
[Forum](https://github.com/orgs/primefaces/discussions/categories/primevue-templates).
![Top Notch Quality](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-quality.png)
## Top Notch Quality
Superior standards with 100% compatibility for strict mode and linting tools.
![Cross Browser Compatible](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-compatible.png)
## Cross Browser Compatible
First class support for Firefox, Safari, Chrome and Edge.
![Customizable Design](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-customizable.png)
## Customizable Design
Fully customizable with a mixture of Sass and CSS variables.
![Mobile Experience](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-mobile.png)
## Mobile Experience
Touch optimized enhanced mobile experience with responsive design.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## OrderList Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# OrderList
OrderList is used to sort a collection.
## Import [\#](https://primevue.org/orderlist/\#import)
```javascript
import OrderList from 'primevue/orderlist';
```
Copy
## Basic [\#](https://primevue.org/orderlist/\#basic)
OrderList requires an array as its value bound with the _v-model_ directive and _option_ template for its content.
- Bamboo Watch
- Black Watch
- Blue Band
- Blue T-Shirt
- Bracelet
- Brown Purse
- Chakra Bracelet
- Galaxy Earrings
- Game Controller
- Gaming Set
No selected item
```markup
<OrderList v-model="products" dataKey="id" breakpoint="575px" pt:pcListbox:root="w-full sm:w-56">
    <template #option="{ option }">
        {{ option.name }}
    </template>
</OrderList>
```
Copy
## Template [\#](https://primevue.org/orderlist/\#template)
For custom content support define an _option_ template that gets the item instance as a parameter. In addition _header_ slot is provided for further customization.
- ![Bamboo Watch](https://primefaces.org/cdn/primevue/images/product/bamboo-watch.jpg)
Bamboo WatchAccessories
$65
- ![Black Watch](https://primefaces.org/cdn/primevue/images/product/black-watch.jpg)
Black WatchAccessories
$72
- ![Blue Band](https://primefaces.org/cdn/primevue/images/product/blue-band.jpg)
Blue BandFitness
$79
- ![Blue T-Shirt](https://primefaces.org/cdn/primevue/images/product/blue-t-shirt.jpg)
Blue T-ShirtClothing
$29
- ![Bracelet](https://primefaces.org/cdn/primevue/images/product/bracelet.jpg)
BraceletAccessories
$15
- ![Brown Purse](https://primefaces.org/cdn/primevue/images/product/brown-purse.jpg)
Brown PurseAccessories
$120
- ![Chakra Bracelet](https://primefaces.org/cdn/primevue/images/product/chakra-bracelet.jpg)
Chakra BraceletAccessories
$32
- ![Galaxy Earrings](https://primefaces.org/cdn/primevue/images/product/galaxy-earrings.jpg)
Galaxy EarringsAccessories
$34
- ![Game Controller](https://primefaces.org/cdn/primevue/images/product/game-controller.jpg)
Game ControllerElectronics
$99
- ![Gaming Set](https://primefaces.org/cdn/primevue/images/product/gaming-set.jpg)
Gaming SetElectronics
$299
No selected item
```markup
<OrderList v-model="products" dataKey="id" breakpoint="575px" scrollHeight="20rem">
    <template #option="{ option , selected }">
        <div class="flex flex-wrap p-1 items-center gap-4 w-full">
            <img class="w-12 shrink-0 rounded" :src="'https://primefaces.org/cdn/primevue/images/product/' + option.image" :alt="option.name" />
            <div class="flex-1 flex flex-col">
                <span class="font-medium text-sm">{{ option.name }}</span>
                <span :class="['text-sm', { 'text-surface-500 dark:text-surface-400': !selected, 'text-inherit': selected }]">{{ option.category }}</span>
            </div>
            <span class="font-bold sm:ml-8">${{ option.price }}</span>
        </div>
    </template>
</OrderList>
```
Copy
## Accessibility [\#](https://primevue.org/orderlist/\#accessibility)
### Screen Reader
Value to describe the listbox can be provided with _listProps_ by passing _aria-labelledby_ or _aria-label_ props. The list element has a _listbox_ role with the _aria-multiselectable_ attribute. Each list item has an _option_ role with _aria-selected_ and _aria-disabled_ as their attributes.
Controls buttons are _button_ elements with an _aria-label_ that refers to the _aria.moveTop_, _aria.moveUp_, _aria.moveDown_ and _aria.moveBottom_ properties of the [locale](https://primevue.org/configuration/#locale) API by default, alternatively you may use _moveTopButtonProps_, _moveUpButtonProps_, _moveDownButtonProps_ and _moveBottomButtonProps_ to customize the buttons like overriding the default _aria-label_ attributes.
```markup
<span id="lb">Options</span>
<OrderList aria-labelledby="lb" />
<OrderList aria-label="City" />
```
Copy
### ListBox Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the first selected option, if there is none then first option receives the focus. |
| _up arrow_ | Moves focus to the previous option. |
| _down arrow_ | Moves focus to the next option. |
| _enter_ | Toggles the selected state of the focused option. |
| _space_ | Toggles the selected state of the focused option. |
| _home_ | Moves focus to the first option. |
| _end_ | Moves focus to the last option. |
| _shift_ \+ _down arrow_ | Moves focus to the next option and toggles the selection state. |
| _shift_ \+ _up arrow_ | Moves focus to the previous option and toggles the selection state. |
| _shift_ \+ _space_ | Selects the items between the most recently selected option and the focused option. |
| _control_ \+ _shift_ \+ _home_ | Selects the focused options and all the options up to the first one. |
| _control_ \+ _shift_ \+ _end_ | Selects the focused options and all the options down to the first one. |
| _control_ \+ _a_ | Selects all options. |
### Buttons Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Executes button action. |
| _space_ | Executes button action. |
- Import
- Basic
- Template
- Accessibility
# OrderList API
API defines helper props, events and others for the PrimeVue OrderList module.
## OrderList [\#](https://primevue.org/orderlist/\#api.orderlist)
OrderList is used to managed the order of a collection.
### Props [\#](https://primevue.org/orderlist/\#api.orderlist.props)
Defines valid properties in OrderList component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any\[\] | null | Value of the component. |  |
| dataKey | string | null | Name of the field that uniquely identifies the a record in the data. |  |
| selection | any\[\] | null | Selected items in the list. |  |
| metaKeySelection | boolean | false | Defines whether metaKey is required or not for the selection.<br>When true metaKey needs to be pressed to select or unselect an item and<br>when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically. |  |
| autoOptionFocus | boolean | true | Whether to focus on the first visible or selected element. |  |
| focusOnHover | boolean | true | When enabled, the focus is placed on the hovered option. |  |
| listStyle | any | null | Inline style of the the list element. |  |
| responsive | boolean | true | Whether the list optimizes layout based on screen size. |  |
| breakpoint | string | 960px | The breakpoint to define the maximum width boundary when responsiveness is enabled. |  |
| striped | boolean | false | Whether to displays rows with alternating colors. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| scrollHeight | string | 14rem | Height of the viewport, a scrollbar is defined if height of list exceeds this value. |  |
| buttonProps | object | null | Used to pass all properties of the ButtonProps to the button inside the component. |  |
| moveUpButtonProps | object | null | Used to pass all properties of the ButtonProps to the move up button inside the component. |  |
| moveTopButtonProps | object | null | Used to pass all properties of the ButtonProps to the move top button inside the component. |  |
| moveDownButtonProps | object | null | Used to pass all properties of the ButtonProps to the move down button inside the component. |  |
| moveBottomButtonProps | object | null | Used to pass all properties of the ButtonProps to the move bottom button inside the component. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive list element. |  |
| ariaLabelledby | string | null | Identifier of the underlying list element. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<OrderListPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/orderlist/\#api.orderlist.emits)
Defines valid slots in OrderList component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any\[\] | void | Emitted when the value changes. |  |
| update:selection | value: any\[\] | void | Emitted when the selection changes. |  |
| reorder | event: [OrderListReorderEvent](https://primevue.org/orderlist/#api.orderlist.events.OrderListReorderEvent) | void | Callback to invoke when the list is reordered. |  |
| selection-change | event: [OrderListSelectionChangeEvent](https://primevue.org/orderlist/#api.orderlist.events.OrderListSelectionChangeEvent) | void | Callback to invoke when selection changes. |  |
### Slots [\#](https://primevue.org/orderlist/\#api.orderlist.slots)
Defines valid slots in OrderList component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| header |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| item | scope: {<br>item: any, // Item of the componentselected: boolean, // Selection stateindex: number, // Index of the item.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| option | scope: {<br>option: any, // Option of the componentselected: boolean, // Selection stateindex: number, // Index of the option.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option template. |  |
| controlsstart |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom controls start template. |  |
| controlsend |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom controls end template. |  |
| moveupicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move up icon template. |  |
| movetopicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move top icon template. |  |
| movedownicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move down icon template. |  |
| movebottomicon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom move bottom icon template. |  |
### Events [\#](https://primevue.org/orderlist/\#api.orderlist.events)
Defines the custom events used by the component's emit.
#### OrderListReorderEvent [\#](https://primevue.org/orderlist/\#api.orderlist.events.OrderListReorderEvent)
Custom reorder event
See [reorder](https://primevue.org/orderlist/#api.orderlist.emitsoptions.reorder)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | any\[\] | Ordered list |
| direction | string | Direction of the change; 'up', 'down', 'bottom', 'top' |
#### OrderListSelectionChangeEvent [\#](https://primevue.org/orderlist/\#api.orderlist.events.OrderListSelectionChangeEvent)
Custom selection change event
See [selection-change](https://primevue.org/orderlist/#api.orderlist.emitsoptions.selection-change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | any\[\] | Ordered list |
### Interfaces [\#](https://primevue.org/orderlist/\#api.orderlist.interfaces)
Defines the custom interfaces used by the module.
#### OrderListPassThroughMethodOptions [\#](https://primevue.org/orderlist/\#api.orderlist.interfaces.OrderListPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [OrderListProps](https://primevue.org/orderlist/#api.orderlist.interfaces.OrderListProps) | null | Defines valid properties. |
| state | [OrderListState](https://primevue.org/orderlist/#api.orderlist.interfaces.OrderListState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### OrderListSharedPassThroughMethodOptions [\#](https://primevue.org/orderlist/\#api.orderlist.interfaces.OrderListSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [OrderListProps](https://primevue.org/orderlist/#api.orderlist.interfaces.OrderListProps) | null | Defines valid properties. |
| state | [OrderListState](https://primevue.org/orderlist/#api.orderlist.interfaces.OrderListState) | null | Defines current inline state. |
#### OrderListPassThroughOptions [\#](https://primevue.org/orderlist/\#api.orderlist.interfaces.OrderListPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [OrderListPassThroughOptionType](https://primevue.org/orderlist/#api.orderlist.types.OrderListPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| controls | [OrderListPassThroughOptionType](https://primevue.org/orderlist/#api.orderlist.types.OrderListPassThroughOptionType) | null | Used to pass attributes to the controls' DOM element. |
| pcMoveUpButton | any | null | Used to pass attributes to the Button component. |
| pcMoveTopButton | any | null | Used to pass attributes to the Button component. |
| pcMoveDownButton | any | null | Used to pass attributes to the Button component. |
| pcMoveBottomButton | any | null | Used to pass attributes to the Button component. |
| pcListbox | any | null | Used to pass attributes to the Listbox component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [OrderListPassThroughTransitionType](https://primevue.org/orderlist/#api.orderlist.types.OrderListPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### OrderListPassThroughAttributes [\#](https://primevue.org/orderlist/\#api.orderlist.interfaces.OrderListPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### OrderListState [\#](https://primevue.org/orderlist/\#api.orderlist.interfaces.OrderListState)
Defines current inline state in OrderList component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| d\_selection | any\[\] | null | Current id state as a string. |
## Types [\#](https://primevue.org/orderlist/\#api.orderlist.types)
Defines the custom types used by the module.
#### OrderListPassThroughOptionType [\#](https://primevue.org/orderlist/\#api.orderlist.types.OrderListPassThroughOptionType)
| values |
| --- |
| OrderListPassThroughAttributes \| (options: OrderListPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### OrderListPassThroughTransitionType [\#](https://primevue.org/orderlist/\#api.orderlist.types.OrderListPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: OrderListPassThroughMethodOptions) => TransitionProps \| undefined |
#### OrderListEmits [\#](https://primevue.org/orderlist/\#api.orderlist.types.OrderListEmits)
| values |
| --- |
| EmitFn<OrderListEmitsOptions> |
- OrderList
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeLand Contribution Error
4
4
Page Not Found
[GO TO HOMEPAGE](https://primevue.org/)
## PrimeVue and Tailwind Integration
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Tailwind CSS
Integration between PrimeVue and Tailwind CSS both in styled and unstyled modes.
## Overview [\#](https://primevue.org/tailwind/\#overview)
Tailwind CSS is a popular CSS framework based on a utility-first design. The core provides flexible CSS classes with predefined CSS rules to build your own UI elements. For example, instead of an opinionated _btn_ class as in Bootstrap, Tailwind offers primitive classes like _bg-blue-500_, _rounded_ and _p-4_ to apply a button.
Tailwind is an outstanding CSS library, however it lacks a true comprehensive UI suite when combined with Vue.js, this is where PrimeVue comes in by providing a wide range of highly accessible and feature rich UI component library. The core of PrimeVue does not depend on Tailwind CSS, instead we provide the necessary integration points such as the primeui tailwind plugin and the Tailwind version for the unstyled mode.
Tailwind CSS and PrimeVue can be used together via two main approaches. Simple approach is using Tailwind CSS **around** PrimeVue components for layout purposes as demonstrated in the samples section below, the advanced approach takes the integration a step further by allowing Tailwind CSS **within** the component internals to style the entire UI suite in [unstyled mode](https://primevue.org/theming/unstyled).
## Tailwind Theme [\#](https://primevue.org/tailwind/\#tailwind-theme)
PrimeTek offers the Tailwind CSS version of the entire PrimeVue UI suite in [unstyled mode](https://primevue.org/theming/unstyled) based on the _@apply_ directive with IntelliSense support. Visit the [Tailwind version of PrimeVue](https://tailwind.primevue.org/) for the documentation, demos and additional resources.
Tailwind version of PrimeVue instead of the default styled mode is not tested with Tailwind v4. For the next-gen version of this project, we are building a new UI Component library based on the code ownership model where components are located inside your project source instead of imported from npm. This new library is powered by Unstyled PrimeVue Core and Tailwind v4.
## Plugin [\#](https://primevue.org/tailwind/\#plugin)
The [tailwindcss-primeui](https://www.npmjs.com/package/tailwindcss-primeui) is an official plugin by PrimeTek to provide first class integration between a Prime UI library like PrimeVue and Tailwind CSS. It is designed to work both in styled and unstyled modes. In styled mode, for instance the semantic colors such as primary and surfaces are provided as Tailwind utilities e.g. _bg-primary_, _text-surface-500_, _text-muted-color_.
If you haven't already done so, start by integrating Tailwind into your project. Detailed steps for this process can be found in the Tailwind [documentation](https://tailwindcss.com/). After successfully installing Tailwind, proceed with the installation of the PrimeUI plugin. This single npm package comes with two libraries: the CSS version is compatible with Tailwind v4, while the JS version is designed for Tailwind v3.
```javascript
npm i tailwindcss-primeui
```
Copy
### Tailwind v4
In the CSS file that contains the tailwindcss import, add the _tailwindcss-primeui_ import as well.
```javascript
@import "tailwindcss";
@import "tailwindcss-primeui";
```
Copy
### Tailwind v3
Use the plugins option in your Tailwind config file to configure the plugin.
```javascript
// tailwind.config.js
import PrimeUI from 'tailwindcss-primeui';
export default {
    // ...
    plugins: [PrimeUI]
};
```
Copy
## Extensions [\#](https://primevue.org/tailwind/\#extensions)
The plugin extends the default configuration with a new set of utilities whose values are derived from the PrimeVue theme in use. All variants and breakpoints are supported e.g. _dark:sm:hover:bg-primary_.
### Color Palette
| Class | Property |
| --- | --- |
| primary-\[50-950\] | Primary color palette. |
| surface-\[0-950\] | Surface color palette. |
| primary | Default primary color. |
| primary-contrast | Default primary contrast color. |
| primary-emphasis | Default primary emphasis color. |
| border-surface | Default primary emphasis color. |
| bg-emphasis | Emphasis background e.g. hovered element. |
| bg-highlight | Highlight background. |
| bg-highlight-emphasis | Highlight background with emphasis. |
| rounded-border | Border radius. |
| text-color | Text color with emphasis. |
| text-color-emphasis | Default primary emphasis color. |
| text-muted-color | Secondary text color. |
| text-muted-color-emphasis | Secondary text color with emphasis. |
## Dark Mode [\#](https://primevue.org/tailwind/\#darkmode)
In styled mode, PrimeVue uses the _system_ as the default _darkModeSelector_ in theme configuration. If you have a dark mode switch in your application, ensure that _darkModeSelector_ is aligned with the Tailwind dark variant for seamless integration. Note that, this particular configuration isn't required if you're utilizing the default system color scheme.
Suppose that, the darkModeSelector is set as _my-app-dark_ in PrimeVue.
```javascript
import PrimeVue from 'primevue/config';
import Aura from '@primeuix/themes/aura';
const app = createApp(App);
app.use(PrimeVue, {
    theme: {
        preset: Aura,
        options: {
            darkModeSelector: '.my-app-dark',
        }
    }
 });
```
Copy
### Tailwind v4
Add a custom variant for dark with a custom selector.
```javascript
@import "tailwindcss";
@import "tailwindcss-primeui";
@custom-variant dark (&:where(.my-app-dark, .my-app-dark *));     //dark mode configuration
```
Copy
### Tailwind v3
Use the plugins option in your Tailwind config file to configure the plugin.
```javascript
// tailwind.config.js
import PrimeUI from 'tailwindcss-primeui';
export default {
    darkMode: ['selector', '[class~="my-app-dark"]'],           //dark mode configuration
    plugins: [PrimeUI]
};
```
Copy
## Override [\#](https://primevue.org/tailwind/\#override)
Tailwind utilities may not be able to override the default styling of components due to css specificity, there are two possible solutions; Important and CSS Layer.
### Important
Use the _!_ as a prefix to enforce the styling. This is not the recommend approach, and should be used as last resort to avoid adding unnecessary style classes to your bundle.
##### Tailwind v4
```markup
<InputText placeholder="Overriden" class="p-8!" />
```
Copy
##### Tailwind v3
```markup
<InputText placeholder="Overriden" class="!p-8" />
```
Copy
### CSS Layer
CSS Layer provides control over the css specificity so that Tailwind utilities can safely override components.
##### Tailwind v4
Ensure _primevue_ layer is after _theme_ and _base_, but before the other Tailwind layers such as _utilities_.
```javascript
import PrimeVue from 'primevue/config';
import Aura from '@primeuix/themes/aura';
const app = createApp(App);
app.use(PrimeVue, {
    theme: {
        preset: Aura,
        options: {
            cssLayer: {
                name: 'primevue',
                order: 'theme, base, primevue'
            }
        }
    }
 });
```
Copy
No change in the CSS configuration is required.
```javascript
@import "tailwindcss";
@import "tailwindcss-primeui";
```
Copy
##### Tailwind v3
The _primevue_ layer should be between base and utilities.
```javascript
import PrimeVue from 'primevue/config';
import Aura from '@primeuix/themes/aura';
const app = createApp(App);
app.use(PrimeVue, {
    theme: {
        preset: Aura,
        options: {
            cssLayer: {
                name: 'primevue',
                order: 'tailwind-base, primevue, tailwind-utilities'
            }
        }
    }
 });
```
Copy
Tailwind v3 does not use native _layer_ so needs to be defined with CSS.
```javascript
@layer tailwind-base, primevue, tailwind-utilities;
@layer tailwind-base {
  @tailwind base;
}
@layer tailwind-utilities {
  @tailwind components;
  @tailwind utilities;
}
```
Copy
## Samples [\#](https://primevue.org/tailwind/\#samples)
Example uses cases with PrimeVue and Tailwind CSS.
### Color Palette [\#](https://primevue.org/tailwind/\#colorpalette)
PrimeVue color palette as utility classes.
- primary
0
50
100
200
300
400
500
600
700
800
900
950
- surface
0
50
100
200
300
400
500
600
700
800
900
950
primary
highlight
box
```markup
<div class="flex flex-col gap-12">
    <div class="flex gap-6 flex-wrap">
        <div class="rounded-border p-4 border border-transparent flex items-center justify-center bg-primary hover:bg-primary-emphasis text-primary-contrast font-medium flex-auto transition-colors">primary</div>
        <div class="rounded-border p-4 border border-transparent flex items-center justify-center bg-highlight hover:bg-highlight-emphasis font-medium flex-auto transition-colors">highlight</div>
        <div class="rounded-border p-4 border border-surface flex items-center justify-center text-muted-color hover:text-color hover:bg-emphasis font-medium flex-auto transition-colors">box</div>
    </div>
</div>
```
Copy
### Form [\#](https://primevue.org/tailwind/\#form)
Using Tailwind utilities for the responsive layout of a form with PrimeVue components.
Firstname
Lastname
Date
Country
Select a Country
Message
```markup
<div class="flex flex-col gap-6 w-full sm:w-auto">
    <div class="flex flex-col sm:flex-row sm:items-center gap-6">
        <div class="flex-auto">
            <label for="firstname" class="block font-semibold mb-2">Firstname</label>
            <InputText id="firstname" class="w-full" />
        </div>
        <div class="flex-auto">
            <label for="lastname" class="block font-semibold mb-2">Lastname</label>
            <InputText id="lastname" class="w-full" />
        </div>
    </div>
    <div class="flex flex-col sm:flex-row sm:items-center gap-6">
        <div class="flex-1">
            <label for="date" class="block font-semibold mb-2">Date</label>
            <DatePicker inputId="date" class="w-full" />
        </div>
        <div class="flex-1">
            <label for="country" class="block font-semibold mb-2">Country</label>
            <Select v-model="selectedCountry" inputId="country" :options="countries" optionLabel="name" placeholder="Select a Country" class="w-full">
                <template #value="slotProps">
                    <div v-if="slotProps.value" class="flex items-center">
                        <img :alt="slotProps.value.label" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`mr-2 flag flag-${slotProps.value.code.toLowerCase()}`" style="width: 18px" />
                        <div>{{ slotProps.value.name }}</div>
                    </div>
                    <span v-else>
                        {{ slotProps.placeholder }}
                    </span>
                </template>
                <template #option="slotProps">
                    <div class="flex items-center">
                        <img :alt="slotProps.option.label" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`mr-2 flag flag-${slotProps.option.code.toLowerCase()}`" style="width: 18px" />
                        <div>{{ slotProps.option.name }}</div>
                    </div>
                </template>
            </Select>
        </div>
    </div>
    <div class="flex-auto">
        <label for="message" class="block font-semibold mb-2">Message</label>
        <Textarea id="message" class="w-full" rows="4" />
    </div>
</div>
```
Copy
### Headless [\#](https://primevue.org/tailwind/\#headless)
A headless PrimeVue dialog with a custom UI.
Login
```markup
<Button label="Login" icon="pi pi-user" @click="visible = true" />
<Dialog v-model:visible="visible" pt:root:class="!border-0 !bg-transparent" pt:mask:class="backdrop-blur-sm">
    <template #container="{ closeCallback }">
        <div class="flex flex-col px-8 py-8 gap-6 rounded-2xl" style="background-image: radial-gradient(circle at left top, var(--p-primary-400), var(--p-primary-700))">
            <svg width="35" height="40" viewBox="0 0 35 40" fill="none" xmlns="http://www.w3.org/2000/svg" class="block mx-auto">
                <path
                    d="M25.87 18.05L23.16 17.45L25.27 20.46V29.78L32.49 23.76V13.53L29.18 14.73L25.87 18.04V18.05ZM25.27 35.49L29.18 31.58V27.67L25.27 30.98V35.49ZM20.16 17.14H20.03H20.17H20.16ZM30.1 5.19L34.89 4.81L33.08 12.33L24.1 15.67L30.08 5.2L30.1 5.19ZM5.72 14.74L2.41 13.54V23.77L9.63 29.79V20.47L11.74 17.46L9.03 18.06L5.72 14.75V14.74ZM9.63 30.98L5.72 27.67V31.58L9.63 35.49V30.98ZM4.8 5.2L10.78 15.67L1.81 12.33L0 4.81L4.79 5.19L4.8 5.2ZM24.37 21.05V34.59L22.56 37.29L20.46 39.4H14.44L12.34 37.29L10.53 34.59V21.05L12.42 18.23L17.45 26.8L22.48 18.23L24.37 21.05ZM22.85 0L22.57 0.69L17.45 13.08L12.33 0.69L12.05 0H22.85Z"
                    fill="var(--p-primary-700)"
                />
                <path
                    d="M30.69 4.21L24.37 4.81L22.57 0.69L22.86 0H26.48L30.69 4.21ZM23.75 5.67L22.66 3.08L18.05 14.24V17.14H19.7H20.03H20.16H20.2L24.1 15.7L30.11 5.19L23.75 5.67ZM4.21002 4.21L10.53 4.81L12.33 0.69L12.05 0H8.43002L4.22002 4.21H4.21002ZM21.9 17.4L20.6 18.2H14.3L13 17.4L12.4 18.2L12.42 18.23L17.45 26.8L22.48 18.23L22.5 18.2L21.9 17.4ZM4.79002 5.19L10.8 15.7L14.7 17.14H14.74H15.2H16.85V14.24L12.24 3.09L11.15 5.68L4.79002 5.2V5.19Z"
                    fill="var(--p-primary-200)"
                />
            </svg>
            <div class="inline-flex flex-col gap-2">
                <label for="username" class="text-primary-50 font-semibold">Username</label>
                <InputText id="username" class="!bg-white/20 !border-0 !p-4 !text-primary-50 w-80"></InputText>
            </div>
            <div class="inline-flex flex-col gap-2">
                <label for="password" class="text-primary-50 font-semibold">Password</label>
                <InputText id="password" class="!bg-white/20 !border-0 !p-4 !text-primary-50 w-80" type="password"></InputText>
            </div>
            <div class="flex items-center gap-4">
                <Button label="Cancel" @click="closeCallback" text class="!p-4 w-full !text-primary-50 !border !border-white/30 hover:!bg-white/10"></Button>
                <Button label="Sign-In" @click="closeCallback" text class="!p-4 w-full !text-primary-50 !border !border-white/30 hover:!bg-white/10"></Button>
            </div>
        </div>
    </template>
</Dialog>
```
Copy
### Starter [\#](https://primevue.org/tailwind/\#starter)
The Tailwind v4 and PrimeVue [starter example](https://github.com/primefaces/primevue-examples/tree/main/vite-tailwindv4) is available to demonstrate the integration setup with an example dashboard.
## Animations [\#](https://primevue.org/tailwind/\#animations)
The plugin also adds extended animation utilities that can be used with the [styleclass](https://primevue.org/styleclass) and [animateonscroll](https://primevue.org/animateonscroll) directives.
Select One
```markup
<Select v-model="animation" :options="animations" placeholder="Select One" class="w-full sm:w-44" />
<div class="py-8 overflow-hidden">
    <div :class="`rounded-border bg-primary w-16 h-16 mx-auto animate-${animation} animate-once animate-duration-1000`"></div>
</div>
```
Copy
### Enter and Leave
In addition to the prebuilt animations, you may also build your own declaratively using the _animate-enter_ and _animate-leave_ along with the opacity, rotate, scale and translate parameters. These animations work perfectly with the [AnimateOnScroll](https://primevue.org/animateonscroll) directive, visit this directive for various examples.
[Learn More](https://primevue.org/animateonscroll)
### Animations
| Class | Property |
| --- | --- |
| animate-enter | animation-name: enter; <br>--p-enter-opacity: initial; <br>--p-enter-scale: initial; <br>--p-enter-rotate: initial; <br>--p-enter-translate-x: initial; <br>--p-enter-translate-y: initial; |
| animate-leave | animation-name: leave; <br>--p-leave-opacity: initial; <br>--p-leave-scale: initial; <br>--p-leave-rotate: initial; <br>--p-leave-translate-x: initial; <br>--p-leave-translate-y: initial; |
| animate-leave | fadein 0.15s linear |
| animate-fadein | fadein 0.15s linear |
| animate-fadeout | fadeout 0.15s linear |
| animate-slidedown | slidedown 0.45s ease-in-out |
| animate-slideup | slideup 0.45s cubic-bezier(0, 1, 0, 1) |
| animate-scalein | scalein 0.15s linear |
| animate-fadeinleft | fadeinleft 0.15s linear |
| animate-fadeoutleft | fadeoutleft 0.15s linear |
| animate-fadeinright | fadeinright 0.15s linear |
| animate-fadeoutright | fadeoutright 0.15s linear |
| animate-fadeinup | fadeinup 0.15s linear |
| animate-fadeoutup | fadeoutup 0.15s linear |
| animate-fadeindown | fadeindown 0.15s linear |
| animate-fadeoutup | fadeoutup 0.15s linear |
| animate-width | width 0.15s linear |
| animate-flip | flip 0.15s linear |
| animate-flipup | flipup 0.15s linear |
| animate-flipleft | fadein 0.15s linear |
| animate-flipright | flipright 0.15s linear |
| animate-zoomin | zoomin 0.15s linear |
| animate-zoomindown | zoomindown 0.15s linear |
| animate-zoominleft | zoominleft 0.15s linear |
| animate-zoominright | zoominright 0.15s linear |
| animate-zoominup | zoominup 0.15s linear |
### Animation Duration
| Class | Property |
| --- | --- |
| animate-duration-0 | animation-duration: 0s |
| animate-duration-75 | animation-duration: 75ms |
| animate-duration-100 | animation-duration: 100ms |
| animate-duration-200 | animation-duration: 200ms |
| animate-duration-300 | animation-duration: 300ms |
| animate-duration-400 | animation-duration: 400ms |
| animate-duration-500 | animation-duration: 500ms |
| animate-duration-700 | animation-duration: 700ms |
| animate-duration-1000 | animation-duration: 1000ms |
| animate-duration-2000 | animation-duration: 2000ms |
| animate-duration-3000 | animation-duration: 300ms |
| animate-duration-\[value\] | animation-duration: value |
### Animation Delay
| Class | Property |
| --- | --- |
| animate-delay-none | animation-duration: 0s |
| animate-delay-75 | animation-delay: 75ms |
| animate-delay-100 | animation-delay: 100ms |
| animate-delay-150 | animation-delay: 150ms |
| animate-delay-200 | animation-delay: 200ms |
| animate-delay-300 | animation-delay: 300ms |
| animate-delay-400 | animation-delay: 400ms |
| animate-delay-500 | animation-delay: 500ms |
| animate-delay-700 | animation-delay: 700ms |
| animate-delay-1000 | animation-delay: 1000ms |
### Iteration Count
| Class | Property |
| --- | --- |
| animate-infinite | animation-iteration-count: infinite |
| animate-once | animation-iteration-count: 1 |
| animate-twice | animation-iteration-count: 2 |
### Direction
| Class | Property |
| --- | --- |
| animate-normal | animation-direction: normal |
| animate-reverse | animation-direction: reverse |
| animate-alternate | animation-direction: alternate |
| animate-alternate-reverse | animation-direction: alternate-reverse |
### Timing Function
| Class | Property |
| --- | --- |
| animate-ease-linear | animation-timing-function: linear |
| animate-ease-in | animation-timing-function: cubic-bezier(0.4, 0, 1, 1) |
| animate-ease-out | animation-timing-function: cubic-bezier(0, 0, 0.2, 1) |
| animate-ease-in-out | animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1) |
### Fill Mode
| Class | Property |
| --- | --- |
| animate-fill-none | animation-fill-mode: normal |
| animate-fill-forwards | animation-fill-mode: forwards |
| animate-fill-backwards | animation-fill-mode: backwards |
| animate-fill-both | animation-fill-mode: both |
### Play State
| Class | Property |
| --- | --- |
| animate-running | animation-play-state: running |
| animate-paused | animation-play-state: paused |
### Backface Visibility State
| Class | Property |
| --- | --- |
| backface-visible | backface-visibility: visible |
| backface-hidden | backface-visibility: hidden |
### Fade In and Out
Values are derived from the Tailwind CSS [opacity](https://tailwindcss.com/docs/opacity) e.g. _fade-in-50_ and _fade-out-20_. Arbitrary values such as _fade-in-\[15\]_ are also supported.
| Class | Property |
| --- | --- |
| fade-in-{value} | --p-enter-opacity: {value} |
| fade-out-{value} | --p-leave-opacity: {value} |
### Zoom In and Out
Values are derived from the Tailwind CSS [scale](https://tailwindcss.com/docs/scale) e.g. _zoom-in-50_ and _zoom-out-75_. Arbitrary values such as _zoom-in-\[0.8\]_ are also supported.
| Class | Property |
| --- | --- |
| zoom-in-{value} | --p-enter-scale: {value} |
| zoom-out-{value} | --p-leave-scale: {value} |
### Spin In and Out
Values are derived from the Tailwind CSS [rotate](https://tailwindcss.com/docs/rotate) e.g. _spin-in-45_ and _spin-out-90_. Arbitrary values such as _spin-in-\[60deg\]_ are also supported.
| Class | Property |
| --- | --- |
| spin-in-{value} | --p-enter-rotate: {value} |
| spin-out-{value} | --p-leave-rotate: {value} |
### Slide In and Out
Values are derived from the Tailwind CSS [translate](https://tailwindcss.com/docs/translate) e.g. _slide-in-from-t-50_ and _slide-out-to-l-8_. Arbitrary values such as _slide-in-from-b-\[8px\]_ are also supported.
| Class | Property |
| --- | --- |
| slide-in-from-t-{value} | --p-enter-translate-y: -{value} |
| slide-in-from-b-{value} | --p-enter-translate-y: {value} |
| slide-in-from-l-{value} | --p-enter-translate-x: -{value} |
| slide-in-from-r-{value} | --p-enter-translate-x: {value} |
| slide-out-to-t-{value} | --p-leave-translate-y: -{value} |
| slide-out-to-b-{value} | --p-leave-translate-y: {value} |
| slide-out-to-l-{value} | --p-leave-translate-x: -{value} |
| slide-out-to-r-{value} | --p-leave-translate-x: {value} |
- Overview
- Tailwind Theme
- Plugin
- Extensions
- Dark Mode
- Override
- Samples
  - Color Palette
  - Form
  - Headless
  - Starter
- Animations
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## InputMask Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# InputMask
InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.
## Import [\#](https://primevue.org/inputmask/\#import)
```javascript
import InputMask from 'primevue/inputmask';
```
Copy
## Basic [\#](https://primevue.org/inputmask/\#basic)
InputMask is used with the _v-model_ property for two-way value binding.
```markup
<InputMask id="basic" v-model="value" mask="99-999999" placeholder="99-999999" />
```
Copy
## Forms [\#](https://primevue.org/inputmask/\#forms)
InputMask integrates seamlessly with the [PrimeVue Forms](https://primevue.org/forms) library.
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex flex-col gap-4 w-full sm:w-56">
    <div class="flex flex-col gap-1">
        <InputMask name="serialNumber" mask="99-999999" placeholder="99-999999" fluid />
        <Message v-if="$form.serialNumber?.invalid" severity="error" size="small" variant="simple">{{ $form.serialNumber.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Mask [\#](https://primevue.org/inputmask/\#mask)
Mask format can be a combination of the following definitions; _a_ for alphabetic characters, _9_ for numeric characters and _\*_ for alphanumberic characters. In addition, formatting characters like _(_, _)_ , _-_ are also accepted.
SSN
Phone
Serial
```markup
<div class="flex-auto">
    <label for="ssn" class="font-bold block mb-2">SSN</label>
    <InputMask id="ssn" v-model="value1" mask="999-99-9999" placeholder="999-99-9999" fluid />
</div>
<div class="flex-auto">
    <label for="phone" class="font-bold block mb-2">Phone</label>
    <InputMask id="phone" v-model="value2" mask="(999) 999-9999" placeholder="(999) 999-9999" fluid />
</div>
<div class="flex-auto">
    <label for="serial" class="font-bold block mb-2">Serial</label>
    <InputMask id="serial" v-model="value3" mask="a*-999-a999" placeholder="a*-999-a999" fluid />
</div>
```
Copy
## Optional [\#](https://primevue.org/inputmask/\#optional)
When the input does not complete the mask definition, it is cleared by default. Use _autoClear_ property to control this behavior. In addition, _?_ is used to mark anything after the question mark optional.
```markup
<InputMask v-model="value" mask="(999) 999-9999? x99999" placeholder="(999) 999-9999? x99999" />
```
Copy
## SlotChar [\#](https://primevue.org/inputmask/\#slotchar)
Default placeholder for a mask is underscore that can be customized using _slotChar_ property.
```markup
<InputMask id="basic" v-model="value" placeholder="99/99/9999" mask="99/99/9999" slotChar="mm/dd/yyyy" />
```
Copy
## Filled [\#](https://primevue.org/inputmask/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
```markup
<InputMask id="basic" v-model="value" variant="filled" mask="99-999999" placeholder="99-999999" />
```
Copy
## Float Label [\#](https://primevue.org/inputmask/\#floatlabel)
FloatLabel visually integrates a label with its form element. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
Over LabelIn LabelOn Label
```markup
<FloatLabel>
    <InputMask id="over_label" v-model="value1" mask="999-99-9999" />
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel variant="in">
    <InputMask id="in_label" v-model="value2" mask="999-99-9999" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel variant="on">
    <InputMask id="on_label" v-model="value3" mask="999-99-9999" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/inputmask/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
SSN
```markup
<IftaLabel>
    <InputMask id="ssn" v-model="value" mask="999-99-9999" variant="filled" />
    <label for="ssn">SSN</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/inputmask/\#sizes)
InputMask provides _small_ and _large_ sizes as alternatives to the base.
```markup
<InputMask v-model="value1" placeholder="Small" size="small" mask="99-999999" />
<InputMask v-model="value2" placeholder="Normal" mask="99-999999" />
<InputMask v-model="value3" placeholder="Large" size="large" mask="99-999999" />
```
Copy
## Invalid [\#](https://primevue.org/inputmask/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
```markup
<InputMask v-model="value1" mask="99-999999" placeholder="Serial Key" :invalid="!value1" />
<InputMask v-model="value2" mask="99-999999" placeholder="Serial Key" :invalid="!value2" variant="filled" />
```
Copy
## Disabled [\#](https://primevue.org/inputmask/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
```markup
<InputMask mask="99-999999" placeholder="Disabled" disabled />
```
Copy
## Accessibility [\#](https://primevue.org/inputmask/\#accessibility)
### Screen Reader
InputMask component renders a native input element that implicitly includes any passed prop. Value to describe the component can either be provided via _label_ tag combined with _id_ prop or using _aria-labelledby_, _aria-label_ props.
```markup
<label for="date">Date</label>
<InputMask id="date" />
<span id="phone">Phone</span>
<InputMask aria-labelledby="phone" />
<InputMask aria-label="Age" />
```
Copy
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the input. |
- Import
- Basic
- Forms
- Mask
- Optional
- SlotChar
- Filled
- Float Label
- Ifta Label
- Sizes
- Invalid
- Disabled
- Accessibility
# InputMask API
API defines helper props, events and others for the PrimeVue InputMask module.
## InputMask [\#](https://primevue.org/inputmask/\#api.inputmask)
InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.
### Props [\#](https://primevue.org/inputmask/\#api.inputmask.props)
Defines valid properties in InputMask component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | string | null | Value of the component. |  |
| defaultValue | string | null | The default value for the input when not controlled by \`modelValue\` . |  |
| slotChar | string | \_ | Placeholder character in mask, default is underscore. |  |
| mask | string | null | Mask pattern. |  |
| id | string | null | Identifier of the element. |  |
| class | string \| object | null | Style class of the input field. |  |
| placeholder | string | null | Placeholder text for the input. |  |
| autoClear | boolean | true | Clears the incomplete value on blur. |  |
| unmask | boolean | false | Defines if model sets the raw unmasked value to bound value or the formatted mask value. |  |
| readonly | boolean | false | Whether the items are clickable or not. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| name | string | null | Name of the input element. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<InputMaskPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/inputmask/\#api.inputmask.emits)
Defines valid emits in InputMask component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: string | void | Emitted when the value changes. |  |
| value-change | value: string | void | Emitted when the value changes in uncontrolled mode. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| keydown | event: Event | void | Callback to invoke when a key is pressed. |  |
### Interfaces [\#](https://primevue.org/inputmask/\#api.inputmask.interfaces)
Defines the custom interfaces used by the module.
#### InputMaskPassThroughMethodOptions [\#](https://primevue.org/inputmask/\#api.inputmask.interfaces.InputMaskPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [InputMaskProps](https://primevue.org/inputmask/#api.inputmask.interfaces.InputMaskProps) | null | Defines valid properties. |
| context | [InputMaskContext](https://primevue.org/inputmask/#api.inputmask.interfaces.InputMaskContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### InputMaskSharedPassThroughMethodOptions [\#](https://primevue.org/inputmask/\#api.inputmask.interfaces.InputMaskSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [InputMaskProps](https://primevue.org/inputmask/#api.inputmask.interfaces.InputMaskProps) | null | Defines valid properties. |
#### InputMaskPassThroughOptions [\#](https://primevue.org/inputmask/\#api.inputmask.interfaces.InputMaskPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | any | null | Used to pass attributes to the InputText component. |
| pcInputText | any | null | Used to pass attributes to the InputText component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### InputMaskPassThroughAttributes [\#](https://primevue.org/inputmask/\#api.inputmask.interfaces.InputMaskPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### InputMaskContext [\#](https://primevue.org/inputmask/\#api.inputmask.interfaces.InputMaskContext)
Defines current options in InputMask component.
| name | type | default | description |
| --- | --- | --- | --- |
| filled | boolean | false | Current filled state of the component as a boolean. |
| disabled | boolean | false | Current disabled state of the component as a boolean. |
## Types [\#](https://primevue.org/inputmask/\#api.inputmask.types)
Defines the custom types used by the module.
#### InputMaskPassThroughOptionType [\#](https://primevue.org/inputmask/\#api.inputmask.types.InputMaskPassThroughOptionType)
| values |
| --- |
| InputMaskPassThroughAttributes \| (options: InputMaskPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### InputMaskEmits [\#](https://primevue.org/inputmask/\#api.inputmask.types.InputMaskEmits)
| values |
| --- |
| EmitFn<InputMaskEmitsOptions> |
- InputMask
  - Props
  - Emits
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## StyleClass Management
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
# StyleClass
StyleClass manages css classes declaratively to during enter/leave animations or just to toggle classes on an element.
## Import [\#](https://primevue.org/styleclass/\#import)
```javascript
import StyleClass from 'primevue/styleclass';
app.directive('styleclass', StyleClass);
```
Copy
## Toggle Class [\#](https://primevue.org/styleclass/\#toggleClass)
StyleClass has two modes, _toggleClass_ to simply add-remove a class and enter/leave animations.
Toggle .p-disabled
```markup
<Button v-styleclass="{ selector: '@next', toggleClass: 'p-disabled' }" label="Toggle p-disabled" />
<InputText />
```
Copy
## Animation [\#](https://primevue.org/styleclass/\#animation)
Classes to apply during enter and leave animations are specified using the _enterFromClass_, _enterActiveClass_, _enterToClass_, _leaveFromClass_, _leaveActiveClass_, _leaveToClass_ properties. In addition in case the target is an overlay, _hideOnOutsideClick_ would be handy to hide the target if outside of the popup is clicked.
First example uses a custom fade animation, and second one uses animate-slide from [tailwind-primeui](https://primevue.org/tailwind/#animations) plugin.
FadeInFadeOut
Custom
SlideDownSlideUp
Content
```markup
<div class="card flex items-center justify-center gap-8">
    <div class="flex flex-col items-center">
        <div>
            <Button v-styleclass="{ selector: '.box1', enterFromClass: 'my-hidden', enterActiveClass: 'my-fadein' }" label="FadeIn" class="mr-2" />
            <Button v-styleclass="{ selector: '.box1', leaveActiveClass: 'my-fadeout', leaveToClass: 'my-hidden' }" label="FadeOut" severity="secondary" />
        </div>
        <div class="h-32">
            <div class="my-hidden animate-duration-500 box1">
                <div class="flex bg-primary text-primary-contrast items-center justify-center py-4 rounded-md mt-4 font-bold w-32 h-32">Custom</div>
            </div>
        </div>
    </div>
    <div class="flex flex-col items-center">
        <div>
            <Button v-styleclass="{ selector: '.box2', enterFromClass: 'hidden', enterActiveClass: 'animate-slidedown' }" label="SlideDown" class="mr-2" />
            <Button v-styleclass="{ selector: '.box2', leaveActiveClass: 'animate-slideup', leaveToClass: 'hidden' }" label="SlideUp" severity="secondary" />
        </div>
        <div class="h-32">
            <div class="hidden animate-duration-500 box2 overflow-hidden">
                <div class="flex bg-primary text-primary-contrast items-center justify-center py-4 rounded-md mt-4 font-bold w-32 h-32">Content</div>
            </div>
        </div>
    </div>
</div>
```
Copy
- Import
- Toggle Class
- Animation
# StyleClass API
API defines helper props, events and others for the PrimeVue StyleClass module.
## StyleClass [\#](https://primevue.org/styleclass/\#api.styleclass)
StyleClass manages CSS classes declaratively to during enter/leave animations or just to toggle classes on an element.
### Interfaces [\#](https://primevue.org/styleclass/\#api.styleclass.interfaces)
Defines the custom interfaces used by the module.
#### StyleClassOptions [\#](https://primevue.org/styleclass/\#api.styleclass.interfaces.StyleClassOptions)
Defines options of StyleClass.
| name | type | default | description |
| --- | --- | --- | --- |
| selector | HintedString<"@next" \| "@prev" \| "@parent" \| "@grandparent"> | null | Selector to define the target element. Available selectors are '@next', '@prev', '@parent' and '@grandparent'. |
| enterFromClass | string | null | Style class to add when item begins to get displayed. |
| enterActiveClass | string | null | Style class to add during enter animation. |
| enterToClass | string | null | Style class to add when item begins to get displayed. |
| leaveFromClass | string | null | Style class to add when item begins to get hidden. |
| leaveActiveClass | string | null | Style class to add during leave animation. |
| leaveToClass | string | null | Style class to add when leave animation is completed. |
| hiddenClass | string | null | Special class name to hide an element, only used in slide animation. |
| hideOnOutsideClick | boolean | false | Whether to trigger leave animation when outside of the element is clicked. |
| toggleClass | string | null | Adds or removes a class when no enter-leave animation is required. |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |
| pt | PassThrough<StyleClassDirectivePassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |
#### StyleClassDirectivePassThroughOptions [\#](https://primevue.org/styleclass/\#api.styleclass.interfaces.StyleClassDirectivePassThroughOptions)
Custom passthrough(pt) directive options.
| name | type | default | description |
| --- | --- | --- | --- |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### StyleClassDirectiveBinding [\#](https://primevue.org/styleclass/\#api.styleclass.interfaces.StyleClassDirectiveBinding)
Binding of StyleClass directive.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | null \| ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, "", Object, any> \| Record<string, any> | null |  |
| oldValue | any | null |  |
| arg | string | null |  |
| dir | ObjectDirective<any, any, string, string> | null |  |
| value | [StyleClassOptions](https://primevue.org/styleclass/#api.styleclass.interfaces.StyleClassOptions) | null | Value of the StyleClass. |
- StyleClass
  - Interfaces
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Configuration Guide
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Configuration
Application wide configuration for PrimeVue.
## Import [\#](https://primevue.org/configuration/\#import)
Configuration is managed by the _PrimeVue_ instance imported from _primevue/config_.
```javascript
import PrimeVue from 'primevue/config';
const app = createApp(App);
app.use(PrimeVue, { /* options */ });
```
Copy
## Theme [\#](https://primevue.org/configuration/\#theme)
Style mode offers theming based on a design token based architecture. See the [styled mode](https://primevue.org/theming/styled) documentation for details such as building your own theme.
```javascript
import PrimeVue from 'primevue/config';
import Aura from '@primeuix/themes/aura';
const app = createApp(App);
app.use(PrimeVue, {
    theme: {
        preset: Aura,
        options: {
            prefix: 'p',
            darkModeSelector: 'system',
            cssLayer: false
        }
    }
 });
```
Copy
## Unstyled [\#](https://primevue.org/configuration/\#unstyled)
Unstyled mode instructs the components not to add any built-in style classes so that they can be styled using custom css or libraries like Tailwind and Bootstrap. Visit [Unstyled mode](https://primevue.org/theming/unstyled) documentation for more information.
```javascript
import { createApp } from "vue";
import PrimeVue from "primevue/config";
const app = createApp(App);
app.use(PrimeVue, { unstyled: true });
```
Copy
## Pass Through [\#](https://primevue.org/configuration/\#pt)
Defines the shared pass through properties per component type. Visit the [Pass Through Props](https://primevue.org/passthrough) documentation for more information.
```javascript
import { createApp } from "vue";
import PrimeVue from "primevue/config";
const app = createApp(App);
app.use(PrimeVue, {
    pt: {
        slider: {
            handle: { class: 'bg-primary text-primary-contrast' }
        }
    }
});
```
Copy
## Pass Through Options [\#](https://primevue.org/configuration/\#ptoptions)
Used to configure the _ptOptions_ properties of components and the _usePassThrough_ method. The _mergeSections_ defines whether the sections from the main configuration gets added and the _mergeProps_ controls whether to override or merge the defined props. Defaults are _true_ for _mergeSections_ and _false_ for _mergeProps_.
```javascript
import { createApp } from "vue";
import PrimeVue from "primevue/config";
const app = createApp(App);
app.use(PrimeVue, {
    ptOptions: {
        mergeSections: true,
        mergeProps: false
    }
});
```
Copy
## Ripple [\#](https://primevue.org/configuration/\#ripple)
Ripple is an optional animation for the supported components such as buttons. It is disabled by default and needs to be enabled at your app's entry file (e.g. main.js) during the PrimeVue setup.
```javascript
import { createApp } from "vue";
import PrimeVue from "primevue/config";
const app = createApp(App);
app.use(PrimeVue, { ripple: true });
```
Copy
## InputVariant [\#](https://primevue.org/configuration/\#inputvariant)
Input fields come in two styles, default is _outlined_ with borders around the field whereas _filled_ alternative adds a background color to the field. Applying _p-variant-filled_ to an ancestor of an input enables the filled style. If you prefer to use filled inputs in the entire application, use a global container such as the document body or the application element to apply the style class. Note that in case you add it to the application element, components that are teleported to the document body such as Dialog will not be able to display filled inputs as they are not a descendant of the application root element in the DOM tree, to resolve this case set inputVariant to _filled_ at PrimeVue configuration as well.
```javascript
import {createApp} from "vue";
import PrimeVue from "primevue/config";
const app = createApp(App);
app.use(PrimeVue, { inputVariant: "filled" });
```
Copy
## ZIndex [\#](https://primevue.org/configuration/\#zindex)
ZIndexes are managed automatically to make sure layering of overlay components work seamlessly when combining multiple components. Still there may be cases where you'd like to configure the configure default values such as a custom layout where header section is fixed. In a case like this, dropdown needs to be displayed below the application header but a modal dialog should be displayed above. PrimeVue configuration offers the _zIndex_ property to customize the default values for components categories. Default values are described below and can be customized when setting up PrimeVue.
```javascript
import {createApp} from "vue";
import PrimeVue from "primevue/config";
const app = createApp(App);
app.use(PrimeVue, {
    zIndex: {
        modal: 1100,        //dialog, drawer
        overlay: 1000,      //select, popover
        menu: 1000,         //overlay menus
        tooltip: 1100       //tooltip
    }
});
```
Copy
## CSP [\#](https://primevue.org/configuration/\#csp)
### Nonce [\#](https://primevue.org/configuration/\#nonce)
The [nonce](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) value to use on dynamically generated style elements in core.
```javascript
app.use(PrimeVue, {
    csp: {
        nonce: '...'
    }
});
```
Copy
## Locale [\#](https://primevue.org/configuration/\#locale)
### Set Locale [\#](https://primevue.org/configuration/\#setlocale)
Second parameter of the use function can be used to initiate the locale during PrimeVue installation.
```javascript
app.use(PrimeVue, {
    locale: {
        accept: 'Aceptar',
        reject: 'Rechazar',
        //...
    }
});
```
Copy
The locale configuration is reactive so that any changes are instantly reflected in the UI. Suppose you are doing a multi language application and need to change the language dynamically.
```javascript
import { defineComponent, onMounted } from "vue";
import { usePrimeVue } from "primevue/config";
export default defineComponent({
    setup() {
        const changeToSpanish = () => {
            const primevue = usePrimeVue();
            primevue.config.locale.accept = "Aceptar";
            primevue.config.locale.reject = "Rechazar";
        }
        onMounted(() => {
            changeToSpanish();
        })
    }
});
```
Copy
### Repository [\#](https://primevue.org/configuration/\#repository)
Ready to use settings for locales are available at the community supported [PrimeLocale](https://github.com/primefaces/primelocale) repository. We'd appreciate if you could contribute to this repository with pull requests and share it with the rest of the community.
### API [\#](https://primevue.org/configuration/\#localeapi)
Configuration is managed by the Locale API imported from _primevue/config_.
### Locale Options
| Key | Value |
| --- | --- |
| startsWith | Starts with |
| contains | Contains |
| notContains | Not contains |
| endsWith | Ends with |
| equals | Equals |
| notEquals | Not equals |
| noFilter | No Filter |
| lt | Less than |
| lte | Less than or equal to |
| gt | Greater than |
| gte | Greater than or equal to |
| dateIs | Date is |
| dateIsNot | Date is not |
| dateBefore | Date is before |
| dateAfter | Date is after |
| clear | Clear |
| apply | Apply |
| matchAll | Match All |
| matchAny | Match Any |
| addRule | Add Rule |
| removeRule | Remove Rule |
| accept | Yes |
| reject | No |
| choose | Choose |
| upload | Upload |
| cancel | Cancel |
| completed | Completed |
| pending | Pending |
| fileSizeTypes | \['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'\] |
| dayNames | \['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' |\
| dayNamesShort | \['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' |\
| dayNamesMin | \['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa' |\
| monthNames | \['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' |\
| monthNamesShort | \['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' |\
| chooseYear | Choose Year |\
| chooseMonth | Choose Month |\
| chooseDate | Choose Date |\
| prevDecade | Previous Decade |\
| nextDecade | Next Decade |\
| prevYear | Previous Year |\
| nextYear | Next Year |\
| prevMonth | Previous Month |\
| nextMonth | Next Month |\
| prevHour | Previous Hour |\
| nextHour | Next Hour |\
| prevMinute | Previous Minute |\
| nextMinute | Next Minute |\
| prevSecond | Previous Second |\
| nextSecond | Next Second |\
| am | am |\
| pm | pm |\
| today | Today |\
| weekHeader | Wk |\
| firstDayOfWeek | 0 |\
| showMonthAfterYear | false |\
| dateFormat | mm/dd/yy |\
| weak | Weak |\
| medium | Medium |\
| strong | Strong |\
| passwordPrompt | Enter a password |\
| searchMessage | {0} results are available |\
| selectionMessage | {0} items selected |\
| emptySelectionMessage | No selected item |\
| emptySearchMessage | No results found |\
| fileChosenMessage | {0} files |\
| noFileChosenMessage | No file chosen |\
| emptyMessage | No available options |\
| aria.trueLabel | True |\
| aria.falseLabel | False |\
| aria.nullLabel | Not Selected |\
| aria.star | 1 star |\
| aria.stars | {star} stars |\
| aria.selectAll | All items selected |\
| aria.unselectAll | All items unselected |\
| aria.close | Close |\
| aria.previous | Previous |\
| aria.next | Next |\
| aria.navigation | Navigation |\
| aria.scrollTop | Scroll Top |\
| aria.moveTop | Move Top |\
| aria.moveUp | Move Up |\
| aria.moveDown | Move Down |\
| aria.moveBottom | Move Bottom |\
| aria.moveToTarget | Move to Target |\
| aria.moveToSource | Move to Source |\
| aria.moveAllToTarget | Move All to Target |\
| aria.moveAllToSource | Move All to Source |\
| aria.pageLabel | Page {page} |\
| aria.firstPageLabel | First Page |\
| aria.lastPageLabel | Last Page |\
| aria.nextPageLabel | Next Page |\
| aria.prevPageLabel | Previous Page |\
| aria.rowsPerPageLabel | Rows per page |\
| aria.jumpToPageDropdownLabel | Jump to Page Dropdown |\
| aria.jumpToPageInputLabel | Jump to Page Input |\
| aria.selectRow | Row Selected |\
| aria.unselectRow | Row Unselected |\
| aria.expandRow | Row Expanded |\
| aria.collapseRow | Row Collapsed |\
| aria.showFilterMenu | Show Filter Menu |\
| aria.hideFilterMenu | Hide Filter Menu |\
| aria.filterOperator | Filter Operator |\
| aria.filterConstraint | Filter Constraint |\
| aria.editRow | Row Edit |\
| aria.saveEdit | Save Edit |\
| aria.cancelEdit | Cancel Edit |\
| aria.listView | List View |\
| aria.gridView | Grid View |\
| aria.slide | Slide |\
| aria.slideNumber | {slideNumber} |\
| aria.zoomImage | Zoom Image |\
| aria.zoomIn | Zoom In |\
| aria.zoomOut | Zoom Out |\
| aria.rotateRight | Rotate Right |\
| aria.rotateLeft | Rotate Left |\
\
- Import\
\
- Theme\
\
- Unstyled\
\
- Pass Through\
\
- Pass Through Options\
\
- Ripple\
\
- InputVariant\
\
- ZIndex\
\
- CSP\
\
  - Nonce\
- Locale\
\
  - Set Locale\
\
  - Repository\
\
  - API\
\
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue v4 Migration
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Migration
Migration guide to PrimeVue v4.
## Overview [\#](https://primevue.org/guides/migration/v4/\#overview)
At PrimeTek, we have been developing UI component libraries since 2008. The web continues to undergo technological advancements, and as a result, we have to modernize and update our libraries to stay relevant. PrimeVue v4 is the next-generation version that fully embraces modern Web APIs and removes technical debt like the legacy-styled mode. Every component has been reviewed and enhanced. As part of our commitment to our products and the community, PrimeVue v3 will continue to be maintained until the end of 2024.
The most notable feature is the new [styled mode](https://primevue.org/theming/styled) implementation. Previous iterations use SASS at an external repo called _primevue-sass-theme_ which requires compilation of a _theme.css_ a file. This file had to be included in the application and need to be swapped at runtime for basic tasks like dark mode or primary color changes. In v4, styled mode is now part of the core, SASS is not used at all, and a new design token based architecture that fully utilizes CSS variables has been created. The new API is modern and superior to the legacy styled mode.
Names of some of the components have been changed to more common alternatives for example, _Popover_ replaced _OverlayPanel_ and _InputSwitch_ is now called _ToggleSwitch_. Each component has been reviewed for a consistent naming between CSS class names and PT sections. An example would be the _option_ element of a Select component that uses _p-select-option_ for the class name.
Components have been utilized more within other components, for instance Dialog close button is not actually a PrimeVue button so that _closeButtonProps_ can be used to enable the features of button like outlined, raised and more. Whenever a component is using another component, in v3 the pt sections were causing confusion, to prevent this _pc_ prefix is added to indicate that the PT section is actually a PrimeVue component, not a simple DOM element. This is especially useful because PT allows passing arbitrary attributes to DOM elements whereas if the element is actually a PrimeVue component, _props_ can also be passed.
## Changes [\#](https://primevue.org/guides/migration/v4/\#changes)
The list of backward compatible and breaking changes.
### Compatible [\#](https://primevue.org/guides/migration/v4/\#compatible)
#### Renamed Components
Old names are deprecated but still functional, migrate to new import paths instead e.g. _primevue/calendar_ becomes _primevue/datepicker_.
- _Calendar_ -\> _DatePicker_.
- _Dropdown_ -\> _Select_.
- _InputSwitch_ -\> _ToggleSwitch_.
- _OverlayPanel_ -\> _Popover_.
- _Sidebar_ -\> _Drawer_.
#### Deprecated Components
Components that are deprecated since their functionality is provided by other components.
- _Chips_ \| Use AutoComplete with _multiple_ enabled and _typeahead_ disabled.
- _TabMenu_ \| Use Tabs without panels.
- _Steps_ \| Use Stepper without panels.
- _InlineMessage_ \| Use Message component.
- _BadgeDirective_ \| Use OverlayBadge instead.
- _TabView_ \| Use the new Tabs components.
- _Accordion_ \| Use with the new _AccordionHeader_ and _AccordionContent_ components.
#### Important Tickets
Issue tickets with detailed information about component internal changes.
- [#5426](https://github.com/primefaces/primevue/issues/5426)
- [#5437](https://github.com/primefaces/primevue/issues/5437)
### Breaking [\#](https://primevue.org/guides/migration/v4/\#breaking)
#### SASS Themes
The styled mode theming has been reimplemented from scratch based on an all-new architecture. The _theme.css_ and the _primevue/resources_ do not exist anymore, so any imports of these assets needs to be removed. If you had a custom theme for v3, the theme needs to be recreated using the new APIs. See the customization section at [styled mode](https://primevue.org/theming/styled) for details.
#### Removed Components
- _TriStateCheckbox_ \| Use Checkbox with indeterminate option.
- _DataViewLayoutOptions_ \| Use SelectButton instead.
#### Removed APIs
- _switchTheme_ function, use the new APIs like _usePreset_ instead to dynamic theme switching.
#### Relocated APIs
- Imports from _primevue/api_ have been relocated to _@primevue/core/api_.
#### Removed Files
- Themes under the _primevue/resources_ path, migration to new styled mode is necessary.
- The legacy Tailwind preset at _primevue/passthrough/tailwind_, migrate to the [Tailwind Presets](https://tailwind.primevue.org/) project.
#### Message and InlineMessage
_InlineMessage_ is deprecated due to overlap with the _Message_. The spacing, closable and life properties of the _Message_ have breaking changes to provide _InlineMessage_ functionality. Default margin is removed, closable is false by default and messages do not disappear automatically.
#### PT Section Names
The experimental PassThrough feature is not production ready, there are changes on the PT section names due to alignment with CSS classes for certain components. If when component element is another PrimeVue component _pc_ prefix is added for indication. Review the _Pass Through_ section of a component for the new API. The Tailwind CSS presets for the unstyled mode are not updated to v4 yet.
#### Removed Features
- Sidebar/Drawer _size_ property is removed, use a responsive class utilty as replacement, demos have new examples.
- Rating _cancel_ prop is removed as toggling the selected star value clears it.
- Inplace _closable_ is removed in favor of templating and _closeCallback_ prop.
#### Removed Style Classes
- _.p-link_, use a button in link mode.
- _.p-highlight_, each component have its own class such as _.p-select-option-selected_.
- _.p-fluid_, use the new built-in _fluid_ property of the supported components or the _Fluid_ component.
#### Nuxt Module
The [nuxt-primevue](https://www.npmjs.com/package/nuxt-primevue) module has been replaced with the new [@primevue/nuxt-module](https://www.npmjs.com/package/@primevue/nuxt-module). The old module is still maintained for v3 users.
#### PrimeFlex CSS
In case you are using PrimeFlex CSS library, upgrade to PrimeFlex v4 since PrimeFlex v3 is not compatible with PrimeVue v4+.
- Overview
- Changes
  - Compatible
  - Breaking
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Freya Admin Template
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![Template Hero Pattern](https://primefaces.org/cdn/primevue/images/templates/freya/freya-hero-pattern.png)
Freya is a modern admin template for developers and IT professionals. It comes with a huge collection of reusable UI components and dozens of built-in layouts for various purposes.
[Live Demo](https://www.primefaces.org/freya-vue/) [Buy Now](https://www.primefaces.org/store/)
[Community](https://github.com/orgs/primefaces/discussions/categories/primevue-templates) [Documentation](https://freya.primevue.org/documentation)
![Template Dashboard Image 1](https://primefaces.org/cdn/primevue/images/templates/freya/freya-hero-dashboard1.png)![Template Dashboard Image 2](https://primefaces.org/cdn/primevue/images/templates/freya/freya-hero-dashboard2.png)
Basic License
$59
Non Commercial Usage
Single End Product, No Multi-Use
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
Extended License
$590
Commercial Usage
Multiple End Products
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
The download package is a Vite-based project containing all application source codes deployed at the live demo. The project code is written in JavaScript.
Visit the [official documentation](https://freya.primevue.org/documentation) for more information.
## Features
01
01
01
##### Light and Dark Modes
Impress your users with the Light and Dark modes.
02
02
02
##### Component Themes
Freya offers 16 built-in component themes with dark and light options. Also if you wanna create your own theme you can do it by just defining couple SASS variables.
03
03
03
##### 7 Menu Orientations
Static, Overlay, Slim, Slim+, Reveal, Drawer and Horizontal are the available menu layouts depending on your preference.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/freya/features-animation-darkmode.png)
\> npm install or yarn
\> npm run dev or yarn dev
![Vue 3D Logo](https://primefaces.org/cdn/primevue/images/templates/vue-3d-logo.png)
### Vue based on Vite
Freya is powered by Vite to get started in no time following the best practices.
01
01
01
##### Tailwind CSS
The demo content is built with TailwindCSS, while the application shell uses custom CSS, offering flexibility and efficiency for responsive design.
02
02
02
##### PrimeBlocks
Fully compatible with [PrimeBlocks](https://primeblocks.org/), choose from the wide range of blocks and customize the way you like. Note that PrimeBlocks is not included in the
template and requires a separate purchase.
03
03
03
##### PrimeIcons
Freya ships with PrimeIcons, PrimeTekâ€™s modern icon library including a wide range of icons for your applications.
04
04
04
##### Figma File
Freya uses Figma as the design tool. It will be possible to download the Figma file after your purchase. You can
[preview the Figma file](https://www.figma.com/file/eYBoRNff6GPTlrgYZaMStp/Preview-%7C-Freya-2022?node-id=0%3A1&t=MGAABDlOnz4QBcEk-1) before the purchase. Note that PrimeVue UI components are excluded from the Freya Figma
file as they are available in PrimeOne for Figma only.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/common/tailwind.png)
![Fully Responsive](https://primefaces.org/cdn/primevue/images/templates/freya/freya-features2-responsive.png)
## Fully Responsive
Freya is crafted to provide optimal viewing and interaction experience for a wide range of devices.
![Cross Browser Compatible](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-compatible.png)
## Cross Browser Compatible
First class support for Firefox, Safari, Chrome and Edge.
![Support](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-lifetime.png)
## Support
PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users
can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and
[Forum](https://github.com/orgs/primefaces/discussions/categories/primevue-templates).
![Customizable Design](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-customizable.png)
## Customizable Design
Fully customizable with a mixture of Sass and CSS variables.
![Ready to Use Pages](https://primefaces.org/cdn/primevue/images/templates/freya/freya-features2-ready.png)
## Ready to Use Pages
Landing, login, invoice, help, user management and error pages are provided as template pages to get started with building your app.
![Mobile Experience](https://primefaces.org/cdn/primevue/images/templates/freya/freya-features2-mobile.png)
## Mobile Experience
Touch optimized enhanced mobile experience with responsive design.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Tailwind Integration
4
4
Page Not Found
[GO TO HOMEPAGE](https://primevue.org/)
## ProgressBar Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# ProgressBar
ProgressBar is a process status indicator.
## Import [\#](https://primevue.org/progressbar/\#import)
```javascript
import ProgressBar from 'primevue/progressbar';
```
Copy
## Basic [\#](https://primevue.org/progressbar/\#basic)
ProgressBar is used with the _value_ property.
50%
```markup
<ProgressBar :value="50"></ProgressBar>
```
Copy
## Dynamic [\#](https://primevue.org/progressbar/\#dynamic)
Value is reactive so updating it dynamically changes the bar as well.
```markup
<ProgressBar :value="value"></ProgressBar>
```
Copy
## Template [\#](https://primevue.org/progressbar/\#template)
Custom content inside the ProgressBar is defined with the _default_ slot.
40/100
```markup
<ProgressBar :value="40"> {{ value }}/100 </ProgressBar>
```
Copy
## Indeterminate [\#](https://primevue.org/progressbar/\#indeterminate)
For progresses with no value to track, set the _mode_ property to _indeterminate_.
```markup
<ProgressBar mode="indeterminate" style="height: 6px"></ProgressBar>
```
Copy
## Accessibility [\#](https://primevue.org/progressbar/\#accessibility)
### Screen Reader
ProgressBar components uses _progressbar_ role along with _aria-valuemin_, _aria-valuemax_ and _aria-valuenow_ attributes. Value to describe the component can be defined using _aria-labelledby_ and _aria-label_ props.
```markup
<span id="label_status" />
<ProgressBar aria-labelledby="label_status" />
<ProgressBar aria-label="Status" />
```
Copy
### Keyboard Support
Not applicable.
- Import
- Basic
- Dynamic
- Template
- Indeterminate
- Accessibility
# ProgressBar API
API defines helper props, events and others for the PrimeVue ProgressBar module.
## ProgressBar [\#](https://primevue.org/progressbar/\#api.progressbar)
ProgressBar is a process status indicator.
### Props [\#](https://primevue.org/progressbar/\#api.progressbar.props)
Defines valid properties in ProgressBar component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| value | number | null | Current value of the progress. |  |
| mode | "determinate" \| "indeterminate" | determinate | Defines the mode of the progress |  |
| showValue | boolean | true | Whether to display the progress bar value. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ProgressBarPassThroughOptions<any>> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/progressbar/\#api.progressbar.slots)
Defines valid slots in ProgressBar component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| default |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom content slot. |  |
### Interfaces [\#](https://primevue.org/progressbar/\#api.progressbar.interfaces)
Defines the custom interfaces used by the module.
#### ProgressBarPassThroughMethodOptions [\#](https://primevue.org/progressbar/\#api.progressbar.interfaces.ProgressBarPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ProgressBarProps](https://primevue.org/progressbar/#api.progressbar.interfaces.ProgressBarProps) | null | Defines valid properties. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
| parent | any | null | Defines parent instance. |
#### ProgressBarPassThroughOptions [\#](https://primevue.org/progressbar/\#api.progressbar.interfaces.ProgressBarPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ProgressBarPassThroughOptionType<T>](https://primevue.org/progressbar/#api.progressbar.types.ProgressBarPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the root's DOM element. |
| value | [ProgressBarPassThroughOptionType<T>](https://primevue.org/progressbar/#api.progressbar.types.ProgressBarPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the value's DOM element. |
| label | [ProgressBarPassThroughOptionType<T>](https://primevue.org/progressbar/#api.progressbar.types.ProgressBarPassThroughOptionType%3CT%3E) | null | Used to pass attributes to the label's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ProgressBarPassThroughAttributes [\#](https://primevue.org/progressbar/\#api.progressbar.interfaces.ProgressBarPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/progressbar/\#api.progressbar.types)
Defines the custom types used by the module.
#### ProgressBarPassThroughOptionType [\#](https://primevue.org/progressbar/\#api.progressbar.types.ProgressBarPassThroughOptionType)
| values |
| --- |
| ProgressBarPassThroughAttributes \| (options: ProgressBarPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ProgressBarEmits [\#](https://primevue.org/progressbar/\#api.progressbar.types.ProgressBarEmits)
| values |
| --- |
| EmitFn<ProgressBarEmitsOptions> |
- ProgressBar
  - Props
  - Slots
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Page Not Found
4
4
Page Not Found
[GO TO HOMEPAGE](https://primevue.org/)
## MultiSelect Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# MultiSelect
MultiSelect is used to select multiple items from a collection.
## Import [\#](https://primevue.org/multiselect/\#import)
```javascript
import MultiSelect from 'primevue/multiselect';
```
Copy
## Basic [\#](https://primevue.org/multiselect/\#basic)
MultiSelect is used with the _v-model_ property for two-way value binding along with the _options_ collection. Label and value of an option are defined with the _optionLabel_ and _optionValue_ properties respectively. Note that, when options are simple primitive values such as a string array, no _optionLabel_ and _optionValue_ would be necessary.
Select Cities
```markup
<MultiSelect v-model="selectedCities" :options="cities" optionLabel="name" filter placeholder="Select Cities"
    :maxSelectedLabels="3" class="w-full md:w-80" />
```
Copy
## Forms [\#](https://primevue.org/multiselect/\#forms)
Select Cities
Submit
```markup
<Form v-slot="$form" :resolver="resolver" :initialValues="initialValues" @submit="onFormSubmit" class="flex justify-center flex-col gap-4">
    <div class="flex flex-col gap-1">
        <MultiSelect name="city" :options="cities" optionLabel="name" filter placeholder="Select Cities" :maxSelectedLabels="3" class="w-full md:w-80" />
        <Message v-if="$form.city?.invalid" severity="error" size="small" variant="simple">{{ $form.city.error?.message }}</Message>
    </div>
    <Button type="submit" severity="secondary" label="Submit" />
</Form>
```
Copy
## Chips [\#](https://primevue.org/multiselect/\#chips)
Selected values are displayed as a comma separated list by default, setting _display_ as _chip_ displays them as chips.
Select Cities
```markup
<MultiSelect v-model="selectedCities" display="chip" :options="cities" optionLabel="name" filter placeholder="Select Cities"
    :maxSelectedLabels="3" class="w-full md:w-80" />
```
Copy
## Group [\#](https://primevue.org/multiselect/\#group)
Options can be grouped when a nested data structures is provided. To define the label of a group _optionGroupLabel_ property is needed and also _optionGroupChildren_ is required to define the property that refers to the children of a group.
Select Cities
```markup
<MultiSelect v-model="selectedCities" :options="groupedCities" optionLabel="label" filter optionGroupLabel="label" optionGroupChildren="items" display="chip" placeholder="Select Cities" class="w-full md:w-80">
    <template #optiongroup="slotProps">
        <div class="flex items-center">
            <img :alt="slotProps.option.label" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px" />
            <div>{{ slotProps.option.label }}</div>
        </div>
    </template>
</MultiSelect>
```
Copy
## Template [\#](https://primevue.org/multiselect/\#template)
MultiSelect offers multiple slots for customization through templating.
Select Countries
```markup
<MultiSelect v-model="selectedCountries" :options="countries" optionLabel="name" filter placeholder="Select Countries" display="chip" class="w-full md:w-80">
    <template #option="slotProps">
        <div class="flex items-center">
            <img :alt="slotProps.option.name" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.option.code.toLowerCase()} mr-2`" style="width: 18px" />
            <div>{{ slotProps.option.name }}</div>
        </div>
    </template>
    <template #dropdownicon>
        <i class="pi pi-map" />
    </template>
    <template #filtericon>
        <i class="pi pi-map-marker" />
    </template>
    <template #header>
        <div class="font-medium px-3 py-2">Available Countries</div>
    </template>
    <template #footer>
        <div class="p-3 flex justify-between">
            <Button label="Add New" severity="secondary" text size="small" icon="pi pi-plus" />
            <Button label="Remove All" severity="danger" text size="small" icon="pi pi-times" />
        </div>
    </template>
</MultiSelect>
```
Copy
## Filter [\#](https://primevue.org/multiselect/\#filter)
Filtering allows searching items in the list using an input field at the header. In order to use filtering, enable _filter_ property. By default, optionLabel is used when searching and _filterFields_ can be used to customize the fields being utilized. Furthermore, _filterMatchMode_ is available to define the search algorithm. Valid values are "contains" (default), "startsWith" and "endsWith".
Select Cities
```markup
<MultiSelect v-model="selectedCities" :options="cities" filter optionLabel="name" placeholder="Select Cities"
    :maxSelectedLabels="3" class="w-full md:w-80" />
```
Copy
## Clear Icon [\#](https://primevue.org/multiselect/\#clearicon)
When _showClear_ is enabled, a clear icon is added to reset the MultiSelect.
Select Cities
```markup
<MultiSelect v-model="selectedCities" showClear :options="cities" optionLabel="name" filter placeholder="Select Cities" :maxSelectedLabels="3" class="w-full md:w-80" />
```
Copy
## Loading State [\#](https://primevue.org/multiselect/\#loadingstate)
Loading state can be used _loading_ property.
Loading...
```markup
<MultiSelect placeholder="Loading..." loading class="w-full md:w-80"></MultiSelect>
```
Copy
## VirtualScroll [\#](https://primevue.org/multiselect/\#virtualscroll)
VirtualScroller is used to render a long list of options efficiently like 100K records in this demo. The configuration is done with _virtualScrollerOptions_ property, refer to the [VirtualScroller](https://primevue.org/virtualscroller) for more information about the available options as it is used internally by MultiSelect.
Select Item
```markup
<MultiSelect v-model="selectedItems" :options="items" :maxSelectedLabels="3" :selectAll="selectAll" optionLabel="label" optionValue="value"
    @selectall-change="onSelectAllChange($event)" @change="onChange($event)" :virtualScrollerOptions="{ itemSize: 44 }" filter placeholder="Select Item" class="w-full md:w-80" />
```
Copy
## Filled [\#](https://primevue.org/multiselect/\#filled)
Specify the _variant_ property as _filled_ to display the component with a higher visual emphasis than the default _outlined_ style.
Select Cities
```markup
<MultiSelect v-model="selectedCities" variant="filled" :options="cities" optionLabel="name" filter placeholder="Select Cities"
    :maxSelectedLabels="3" class="w-full md:w-80" />
```
Copy
## Float Label [\#](https://primevue.org/multiselect/\#floatlabel)
A floating label appears on top of the input field when focused. Visit [FloatLabel](https://primevue.org/floatlabel/) documentation for more information.
empty
Over Label
empty
In Label
empty
On Label
```markup
<FloatLabel class="w-full md:w-80">
    <MultiSelect id="over_label" v-model="value1" :options="cities" optionLabel="name" filter :maxSelectedLabels="3" class="w-full" />
    <label for="over_label">Over Label</label>
</FloatLabel>
<FloatLabel class="w-full md:w-80" variant="in">
    <MultiSelect id="in_label" v-model="value2" :options="cities" optionLabel="name" filter :maxSelectedLabels="3" class="w-full" variant="filled" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel class="w-full md:w-80" variant="on">
    <MultiSelect id="on_label" v-model="value3" :options="cities" optionLabel="name" filter :maxSelectedLabels="3" class="w-full" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Ifta Label [\#](https://primevue.org/multiselect/\#iftalabel)
IftaLabel is used to create infield top aligned labels. Visit [IftaLabel](https://primevue.org/iftalabel/) documentation for more information.
empty
Cities
```markup
<IftaLabel>
    <MultiSelect v-model="selectedCities" inputId="ms_cities" :options="cities" optionLabel="name" filter :maxSelectedLabels="3" class="w-full" variant="filled" />
    <label for="ms_cities">Cities</label>
</IftaLabel>
```
Copy
## Sizes [\#](https://primevue.org/multiselect/\#sizes)
MultiSelect provides _small_ and _large_ sizes as alternatives to the base.
Small
Normal
Large
```markup
<MultiSelect v-model="value1" :options="cities" optionLabel="name" :maxSelectedLabels="3" class="w-full md:w-80" size="small" placeholder="Small" />
<MultiSelect v-model="value2" :options="cities" optionLabel="name" :maxSelectedLabels="3" class="w-full md:w-80" placeholder="Normal" />
<MultiSelect v-model="value3" :options="cities" optionLabel="name" :maxSelectedLabels="3" class="w-full md:w-80" size="large" placeholder="Large" />
```
Copy
## Invalid [\#](https://primevue.org/multiselect/\#invalid)
Invalid state is displayed using the _invalid_ prop to indicate a failed validation. You can use this style when integrating with form validation libraries.
Select Cities
Select Cities
```markup
<MultiSelect v-model="selectedCities1" :options="cities" optionLabel="name" filter placeholder="Select Cities"
        :maxSelectedLabels="3" :invalid="selectedCities1?.length === 0" class="w-full md:w-80" />
<MultiSelect v-model="selectedCities2" :options="cities" optionLabel="name" filter placeholder="Select Cities"
        :maxSelectedLabels="3" :invalid="selectedCities2?.length === 0" class="w-full md:w-80" variant="filled" />
```
Copy
## Disabled [\#](https://primevue.org/multiselect/\#disabled)
When _disabled_ is present, the element cannot be edited and focused.
Select Cities
```markup
<MultiSelect disabled placeholder="Select Cities" class="w-full md:w-80" />
```
Copy
## Accessibility [\#](https://primevue.org/multiselect/\#accessibility)
### Screen Reader
Value to describe the component can either be provided with _aria-labelledby_ or _aria-label_ props. The multiselect component has a _combobox_ role in addition to _aria-haspopup_ and _aria-expanded_ attributes. The relation between the combobox and the popup is created with _aria-controls_ attribute that refers to the id of the popup listbox.
The popup listbox uses _listbox_ as the role with _aria-multiselectable_ enabled. Each list item has an _option_ role along with _aria-label_, _aria-selected_ and _aria-disabled_ attributes.
Checkbox component at the header uses a hidden native checkbox element internally that is only visible to screen readers. Value to read is defined with the _selectAll_ and _unselectAll_ keys of the _aria_ property from the [locale](https://primevue.org/configuration/#locale) API.
If filtering is enabled, _filterInputProps_ can be defined to give _aria-\*_ props to the input element.
Close button uses _close_ key of the _aria_ property from the [locale](https://primevue.org/configuration/#locale) API as the _aria-label_ by default, this can be overriden with the _closeButtonProps_.
```markup
<span id="dd1"></span>Options</span>
<MultiSelect aria-labelledby="dd1" />
<MultiSelect aria-label="Options" />
```
Copy
### Closed State Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the multiselect element. |
| _space_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _enter_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _down arrow_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _up arrow_ | Opens the popup and moves visual focus to the selected option, if there is none then first option receives the focus. |
| _any printable character_ | Opens the popup and moves focus to the option whose label starts with the characters being typed, if there is none then first option receives the focus. |
### Popup Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next focusable element in the popup, if there is none then first focusable element receives the focus. |
| _shift_ \+ _tab_ | Moves focus to the previous focusable element in the popup, if there is none then last focusable element receives the focus. |
| _enter_ | Toggles the selection state of the focused option, then moves focus to the multiselect element. |
| _space_ | Toggles the selection state of the focused option, then moves focus to the multiselect element. |
| _escape_ | Closes the popup, moves focus to the multiselect element. |
| _down arrow_ | Moves focus to the next option, if there is none then visual focus does not change. |
| _up arrow_ | Moves focus to the previous option, if there is none then visual focus does not change. |
| _alt_ \+ _up arrow_ | Selects the focused option and closes the popup, then moves focus to the multiselect element. |
| _shift_ \+ _down arrow_ | Moves focus to the next option and toggles the selection state. |
| _shift_ \+ _up arrow_ | Moves focus to the previous option and toggles the selection state. |
| _shift_ \+ _space_ | Selects the items between the most recently selected option and the focused option. |
| _home_ | Moves focus to the first option. |
| _end_ | Moves focus to the last option. |
| _control_ \+ _shift_ \+ _home_ | Selects the focused options and all the options up to the first one. |
| _control_ \+ _shift_ \+ _end_ | Selects the focused options and all the options down to the last one. |
| _control_ \+ _a_ | Selects all options. |
| _pageUp_ | Jumps visual focus to first option. |
| _pageDown_ | Jumps visual focus to last option. |
| _any printable character_ | Moves focus to the option whose label starts with the characters being typed. |
### Toggle All Checkbox Keyboard Support
| Key | Function |
| --- | --- |
| _space_ | Toggles the checked state. |
| _escape_ | Closes the popup and moves focus to the multiselect element. |
### Filter Input Keyboard Support
| Key | Function |
| --- | --- |
| _down arrow_ | Moves focus to the next option, if there is none then visual focus does not change. |
| _up arrow_ | Moves focus to the previous option, if there is none then visual focus does not change. |
| _left arrow_ | Removes the visual focus from the current option and moves input cursor to one character left. |
| _right arrow_ | Removes the visual focus from the current option and moves input cursor to one character right. |
| _home_ | Moves input cursor at the end, if not then moves focus to the first option. |
| _end_ | Moves input cursor at the beginning, if not then moves focus to the last option. |
| _enter_ | Closes the popup and moves focus to the multiselect element. |
| _escape_ | Closes the popup and moves focus to the multiselect element. |
| _tab_ | Moves focus to the next focusable element in the popup. If there is none, the focusable option is selected and the overlay is closed then moves focus to next element in page. |
- Import
- Basic
- Forms
- Chips
- Group
- Template
- Filter
- Clear Icon
- Loading State
- VirtualScroll
- Filled
- Float Label
- Ifta Label
- Sizes
- Invalid
- Disabled
- Accessibility
# MultiSelect API
API defines helper props, events and others for the PrimeVue MultiSelect module.
## MultiSelect [\#](https://primevue.org/multiselect/\#api.multiselect)
MultiSelect is used to select multiple items from a collection.
### Props [\#](https://primevue.org/multiselect/\#api.multiselect.props)
Defines valid properties in MultiSelect component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| modelValue | any | null | Value of the component. |  |
| defaultValue | any | null | The default value for the input when not controlled by \`modelValue\` . |  |
| name | string | null | The name attribute for the element, typically used in form submissions. |  |
| options | any\[\] | null | An array of select items to display as the available options. |  |
| optionLabel | string \| Function | null | Property name or getter function to use as the label of an option. |  |
| optionValue | string \| Function | null | Property name or getter function to use as the value of an option, defaults to the option itself when not defined. |  |
| optionDisabled | string \| Function | null | Property name or getter function to use as the disabled flag of an option, defaults to false when not defined. |  |
| optionGroupLabel | string \| Function | null | Property name or getter function to use as the label of an option group. |  |
| optionGroupChildren | string \| Function | null | Property name or getter function that refers to the children options of option group. |  |
| scrollHeight | string | 14rem | Height of the viewport, a scrollbar is defined if height of list exceeds this value. |  |
| placeholder | string | null | Label to display when there are no selections. |  |
| size | HintedString<"small" \| "large"> | null | Defines the size of the component. |  |
| invalid | boolean | false | When present, it specifies that the component should have invalid state style. |  |
| disabled | boolean | false | When present, it specifies that the component should be disabled. |  |
| variant | null \| HintedString<"outlined" \| "filled"> | null | Specifies the input variant of the component. |  |
| fluid | boolean | null | Spans 100% width of the container when enabled. |  |
| inputId | string | null | Identifier of the underlying input element. |  |
| panelStyle | any | null |  |  |
| panelClass | any | null |  |  |
| overlayStyle | any | null | Inline style of the overlay. |  |
| overlayClass | any | null | Style class of the overlay. |  |
| dataKey | string | null | A property to uniquely identify an option. |  |
| showClear | boolean | false | When enabled, a clear icon is displayed to clear the value. |  |
| clearIcon | string | null | Icon to display in clear button. |  |
| resetFilterOnClear | boolean | false | Clears the filter value when clicking on the clear icon. |  |
| filter | boolean | false | When specified, displays a filter input at header. |  |
| filterPlaceholder | string | null | Placeholder text to show when filter input is empty. |  |
| filterLocale | string | null | Locale to use in filtering. The default locale is the host environment's current locale. |  |
| filterMatchMode | HintedString<"startsWith" \| "contains" \| "endsWith"> | contains | Defines the filtering algorithm to use when searching the options. |  |
| filterFields | string\[\] | null | Fields used when filtering the options, defaults to optionLabel. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself. |  |
| display | HintedString<"comma" \| "chip"> | comma | Defines how the selected items are displayed. |  |
| selectedItemsLabel | string | null | Label to display after exceeding max selected labels. |  |
| maxSelectedLabels | number | null | Decides how many selected item labels to show at most. |  |
| selectionLimit | number | null | Maximum number of selectable items. |  |
| showToggleAll | boolean | true | Whether to show the header checkbox to toggle the selection of all items at once. |  |
| loading | boolean | false | Whether the multiselect is in loading state. |  |
| checkboxIcon | string | null | Icon to display in the checkboxes. |  |
| dropdownIcon | string | null | Icon to display in the dropdown. |  |
| filterIcon | string | null | Icon to display in filter input. |  |
| loadingIcon | string | null | Icon to display in loading state. |  |
| removeTokenIcon | string | null | Icon to display in chip remove action. |  |
| chipIcon | string | null | Icon to display in chip remove action. |  |
| selectAll | boolean | false | Whether all data is selected. |  |
| resetFilterOnHide | boolean | false | Clears the filter value when hiding the dropdown. |  |
| virtualScrollerOptions | any | null | Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it. |  |
| autoOptionFocus | boolean | false | Whether to focus on the first visible or selected element when the overlay panel is shown. |  |
| autoFilterFocus | boolean | false | Whether to focus on the filter element when the overlay panel is shown. |  |
| focusOnHover | boolean | true | When enabled, the focus is placed on the hovered option. |  |
| highlightOnSelect | boolean | false | Highlights automatically the first item. |  |
| filterMessage | string | '{0} results are available' | Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration. |  |
| selectionMessage | string | null | Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration. |  |
| emptySelectionMessage | string | No selected item | Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration. |  |
| emptyFilterMessage | string | No results found | Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration. |  |
| emptyMessage | string | No available options' | Text to display when there are no options available. Defaults to value from PrimeVue locale configuration. |  |
| tabindex | string \| number | null | Index of the element in tabbing order. |  |
| ariaLabel | string | null | Defines a string value that labels an interactive element. |  |
| ariaLabelledby | string | null | Identifier of the underlying input element. |  |
| formControl | Record<string, any> | null | Form control object, typically used for handling validation and form state. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<MultiSelectPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/multiselect/\#api.multiselect.emits)
Defines valid emits in MultiSelect component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:modelValue | value: any | void | Emitted when the value changes. |  |
| value-change | value: any | void | Emitted when the value changes in uncontrolled mode. |  |
| change | event: [MultiSelectChangeEvent](https://primevue.org/multiselect/#api.multiselect.events.MultiSelectChangeEvent) | void | Callback to invoke on value change. |  |
| focus | event: Event | void | Callback to invoke when the component receives focus. |  |
| blur | event: Event | void | Callback to invoke when the component loses focus. |  |
| before-show |  | void | Callback to invoke before the overlay is shown. |  |
| before-hide |  | void | Callback to invoke before the overlay is hidden. |  |
| show |  | void | Callback to invoke when the overlay is shown. |  |
| hide |  | void | Callback to invoke when the overlay is hidden. |  |
| filter | event: [MultiSelectFilterEvent](https://primevue.org/multiselect/#api.multiselect.events.MultiSelectFilterEvent) | void | Callback to invoke on filter input. |  |
| selectall-change | event: [MultiSelectAllChangeEvent](https://primevue.org/multiselect/#api.multiselect.events.MultiSelectAllChangeEvent) | void | Callback to invoke when all data is selected. |  |
### Slots [\#](https://primevue.org/multiselect/\#api.multiselect.slots)
Defines valid slots in MultiSelect component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| value | scope: {<br>value: any, // Value of the componentplaceholder: string, // Placeholder prop value<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom value template. |  |
| chip | scope: {<br>value: any, // A value in the selectionremoveCallback: (event: Event, item: any) â‡’ void, // Chip icon function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom chip template. |  |
| header | scope: {<br>value: any, // Value of the componentoptions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header template. |  |
| footer | scope: {<br>value: any, // Value of the componentoptions: any, // Displayed options<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom footer template. |  |
| option | scope: {<br>option: any, // Option instanceselected: boolean, // Selection stateindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option template. |  |
| optiongroup | scope: {<br>option: any, // Option instanceindex: number, // Index of the option<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom option group template. |  |
| emptyfilter |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom emptyfilter template. |  |
| empty |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom empty template. |  |
| content | scope: {<br>items: any, // An array of objects to display for virtualscrollerstyleClass: string, // Style class of the componentcontentRef: (el: any) â‡’ void, // Referance of the contentgetItemOptions: (index: number) â‡’ VirtualScrollerItemOptions, // Options of the items<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom content template. |  |
| loader | scope: {<br>options: any, // Options of the loader items for virtualscroller<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loader template. |  |
| removetokenicon | scope: {<br>class: string, // Style class of the loading icon.item: any, // Item of the token.removeCallback: (event: Event, item: any) â‡’ void, // Chip icon function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| chipicon | scope: {<br>class: string, // Style class of the loading icon.item: any, // Item of the token.removeCallback: (event: Event, item: any) â‡’ void, // Chip icon function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom chip icon template. |  |
| headercheckboxicon | scope: {<br>allSelected: boolean, // Options of the loader items for virtualscrollerclass: string, // Style class of the loading icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom header checkbox icon template. |  |
| filtericon | scope: {<br>class: string, // Style class of the loading icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom filter icon template. |  |
| itemcheckboxicon | scope: {<br>checked: boolean, // Whether the data is selected.class: string, // Style class of the loading icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom item checkbox icon template. |  |
| loadingicon | scope: {<br>class: string, // Style class of the loading icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom loading icon template. |  |
| clearicon | scope: {<br>clearCallback: (event: Event) â‡’ void, // Clear icon click function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom clear icon template. |  |
| dropdownicon | scope: {<br>class: string, // Style class of the loading icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom dropdown icon template. |  |
### Methods [\#](https://primevue.org/multiselect/\#api.multiselect.methods)
Defines methods that can be accessed by the component's reference.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| show | isFocus: boolean | void | Shows the overlay. |  |
| hide | isFocus: boolean | void | Hides the overlay. |  |
### Events [\#](https://primevue.org/multiselect/\#api.multiselect.events)
Defines the custom events used by the component's emit.
#### MultiSelectChangeEvent [\#](https://primevue.org/multiselect/\#api.multiselect.events.MultiSelectChangeEvent)
Custom change event.
See [change](https://primevue.org/multiselect/#api.multiselect.emitsoptions.change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| value | any | Selected option value |
#### MultiSelectAllChangeEvent [\#](https://primevue.org/multiselect/\#api.multiselect.events.MultiSelectAllChangeEvent)
Custom all change event.
See [selectall-change](https://primevue.org/multiselect/#api.multiselect.emitsoptions.selectall-change)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event |
| checked | boolean | Whether all data is selected. |
#### MultiSelectFilterEvent [\#](https://primevue.org/multiselect/\#api.multiselect.events.MultiSelectFilterEvent)
Custom filter event
See [filter](https://primevue.org/multiselect/#api.multiselect.emitsoptions.filter)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Original event |
| value | string | Filter value |
### Interfaces [\#](https://primevue.org/multiselect/\#api.multiselect.interfaces)
Defines the custom interfaces used by the module.
#### MultiSelectPassThroughMethodOptions [\#](https://primevue.org/multiselect/\#api.multiselect.interfaces.MultiSelectPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [MultiSelectProps](https://primevue.org/multiselect/#api.multiselect.interfaces.MultiSelectProps) | null | Defines valid properties. |
| state | [MultiSelectState](https://primevue.org/multiselect/#api.multiselect.interfaces.MultiSelectState) | null | Defines current inline state. |
| context | [MultiSelectContext](https://primevue.org/multiselect/#api.multiselect.interfaces.MultiSelectContext) | null | Defines current options. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### MultiSelectSharedPassThroughMethodOptions [\#](https://primevue.org/multiselect/\#api.multiselect.interfaces.MultiSelectSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [MultiSelectProps](https://primevue.org/multiselect/#api.multiselect.interfaces.MultiSelectProps) | null | Defines valid properties. |
| state | [MultiSelectState](https://primevue.org/multiselect/#api.multiselect.interfaces.MultiSelectState) | null | Defines current inline state. |
#### MultiSelectPassThroughOptions [\#](https://primevue.org/multiselect/\#api.multiselect.interfaces.MultiSelectPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| labelContainer | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the label container's DOM element. |
| label | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the label's DOM element. |
| clearIcon | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the label's DOM element. |
| chipItem | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the chip's DOM element. |
| pcChip | any | null | Used to pass attributes to the Chip. |
| dropdown | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the dropdown's DOM element. |
| loadingIcon | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the loading icon's DOM element. |
| dropdownIcon | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the dropdown icon's DOM element. |
| overlay | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the overlay's DOM element. |
| header | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| pcHeaderCheckbox | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the header checkbox's DOM element. |
| pcFilterContainer | any | null | Used to pass attributes to the IconField component. |
| pcFilter | any | null | Used to pass attributes to the InputText component. |
| pcFilterIconContainer | any | null | Used to pass attributes to the InputIcon component. |
| filterIcon | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the filter icon's DOM element. |
| listContainer | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the list container's DOM element. |
| virtualScroller | any | null | Used to pass attributes to the VirtualScroller component. |
| list | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the list's DOM element. |
| optionGroup | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the option group's DOM element. |
| option | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the option's DOM element. |
| optionLabel | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the option label's DOM element. |
| pcOptionCheckbox | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the option checkbox's DOM element. |
| emptyMessage | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the emptyMessage's DOM element. |
| hiddenInputContainer | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the hidden input container's DOM element. |
| hiddenInput | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the hidden input's DOM element. |
| hiddenFirstFocusableEl | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the hidden first focusable element's DOM element. |
| hiddenFilterResult | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the hidden filter result's DOM element. |
| hiddenSelectedMessage | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the hidden selected message's DOM element. |
| hiddenLastFocusableEl | [MultiSelectPassThroughOptionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughOptionType) | null | Used to pass attributes to the hidden last focusable element's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [MultiSelectPassThroughTransitionType](https://primevue.org/multiselect/#api.multiselect.types.MultiSelectPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### MultiSelectPassThroughAttributes [\#](https://primevue.org/multiselect/\#api.multiselect.interfaces.MultiSelectPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### MultiSelectState [\#](https://primevue.org/multiselect/\#api.multiselect.interfaces.MultiSelectState)
Defines current inline state in MultiSelect component.
| name | type | default | description |
| --- | --- | --- | --- |
| id | string | null | Current id state as a string. |
| focused | boolean | false | Current focused state as a boolean. |
| focusedOptionIndex | number | -1 | Current focused item index as a number. |
| filterValue | string | null | Current filter value state as a string. |
| overlayVisible | boolean | false | Current overlay visible state as a boolean. |
#### MultiSelectContext [\#](https://primevue.org/multiselect/\#api.multiselect.interfaces.MultiSelectContext)
Defines current options in MultiSelect component.
| name | type | default | description |
| --- | --- | --- | --- |
| selected | boolean | false | Current selection state of the item as a boolean. |
| focused | boolean | false | Current focus state of the item as a boolean. |
| disabled | boolean | false | Current disabled state of the item as a boolean. |
## Types [\#](https://primevue.org/multiselect/\#api.multiselect.types)
Defines the custom types used by the module.
#### MultiSelectPassThroughOptionType [\#](https://primevue.org/multiselect/\#api.multiselect.types.MultiSelectPassThroughOptionType)
| values |
| --- |
| MultiSelectPassThroughAttributes \| (options: MultiSelectPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### MultiSelectPassThroughTransitionType [\#](https://primevue.org/multiselect/\#api.multiselect.types.MultiSelectPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: MultiSelectPassThroughMethodOptions) => TransitionProps \| undefined |
#### MultiSelectEmits [\#](https://primevue.org/multiselect/\#api.multiselect.types.MultiSelectEmits)
| values |
| --- |
| EmitFn<MultiSelectEmitsOptions> |
- MultiSelect
  - Props
  - Emits
  - Slots
  - Methods
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Atlantis Template Overview
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![Template Hero Pattern](https://primefaces.org/cdn/primevue/images/templates/atlantis/atlantis-hero-pattern.png)
Prepare to be amazed by the remastered Atlantis for PrimeVue featuring a new gorgeous dark mode for the entire layout, 5 menu modes, reusable css widgets, utilities, modern icons and many more.
[Live Demo](https://www.primefaces.org/atlantis-vue/) [Buy Now](https://www.primefaces.org/store/)
[Community](https://github.com/orgs/primefaces/discussions/categories/primevue-templates) [Documentation](https://www.primefaces.org/atlantis-vue/documentation/)
![Template Dashboard Image 1](https://primefaces.org/cdn/primevue/images/templates/atlantis/atlantis-hero-dashboard1.png)![Template Dashboard Image 2](https://primefaces.org/cdn/primevue/images/templates/atlantis/atlantis-hero-dashboard2.png)
Basic License
$59
Non Commercial Usage
Single End Product, No Multi-Use
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
Extended License
$590
Commercial Usage
Multiple End Products
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
The download package is a Vite-based project containing all application source codes deployed at the live demo. The project code is written in JavaScript.
Visit the [official documentation](https://atlantis.primevue.org/documentation) for more information.
## Features
01
01
01
##### Light and Dark Modes
The stunning dark and light modes will impress your users.
02
02
02
##### Component Themes
Atlantis offers 16 built-in component themes with dark and light options. You are also free to create your own theme by defining couple SASS variables.
03
03
03
##### 7 Menu Orientations
Static, Overlay, Slim, Slim+, Reveal, Drawer and Horizontal are the available menu layouts depending on your preference.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/atlantis/features-animation-darkmode.png)
\> npm install or yarn
\> npm run dev or yarn dev
![Vue 3D Logo](https://primefaces.org/cdn/primevue/images/templates/vue-3d-logo.png)
### Vue based on Vite
Atlantis is powered by Vite to get started in no time following the best practices. Template is implemented purely in Vue.
01
01
01
##### Tailwind CSS
The demo content is built with TailwindCSS, while the application shell uses custom CSS, offering flexibility and efficiency for responsive design.
02
02
02
##### PrimeBlocks
Fully compatible with [PrimeBlocks](https://primeblocks.org/), choose from the wide range of blocks and customize the way you like. Note that PrimeBlocks is not included in the
template and requires a separate purchase.
03
03
03
##### PrimeIcons
Atlantis ships with PrimeIcons, PrimeTekâ€™s modern icon library including a wide range of icons for your applications.
04
04
04
##### Figma File
Atlantis uses Figma as the design tool. It will be possible to download the Figma file after your purchase. You can
[preview the Figma file](https://www.figma.com/file/two0OGwOwHfq0sdjeK34l0/Preview-%7C-Atlantis-2022?node-id=15%3A1427&t=2lNJ5EzW0xuvQWdm-1) before the purchase. Note that PrimeVue UI components are excluded from the
Atlantis Figma file as they are available in PrimeOne for Figma only.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/common/tailwind.png)
![Fully Responsive](https://primefaces.org/cdn/primevue/images/templates/atlantis/atlantis-features2-responsive.png)
## Fully Responsive
Atlantis is crafted to provide optimal viewing and interaction experience for a wide range of devices.
![Cross Browser Compatible](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-compatible.png)
## Cross Browser Compatible
First class support for Firefox, Safari, Chrome and Edge.
![Support](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-lifetime.png)
## Support
PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users
can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and
[Forum](https://github.com/orgs/primefaces/discussions/categories/primevue-templates).
![Full SaSS Support](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-customizable.png)
## Full SaSS Support
Sass is utilized for both the application and components to provide simplicity and flexibility.
![Ready to Use Pages](https://primefaces.org/cdn/primevue/images/templates/atlantis/atlantis-features2-ready.png)
## Ready to Use Pages
Landing, login, invoice, help, user management and error pages are provided as template pages to get started with building your app.
![Mobile Experience](https://primefaces.org/cdn/primevue/images/templates/atlantis/atlantis-features2-mobile.png)
## Mobile Experience
Touch optimized enhanced mobile experience with responsive design.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Accessibility Guide
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Accessibility
PrimeVue has WCAG 2.1 AA level compliance, refer to the accessibility documentation of each component for detailed information.
## Introduction [\#](https://primevue.org/guides/accessibility/\#introduction)
According to the World Health Organization, 15% of the world population has a disability to some degree. As a result, accessibility features in any context such as a ramp for wheelchair users or a multimedia with captions are crucial to ensure content can be consumed by anyone.
Types of disabilities are diverse so you need to know your audience well and how they interact with the content created. There four main categories;
### Visual Impairments
Blindness, low-level vision or color blindness are the common types of visual impairments. Screen magnifiers and the color blind mode are usually built-in features of the browsers whereas for people who rely on screen readers, page developers are required to make sure content is readable by the readers. Popular readers are [NVDA](https://www.nvaccess.org/) , [JAWS](https://www.freedomscientific.com/Products/software/JAWS/) and [ChromeVox](https://www.chromevox.com/) .
### Hearing Impairments
Deafness or hearing loss refers to the inability to hear sounds totally or partially. People with hearing impairments use assistive devices however it may not be enough when interacting with a web page. Common implementation is providing textual alternatives, transcripts and captions for content with audio.
### Mobility Impairments
People with mobility impairments have disabilities related to movement due to loss of a limb, paralysis or other varying reasons. Assistive technologies like a head pointer is a device to interact with a screen whereas keyboard or a trackpad remain as solutions for people who are not able to utilize a mouse.
### Cognitive Impairments
Cognitive impairments have a wider range that includes people with learning disabilities, depression and dyslexia. A well designed content also leads to better user experience for people without disabilities so designing for cognitive impairments result in better design for any user.
## WCAG [\#](https://primevue.org/guides/accessibility/\#wcag)
Correct page structure with the aid of assistive technologies are the core ingridients for an accessible web content. HTML is based on an accessible foundation, form controls can be used by keyboard by default and semantic HTML is easier to be processed by a screen reader.
[WCAG](https://www.w3.org/WAI/standards-guidelines/wcag/) refers to **Web Content Accessibility Guideline**, a standard managed by the WAI (Web Accessibility Initiative) of W3C (World Wide Web Consortium). WCAG consists of recommendations for making the web content more accessible. PrimeVue components aim high level of WCAG compliancy in the near future.
Various countries around the globe have governmental policies regarding web accessibility as well. Most well known of these are [Section 508](https://www.section508.gov/manage/laws-and-policies/) in the US and [Web Accessibility Directive](https://digital-strategy.ec.europa.eu/en/policies/web-accessibility) of the European Union.
## Form Controls [\#](https://primevue.org/guides/accessibility/\#formcontrols)
Native form elements should be preferred instead of elements that are meant for other purposes like presentation. As an example, button below is rendered as a form control by the browser, can receive focus via tabbing and can be used with space key as well to trigger.
```markup
<button @click="onButtonClick(event)">Click</button>
```
Copy
On the other hand, a fancy css based button using a div has no keyboard or screen reader support.
```markup
<div class="fancy-button" @click="onButtonClick(event)">Click</div>
```
Copy
_tabindex_ is required to make a div element accessible in addition to use a keydown to bring the keyboard support back. To avoid the overload and implementing functionality that is already provided by the browser, native form controls should be preferred.
```markup
<div class="fancy-button" @click="onClick(event)" @keydown="onKeyDown(event)" tabindex="0">Click</div>
```
Copy
Form components must be related to another element that describes what the form element is used for. This is usually achieved with the _label_ element.
```markup
<label for="myinput">Username:</label>
<input id="myinput" type="text" name="username" />
```
Copy
## Semantic HTML [\#](https://primevue.org/guides/accessibility/\#semantichtml)
HTML offers various element to organize content on a web page that screen readers are aware of. Preferring Semantic HTML for good semantics provide out of the box support for reader which is not possible when regular _div_ elements with classes are used. Consider the following example that do not mean too much for readers.
```markup
<div class="header">
    <div class="header-text">Header</div>
</div>
<div class="nav"></div>
<div class="main">
    <div class="content">
    </div>
    <div class="sidebar">
    </div>
</div>
<div class="footer">
</div>
```
Copy
Same layout can be achieved using the semantic elements with screen reader support built-in.
```markup
<header>
    <h1>Header</h1>
</header>
<nav></nav>
<main>
    <article></article>
    <aside></aside>
</main>
<footer>
</footer>
```
Copy
## WAI ARIA [\#](https://primevue.org/guides/accessibility/\#waiaria)
ARIA refers to "Accessible Rich Internet Applications" is a suite to fill the gap where semantic HTML is inadequate. These cases are mainly related to rich UI components/widgets. Although browser support for rich UI components such as a datepicker or colorpicker has been improved over the past years many web developers still utilize UI components derived from standard HTML elements created by them or by other projects like PrimeVue. These types of components must provide keyboard and screen reader support, the latter case is where the WAI-ARIA is utilized.
ARIA consists of roles, properties and attributes. **Roles** define what the element is mainly used for e.g. _checkbox_, _dialog_, _tablist_ whereas **States** and **Properties** define the metadata of the element like _aria-checked_, _aria-disabled_.
Consider the following case of a native checkbox. It has built-in keyboard and screen reader support.
```markup
<input type="checkbox" value="Prime" name="ui" checked>
```
Copy
A fancy checkbox with css animations might look more appealing but accessibility might be lacking. Checkbox below may display a checked font icon with animations however it is not tabbable, cannot be checked with space key and cannot be read by a reader.
```markup
<div class="fancy-checkbox">
    <i class="checked-icon" v-if="checked"></i>
</div>
```
Copy
One alternative is using ARIA roles for readers and use javascript for keyboard support. Notice the usage of _aria-labelledby_ as a replacement of the _label_ tag with for.
```markup
<span id="chk-label">Remember Me</span>
<div class="fancy-checkbox" role="checkbox" aria-checked="false" tabindex="0" aria-labelledby="chk-label"
    @click="toggle" @keydown="onKeyDown(event)">
    <i class="checked-icon" v-if="checked"></i>
</div>
```
Copy
However the best practice is combining semantic HTML for accessibility while keeping the design for UX. This approach involves hiding a native checkbox for accessibility and using javascript events to update its state. Notice the usage of _p-hidden-accessible_ that hides the elements from the user but not from the screen reader.
```markup
<label for="chkbox">Remember Me</label>
<div class="fancy-checkbox" @click="toggle">
    <input class="p-hidden-accessible" type="checkbox" id="chkbox" @focus="updateParentVisuals" @blur="updateParentVisuals"
        @keydown="onKeyDown(event)">
    <i class="checked-icon" v-if="checked"></i>
</div>
```
Copy
A working sample is the PrimeVue checkbox that is tabbable, keyboard accessible and is compliant with a screen reader. Instead of ARIA roles it relies on a hidden native checkbox.
Remember Me
## Colors [\#](https://primevue.org/guides/accessibility/\#colors)
Colors on a web page should aim a contrast ratio of at least **4.5:1** and consider a selection of colors that do not cause vibration.
### Good Contrast
Color contrast between the background and the foreground content should be sufficient enough to ensure readability. Example below displays two cases with good and bad samples.
GOOD
BAD
### Vibration
Color vibration is leads to an illusion of motion due to choosing colors that have low visibility against each other. Color combinations need to be picked with caution to avoid vibration.
VIBRATE
### Dark Mode
Highly saturated colors should be avoided when used within a dark design scheme as they cause eye strain. Instead desaturated colors should be preferred.
Indigo 500
Indigo 200
- Introduction
- WCAG
- Form Controls
- Semantic HTML
- WAI ARIA
- Colors
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Custom Icons for PrimeVue
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Custom Icons
PrimeVue components can be used with any icon library using the templating features.
## Material [\#](https://primevue.org/customicons/\#material)
[Material icons](https://fonts.google.com/icons) is the official icon library based on Google Material Design.
```markup
<Select>
    <template #dropdownicon>
        <span class="material-icons">arrow_drop_down</span>
    </template>
</Select>
```
Copy
## FontAwesome [\#](https://primevue.org/customicons/\#fontawesome)
[Font Awesome](https://fontawesome.com/) is a popular icon library with a wide range of icons.
```markup
<Select>
    <template #dropdownicon>
        <i class="fa-light fa-chevron-down"></i>
    </template>
</Select>
```
Copy
## SVG [\#](https://primevue.org/customicons/\#svg)
Inline SVGs are embedded inside the dom.
```markup
<Select>
    <template #dropdownicon>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <g id="chevron-down">
                <path d="M12,15.25a.74.74,0,0,1-.53-.22l-5-5A.75.75,0,0,1,7.53,9L12,13.44,16.47,9A.75.75,0,0,1,17.53,10l-5,5A.74.74,0,0,1,12,15.25Z"/>
            </g>
        </svg>
    </template>
</Select>
```
Copy
## Image [\#](https://primevue.org/customicons/\#image)
Any type of image can be used as an icon.
```markup
<Select>
    <template #dropdownicon>
        <img alt="dropdown icon" src="/assets/icons/arrow_down.png">
    </template>
</Select>
```
Copy
## Video Tutorial [\#](https://primevue.org/customicons/\#video)
A video tutorial to demonstrate how to customize icons.
Custom Icons with PrimeVue - YouTube
Cagatay Civici
8.4K subscribers
[Custom Icons with PrimeVue](https://www.youtube.com/watch?v=C_eZelJPs6o)
Cagatay Civici
Search
Watch later
Share
Copy link
Info
Shopping
Tap to unmute
If playback doesn't begin shortly, try restarting your device.
More videos
## More videos
You're signed out
Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.
CancelConfirm
Share
Include playlist
An error occurred while retrieving sharing information. Please try again later.
[Watch on](https://www.youtube.com/watch?v=C_eZelJPs6o&embeds_referring_euri=https%3A%2F%2Fprimevue.org%2F)
0:00
0:00 / 4:46â€¢Live
â€¢
[Watch on YouTube](https://www.youtube.com/watch?v=C_eZelJPs6o "Watch on YouTube")
- Material
- FontAwesome
- SVG
- Image
- Video Tutorial
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Ultima Template Overview
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![Template Hero Pattern](https://primefaces.org/cdn/primevue/images/templates/ultima/ultima-hero-pattern.png)
A highly customizable premium application template featuring 4 menu modes, 13 themes, light and dark modes. Based on material design language, it is fully responsive, touch optimized, built with SASS, CSS3 and HTML5.
[Live Demo](https://ultima.primevue.org/) [Buy Now](https://www.primefaces.org/store/)
[Community](https://github.com/orgs/primefaces/discussions/categories/primevue-templates) [Documentation](https://ultima.primevue.org/documentation)
![Template Dashboard Image 1](https://primefaces.org/cdn/primevue/images/templates/ultima/ultima-hero-dashboard1.png)![Template Dashboard Image 2](https://primefaces.org/cdn/primevue/images/templates/ultima/ultima-hero-dashboard2.png)
Basic License
$59
Non Commercial Usage
Single End Product, No Multi-Use
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
Extended License
$590
Commercial Usage
Multiple End Products
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
The download package is a Vite-based project containing all application source codes deployed at the live demo. The project code is written in JavaScript.
Visit the [official documentation](https://ultima.primevue.org/documentation/) for more information.
## Features
01
01
01
##### Light and Dark Modes
Ultima offers you 2 uniquely designed layout modes to choose from; Light and Dark.
02
02
02
##### Component Themes
Ultima offers 17 built-in component themes with dark and light options. Also if you wanna create your own theme you can do it by just defining couple SASS variables.
03
03
03
##### 7 Menu Orientations
Static, Overlay, Slim, Slim+, Reveal, Drawer and Horizontal are the available menu layouts depending on your preference.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/ultima/features-animation-darkmode.png)
\> npm install or yarn
\> npm run dev or yarn dev
![Vue 3D Logo](https://primefaces.org/cdn/primevue/images/templates/vue-3d-logo.png)
### Vue based on Vite
Ultima is powered by Vite to get started in no time following the best practices.
01
01
01
##### Tailwind CSS
The demo content is built with TailwindCSS, while the application shell uses custom CSS, offering flexibility and efficiency for responsive design.
02
02
02
##### PrimeBlocks
Fully compatible with [PrimeBlocks](https://primeblocks.org/), choose from the wide range of blocks and customize the way you like. Note that PrimeBlocks is not included in the
template and requires a separate purchase.
03
03
03
##### PrimeIcons
Ultima ships with PrimeIcons, PrimeTekâ€™s modern icon library including a wide range of icons for your applications.
04
04
04
##### Figma File
Ultima uses Figma as the design tool. It will be possible to download the Figma file after your purchase. You can
[preview the Figma file](https://www.figma.com/file/ijQrxq13lxacgkb6XHlLxA/Preview-%7C-Ultima-2022?node-id=354%3A7715&t=gjWHprUDE5RJIg78-1) before the purchase. Note that PrimeVue UI components are excluded from the Ultima
Figma file as they are available in PrimeOne for Figma only.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/common/tailwind.png)
![Fully Responsive](https://primefaces.org/cdn/primevue/images/templates/ultima/ultima-features2-responsive.png)
## Fully Responsive
Ultima is crafted to provide optimal viewing and interaction experience for a wide range of devices.
![Cross Browser Compatible](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-compatible.png)
## Cross Browser Compatible
First class support for Firefox, Safari, Chrome and Edge.
![Support](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-lifetime.png)
## Support
PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users
can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and
[Forum](https://github.com/orgs/primefaces/discussions/categories/primevue-templates).
![Customizable Design](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-customizable.png)
## Customizable Design
Fully customizable with a mixture of Sass and CSS variables.
![Ready to Use Pages](https://primefaces.org/cdn/primevue/images/templates/ultima/ultima-features2-ready.png)
## Ready to Use Pages
Everything is ready for you to start and build your app in no time. Landing, login, invoice, help, and error pages are provided as template pages.
![Mobile Experience](https://primefaces.org/cdn/primevue/images/templates/ultima/ultima-features2-mobile.png)
## Mobile Experience
Touch optimized enhanced mobile experience with responsive design.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Image Comparison Tool
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# ImageCompare
Compare two images side by side with a slider.
## Import [\#](https://primevue.org/imagecompare/\#import)
```
import ImageCompare from 'primevue/imagecompare';
```
## Basic [\#](https://primevue.org/imagecompare/\#basic)
Images are defined using templating with _left_ and _right_ slots. Use the _style_ or _class_ properties to define the size of the container.
![](https://primefaces.org/cdn/primevue/images/compare/island1.jpg)![](https://primefaces.org/cdn/primevue/images/compare/island2.jpg)
```
<ImageCompare class="shadow-lg rounded-2xl">
    <template #left>
        <img src="~/assets/images/island1.jpg" />
    </template>
    <template #right>
        <img src="~/assets/images/island2.jpg" />
    </template>
</ImageCompare>
```
## Responsive [\#](https://primevue.org/imagecompare/\#responsive)
Apply responsive styles to the container element to optimize display per screen size.
![](https://primefaces.org/cdn/primevue/images/compare/island1.jpg)![](https://primefaces.org/cdn/primevue/images/compare/island2.jpg)
```
<ImageCompare class="sm:!w-96 shadow-lg rounded-2xl">
    <template #left>
        <img src="~/assets/images/island1.jpg" />
    </template>
    <template #right>
        <img src="~/assets/images/island2.jpg" />
    </template>
</ImageCompare>
```
## Accessibility [\#](https://primevue.org/imagecompare/\#accessibility)
### Screen Reader
ImageComponent component uses a native range _slider_ internally. Value to describe the component can be defined using _aria-labelledby_ and _aria-label_ props.
```
<span id="image_label">Compare Images</span>
<ImageCompare class="shadow-lg rounded-2xl" aria-labelledby="image-label">
    ...
</ImageCompare>
<ImageCompare class="shadow-lg rounded-2xl" aria-label="Compare Images">
    ...
</ImageCompare>
```
### Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the component. |
| _left arrow_ _up arrow_ | Decrements the value. |
| _right arrow_ _down arrow_ | Increments the value. |
| _home_ | Set the minimum value. |
| _end_ | Set the maximum value. |
| _page up_ | Increments the value by 10 steps. |
| _page down_ | Decrements the value by 10 steps. |
- Import
- Basic
- Responsive
- Accessibility
# ImageCompare API
API defines helper props, events and others for the PrimeVue ImageCompare module.
Theme Designer
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue DataTable Overview
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# DataTable
DataTable displays data in tabular format.
## Import [\#](https://primevue.org/datatable/\#import)
```
import DataTable from 'primevue/datatable';
import Column from 'primevue/column';
import ColumnGroup from 'primevue/columngroup';   // optional
import Row from 'primevue/row';                   // optional
```
## Basic [\#](https://primevue.org/datatable/\#basic)
DataTable requires a _value_ as data to display and _Column_ components as children for the representation.
```
<DataTable :value="products" tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
## Dynamic Columns [\#](https://primevue.org/datatable/\#dynamic_columns)
Columns can be created programmatically.
```
<DataTable :value="products" tableStyle="min-width: 50rem">
    <Column v-for="col of columns" :key="col.field" :field="col.field" :header="col.header"></Column>
</DataTable>
```
## Template [\#](https://primevue.org/datatable/\#template)
Custom content at _header_ and _footer_ sections are supported via templating.
```
<DataTable :value="products" tableStyle="min-width: 50rem">
    <template #header>
        <div class="flex flex-wrap items-center justify-between gap-2">
            <span class="text-xl font-bold">Products</span>
            <Button icon="pi pi-refresh" rounded raised />
        </div>
    </template>
    <Column field="name" header="Name"></Column>
    <Column header="Image">
        <template #body="slotProps">
            <img :src="`https://primefaces.org/cdn/primevue/images/product/${slotProps.data.image}`" :alt="slotProps.data.image" class="w-24 rounded" />
        </template>
    </Column>
    <Column field="price" header="Price">
        <template #body="slotProps">
            {{ formatCurrency(slotProps.data.price) }}
        </template>
    </Column>
    <Column field="category" header="Category"></Column>
    <Column field="rating" header="Reviews">
        <template #body="slotProps">
            <Rating :modelValue="slotProps.data.rating" readonly />
        </template>
    </Column>
    <Column header="Status">
        <template #body="slotProps">
            <Tag :value="slotProps.data.inventoryStatus" :severity="getSeverity(slotProps.data)" />
        </template>
    </Column>
    <template #footer> In total there are {{ products ? products.length : 0 }} products. </template>
</DataTable>
```
## Size [\#](https://primevue.org/datatable/\#size)
In addition to a regular table, alternatives with alternative sizes are available.
```
<SelectButton v-model="size" :options="sizeOptions" optionLabel="label" dataKey="label" />
<DataTable :value="products" :size="size.value" tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
## Grid Lines [\#](https://primevue.org/datatable/\#gridlines)
Enabling _showGridlines_ displays borders between cells.
```
<DataTable :value="products" showGridlines tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
## Striped Rows [\#](https://primevue.org/datatable/\#striped)
Alternating rows are displayed when _stripedRows_ property is present.
```
<DataTable :value="products" stripedRows tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
## Pagination [\#](https://primevue.org/datatable/\#pagination)
### Basic [\#](https://primevue.org/datatable/\#paginator_basic)
Pagination is enabled by adding _paginator_ property and defining _rows_ per page.
```
<DataTable :value="customers" paginator :rows="5" :rowsPerPageOptions="[5, 10, 20, 50]" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" style="width: 25%"></Column>
    <Column field="country.name" header="Country" style="width: 25%"></Column>
    <Column field="company" header="Company" style="width: 25%"></Column>
    <Column field="representative.name" header="Representative" style="width: 25%"></Column>
</DataTable>
```
### Template [\#](https://primevue.org/datatable/\#paginator_template)
Paginator UI is customized using the _paginatorTemplate_ property. Each element can also be customized further with your own UI to replace the default one, refer to the [Paginator](https://primevue.org/paginator/) component for more information about the advanced customization options.
```
<DataTable :value="customers" paginator :rows="5" :rowsPerPageOptions="[5, 10, 20, 50]" tableStyle="min-width: 50rem"
        paginatorTemplate="RowsPerPageDropdown FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink"
        currentPageReportTemplate="{first} to {last} of {totalRecords}">
    <template #paginatorstart>
        <Button type="button" icon="pi pi-refresh" text />
    </template>
    <template #paginatorend>
        <Button type="button" icon="pi pi-download" text />
    </template>
    <Column field="name" header="Name" style="width: 25%"></Column>
    <Column field="country.name" header="Country" style="width: 25%"></Column>
    <Column field="company" header="Company" style="width: 25%"></Column>
    <Column field="representative.name" header="Representative" style="width: 25%"></Column>
</DataTable>
```
### Headless [\#](https://primevue.org/datatable/\#paginator_headless)
Headless mode on Pagination is enabled by adding using _paginatorcontainer_.
```
<DataTable :value="customers" paginator :rows="5" :rowsPerPageOptions="[5, 10, 20, 50]" tableStyle="min-width: 50rem">
    <Column field="name" header="Name" style="width: 25%"></Column>
    <Column field="country.name" header="Country" style="width: 25%"></Column>
    <Column field="company" header="Company" style="width: 25%"></Column>
    <Column field="representative.name" header="Representative" style="width: 25%"></Column>
    <template #paginatorcontainer="{ first, last, page, pageCount, prevPageCallback, nextPageCallback, totalRecords }">
        <div class="flex items-center gap-4 border border-primary bg-transparent rounded-full w-full py-1 px-2 justify-between">
            <Button icon="pi pi-chevron-left" rounded text @click="prevPageCallback" :disabled="page === 0" />
            <div class="text-color font-medium">
                <span class="hidden sm:block">Showing {{ first }} to {{ last }} of {{ totalRecords }}</span>
                <span class="block sm:hidden">Page {{ page + 1 }} of {{ pageCount }}</span>
            </div>
            <Button icon="pi pi-chevron-right" rounded text @click="nextPageCallback" :disabled="page === pageCount - 1" />
        </div>
    </template>
</DataTable>
```
## Sort [\#](https://primevue.org/datatable/\#sort)
### Single Column [\#](https://primevue.org/datatable/\#single_sort)
Sorting on a column is enabled by adding the _sortable_ property.
```
<DataTable :value="products" tableStyle="min-width: 50rem">
    <Column field="code" header="Code" sortable style="width: 25%"></Column>
    <Column field="name" header="Name" sortable style="width: 25%"></Column>
    <Column field="category" header="Category" sortable style="width: 25%"></Column>
    <Column field="quantity" header="Quantity" sortable style="width: 25%"></Column>
</DataTable>
```
### Multiple Columns [\#](https://primevue.org/datatable/\#multiple_sort)
Multiple columns can be sorted by defining _sortMode_ as _multiple_. This mode requires metaKey (e.g. _âŒ˜_) to be pressed when clicking a header.
```
<DataTable :value="products" sortMode="multiple" tableStyle="min-width: 50rem">
    <Column field="code" header="Code" sortable style="width: 25%"></Column>
    <Column field="name" header="Name" sortable style="width: 25%"></Column>
    <Column field="category" header="Category" sortable style="width: 25%"></Column>
    <Column field="quantity" header="Quantity" sortable style="width: 25%"></Column>
</DataTable>
```
### Presort [\#](https://primevue.org/datatable/\#pre_sort)
Defining a default _sortField_ and _sortOrder_ displays data as sorted initially in single column sorting. In _multiple_ sort mode, _multiSortMeta_ should be used instead by providing an array of _DataTableSortMeta_ objects.
```
<DataTable :value="products" sortField="price" :sortOrder="-1" tableStyle="min-width: 50rem">
    <Column field="code" header="Code" sortable style="width: 20%"></Column>
    <Column field="name" header="Name" sortable style="width: 20%"></Column>
    <Column field="price" header="Price" :sortable="true">
        <template #body="slotProps">
            {{ formatCurrency(slotProps.data.price) }}
        </template>
    </Column>
    <Column field="category" header="Category" sortable style="width: 20%"></Column>
    <Column field="quantity" header="Quantity" sortable style="width: 20%"></Column>
</DataTable>
```
### Removable [\#](https://primevue.org/datatable/\#removable_sort)
When _removableSort_ is present, the third click removes the sorting from the column.
```
<DataTable :value="products" removableSort tableStyle="min-width: 50rem">
    <Column field="code" header="Code" sortable style="width: 25%"></Column>
    <Column field="name" header="Name" sortable style="width: 25%"></Column>
    <Column field="category" header="Category" sortable style="width: 25%"></Column>
    <Column field="quantity" header="Quantity" sortable style="width: 25%"></Column>
</DataTable>
```
## Filter [\#](https://primevue.org/datatable/\#filter)
### Basic [\#](https://primevue.org/datatable/\#basic_filter)
Data filtering is enabled by defining the _filters_ model referring to a _DataTableFilterMeta_ instance and specifying a filter element for a column using the _filter_ template. This template receives a _filterModel_ and _filterCallback_ to build your own UI.
The optional global filtering searches the data against a single value that is bound to the _global_ key of the _filters_ object. The fields to search against are defined with the _globalFilterFields_.
```
<DataTable v-model:filters="filters" :value="customers" paginator :rows="10" dataKey="id" filterDisplay="row" :loading="loading"
        :globalFilterFields="['name', 'country.name', 'representative.name', 'status']">
    <template #header>
        <div class="flex justify-end">
            <IconField>
                <InputIcon>
                    <i class="pi pi-search" />
                </InputIcon>
                <InputText v-model="filters['global'].value" placeholder="Keyword Search" />
            </IconField>
        </div>
    </template>
    <template #empty> No customers found. </template>
    <template #loading> Loading customers data. Please wait. </template>
    <Column field="name" header="Name" style="min-width: 12rem">
        <template #body="{ data }">
            {{ data.name }}
        </template>
        <template #filter="{ filterModel, filterCallback }">
            <InputText v-model="filterModel.value" type="text" @input="filterCallback()" placeholder="Search by name" />
        </template>
    </Column>
    <Column header="Country" filterField="country.name" style="min-width: 12rem">
        <template #body="{ data }">
            <div class="flex items-center gap-2">
                <img alt="flag" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${data.country.code}`" style="width: 24px" />
                <span>{{ data.country.name }}</span>
            </div>
        </template>
        <template #filter="{ filterModel, filterCallback }">
            <InputText v-model="filterModel.value" type="text" @input="filterCallback()" placeholder="Search by country" />
        </template>
    </Column>
    <Column header="Agent" filterField="representative" :showFilterMenu="false" style="min-width: 14rem">
        <template #body="{ data }">
            <div class="flex items-center gap-2">
                <img :alt="data.representative.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${data.representative.image}`" style="width: 32px" />
                <span>{{ data.representative.name }}</span>
            </div>
        </template>
        <template #filter="{ filterModel, filterCallback }">
            <MultiSelect v-model="filterModel.value" @change="filterCallback()" :options="representatives" optionLabel="name" placeholder="Any" style="min-width: 14rem" :maxSelectedLabels="1">
                <template #option="slotProps">
                    <div class="flex items-center gap-2">
                        <img :alt="slotProps.option.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.option.image}`" style="width: 32px" />
                        <span>{{ slotProps.option.name }}</span>
                    </div>
                </template>
            </MultiSelect>
        </template>
    </Column>
    <Column field="status" header="Status" :showFilterMenu="false" style="min-width: 12rem">
        <template #body="{ data }">
            <Tag :value="data.status" :severity="getSeverity(data.status)" />
        </template>
        <template #filter="{ filterModel, filterCallback }">
            <Select v-model="filterModel.value" @change="filterCallback()" :options="statuses" placeholder="Select One" style="min-width: 12rem" :showClear="true">
                <template #option="slotProps">
                    <Tag :value="slotProps.option" :severity="getSeverity(slotProps.option)" />
                </template>
            </Select>
        </template>
    </Column>
    <Column field="verified" header="Verified" dataType="boolean" style="min-width: 6rem">
        <template #body="{ data }">
            <i class="pi" :class="{ 'pi-check-circle text-green-500': data.verified, 'pi-times-circle text-red-400': !data.verified }"></i>
        </template>
        <template #filter="{ filterModel, filterCallback }">
            <Checkbox v-model="filterModel.value" :indeterminate="filterModel.value === null" binary @change="filterCallback()" />
        </template>
    </Column>
</DataTable>
```
### Advanced [\#](https://primevue.org/datatable/\#advanced_filter)
When _filterDisplay_ is set as _menu_, filtering UI is placed inside a popover with support for multiple constraints and advanced templating.
```
<DataTable v-model:filters="filters" :value="customers" paginator showGridlines :rows="10" dataKey="id"
        filterDisplay="menu" :loading="loading" :globalFilterFields="['name', 'country.name', 'representative.name', 'balance', 'status']">
    <template #header>
        <div class="flex justify-between">
            <Button type="button" icon="pi pi-filter-slash" label="Clear" outlined @click="clearFilter()" />
            <IconField>
                <InputIcon>
                    <i class="pi pi-search" />
                </InputIcon>
                <InputText v-model="filters['global'].value" placeholder="Keyword Search" />
            </IconField>
        </div>
    </template>
    <template #empty> No customers found. </template>
    <template #loading> Loading customers data. Please wait. </template>
    <Column field="name" header="Name" style="min-width: 12rem">
        <template #body="{ data }">
            {{ data.name }}
        </template>
        <template #filter="{ filterModel }">
            <InputText v-model="filterModel.value" type="text" placeholder="Search by name" />
        </template>
    </Column>
    <Column header="Country" filterField="country.name" style="min-width: 12rem">
        <template #body="{ data }">
            <div class="flex items-center gap-2">
                <img alt="flag" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${data.country.code}`" style="width: 24px" />
                <span>{{ data.country.name }}</span>
            </div>
        </template>
        <template #filter="{ filterModel }">
            <InputText v-model="filterModel.value" type="text" placeholder="Search by country" />
        </template>
        <template #filterclear="{ filterCallback }">
            <Button type="button" icon="pi pi-times" @click="filterCallback()" severity="secondary"></Button>
        </template>
        <template #filterapply="{ filterCallback }">
            <Button type="button" icon="pi pi-check" @click="filterCallback()" severity="success"></Button>
        </template>
        <template #filterfooter>
            <div class="px-4 pt-0 pb-4 text-center">Customized Buttons</div>
        </template>
    </Column>
    <Column header="Agent" filterField="representative" :showFilterMatchModes="false" :filterMenuStyle="{ width: '14rem' }" style="min-width: 14rem">
        <template #body="{ data }">
            <div class="flex items-center gap-2">
                <img :alt="data.representative.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${data.representative.image}`" style="width: 32px" />
                <span>{{ data.representative.name }}</span>
            </div>
        </template>
        <template #filter="{ filterModel }">
            <MultiSelect v-model="filterModel.value" :options="representatives" optionLabel="name" placeholder="Any">
                <template #option="slotProps">
                    <div class="flex items-center gap-2">
                        <img :alt="slotProps.option.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.option.image}`" style="width: 32px" />
                        <span>{{ slotProps.option.name }}</span>
                    </div>
                </template>
            </MultiSelect>
        </template>
    </Column>
    <Column header="Date" filterField="date" dataType="date" style="min-width: 10rem">
        <template #body="{ data }">
            {{ formatDate(data.date) }}
        </template>
        <template #filter="{ filterModel }">
            <DatePicker v-model="filterModel.value" dateFormat="mm/dd/yy" placeholder="mm/dd/yyyy" />
        </template>
    </Column>
    <Column header="Balance" filterField="balance" dataType="numeric" style="min-width: 10rem">
        <template #body="{ data }">
            {{ formatCurrency(data.balance) }}
        </template>
        <template #filter="{ filterModel }">
            <InputNumber v-model="filterModel.value" mode="currency" currency="USD" locale="en-US" />
        </template>
    </Column>
    <Column header="Status" field="status" :filterMenuStyle="{ width: '14rem' }" style="min-width: 12rem">
        <template #body="{ data }">
            <Tag :value="data.status" :severity="getSeverity(data.status)" />
        </template>
        <template #filter="{ filterModel }">
            <Select v-model="filterModel.value" :options="statuses" placeholder="Select One" showClear>
                <template #option="slotProps">
                    <Tag :value="slotProps.option" :severity="getSeverity(slotProps.option)" />
                </template>
            </Select>
        </template>
    </Column>
    <Column field="activity" header="Activity" :showFilterMatchModes="false" style="min-width: 12rem">
        <template #body="{ data }">
            <ProgressBar :value="data.activity" :showValue="false" style="height: 6px"></ProgressBar>
        </template>
        <template #filter="{ filterModel }">
            <Slider v-model="filterModel.value" range class="m-4"></Slider>
            <div class="flex items-center justify-between px-2">
                <span>{{ filterModel.value ? filterModel.value[0] : 0 }}</span>
                <span>{{ filterModel.value ? filterModel.value[1] : 100 }}</span>
            </div>
        </template>
    </Column>
    <Column field="verified" header="Verified" dataType="boolean" bodyClass="text-center" style="min-width: 8rem">
        <template #body="{ data }">
            <i class="pi" :class="{ 'pi-check-circle text-green-500 ': data.verified, 'pi-times-circle text-red-500': !data.verified }"></i>
        </template>
        <template #filter="{ filterModel }">
            <label for="verified-filter" class="font-bold"> Verified </label>
            <Checkbox v-model="filterModel.value" :indeterminate="filterModel.value === null" binary inputId="verified-filter" />
        </template>
    </Column>
</DataTable>
```
## Row Selection [\#](https://primevue.org/datatable/\#row_selection)
### Single [\#](https://primevue.org/datatable/\#single_row_selection)
Single row selection is enabled by defining _selectionMode_ as _single_ along with a value binding using _selection_ property. When available, it is suggested to provide a unique identifier of a row with _dataKey_ to optimize performance.
By default, metaKey press (e.g. _âŒ˜_) is necessary to unselect a row however this can be configured with disabling the _metaKeySelection_ property. In touch enabled devices this option has no effect and behavior is same as setting it to false.
```
<ToggleSwitch v-model="metaKey" inputId="input-metakey" />
<DataTable v-model:selection="selectedProduct" :value="products" selectionMode="single" :metaKeySelection="metaKey" dataKey="id" tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
### Multiple [\#](https://primevue.org/datatable/\#multiple_rows_selection)
More than one row is selectable by setting _selectionMode_ to _multiple_. By default in multiple selection mode, metaKey press (e.g. _âŒ˜_) is not necessary to add to existing selections. When the optional _metaKeySelection_ is present, behavior is changed in a way that selecting a new row requires meta key to be present. Note that in touch enabled devices, DataTable always ignores metaKey.
```
<ToggleSwitch v-model="metaKey" inputId="input-metakey" />
<DataTable v-model:selection="selectedProducts" :value="products" selectionMode="multiple" :metaKeySelection="metaKey" dataKey="id" tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
### RadioButton [\#](https://primevue.org/datatable/\#radiobutton_row_selection)
Specifying _selectionMode_ as _single_ on a Column, displays a radio button inside that column for selection. By default, row clicks also trigger selection, set _selectionMode_ of DataTable to _radiobutton_ to only trigger selection using the radio buttons.
```
<DataTable v-model:selection="selectedProduct" :value="products" dataKey="id" tableStyle="min-width: 50rem">
    <Column selectionMode="single" headerStyle="width: 3rem"></Column>
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
### Checkbox [\#](https://primevue.org/datatable/\#checkbox_row_selection)
Specifying _selectionMode_ as _multiple_ on a Column, displays a checkbox inside that column for selection.
The header checkbox toggles the selection state of the whole dataset by default, when paginator is enabled you may add _selectAll_ property and _select-all-change_ event to only control the selection of visible rows.
```
<DataTable v-model:selection="selectedProducts" :value="products" dataKey="id" tableStyle="min-width: 50rem">
    <Column selectionMode="multiple" headerStyle="width: 3rem"></Column>
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
### Column [\#](https://primevue.org/datatable/\#column_row_selection)
Row selection with an element inside a column is implemented with templating.
```
<DataTable :value="products" tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
    <Column class="w-24 !text-end">
        <template #body="{ data }">
            <Button icon="pi pi-search" @click="selectRow(data)" severity="secondary" rounded></Button>
        </template>
    </Column>
</DataTable>
```
### Events [\#](https://primevue.org/datatable/\#row_selection_events)
DataTable provides _row-select_ and _row-unselect_ events to listen selection events.
```
<DataTable v-model:selection="selectedProduct" :value="products" selectionMode="single" dataKey="id" :metaKeySelection="false"
        @rowSelect="onRowSelect" @rowUnselect="onRowUnselect" tableStyle="min-width: 50rem">
    <Column selectionMode="single" headerStyle="width: 3rem"></Column>
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
## Row Expansion [\#](https://primevue.org/datatable/\#row_expansion)
Row expansion is controlled with _expandedRows_ property. The column that has the expander element requires _expander_ property to be enabled. Optional _rowExpand_ and _rowCollapse_ events are available as callbacks.
Expanded rows can either be an array of row data or when _dataKey_ is present, an object whose keys are strings referring to the identifier of the row data and values are booleans to represent the expansion state e.g. _{'1004': true}_. The _dataKey_ alternative is more performant for large amounts of data.
```
<DataTable v-model:expandedRows="expandedRows" :value="products" dataKey="id"
        @rowExpand="onRowExpand" @rowCollapse="onRowCollapse" tableStyle="min-width: 60rem">
    <template #header>
        <div class="flex flex-wrap justify-end gap-2">
            <Button text icon="pi pi-plus" label="Expand All" @click="expandAll" />
            <Button text icon="pi pi-minus" label="Collapse All" @click="collapseAll" />
        </div>
    </template>
    <Column expander style="width: 5rem" />
    <Column field="name" header="Name"></Column>
    <Column header="Image">
        <template #body="slotProps">
            <img :src="`https://primefaces.org/cdn/primevue/images/product/${slotProps.data.image}`" :alt="slotProps.data.image" class="shadow-lg" width="64" />
        </template>
    </Column>
    <Column field="price" header="Price">
        <template #body="slotProps">
            {{ formatCurrency(slotProps.data.price) }}
        </template>
    </Column>
    <Column field="category" header="Category"></Column>
    <Column field="rating" header="Reviews">
        <template #body="slotProps">
            <Rating :modelValue="slotProps.data.rating" readonly />
        </template>
    </Column>
    <Column header="Status">
        <template #body="slotProps">
            <Tag :value="slotProps.data.inventoryStatus" :severity="getSeverity(slotProps.data)" />
        </template>
    </Column>
    <template #expansion="slotProps">
        <div class="p-4">
            <h5>Orders for {{ slotProps.data.name }}</h5>
            <DataTable :value="slotProps.data.orders">
                <Column field="id" header="Id" sortable></Column>
                <Column field="customer" header="Customer" sortable></Column>
                <Column field="date" header="Date" sortable></Column>
                <Column field="amount" header="Amount" sortable>
                    <template #body="slotProps">
                        {{ formatCurrency(slotProps.data.amount) }}
                    </template>
                </Column>
                <Column field="status" header="Status" sortable>
                    <template #body="slotProps">
                        <Tag :value="slotProps.data.status.toLowerCase()" :severity="getOrderSeverity(slotProps.data)" />
                    </template>
                </Column>
                <Column headerStyle="width:4rem">
                    <template #body>
                        <Button icon="pi pi-search" />
                    </template>
                </Column>
            </DataTable>
        </div>
    </template>
</DataTable>
```
## Edit [\#](https://primevue.org/datatable/\#edit)
### Cell [\#](https://primevue.org/datatable/\#cell_edit)
Cell editing is enabled by setting _editMode_ as _cell_, defining input elements with _editor_ templating of a Column and implementing _cell-edit-complete_ to update the state.
```
<DataTable :value="products" editMode="cell" @cell-edit-complete="onCellEditComplete"
    :pt="{
        table: { style: 'min-width: 50rem' },
        column: {
            bodycell: ({ state }) => ({
                class: [{ '!py-0': state['d_editing'] }]
            })
        }
    }"
>
    <Column v-for="col of columns" :key="col.field" :field="col.field" :header="col.header" style="width: 25%">
        <template #body="{ data, field }">
            {{ field === 'price' ? formatCurrency(data[field]) : data[field] }}
        </template>
        <template #editor="{ data, field }">
            <template v-if="field !== 'price'">
                <InputText v-model="data[field]" autofocus fluid />
            </template>
            <template v-else>
                <InputNumber v-model="data[field]" mode="currency" currency="USD" locale="en-US" autofocus fluid />
            </template>
        </template>
    </Column>
</DataTable>
```
### Row [\#](https://primevue.org/datatable/\#row_edit)
Row editing is configured with setting _editMode_ as _row_ and defining _editingRows_ with the v-model directive to hold the reference of the editing rows. Similarly with cell edit mode, defining input elements with _editor_ slot of a Column and implementing _row-edit-save_ are necessary to update the state. The column to control the editing state should have _editor_ templating applied.
```
<DataTable v-model:editingRows="editingRows" :value="products" editMode="row" dataKey="id" @row-edit-save="onRowEditSave"
    :pt="{
        table: { style: 'min-width: 50rem' },
        column: {
            bodycell: ({ state }) => ({
                style:  state['d_editing']&&'padding-top: 0.75rem; padding-bottom: 0.75rem'
            })
        }
    }"
>
    <Column field="code" header="Code" style="width: 20%">
        <template #editor="{ data, field }">
            <InputText v-model="data[field]" />
        </template>
    </Column>
    <Column field="name" header="Name" style="width: 20%">
        <template #editor="{ data, field }">
            <InputText v-model="data[field]" fluid />
        </template>
    </Column>
    <Column field="inventoryStatus" header="Status" style="width: 20%">
        <template #editor="{ data, field }">
            <Select v-model="data[field]" :options="statuses" optionLabel="label" optionValue="value" placeholder="Select a Status" fluid>
                <template #option="slotProps">
                    <Tag :value="slotProps.option.value" :severity="getStatusLabel(slotProps.option.value)" />
                </template>
            </Select>
        </template>
        <template #body="slotProps">
            <Tag :value="slotProps.data.inventoryStatus" :severity="getStatusLabel(slotProps.data.inventoryStatus)" />
        </template>
    </Column>
    <Column field="price" header="Price" style="width: 20%">
        <template #body="{ data, field }">
            {{ formatCurrency(data[field]) }}
        </template>
        <template #editor="{ data, field }">
            <InputNumber v-model="data[field]" mode="currency" currency="USD" locale="en-US" fluid />
        </template>
    </Column>
    <Column :rowEditor="true" style="width: 10%; min-width: 8rem" bodyStyle="text-align:center"></Column>
</DataTable>
```
## Scroll [\#](https://primevue.org/datatable/\#scroll)
### Vertical [\#](https://primevue.org/datatable/\#vertical_scroll)
Adding _scrollable_ property along with a _scrollHeight_ for the data viewport enables vertical scrolling with fixed headers.
```
<DataTable :value="customers" scrollable scrollHeight="400px" tableStyle="min-width: 50rem">
    <Column field="name" header="Name"></Column>
    <Column field="country.name" header="Country"></Column>
    <Column field="representative.name" header="Representative"></Column>
    <Column field="company" header="Company"></Column>
</DataTable>
```
### Flexible [\#](https://primevue.org/datatable/\#flex_scroll)
Flex scroll feature makes the scrollable viewport section dynamic instead of a fixed value so that it can grow or shrink relative to the parent size of the table. Click the button below to display a maximizable Dialog where data viewport adjusts itself according to the size changes.
Show
```
<Button label="Show" icon="pi pi-external-link" @click="dialogVisible = true" />
<Dialog v-model:visible="dialogVisible" header="Flex Scroll" :style="{ width: '75vw' }" maximizable modal :contentStyle="{ height: '300px' }">
    <DataTable :value="customers" scrollable scrollHeight="flex" tableStyle="min-width: 50rem">
        <Column field="name" header="Name"></Column>
        <Column field="country.name" header="Country"></Column>
        <Column field="representative.name" header="Representative"></Column>
        <Column field="company" header="Company"></Column>
    </DataTable>
    <template #footer>
        <Button label="Ok" icon="pi pi-check" @click="dialogVisible = false" />
    </template>
</Dialog>
```
### Horizontal [\#](https://primevue.org/datatable/\#horizontal_scroll)
Horizontal scrollbar is displayed when table width exceeds the parent width.
```
<DataTable :value="customers" scrollable scrollHeight="400px">
    <Column field="id" header="Id" footer="Id" style="min-width: 100px"></Column>
    <Column field="name" header="Name" footer="Name" style="min-width: 200px"></Column>
    <Column field="country.name" header="Country" footer="Country" style="min-width: 200px"></Column>
    <Column field="date" header="Date" footer="Date" style="min-width: 200px"></Column>
    <Column field="balance" header="Balance" footer="Balance" style="min-width: 200px">
        <template #body="{ data }">
            {{ formatCurrency(data.balance) }}
        </template>
    </Column>
    <Column field="company" header="Company" footer="Company" style="min-width: 200px"></Column>
    <Column field="status" header="Status" footer="Status" style="min-width: 200px"></Column>
    <Column field="activity" header="Activity" footer="Activity" style="min-width: 200px"></Column>
    <Column field="representative.name" header="Representative" footer="Representative" style="min-width: 200px"></Column>
</DataTable>
```
### Frozen Rows [\#](https://primevue.org/datatable/\#frozen_rows)
Rows can be fixed during scrolling by enabling the _frozenValue_ property.
```
<DataTable
    :value="customers"
    :frozenValue="lockedCustomers"
    scrollable
    scrollHeight="400px"
    :pt="{
        table: { style: 'min-width: 50rem' },
        bodyrow: ({ props }) => ({
            class: [{ 'font-bold': props.frozenRow }]
        })
    }"
>
    <Column field="name" header="Name"></Column>
    <Column field="country.name" header="Country"></Column>
    <Column field="representative.name" header="Representative"></Column>
    <Column field="status" header="Status"></Column>
    <Column style="flex: 0 0 4rem">
        <template #body="{ data, frozenRow, index }">
            <Button type="button" :icon="frozenRow ? 'pi pi-lock-open' : 'pi pi-lock'" :disabled="frozenRow ? false : lockedCustomers.length >= 2" text size="small" @click="toggleLock(data, frozenRow, index)" />
        </template>
    </Column>
</DataTable>
```
### Frozen Columns [\#](https://primevue.org/datatable/\#frozen_columns)
A column can be fixed during horizontal scrolling by enabling the _frozen_ property. The location is defined with the _alignFrozen_ that can be _left_ or _right_.
```
<ToggleButton v-model="balanceFrozen" onIcon="pi pi-lock" offIcon="pi pi-lock-open" onLabel="Balance" offLabel="Balance" />
<DataTable :value="customers" scrollable scrollHeight="400px" class="mt-6">
    <Column field="name" header="Name" style="min-width: 200px" frozen class="font-bold"></Column>
    <Column field="id" header="Id" style="min-width: 100px"></Column>
    <Column field="name" header="Name" style="min-width: 200px"></Column>
    <Column field="country.name" header="Country" style="min-width: 200px"></Column>
    <Column field="date" header="Date" style="min-width: 200px"></Column>
    <Column field="company" header="Company" style="min-width: 200px"></Column>
    <Column field="status" header="Status" style="min-width: 200px"></Column>
    <Column field="activity" header="Activity" style="min-width: 200px"></Column>
    <Column field="representative.name" header="Representative" style="min-width: 200px"></Column>
    <Column field="balance" header="Balance" style="min-width: 200px" alignFrozen="right" :frozen="balanceFrozen">
        <template #body="{ data }">
            <span class="font-bold">{{ formatCurrency(data.balance) }}</span>
        </template>
    </Column>
</DataTable>
```
## Virtual Scroll [\#](https://primevue.org/datatable/\#virtualscroll)
### Preload [\#](https://primevue.org/datatable/\#preload_virtualscroll)
Virtual Scrolling is an efficient way to render large amount data. Usage is similar to regular scrolling with the addition of _virtualScrollerOptions_ property to define a fixed _itemSize_. Internally, [VirtualScroller](https://primevue.org/virtualscroller/) component is utilized so refer to the API of VirtualScroller for more information about the available options.
In this example, **100000** preloaded records are rendered by the Table.
```
<DataTable :value="cars" scrollable scrollHeight="400px" :virtualScrollerOptions="{ itemSize: 44 }" tableStyle="min-width: 50rem">
    <Column field="id" header="Id" style="width: 20%; height: 44px"></Column>
    <Column field="vin" header="Vin" style="width: 20%; height: 44px"></Column>
    <Column field="year" header="Year" style="width: 20%; height: 44px"></Column>
    <Column field="brand" header="Brand" style="width: 20%; height: 44px"></Column>
    <Column field="color" header="Color" style="width: 20%; height: 44px"></Column>
</DataTable>
```
### Lazy [\#](https://primevue.org/datatable/\#lazy_virtualscroll)
When lazy loading is enabled via the _virtualScrollerOptions_, data is fetched on demand during scrolling instead of preload.
In sample below, an in-memory list and timeout is used to mimic fetching from a remote datasource. The _virtualCars_ is an empty array that is populated on scroll.
```
<DataTable :value="virtualCars" scrollable scrollHeight="400px" tableStyle="min-width: 50rem"
        :virtualScrollerOptions="{ lazy: true, onLazyLoad: loadCarsLazy, itemSize: 44, delay: 200, showLoader: true, loading: lazyLoading, numToleratedItems: 10 }">
    <Column field="id" header="Id" style="width: 20%; height: 44px">
        <template #loading>
            <div class="flex items-center" :style="{ height: '17px', 'flex-grow': '1', overflow: 'hidden' }">
                <Skeleton width="60%" height="1rem" />
            </div>
        </template>
    </Column>
    <Column field="vin" header="Vin" style="width: 20%; height: 44px">
        <template #loading>
            <div class="flex items-center" :style="{ height: '17px', 'flex-grow': '1', overflow: 'hidden' }">
                <Skeleton width="40%" height="1rem" />
            </div>
        </template>
    </Column>
    <Column field="year" header="Year" style="width: 20%; height: 44px">
        <template #loading>
            <div class="flex items-center" :style="{ height: '17px', 'flex-grow': '1', overflow: 'hidden' }">
                <Skeleton width="30%" height="1rem" />
            </div>
        </template>
    </Column>
    <Column field="brand" header="Brand" style="width: 20%; height: 44px">
        <template #loading>
            <div class="flex items-center" :style="{ height: '17px', 'flex-grow': '1', overflow: 'hidden' }">
                <Skeleton width="40%" height="1rem" />
            </div>
        </template>
    </Column>
    <Column field="color" header="Color" style="width: 20%; height: 44px">
        <template #loading>
            <div class="flex items-center" :style="{ height: '17px', 'flex-grow': '1', overflow: 'hidden' }">
                <Skeleton width="60%" height="1rem" />
            </div>
        </template>
    </Column>
</DataTable>
```
## Column Group [\#](https://primevue.org/datatable/\#column_group)
Columns can be grouped within a _Row_ component and groups can be displayed within a ColumnGroup component. These groups can be displayed using _type_ property that can be _header_ or _footer_. Number of cells and rows to span are defined with the _colspan_ and _rowspan_ properties of a Column.
```
<DataTable :value="sales" tableStyle="min-width: 50rem">
    <ColumnGroup type="header">
        <Row>
            <Column header="Product" :rowspan="3" />
            <Column header="Sale Rate" :colspan="4" />
        </Row>
        <Row>
            <Column header="Sales" :colspan="2" />
            <Column header="Profits" :colspan="2" />
        </Row>
        <Row>
            <Column header="Last Year" sortable field="lastYearSale" />
            <Column header="This Year" sortable field="thisYearSale" />
            <Column header="Last Year" sortable field="lastYearProfit" />
            <Column header="This Year" sortable field="thisYearProfit" />
        </Row>
    </ColumnGroup>
    <Column field="product" />
    <Column field="lastYearSale">
        <template #body="slotProps"> {{ slotProps.data.lastYearSale }}% </template>
    </Column>
    <Column field="thisYearSale">
        <template #body="slotProps"> {{ slotProps.data.thisYearSale }}% </template>
    </Column>
    <Column field="lastYearProfit">
        <template #body="slotProps">
            {{ formatCurrency(slotProps.data.lastYearProfit) }}
        </template>
    </Column>
    <Column field="thisYearProfit">
        <template #body="slotProps">
            {{ formatCurrency(slotProps.data.thisYearProfit) }}
        </template>
    </Column>
    <ColumnGroup type="footer">
        <Row>
            <Column footer="Totals:" :colspan="3" footerStyle="text-align:right" />
            <Column :footer="lastYearTotal" />
            <Column :footer="thisYearTotal" />
        </Row>
    </ColumnGroup>
</DataTable>
```
## Row Group [\#](https://primevue.org/datatable/\#row_group)
### Subheader [\#](https://primevue.org/datatable/\#rowgroup_subheader)
Rows are grouped with the _groupRowsBy_ property. When _rowGroupMode_ is set as _subheader_, a header and footer can be displayed for each group. The content of a group header is provided with _groupheader_ and footer with _groupfooter_ slots.
```
<DataTable :value="customers" rowGroupMode="subheader" groupRowsBy="representative.name" sortMode="single"
        sortField="representative.name" :sortOrder="1" scrollable scrollHeight="400px" tableStyle="min-width: 50rem">
    <Column field="representative.name" header="Representative"></Column>
    <Column field="name" header="Name" style="min-width: 200px"></Column>
    <Column field="country" header="Country" style="min-width: 200px">
        <template #body="slotProps">
            <div class="flex items-center gap-2">
                <img alt="flag" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.data.country.code}`" style="width: 24px" />
                <span>{{ slotProps.data.country.name }}</span>
            </div>
        </template>
    </Column>
    <Column field="company" header="Company" style="min-width: 200px"></Column>
    <Column field="status" header="Status" style="min-width: 200px">
        <template #body="slotProps">
            <Tag :value="slotProps.data.status" :severity="getSeverity(slotProps.data.status)" />
        </template>
    </Column>
    <Column field="date" header="Date" style="min-width: 200px"></Column>
    <template #groupheader="slotProps">
        <div class="flex items-center gap-2">
            <img :alt="slotProps.data.representative.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.data.representative.image}`" width="32" style="vertical-align: middle" />
            <span>{{ slotProps.data.representative.name }}</span>
        </div>
    </template>
    <template #groupfooter="slotProps">
        <div class="flex justify-end font-bold w-full">Total Customers: {{ calculateCustomerTotal(slotProps.data.representative.name) }}</div>
    </template>
</DataTable>
```
### Expandable [\#](https://primevue.org/datatable/\#rowgroup_expandable)
When _expandableRowGroups_ is present in subheader based row grouping, groups can be expanded and collapsed. State of the expansions are controlled using the _expandedRows_ property and _rowgroup-expand_ and _rowgroup-collapse_ events.
```
<DataTable v-model:expandedRowGroups="expandedRowGroups" :value="customers" tableStyle="min-width: 50rem"
        expandableRowGroups rowGroupMode="subheader" groupRowsBy="representative.name" @rowgroup-expand="onRowGroupExpand" @rowgroup-collapse="onRowGroupCollapse"
        sortMode="single" sortField="representative.name" :sortOrder="1">
    <template #groupheader="slotProps">
        <img :alt="slotProps.data.representative.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.data.representative.image}`" width="32" style="vertical-align: middle; display: inline-block" class="ml-2" />
        <span class="align-middle ml-2 font-bold leading-normal">{{ slotProps.data.representative.name }}</span>
    </template>
    <Column field="representative.name" header="Representative"></Column>
    <Column field="name" header="Name" style="width: 20%"></Column>
    <Column field="country" header="Country" style="width: 20%">
        <template #body="slotProps">
            <div class="flex items-center gap-2">
                <img alt="flag" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.data.country.code}`" style="width: 24px" />
                <span>{{ slotProps.data.country.name }}</span>
            </div>
        </template>
    </Column>
    <Column field="company" header="Company" style="width: 20%"></Column>
    <Column field="status" header="Status" style="width: 20%">
        <template #body="slotProps">
            <Tag :value="slotProps.data.status" :severity="getSeverity(slotProps.data.status)" />
        </template>
    </Column>
    <Column field="date" header="Date" style="width: 20%"></Column>
    <template #groupfooter="slotProps">
        <div class="flex justify-end font-bold w-full">Total Customers: {{ calculateCustomerTotal(slotProps.data.representative.name) }}</div>
    </template>
</DataTable>
```
### RowSpan [\#](https://primevue.org/datatable/\#rowgroup_rowspan)
When _rowGroupMode_ is configured to be _rowspan_, the grouping column spans multiple rows.
```
<DataTable :value="customers" rowGroupMode="rowspan" groupRowsBy="representative.name" sortMode="single" sortField="representative.name" :sortOrder="1" tableStyle="min-width: 50rem">
    <Column header="#" headerStyle="width:3rem">
        <template #body="slotProps">
            {{ slotProps.index + 1 }}
        </template>
    </Column>
    <Column field="representative.name" header="Representative" style="min-width: 200px">
        <template #body="slotProps">
            <div class="flex items-center gap-2">
                <img :alt="slotProps.data.representative.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.data.representative.image}`" width="32" style="vertical-align: middle" />
                <span>{{ slotProps.data.representative.name }}</span>
            </div>
        </template>
    </Column>
    <Column field="name" header="Name" style="min-width: 200px"></Column>
    <Column field="country" header="Country" style="min-width: 150px">
        <template #body="slotProps">
            <div class="flex items-center gap-2">
                <img alt="flag" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${slotProps.data.country.code}`" style="width: 24px" />
                <span>{{ slotProps.data.country.name }}</span>
            </div>
        </template>
    </Column>
    <Column field="company" header="Company" style="min-width: 200px"></Column>
    <Column field="status" header="Status" style="min-width: 100px">
        <template #body="slotProps">
            <Tag :value="slotProps.data.status" :severity="getSeverity(slotProps.data.status)" />
        </template>
    </Column>
</DataTable>
```
## Conditional Style [\#](https://primevue.org/datatable/\#conditional_style)
Particular rows and cells can be styled based on conditions. The _rowClass_ receives a row data as a parameter to return a style class for a row whereas cells are customized using the _body_ template.
```
<DataTable :value="products" :rowClass="rowClass" :rowStyle="rowStyle" tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity">
        <template #body="slotProps">
            <Badge :value="slotProps.data.quantity" :severity="stockSeverity(slotProps.data)" />
        </template>
    </Column>
</DataTable>
```
## Column Resize [\#](https://primevue.org/datatable/\#column_resize)
### Fit Mode [\#](https://primevue.org/datatable/\#resize_fitmode)
Columns can be resized with drag and drop when _resizableColumns_ is enabled. Default resize mode is _fit_ that does not change the overall table width.
```
<DataTable :value="products" resizableColumns columnResizeMode="fit" showGridlines tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
### Expand Mode [\#](https://primevue.org/datatable/\#resize_expandmode)
Setting _columnResizeMode_ as _expand_ changes the table width as well.
```
<DataTable :value="products" resizableColumns columnResizeMode="expand" showGridlines tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
## Reorder [\#](https://primevue.org/datatable/\#reorder)
Order of the columns and rows can be changed using drag and drop. Column reordering is configured by adding _reorderableColumns_ property.
Similarly, adding _rowReorder_ property to a column enables draggable rows. For the drag handle a column needs to have _rowReorder_ property and table needs to have _row-reorder_ event is required to control the state of the rows after reorder completes.
```
<DataTable :value="products" :reorderableColumns="true" @columnReorder="onColReorder" @rowReorder="onRowReorder" tableStyle="min-width: 50rem">
    <Column rowReorder headerStyle="width: 3rem" :reorderableColumn="false" />
    <Column v-for="col of columns" :field="col.field" :header="col.header" :key="col.field"></Column>
</DataTable>
```
## Column Toggle [\#](https://primevue.org/datatable/\#column_toggle)
Column visibility based on a condition can be implemented with dynamic columns, in this sample a MultiSelect is used to manage the visible columns.
```
<DataTable :value="products" tableStyle="min-width: 50rem">
    <template #header>
        <div style="text-align:left">
            <MultiSelect :modelValue="selectedColumns" :options="columns" optionLabel="header" @update:modelValue="onToggle"
                display="chip" placeholder="Select Columns" />
        </div>
    </template>
    <Column field="code" header="Code" />
    <Column v-for="(col, index) of selectedColumns" :field="col.field" :header="col.header" :key="col.field + '_' + index"></Column>
</DataTable>
```
## Export [\#](https://primevue.org/datatable/\#export)
DataTable can export its data to CSV format.
```
<DataTable :value="products" ref="dt" tableStyle="min-width: 50rem">
    <template #header>
        <div class="text-end pb-4">
            <Button icon="pi pi-external-link" label="Export" @click="exportCSV($event)" />
        </div>
    </template>
    <Column field="code" header="Code" exportHeader="Product Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="quantity" header="Quantity"></Column>
</DataTable>
```
## Context Menu [\#](https://primevue.org/datatable/\#contextmenu)
DataTable has exclusive integration with ContextMenu using the _contextMenu_ event to open a menu on right click alont with _contextMenuSelection_ property and _row-contextmenu_ event to control the selection via the menu.
```
<ContextMenu ref="cm" :model="menuModel" @hide="selectedProduct = null" />
<DataTable v-model:contextMenuSelection="selectedProduct" :value="products" contextMenu
        @row-contextmenu="onRowContextMenu" tableStyle="min-width: 50rem">
    <Column field="code" header="Code"></Column>
    <Column field="name" header="Name"></Column>
    <Column field="category" header="Category"></Column>
    <Column field="price" header="Price">
        <template #body="slotProps">
            {{ formatCurrency(slotProps.data.price) }}
        </template>
    </Column>
</DataTable>
```
## Stateful [\#](https://primevue.org/datatable/\#stateful)
Stateful table allows keeping the state such as page, sort and filtering either at local storage or session storage so that when the page is visited again, table would render the data using the last settings.
Change the state of the table e.g paginate, navigate away and then return to this table again to test this feature, the setting is set as _session_ with the _stateStorage_ property so that Table retains the state until the browser is closed. Other alternative is _local_ referring to _localStorage_ for an extended lifetime.
```
<DataTable v-model:filters="filters" v-model:selection="selectedCustomer" :value="customers"
    stateStorage="session" stateKey="dt-state-demo-session" paginator :rows="5" filterDisplay="menu"
    selectionMode="single" dataKey="id" :globalFilterFields="['name', 'country.name', 'representative.name', 'status']" tableStyle="min-width: 50rem">
    <template #header>
        <IconField>
            <InputIcon>
                <i class="pi pi-search" />
            </InputIcon>
            <InputText v-model="filters['global'].value" placeholder="Global Search" />
        </IconField>
    </template>
    <Column field="name" header="Name" sortable style="width: 25%">
        <template #filter="{ filterModel }">
            <InputText v-model="filterModel.value" type="text" placeholder="Search by name" />
        </template>
    </Column>
    <Column header="Country" sortable sortField="country.name" filterField="country.name" filterMatchMode="contains" style="width: 25%">
        <template #body="{ data }">
            <div class="flex items-center gap-2">
                <img alt="flag" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${data.country.code}`" style="width: 24px" />
                <span>{{ data.country.name }}</span>
            </div>
        </template>
        <template #filter="{ filterModel }">
            <InputText v-model="filterModel.value" type="text" placeholder="Search by country" />
        </template>
    </Column>
    <Column header="Representative" sortable sortField="representative.name" filterField="representative" :showFilterMatchModes="false" :filterMenuStyle="{ width: '14rem' }" style="width: 25%">
        <template #body="{ data }">
            <div class="flex items-center gap-2">
                <img :alt="data.representative.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${data.representative.image}`" style="width: 32px" />
                <span>{{ data.representative.name }}</span>
            </div>
        </template>
        <template #filter="{ filterModel }">
            <MultiSelect v-model="filterModel.value" :options="representatives" optionLabel="name" placeholder="Any">
                <template #option="slotProps">
                    <div class="flex items-center gap-2">
                        <img :alt="slotProps.option.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.option.image}`" style="width: 32px" />
                        <span>{{ slotProps.option.name }}</span>
                    </div>
                </template>
            </MultiSelect>
        </template>
    </Column>
    <Column field="status" header="Status" sortable filterMatchMode="equals" style="width: 25%">
        <template #body="{ data }">
            <Tag :value="data.status" :severity="getSeverity(data.status)" />
        </template>
        <template #filter="{ filterModel }">
            <Select v-model="filterModel.value" :options="statuses" placeholder="Select One" showClear>
                <template #option="slotProps">
                    <Tag :value="slotProps.option" :severity="getSeverity(slotProps.option)" />
                </template>
            </Select>
        </template>
    </Column>
    <template #empty> No customers found. </template>
</DataTable>
```
## Samples [\#](https://primevue.org/datatable/\#samples)
### Customers [\#](https://primevue.org/datatable/\#customers)
DataTable with selection, pagination, filtering, sorting and templating.
```
<DataTable v-model:filters="filters" v-model:selection="selectedCustomers" :value="customers" paginator :rows="10" dataKey="id" filterDisplay="menu"
    :globalFilterFields="['name', 'country.name', 'representative.name', 'balance', 'status']">
    <template #header>
        <div class="flex justify-between">
            <Button type="button" icon="pi pi-filter-slash" label="Clear" outlined @click="clearFilter()" />
            <IconField>
                <InputIcon>
                    <i class="pi pi-search" />
                </InputIcon>
                <InputText v-model="filters['global'].value" placeholder="Keyword Search" />
            </IconField>
        </div>
    </template>
    <template #empty> No customers found. </template>
    <Column selectionMode="multiple" headerStyle="width: 3rem"></Column>
    <Column field="name" header="Name" sortable style="min-width: 14rem">
        <template #body="{ data }">
            {{ data.name }}
        </template>
        <template #filter="{ filterModel }">
            <InputText v-model="filterModel.value" type="text" placeholder="Search by name" />
        </template>
    </Column>
    <Column header="Country" sortable sortField="country.name" filterField="country.name" style="min-width: 14rem">
        <template #body="{ data }">
            <div class="flex items-center gap-2">
                <img alt="flag" src="https://primefaces.org/cdn/primevue/images/flag/flag_placeholder.png" :class="`flag flag-${data.country.code}`" style="width: 24px" />
                <span>{{ data.country.name }}</span>
            </div>
        </template>
        <template #filter="{ filterModel }">
            <InputText v-model="filterModel.value" type="text" placeholder="Search by country" />
        </template>
    </Column>
    <Column header="Agent" sortable sortField="representative.name" filterField="representative" :showFilterMatchModes="false" :filterMenuStyle="{ width: '14rem' }" style="min-width: 14rem">
        <template #body="{ data }">
            <div class="flex items-center gap-2">
                <img :alt="data.representative.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${data.representative.image}`" style="width: 32px" />
                <span>{{ data.representative.name }}</span>
            </div>
        </template>
        <template #filter="{ filterModel }">
            <MultiSelect v-model="filterModel.value" :options="representatives" optionLabel="name" placeholder="Any">
                <template #option="slotProps">
                    <div class="flex items-center gap-2">
                        <img :alt="slotProps.option.name" :src="`https://primefaces.org/cdn/primevue/images/avatar/${slotProps.option.image}`" style="width: 32px" />
                        <span>{{ slotProps.option.name }}</span>
                    </div>
                </template>
            </MultiSelect>
        </template>
    </Column>
    <Column field="date" header="Date" sortable filterField="date" dataType="date" style="min-width: 10rem">
        <template #body="{ data }">
            {{ formatDate(data.date) }}
        </template>
        <template #filter="{ filterModel }">
            <DatePicker v-model="filterModel.value" dateFormat="mm/dd/yy" placeholder="mm/dd/yyyy" />
        </template>
    </Column>
    <Column field="balance" header="Balance" sortable filterField="balance" dataType="numeric" style="min-width: 10rem">
        <template #body="{ data }">
            {{ formatCurrency(data.balance) }}
        </template>
        <template #filter="{ filterModel }">
            <InputNumber v-model="filterModel.value" mode="currency" currency="USD" locale="en-US" />
        </template>
    </Column>
    <Column header="Status" field="status" sortable :filterMenuStyle="{ width: '14rem' }" style="min-width: 12rem">
        <template #body="{ data }">
            <Tag :value="data.status" :severity="getSeverity(data.status)" />
        </template>
        <template #filter="{ filterModel }">
            <Select v-model="filterModel.value" :options="statuses" placeholder="Select One" showClear>
                <template #option="slotProps">
                    <Tag :value="slotProps.option" :severity="getSeverity(slotProps.option)" />
                </template>
            </Select>
        </template>
    </Column>
    <Column field="activity" header="Activity" sortable :showFilterMatchModes="false" style="min-width: 12rem">
        <template #body="{ data }">
            <ProgressBar :value="data.activity" :showValue="false" style="height: 6px"></ProgressBar>
        </template>
        <template #filter="{ filterModel }">
            <Slider v-model="filterModel.value" range class="m-4"></Slider>
            <div class="flex items-center justify-between px-2">
                <span>{{ filterModel.value ? filterModel.value[0] : 0 }}</span>
                <span>{{ filterModel.value ? filterModel.value[1] : 100 }}</span>
            </div>
        </template>
    </Column>
    <Column headerStyle="width: 5rem; text-align: center" bodyStyle="text-align: center; overflow: visible">
        <template #body>
            <Button type="button" icon="pi pi-cog" rounded />
        </template>
    </Column>
</DataTable>
```
### Products [\#](https://primevue.org/datatable/\#dtproducts)
CRUD implementation example with a Dialog.
```
<Toolbar class="mb-6">
    <template #start>
        <Button label="New" icon="pi pi-plus" class="mr-2" @click="openNew" />
        <Button label="Delete" icon="pi pi-trash" severity="danger" outlined @click="confirmDeleteSelected" :disabled="!selectedProducts || !selectedProducts.length" />
    </template>
    <template #end>
        <FileUpload mode="basic" accept="image/*" :maxFileSize="1000000" label="Import" customUpload chooseLabel="Import" class="mr-2" auto :chooseButtonProps="{ severity: 'secondary' }" />
        <Button label="Export" icon="pi pi-upload" severity="secondary" @click="exportCSV($event)" />
    </template>
</Toolbar>
<DataTable
    ref="dt"
    v-model:selection="selectedProducts"
    :value="products"
    dataKey="id"
    :paginator="true"
    :rows="10"
    :filters="filters"
    paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
    :rowsPerPageOptions="[5, 10, 25]"
    currentPageReportTemplate="Showing {first} to {last} of {totalRecords} products"
>
    <template #header>
        <div class="flex flex-wrap gap-2 items-center justify-between">
            <h4 class="m-0">Manage Products</h4>
            <IconField>
                <InputIcon>
                    <i class="pi pi-search" />
                </InputIcon>
                <InputText v-model="filters['global'].value" placeholder="Search..." />
            </IconField>
        </div>
    </template>
    <Column selectionMode="multiple" style="width: 3rem" :exportable="false"></Column>
    <Column field="code" header="Code" sortable style="min-width: 12rem"></Column>
    <Column field="name" header="Name" sortable style="min-width: 16rem"></Column>
    <Column header="Image">
        <template #body="slotProps">
            <img :src="`https://primefaces.org/cdn/primevue/images/product/${slotProps.data.image}`" :alt="slotProps.data.image" class="rounded" style="width: 64px" />
        </template>
    </Column>
    <Column field="price" header="Price" sortable style="min-width: 8rem">
        <template #body="slotProps">
            {{ formatCurrency(slotProps.data.price) }}
        </template>
    </Column>
    <Column field="category" header="Category" sortable style="min-width: 10rem"></Column>
    <Column field="rating" header="Reviews" sortable style="min-width: 12rem">
        <template #body="slotProps">
            <Rating :modelValue="slotProps.data.rating" :readonly="true" />
        </template>
    </Column>
    <Column field="inventoryStatus" header="Status" sortable style="min-width: 12rem">
        <template #body="slotProps">
            <Tag :value="slotProps.data.inventoryStatus" :severity="getStatusLabel(slotProps.data.inventoryStatus)" />
        </template>
    </Column>
    <Column :exportable="false" style="min-width: 12rem">
        <template #body="slotProps">
            <Button icon="pi pi-pencil" outlined rounded class="mr-2" @click="editProduct(slotProps.data)" />
            <Button icon="pi pi-trash" outlined rounded severity="danger" @click="confirmDeleteProduct(slotProps.data)" />
        </template>
    </Column>
</DataTable>
```
## Accessibility [\#](https://primevue.org/datatable/\#accessibility)
### Screen Reader
DataTable uses a _table_ element whose attributes can be extended with the _tableProps_ option. This property allows passing aria roles and attributes like _aria-label_ and _aria-describedby_ to define the table for readers. Default role of the table is _table_. Header, body and footer elements use _rowgroup_, rows use _row_ role, header cells have _columnheader_ and body cells use _cell_ roles. Sortable headers utilizer _aria-sort_ attribute either set to "ascending" or "descending".
Built-in checkbox and radiobutton components for row selection use _checkbox_ and _radiobutton_. The label to describe them is retrieved from the _aria.selectRow_ and _aria.unselectRow_ properties of the [locale](https://primevue.org/configuration/#locale) API. Similarly header checkbox uses _selectAll_ and _unselectAll_ keys. When a row is selected, _aria-selected_ is set to true on a row.
The element to expand or collapse a row is a _button_ with _aria-expanded_ and _aria-controls_ properties. Value to describe the buttons is derived from _aria.expandRow_ and _aria.collapseRow_ properties of the [locale](https://primevue.org/configuration/#locale) API.
The filter menu button use _aria.showFilterMenu_ and _aria.hideFilterMenu_ properties as _aria-label_ in addition to the _aria-haspopup_, _aria-expanded_ and _aria-controls_ to define the relation between the button and the overlay. Popop menu has _dialog_ role with _aria-modal_ as focus is kept within the overlay. The operator dropdown use _aria.filterOperator_ and filter constraints dropdown use _aria.filterConstraint_ properties. Buttons to add rules on the other hand utilize _aria.addRule_ and _aria.removeRule_ properties. The footer buttons similarly use _aria.clear_ and _aria.apply_ properties. _filterInputProps_ of the Column component can be used to define aria labels for the built-in filter components, if a custom component is used with templating you also may define your own aria labels as well.
Editable cells use custom templating so you need to manage aria roles and attributes manually if required. The row editor controls are button elements with _aria.editRow_, _aria.cancelEdit_ and _aria.saveEdit_ used for the _aria-label_.
Paginator is a standalone component used inside the DataTable, refer to the [paginator](https://primevue.org/paginator/) for more information about the accessibility features.
### Keyboard Support
Any button element inside the DataTable used for cases like filter, row expansion, edit are tabbable and can be used with _space_ and _enter_ keys.
### Sortable Headers Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves through the headers. |
| _enter_ | Sorts the column. |
| _space_ | Sorts the column. |
### Filter Menu Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves through the elements inside the popup. |
| _escape_ | Hides the popup. |
### Selection Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the first selected row, if there is none then first row receives the focus. |
| _up arrow_ | Moves focus to the previous row. |
| _down arrow_ | Moves focus to the next row. |
| _enter_ | Toggles the selected state of the focused row depending on the metaKeySelection setting. |
| _space_ | Toggles the selected state of the focused row depending on the metaKeySelection setting. |
| _home_ | Moves focus to the first row. |
| _end_ | Moves focus to the last row. |
| _shift_ \+ _down arrow_ | Moves focus to the next row and toggles the selection state. |
| _shift_ \+ _up arrow_ | Moves focus to the previous row and toggles the selection state. |
| _shift_ \+ _space_ | Selects the rows between the most recently selected row and the focused row. |
| _control_ \+ _shift_ \+ _home_ | Selects the focused rows and all the options up to the first one. |
| _control_ \+ _shift_ \+ _end_ | Selects the focused rows and all the options down to the last one. |
| _control_ \+ _a_ | Selects all rows. |
- Import
- Basic
- Dynamic Columns
- Template
- Size
- Grid Lines
- Striped Rows
- Pagination
  - Basic
  - Template
  - Headless
- Sort
  - Single Column
  - Multiple Columns
  - Presort
  - Removable
- Filter
  - Basic
  - Advanced
- Row Selection
  - Single
  - Multiple
  - RadioButton
  - Checkbox
  - Column
  - Events
- Row Expansion
- Edit
  - Cell
  - Row
- Scroll
  - Vertical
  - Flexible
  - Horizontal
  - Frozen Rows
  - Frozen Columns
- Virtual Scroll
  - Preload
  - Lazy
- Column Group
- Row Group
  - Subheader
  - Expandable
  - RowSpan
- Conditional Style
- Column Resize
  - Fit Mode
  - Expand Mode
- Reorder
- Column Toggle
- Export
- Context Menu
- Stateful
- Samples
  - Customers
  - Products
- Accessibility
# DataTable API
API defines helper props, events and others for the PrimeVue DataTable module.
Theme Designer
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Theming Guide
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Styled Mode
Choose from a variety of pre-styled themes or develop your own.
## Architecture [\#](https://primevue.org/theming/styled/\#architecture)
PrimeVue is a design agnostic library so unlike some other UI libraries it does not enforce a certain styling such as material design. Styling is decoupled from the components using the themes instead. A theme consists of two parts; _base_ and _preset_. The base is the style rules with CSS variables as placeholders whereas the preset is a set of design tokens to feed a base by mapping the tokens to CSS variables. A base may be configured with different presets, currently Aura, Material, Lara and Nora are the available built-in options.
![Architecture](https://primefaces.org/cdn/primevue/images/primevue-v4-styled-architecture.png)
The core of the styled mode architecture is based on a concept named _design token_, a preset defines the token configuration in 3 tiers; _primitive_, _semantic_ and _component_.
### Primitive Tokens
Primitive tokens have no context, a color palette is a good example for a primitive token such as _blue-50_ to _blue-900_. A token named _blue-500_ may be used as the primary color, the background of a message however on its own, the name of the token does not indicate context. Usually they are utilized by the semantic tokens.
### Semantic Tokens
Semantic tokens define content and their names indicate where they are utilized, a well known example of a semantic token is the _primary.color_. Semantic tokens map to primitive tokens or other semantic tokens. The _colorScheme_ token group is a special variable to define tokens based on the color scheme active in the application, this allows defining different tokens based on the color scheme like dark mode.
### Component Tokens
Component tokens are isolated tokens per component such as _inputtext.background_ or _button.color_ that map to the semantic tokens. As an example, _button.background_ component token maps to the _primary.color_ semantic token which maps to the _green.500_ primitive token.
### Best Practices
Use primitive tokens when defining the core color palette and semantic tokens to specify the common design elements such as focus ring, primary colors and surfaces. Components tokens should only be used when customizing a specific component. By defining your own design tokens as a custom preset, you'll be able to define your own style without touching CSS. Overriding the PrimeVue components using style classes is not a best practice and should be the last resort, design tokens are the suggested approach.
### Video Tutorial
Watch the **PrimeVue Theming Demystified** series to learn more about the architecture with examples.
PrimeVue Theming Demystified - YouTube
Cagatay Civici
8.4K subscribers
[PrimeVue Theming Demystified](https://www.youtube.com/watch?list=PLC9bp-OHi-Wm2LqlXk1i-haW-1kESMIqh&v=J3KFw5sih98)
Cagatay Civici
Search
Watch later
Share
Copy link
1/6
Info
Shopping
Tap to unmute
If playback doesn't begin shortly, try restarting your device.
More videos
## More videos
You're signed out
Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.
CancelConfirm
Share
Include playlist
An error occurred while retrieving sharing information. Please try again later.
[Watch on](https://www.youtube.com/watch?list=PLC9bp-OHi-Wm2LqlXk1i-haW-1kESMIqh&v=J3KFw5sih98&embeds_referring_euri=https%3A%2F%2Fprimevue.org%2F)
0:00
[Previous (SHIFT+p)](https://www.youtube.com/watch?list=PLC9bp-OHi-Wm2LqlXk1i-haW-1kESMIqh&v=3U5HziX0Ejs "Previous (SHIFT+p)") [Next (SHIFT+n)](https://www.youtube.com/watch?list=PLC9bp-OHi-Wm2LqlXk1i-haW-1kESMIqh&v=By04epRCpDA "Next (SHIFT+n)")
0:00 / 24:46â€¢Live
â€¢
[Watch on YouTube](https://www.youtube.com/watch?list=PLC9bp-OHi-Wm2LqlXk1i-haW-1kESMIqh&v=J3KFw5sih98 "Watch on YouTube")
## Configuration API [\#](https://primevue.org/theming/styled/\#configuration)
### Theme [\#](https://primevue.org/theming/styled/\#theme)
The _theme_ property is used to customize the initial theme.
```javascript
import PrimeVue from 'primevue/config';
import Aura from '@primeuix/themes/aura';
const app = createApp(App);
app.use(PrimeVue, {
    // Default theme configuration
    theme: {
        preset: Aura,
        options: {
            prefix: 'p',
            darkModeSelector: 'system',
            cssLayer: false
        }
    }
 });
```
Copy
### Options [\#](https://primevue.org/theming/styled/\#options)
The _options_ property defines the how the CSS would be generated from the design tokens of the preset.
#### prefix
The prefix of the CSS variables, defaults to _p_. For instance, the _primary.color_ design token would be _var(--p-primary-color)_.
```javascript
options: {
    prefix: 'my'
}
```
Copy
#### darkModeSelector
The CSS rule to encapsulate the CSS variables of the dark mode, the default is the _system_ to generate _@media (prefers-color-scheme: dark)_. If you need to make the dark mode toggleable based on the user selection define a class selector such as _.app-dark_ and toggle this class at the document root. See the dark mode toggle section for an example.
```javascript
options: {
    darkModeSelector: '.my-app-dark'
}
```
Copy
#### cssLayer
Defines whether the styles should be defined inside a [CSS layer](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer) by default or not. A CSS layer would be handy to declare a custom cascade layer for easier customization if necessary. The default is _false_.
```javascript
options: {
    cssLayer: {
        name: 'primevue',
        order: 'app-styles, primevue, another-css-library'
    }
}
```
Copy
## Presets [\#](https://primevue.org/theming/styled/\#presets)
Aura, Material, Lara and Nora are the available built-in options, created to demonstrate the power of the design-agnostic theming. Aura is PrimeTek's own vision, Material follows Google Material Design v2, Lara is based on Bootstrap and Nora is inspired by enterprise applications. Visit the [source code](https://github.com/primefaces/primevue/tree/master/packages/themes/src/presets) to learn more about the structure of presets. You may use them out of the box with modifications or utilize them as reference in case you need to build your own presets from scratch.
## Reserved Keys [\#](https://primevue.org/theming/styled/\#reserved)
Following keys are reserved in the preset scheme and cannot be used as a token name; _primitive_, _semantic_, _components_, _directives_, _colorscheme_, _light_, _dark_, _common_, _root_, _states_, and _extend_.
## Colors [\#](https://primevue.org/theming/styled/\#colors)
Color palette of a preset is defined by the _primitive_ design token group. You can access colors using CSS variables or the _$dt_ utility.
```javascript
// With CSS
var(--p-blue-500)
// With JS
$dt('blue.500').value
```
Copy
- emerald
50
100
200
300
400
500
600
700
800
900
950
- green
50
100
200
300
400
500
600
700
800
900
950
- lime
50
100
200
300
400
500
600
700
800
900
950
- red
50
100
200
300
400
500
600
700
800
900
950
- orange
50
100
200
300
400
500
600
700
800
900
950
- amber
50
100
200
300
400
500
600
700
800
900
950
- yellow
50
100
200
300
400
500
600
700
800
900
950
- teal
50
100
200
300
400
500
600
700
800
900
950
- cyan
50
100
200
300
400
500
600
700
800
900
950
- sky
50
100
200
300
400
500
600
700
800
900
950
- blue
50
100
200
300
400
500
600
700
800
900
950
- indigo
50
100
200
300
400
500
600
700
800
900
950
- violet
50
100
200
300
400
500
600
700
800
900
950
- purple
50
100
200
300
400
500
600
700
800
900
950
- fuchsia
50
100
200
300
400
500
600
700
800
900
950
- pink
50
100
200
300
400
500
600
700
800
900
950
- rose
50
100
200
300
400
500
600
700
800
900
950
- slate
50
100
200
300
400
500
600
700
800
900
950
- gray
50
100
200
300
400
500
600
700
800
900
950
- zinc
50
100
200
300
400
500
600
700
800
900
950
- neutral
50
100
200
300
400
500
600
700
800
900
950
- stone
50
100
200
300
400
500
600
700
800
900
950
## Dark Mode [\#](https://primevue.org/theming/styled/\#darkmode)
PrimeVue uses the _system_ as the default _darkModeSelector_ in theme configuration. If you have a dark mode switch in your application, set the _darkModeSelector_ to the selector you utilize such as _.my-app-dark_ so that PrimeVue can fit in seamlessly with your color scheme.
```javascript
import PrimeVue from 'primevue/config';
import Aura from '@primeuix/themes/aura';
const app = createApp(App);
app.use(PrimeVue, {
    // Default theme configuration
    theme: {
        preset: Aura,
        options: {
            darkModeSelector: '.my-app-dark',
        }
    }
 });
```
Copy
Following is a very basic example implementation of a dark mode switch, you may extend it further by involving _prefers-color-scheme_ to retrieve it from the system initially and use _localStorage_ to make it stateful. See this [article](https://dev.to/abbeyperini/dark-mode-toggle-and-prefers-color-scheme-4f3m) for more information.
```markup
<Button label="Toggle Dark Mode" @click="toggleDarkMode()" />
```
Copy
```javascript
function toggleDarkMode() {
    document.documentElement.classList.toggle('my-app-dark');
}
```
Copy
In case you prefer to use dark mode all the time, apply the _darkModeSelector_ initially and never change it.
```markup
<html class="my-app-dark">
```
Copy
It is also possible to disable dark mode completely using _false_ or _none_ as the value of the selector.
```javascript
theme: {
    preset: Aura,
    options: {
        darkModeSelector: false || 'none',
    }
}
```
Copy
## Customization [\#](https://primevue.org/theming/styled/\#customization)
### definePreset [\#](https://primevue.org/theming/styled/\#definepreset)
The _definePreset_ utility is used to customize an existing preset during the PrimeVue setup. The first parameter is the preset to customize and the second is the design tokens to override.
```javascript
import PrimeVue from 'primevue/config';
import { definePreset } from '@primeuix/themes';
import Aura from '@primeuix/themes/aura';
const MyPreset = definePreset(Aura, {
    //Your customizations, see the following sections for examples
});
app.use(PrimeVue, {
    theme: {
        preset: MyPreset
    }
 });
```
Copy
### Primary [\#](https://primevue.org/theming/styled/\#primary)
The _primary_ defines the main color palette, default value maps to the _emerald_ primitive token. Let's setup to use _indigo_ instead.
```javascript
const MyPreset = definePreset(Aura, {
    semantic: {
        primary: {
            50: '{indigo.50}',
            100: '{indigo.100}',
            200: '{indigo.200}',
            300: '{indigo.300}',
            400: '{indigo.400}',
            500: '{indigo.500}',
            600: '{indigo.600}',
            700: '{indigo.700}',
            800: '{indigo.800}',
            900: '{indigo.900}',
            950: '{indigo.950}'
        }
    }
});
```
Copy
### Surface [\#](https://primevue.org/theming/styled/\#surface)
The color scheme palette that varies between light and dark modes is specified with the surface tokens. Example below uses _zinc_ for light mode and _slategray_ for dark mode. With this setting, light mode, would have a grayscale tone and dark mode would include bluish tone.
```javascript
const MyPreset = definePreset(Aura, {
    semantic: {
        colorScheme: {
            light: {
                surface: {
                    0: '#ffffff',
                    50: '{zinc.50}',
                    100: '{zinc.100}',
                    200: '{zinc.200}',
                    300: '{zinc.300}',
                    400: '{zinc.400}',
                    500: '{zinc.500}',
                    600: '{zinc.600}',
                    700: '{zinc.700}',
                    800: '{zinc.800}',
                    900: '{zinc.900}',
                    950: '{zinc.950}'
                }
            },
            dark: {
                surface: {
                    0: '#ffffff',
                    50: '{slate.50}',
                    100: '{slate.100}',
                    200: '{slate.200}',
                    300: '{slate.300}',
                    400: '{slate.400}',
                    500: '{slate.500}',
                    600: '{slate.600}',
                    700: '{slate.700}',
                    800: '{slate.800}',
                    900: '{slate.900}',
                    950: '{slate.950}'
                }
            }
        }
    }
});
```
Copy
### Noir [\#](https://primevue.org/theming/styled/\#noir)
The _noir_ mode is the nickname of a variant that uses surface tones as the primary and requires and additional _colorScheme_ configuration to implement. A sample preset configuration with black and white variants as the primary color;
```javascript
const Noir = definePreset(Aura, {
    semantic: {
        primary: {
            50: '{zinc.50}',
            100: '{zinc.100}',
            200: '{zinc.200}',
            300: '{zinc.300}',
            400: '{zinc.400}',
            500: '{zinc.500}',
            600: '{zinc.600}',
            700: '{zinc.700}',
            800: '{zinc.800}',
            900: '{zinc.900}',
            950: '{zinc.950}'
        },
        colorScheme: {
            light: {
                primary: {
                    color: '{zinc.950}',
                    inverseColor: '#ffffff',
                    hoverColor: '{zinc.900}',
                    activeColor: '{zinc.800}'
                },
                highlight: {
                    background: '{zinc.950}',
                    focusBackground: '{zinc.700}',
                    color: '#ffffff',
                    focusColor: '#ffffff'
                }
            },
            dark: {
                primary: {
                    color: '{zinc.50}',
                    inverseColor: '{zinc.950}',
                    hoverColor: '{zinc.100}',
                    activeColor: '{zinc.200}'
                },
                highlight: {
                    background: 'rgba(250, 250, 250, .16)',
                    focusBackground: 'rgba(250, 250, 250, .24)',
                    color: 'rgba(255,255,255,.87)',
                    focusColor: 'rgba(255,255,255,.87)'
                }
            }
        }
    }
});
```
Copy
### Font [\#](https://primevue.org/theming/styled/\#font)
There is no design for fonts as UI components inherit their font settings from the application.
### Forms [\#](https://primevue.org/theming/styled/\#forms)
The design tokens of the form input components are derived from the _form.field_ token group. This customization example changes border color to primary on hover. Any component that depends on this semantic token such as _dropdown.hover.border.color_ and _textarea.hover.border.color_ would receive the change.
```javascript
const MyPreset = definePreset(Aura, {
    semantic: {
        colorScheme: {
            light: {
                formField: {
                    hoverBorderColor: '{primary.color}'
                }
            },
            dark: {
                formField: {
                    hoverBorderColor: '{primary.color}'
                }
            }
        }
    }
});
```
Copy
### Focus Ring [\#](https://primevue.org/theming/styled/\#focusring)
Focus ring defines the outline width, style, color and offset. Let's use a thicker ring with the primary color for the outline.
```javascript
const MyPreset = definePreset(Aura, {
    semantic: {
        focusRing: {
            width: '2px',
            style: 'dashed',
            color: '{primary.color}',
            offset: '1px'
        }
    }
});
```
Copy
### Component [\#](https://primevue.org/theming/styled/\#component)
The design tokens of a specific component is defined at _components_ layer. Overriding components tokens is not the recommended approach if you are building your own style, building your own preset should be preferred instead. This configuration is global and applies to all card components, in case you need to customize a particular component on a page locally, view the Scoped CSS section for an example.
```javascript
const MyPreset = definePreset(Aura, {
    components: {
        card: {
            colorScheme: {
                light: {
                    root: {
                        background: '{surface.0}',
                        color: '{surface.700}'
                    },
                    subtitle: {
                        color: '{surface.500}'
                    }
                },
                dark: {
                    root: {
                        background: '{surface.900}',
                        color: '{surface.0}'
                    },
                    subtitle: {
                        color: '{surface.400}'
                    }
                }
            }
        }
    }
});
```
Copy
### Extend [\#](https://primevue.org/theming/styled/\#extend)
The theming system can be extended by adding custom design tokens and additional styles. This feature provides a high degree of customization, allowing you to adjust styles according to your needs, as you are not limited to the default tokens.
The example preset configuration adds a new _accent_ button with custom _button.accent.color_ and _button.accent.inverse.color_ tokens. It is also possible to add tokens globally to share them within the components.
```javascript
const MyPreset = definePreset(Aura, {
    components: {
        // custom button tokens and additional style
        button: {
            extend: {
                accent: {
                    color: '#f59e0b',
                    inverseColor: '#ffffff'
                }
            }
        css: ({ dt }) => `
.p-button-accent {
    background: ${dt('button.accent.color')};
    color: ${dt('button.accent.inverse.color')};
    transition-duration: ${dt('my.transition.fast')};
}
`
        }
    },
    // common tokens and styles
    extend: {
        my: {
            transition: {
                slow: '0.75s'
                normal: '0.5s'
                fast: '0.25s'
            },
            imageDisplay: 'block'
        }
    },
    css: ({ dt }) => `
        /* Global CSS */
        img {
            display: ${dt('my.image.display')};
        }
    `
});
```
Copy
## Scoped Tokens [\#](https://primevue.org/theming/styled/\#scopedtokens)
Design tokens can be scoped to a certain component using the _dt_ property. In this example, first switch uses the global tokens whereas second one overrides the global with its own tokens.
This approach is recommended over the _:deep()_ as it offers a cleaner API while avoiding the hassle of CSS rule overrides.
```markup
<template>
    <div>
        <ToggleSwitch v-model="checked1" />
        <ToggleSwitch v-model="checked2" :dt="amberSwitch" />
    </div>
</template>
<script setup>
import { ref } from 'vue';
const checked1 = ref(true);
const checked2 = ref(true);
const amberSwitch = ref({
    handle: {
        borderRadius: '4px'
    },
    colorScheme: {
        light: {
            root: {
                checkedBackground: '{amber.500}',
                checkedHoverBackground: '{amber.600}',
                borderRadius: '4px'
            },
            handle: {
                checkedBackground: '{amber.50}',
                checkedHoverBackground: '{amber.100}'
            }
        },
        dark: {
            root: {
                checkedBackground: '{amber.400}',
                checkedHoverBackground: '{amber.300}',
                borderRadius: '4px'
            },
            handle: {
                checkedBackground: '{amber.900}',
                checkedHoverBackground: '{amber.800}'
            }
        }
    }
});
</script>
```
Copy
## Utils [\#](https://primevue.org/theming/styled/\#utils)
### usePreset [\#](https://primevue.org/theming/styled/\#usepreset)
Replaces the current presets entirely, common use case is changing the preset dynamically at runtime.
```javascript
import { usePreset } from '@primeuix/themes';
const onButtonClick() {
    usePreset(MyPreset);
}
```
Copy
### updatePreset [\#](https://primevue.org/theming/styled/\#updatepreset)
Merges the provided tokens to the current preset, an example would be changing the primary color palette dynamically.
```javascript
import { updatePreset } from '@primeuix/themes';
const changePrimaryColor() {
    updatePreset({
        semantic: {
            primary: {
                50: '{indigo.50}',
                100: '{indigo.100}',
                200: '{indigo.200}',
                300: '{indigo.300}',
                400: '{indigo.400}',
                500: '{indigo.500}',
                600: '{indigo.600}',
                700: '{indigo.700}',
                800: '{indigo.800}',
                900: '{indigo.900}',
                950: '{indigo.950}'
            }
        }
    })
}
```
Copy
### updatePrimaryPalette [\#](https://primevue.org/theming/styled/\#updateprimarypalette)
Updates the primary colors, this is a shorthand to do the same update using _updatePreset_.
```javascript
import { updatePrimaryPalette } from '@primeuix/themes';
const changePrimaryColor() {
    updatePrimaryPalette({
        50: '{indigo.50}',
        100: '{indigo.100}',
        200: '{indigo.200}',
        300: '{indigo.300}',
        400: '{indigo.400}',
        500: '{indigo.500}',
        600: '{indigo.600}',
        700: '{indigo.700}',
        800: '{indigo.800}',
        900: '{indigo.900}',
        950: '{indigo.950}'
    });
}
```
Copy
### updateSurfacePalette [\#](https://primevue.org/theming/styled/\#updatesurfacepalette)
Updates the surface colors, this is a shorthand to do the same update using _updatePreset_.
```javascript
import { updateSurfacePalette } from '@primeuix/themes';
const changeSurfaces() {
    //changes surfaces both in light and dark mode
    updateSurfacePalette({
        50: '{zinc.50}',
        // ...
        950: '{zinc.950}'
    });
}
const changeLightSurfaces() {
    //changes surfaces only in light
    updateSurfacePalette({
        light: {
            50: '{zinc.50}',
            // ...
            950: '{zinc.950}'
        }
    });
}
const changeDarkSurfaces() {
    //changes surfaces only in dark mode
    updateSurfacePalette({
        dark: {
            50: '{zinc.50}',
            // ...
            950: '{zinc.950}'
        }
    });
}
```
Copy
### $dt [\#](https://primevue.org/theming/styled/\#dt)
The _$dt_ function returns the information about a token like the full path and value. This would be useful if you need to access tokens programmatically.
```javascript
import { $dt } from '@primeuix/themes';
const duration = $dt('transition.duration');
/*
    duration: {
        name: '--transition-duration',
        variable: 'var(--p-transition-duration)',
        value: '0.2s'
    }
*/
const primaryColor = $dt('primary.color');
/*
    primaryColor: {
        name: '--primary-color',
        variable: 'var(--p-primary-color)',
        value: {
        light: {
            value: '#10b981',
            paths: {
                name: 'semantic.primary.color',
                binding: {
                    name: 'primitive.emerald.500'
                }
            }
        },
        dark: {
            value: '#34d399',
            paths: {
                name: 'semantic.primary.color',
                binding: {
                    name: 'primitive.emerald.400'
                }
            }
        }
    }
}
*/
```
Copy
### palette [\#](https://primevue.org/theming/styled/\#Palette)
Returns shades and tints of a given color from 50 to 950 as an object.
```javascript
import { palette } from '@primeuix/themes';
// custom color
const values1 = palette('#10b981');
// copy an existing token set
const primaryColor = palette('{blue}');
```
Copy
## CSS Layer [\#](https://primevue.org/theming/styled/\#csslayer)
The PrimeVue CSS layer only applies to styled mode when layering is enabled explicitly at theme configuration, in unstyled mode the built-in CSS classes are not included and as a result no layer is necessary.
### Specificity [\#](https://primevue.org/theming/styled/\#specificity)
The _@layer_ is a standard CSS feature to define cascade layers for a customizable order of precedence. If you need to become more familiar with layers, visit the documentation at [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer) to begin with.
The _cssLayer_ is disabled by default, when it is enabled at theme configuration, PrimeVue wraps the built-in style classes under the _primevue_ cascade layer to make the library styles easy to override. CSS in your app without a layer has the highest CSS specificity, so you'll be able to override styles regardless of the location or how strong a class is written.
Layers also make it easier to use CSS Modules, view the CSS Modules guide for examples.
### Reset [\#](https://primevue.org/theming/styled/\#reset)
In case PrimeVue components have visual issues in your application, a Reset CSS may be the culprit. CSS layers would be an efficient solution that involves enabling the PrimeVue layer, wrapping the Reset CSS in another layer and defining the layer order. This way, your Reset CSS does not get in the way of PrimeVue components.
```javascript
/* Order */
@layer reset, primevue;
/* Reset CSS */
@layer reset {
    button,
    input {
        /* CSS to Reset */
    }
}
```
Copy
## CSS Modules [\#](https://primevue.org/theming/styled/\#cssmodules)
[CSS modules](https://github.com/css-modules/css-modules) are supported by enabling the _module_ property on a style element within your SFC. Use the _$style_ keyword to apply classes to a PrimeVue component. It is recommend to enable _cssLayer_ when using CSS modules so that the PrimeVue styles have low CSS specificity.
```javascript
<style module>
.myinput {
    border-radius: 2rem;
    padding: 1rem 2rem;
    border-width: 2px;
}
</style>
```
Copy
```markup
<template>
    <InputText :class="$style.myinput" placeholder="Search" />
</template>
```
Copy
## Scale [\#](https://primevue.org/theming/styled/\#scale)
PrimeVue UI component use _rem_ units, 1rem equals to the font size of the _html_ element which is _16px_ by default. Use the root font-size to adjust the size of the components globally. This website uses _14px_ as the base so it may differ from your application if your base font size is different.
```javascript
html {
    font-size: 14px;
}
```
Copy
- Architecture
- Configuration API
  - Theme
  - Options
- Presets
- Reserved Keys
- Colors
- Dark Mode
- Customization
  - definePreset
  - Primary
  - Surface
  - Noir
  - Font
  - Forms
  - Focus Ring
  - Component
  - Extend
- Scoped Tokens
- Utils
  - usePreset
  - updatePreset
  - updatePrimaryPalette
  - updateSurfacePalette
  - $dt
  - palette
- CSS Layer
  - Specificity
  - Reset
- CSS Modules
- Scale
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Fieldset Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# Fieldset
Fieldset is a grouping component with a content toggle feature.
## Import [\#](https://primevue.org/fieldset/\#import)
```javascript
import Fieldset from 'primevue/fieldset';
```
Copy
## Basic [\#](https://primevue.org/fieldset/\#basic)
A simple Fieldset is created with a _legend_ property along with the content as children.
Header
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
```markup
<Fieldset legend="Header">
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Fieldset>
```
Copy
## Toggleable [\#](https://primevue.org/fieldset/\#toggleable)
Content of the fieldset can be expanded and collapsed when _toggleable_ option is enabled.
Header
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
```markup
<Fieldset legend="Header" :toggleable="true">
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Fieldset>
```
Copy
## Template [\#](https://primevue.org/fieldset/\#template)
Legend section can be customized with custom content using templating.
![](https://primefaces.org/cdn/primevue/images/avatar/amyelsner.png)
Amy Elsner
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
```markup
<Fieldset>
    <template #legend>
        <div class="flex items-center pl-2">
            <Avatar image="/images/avatar/amyelsner.png" shape="circle" />
            <span class="font-bold p-2">Amy Elsner</span>
        </div>
    </template>
    <p class="m-0">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </p>
</Fieldset>
```
Copy
## Accessibility [\#](https://primevue.org/fieldset/\#accessibility)
### Screen Reader
Fieldset component uses the semantic _fieldset_ element. When toggleable option is enabled, a button element is included inside the _legend_ element, this button has _aria-controls_ to define the id of the content section along with _aria-expanded_ for the visibility state. The value to read the button defaults to the value of the _legend_ property and can be customized by defining an _aria-label_ or _aria-labelledby_ via the _toggleButtonProps_ property.
The content uses _region_, defines an id that matches the _aria-controls_ of the content toggle button and _aria-labelledby_ referring to the id of the header.
###### Content Toggle Button Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element in the page tab sequence. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element in the page tab sequence. |
| _enter_ | Toggles the visibility of the content. |
| _space_ | Toggles the visibility of the content. |
- Import
- Basic
- Toggleable
- Template
- Accessibility
# Fieldset API
API defines helper props, events and others for the PrimeVue Fieldset module.
## Fieldset [\#](https://primevue.org/fieldset/\#api.fieldset)
Fieldset is a grouping component with the optional content toggle feature.
### Props [\#](https://primevue.org/fieldset/\#api.fieldset.props)
Defines valid properties in Fieldset component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| legend | string | null | Header text of the fieldset. |  |
| toggleable | boolean | false | When specified, content can toggled by clicking the legend. |  |
| collapsed | boolean | false | Defines the default visibility state of the content. |  |
| toggleButtonProps | AnchorHTMLAttributes | null | Used to pass the custom value to read for the AnchorHTMLAttributes inside the component. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<FieldsetPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Emits [\#](https://primevue.org/fieldset/\#api.fieldset.emits)
Defines valid emits in Fildset component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| update:collapsed | value: boolean | void | Emitted when the collapsed changes. |  |
| toggle | event: [FieldsetToggleEvent](https://primevue.org/fieldset/#api.fieldset.events.FieldsetToggleEvent) | void | Callback to invoke when a tab gets expanded or collapsed. |  |
### Slots [\#](https://primevue.org/fieldset/\#api.fieldset.slots)
Defines valid slots in Fieldset slots.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| legend | scope: {<br>toggleCallback: (event: Event) â‡’ void, // Toggle function.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom legend template. |  |
| togglericon | scope: {<br>collapsed: boolean, // Collapsed state as a booleanclass: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] |  |  |
| toggleicon | scope: {<br>collapsed: boolean, // Collapsed state as a booleanclass: string, // Style class of the icon.<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom toggler icon template. |  |
### Events [\#](https://primevue.org/fieldset/\#api.fieldset.events)
Defines the custom events used by the component's emit.
#### FieldsetToggleEvent [\#](https://primevue.org/fieldset/\#api.fieldset.events.FieldsetToggleEvent)
Custom toggle event.
See [toggle](https://primevue.org/fieldset/#api.fieldset.emitsoptions.toggle)
| name | type | description |
| --- | --- | --- |
| originalEvent | Event | Browser event. |
| value | boolean | Collapsed state as a boolean |
### Interfaces [\#](https://primevue.org/fieldset/\#api.fieldset.interfaces)
Defines the custom interfaces used by the module.
#### FieldsetPassThroughMethodOptions [\#](https://primevue.org/fieldset/\#api.fieldset.interfaces.FieldsetPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [FieldsetProps](https://primevue.org/fieldset/#api.fieldset.interfaces.FieldsetProps) | null | Defines valid properties. |
| state | [FieldsetState](https://primevue.org/fieldset/#api.fieldset.interfaces.FieldsetState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### FieldsetPassThroughOptions [\#](https://primevue.org/fieldset/\#api.fieldset.interfaces.FieldsetPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [FieldsetPassThroughOptionType](https://primevue.org/fieldset/#api.fieldset.types.FieldsetPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| legend | [FieldsetPassThroughOptionType](https://primevue.org/fieldset/#api.fieldset.types.FieldsetPassThroughOptionType) | null | Used to pass attributes to the legend's DOM element. |
| toggleButton | [FieldsetPassThroughOptionType](https://primevue.org/fieldset/#api.fieldset.types.FieldsetPassThroughOptionType) | null | Used to pass attributes to the toggle button's DOM element. |
| toggleIcon | [FieldsetPassThroughOptionType](https://primevue.org/fieldset/#api.fieldset.types.FieldsetPassThroughOptionType) | null | Used to pass attributes to the toggle icon's DOM element. |
| legendLabel | [FieldsetPassThroughOptionType](https://primevue.org/fieldset/#api.fieldset.types.FieldsetPassThroughOptionType) | null | Used to pass attributes to the legend label's DOM element. |
| contentContainer | [FieldsetPassThroughOptionType](https://primevue.org/fieldset/#api.fieldset.types.FieldsetPassThroughOptionType) | null | Used to pass attributes to the content container's DOM element. |
| content | [FieldsetPassThroughOptionType](https://primevue.org/fieldset/#api.fieldset.types.FieldsetPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
| transition | [FieldsetPassThroughTransitionType](https://primevue.org/fieldset/#api.fieldset.types.FieldsetPassThroughTransitionType) | null | Used to control Vue Transition API. |
#### FieldsetPassThroughAttributes [\#](https://primevue.org/fieldset/\#api.fieldset.interfaces.FieldsetPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### FieldsetState [\#](https://primevue.org/fieldset/\#api.fieldset.interfaces.FieldsetState)
Defines current inline state in Fieldset component.
| name | type | default | description |
| --- | --- | --- | --- |
| d\_collapsed | boolean | false | Current collapsed state as a boolean. |
## Types [\#](https://primevue.org/fieldset/\#api.fieldset.types)
Defines the custom types used by the module.
#### FieldsetPassThroughOptionType [\#](https://primevue.org/fieldset/\#api.fieldset.types.FieldsetPassThroughOptionType)
| values |
| --- |
| FieldsetPassThroughAttributes \| (options: FieldsetPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### FieldsetPassThroughTransitionType [\#](https://primevue.org/fieldset/\#api.fieldset.types.FieldsetPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: FieldsetPassThroughMethodOptions) => TransitionProps \| undefined |
#### FieldsetEmits [\#](https://primevue.org/fieldset/\#api.fieldset.types.FieldsetEmits)
| values |
| --- |
| EmitFn<FieldsetEmitsOptions> |
- Fieldset
  - Props
  - Emits
  - Slots
  - Events
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Avalon Template
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![Template Hero Pattern](https://primefaces.org/cdn/primevue/images/templates/avalon/avalon-hero-pattern.png)
A modern and easy to use premium application template with highly customizable layout features. Based on a bootstrap styling, it is fully responsive, touch optimized, built with SASS, CSS3 and HTML5.
[Live Demo](https://avalon.primevue.org/) [Buy Now](https://www.primefaces.org/store/)
[Community](https://github.com/orgs/primefaces/discussions/categories/primevue-templates) [Documentation](https://avalon.primevue.org/documentation)
![Template Dashboard Image 1](https://primefaces.org/cdn/primevue/images/templates/avalon/avalon-hero-dashboard1.png)![Template Dashboard Image 2](https://primefaces.org/cdn/primevue/images/templates/avalon/avalon-hero-dashboard2.png)
Basic License
$49
Non Commercial Usage
Single End Product, No Multi-Use
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
Extended License
$490
Commercial Usage
Multiple End Products
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
The download package is a Vite-based project containing all application source codes deployed at the live demo. The project code is written in JavaScript.
Visit the [official documentation](https://avalon.primevue.org/documentation) for more information.
## Features
01
01
01
##### Light and Dark Modes
Avalon offers you 2 uniquely designed layout modes to choose from; Light and Dark.
02
02
02
##### Component 10 Beautiful Themes
Avalon offers 10 built-in themes and creating your own theme is a matter of defining couple of SaSS variables.
03
03
03
##### 7 Menu Orientations
Avalon has 7 menu layouts to choose from; Static, Overlay, Slim, Slim+, Reveal, Drawer and Horizontal with Light and Dark options.
04
04
04
##### Topbar Themes
Avalon comes with 11 topbar themes guaranteeing an enviable design.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/avalon/features-animation-darkmode.png)
\> npm install or yarn
\> npm run dev or yarn dev
![Vue 3D Logo](https://primefaces.org/cdn/primevue/images/templates/vue-3d-logo.png)
### Vue App with No Configuration
Avalon is powered by Vite to get started in no time following the best practices.
![Ready to Use Applications](https://primefaces.org/cdn/primevue/images/templates/avalon/avalon-features1-feature1.png)
##### Ready to Use Applications
Mail, File System, Tasks, Calendar, Blog and Chat are the sample applications to get started with ease.
![E-Commerce Pages](https://primefaces.org/cdn/primevue/images/templates/avalon/avalon-features1-feature2.png)
##### E-Commerce Pages
Avalon offers E-commerce pages to kickstart your e-commerce project powered by PrimeBlocks.
![Ready to Use Pages](https://primefaces.org/cdn/primevue/images/templates/avalon/avalon-features1-feature3.png)
##### Ready to Use Pages
Landing, login, invoice, help, user management and error pages are provided as template pages to get started with building your app.
01
01
01
##### Tailwind CSS
The demo content is built with TailwindCSS, while the application shell uses custom CSS, offering flexibility and efficiency for responsive design.
02
02
02
##### PrimeBlocks
Fully compatible with [PrimeBlocks](https://primeblocks.org/), choose from the wide range of blocks and customize the way you like. Note that PrimeBlocks is not included in the
template and requires a separate purchase.
03
03
03
##### PrimeIcons
Avalon ships with PrimeIcons, PrimeTekâ€™s modern icon library including a wide range of icons for your applications.
04
04
04
##### Figma File
Avalon uses Figma as the design tool. It will be possible to download the Figma file after your purchase. You can
[preview the Figma file](https://www.figma.com/file/LuzEn29BAxr03T2vMQ5A1y/Preview-%7C-Avalon-1.0.0?type=design&mode=design&t=ME7xK2sAYOLoKCrT-1) before the purchase. Note that PrimeVue UI components are excluded from the
Avalon Figma file as they are available in PrimeOne for Figma only.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/common/tailwind.png)
![Fully Responsive](https://primefaces.org/cdn/primevue/images/templates/avalon/avalon-features2-responsive.png)
## Fully Responsive
Avalon is crafted to provide optimal viewing and interaction experience for a wide range of devices.
![Cross Browser Compatible](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-compatible.png)
## Cross Browser Compatible
First class support for Firefox, Safari, Chrome and Edge.
![Support](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-lifetime.png)
## Support
PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users
can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and
[Forum](https://github.com/orgs/primefaces/discussions/categories/primevue-templates).
![Customizable Design](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-customizable.png)
## Customizable Design
Fully customizable with a mixture of Sass and CSS variables.
![Top Notch Quality](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-quality.png)
## Top Notch Quality
Superior standards with 100% compatibility for strict mode and linting tools.
![Mobile Experience](https://primefaces.org/cdn/primevue/images/templates/avalon/avalon-features2-mobile.png)
## Mobile Experience
Touch optimized enhanced mobile experience with responsive design.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Apollo Vue Template
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![Template Hero Pattern](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-hero-pattern.png)
Application template for Vue based on Vite with light-dim-dark modes, four menu layouts, various menu themes, sample apps, ready to use template pages and 24 PrimeVue themes.
[Live Demo](https://apollo.primevue.org/) [Buy Now](https://www.primefaces.org/store/)
[Community](https://github.com/orgs/primefaces/discussions/categories/primevue-templates) [Documentation](https://apollo.primevue.org/documentation)
![Template Dashboard Image 1](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-hero-dashboard1.png)![Template Dashboard Image 2](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-hero-dashboard2.png)
Basic License
$59
Non Commercial Usage
Single End Product, No Multi-Use
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
Extended License
$590
Commercial Usage
Multiple End Products
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
The download package is a Vite-based project containing all application source codes deployed at the live demo. The project code is written in JavaScript.
Visit the [official documentation](https://apollo.primevue.org/documentation/) for more information.
## Features
01
01
01
##### Light / Dark / Dim Modes
Apollo has 3 display modes to choose from; Light, Dim and Dark.
02
02
02
##### Component Themes
Apollo offers 24 built-in component themes and creating your own theme is a matter of defining couple of sass variables.
03
03
03
##### 7 Menu Orientations
Static, Overlay, Slim, Slim+, Reveal, Drawer and Horizontal are the available menu layouts depending on your preference.
04
04
04
##### Menu Themes
Stunning theming for the main menu with 3 alternatives; Color Scheme, Primary Color and Transparent.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/apollo/features-animation-darkmode.png)
![Ready to Use Applications](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features1-feature1.png)
##### Ready to Use Applications
Mail, File System, Tasks, Calendar, Blog and Chat are the sample applications to get started with ease.
![E-Commerce Pages](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features1-feature2.png)
##### E-Commerce Pages
Apollo offers E-commerce pages to kickstart your e-commerce project powered by PrimeBlocks.
![Ready to Use Pages](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features1-feature3.png)
##### Ready to Use Pages
Landing, login, invoice, help, user management and error pages are provided as template pages to get started with building your app.
\> npm install or yarn
\> npm run dev or yarn dev
![Vue 3D Logo](https://primefaces.org/cdn/primevue/images/templates/vue-3d-logo.png)
### Vue based on Vite and Nuxt
Apollo is powered by Vite and Nuxt to get started in no time following the best practices.
01
01
01
##### Tailwind CSS
The demo content is built with TailwindCSS, while the application shell uses custom CSS, offering flexibility and efficiency for responsive design.
02
02
02
##### PrimeBlocks
Fully compatible with [PrimeBlocks](https://primeblocks.org/), choose from the wide range of blocks and customize the way you like. Note that PrimeBlocks is not included in the
template and requires a separate purchase.
03
03
03
##### PrimeIcons
Apollo ships with PrimeIcons, PrimeTekâ€™s modern icon library including a wide range of icons for your applications.
04
04
04
##### Figma File
Apollo uses Figma as the design tool. It will be possible to download the Figma file after your purchase. You can
[preview the Figma file](https://www.figma.com/file/zQOW0XBXdCTqODzEOqwBtt/Preview-%7C-Apollo-2022?node-id=335%3A21768&t=urYI89V3PLNAZEJG-1/)
before the purchase. Note that PrimeVue UI components are excluded from the Apollo Figma file as they are available in
PrimeOne for Figma only.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/common/tailwind.png)
![Fully Responsive](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-responsive.png)
## Fully Responsive
Apollo is crafted to provide optimal viewing and interaction experience for a wide range of devices.
![Support](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-lifetime.png)
## Support
PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users
can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and
[Forum](https://github.com/orgs/primefaces/discussions/categories/primevue-templates).
![Top Notch Quality](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-quality.png)
## Top Notch Quality
Superior standards with 100% compatibility for strict mode and linting tools.
![Cross Browser Compatible](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-compatible.png)
## Cross Browser Compatible
First class support for Firefox, Safari, Chrome and Edge.
![Customizable Design](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-customizable.png)
## Customizable Design
Fully customizable with a mixture of Sass and CSS variables.
![Mobile Experience](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-mobile.png)
## Mobile Experience
Touch optimized enhanced mobile experience with responsive design.
Theme Designer
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Unstyled PrimeVue Theme
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Unstyled Mode
Theming PrimeVue with alternative styling approaches.
## Architecture [\#](https://primevue.org/theming/unstyled/\#architecture)
The term _unstyled_ is used to define an alternative styling approach instead of the default theming with design tokens. In unstyled mode the css variables of the design tokens and the css rule sets that utilize them are not included. Here is an example of an Unstyled Select, the core functionality and accessibility is provided whereas styling is not included. Unstyled components still need to be styled on your end, in the next sections, we'll cover the styling solutions for both modes.
Unstyled Select
## Setup [\#](https://primevue.org/theming/unstyled/\#setup)
Unstlyed mode is enabled for the whole suite by enabling _unstyled_ option during PrimeVue installation.
```javascript
import { createApp } from "vue";
import PrimeVue from "primevue/config";
const app = createApp(App);
app.use(PrimeVue, { unstyled: true });
```
Copy
Alternatively even in the default styled mode, a particular component can still be used as unstyled by adding the _unstyled_ prop of the component.
Check
```markup
<Button label="Check" icon="pi pi-check" unstyled></Button>
```
Copy
## Example [\#](https://primevue.org/theming/unstyled/\#example)
Here is a sample that styles a button component with Tailwind CSS using [pass through](https://primevue.org/passthrough) attributes. Before beginning, head over to the the pass through section at [button](https://primevue.org/button) documentation to learn more about the components internals section. We'll be using the _root_, _label_ and _icon_ elements to add a custom style.
Search
```markup
<Button
    label="Search"
    icon="pi pi-search"
    unstyled
    pt:root="bg-teal-500 hover:bg-teal-700 active:bg-teal-900 cursor-pointer py-2 px-4 rounded-full border-0 flex gap-2"
    pt:label="text-white font-bold text-lg"
    pt:icon="text-white text-xl"
/>
```
Copy
## Global [\#](https://primevue.org/theming/unstyled/\#global)
A global configuration can be created at application level to avoid repetition via the global _pt_ option so that the styles can be shared from a single location. A particular component can still override a global configuration with its own _pt_ property.
```javascript
import { createApp } from "vue";
import PrimeVue from "primevue/config";
const app = createApp(App);
app.use(PrimeVue, {
    unstyled: true,
    pt: {
        button: {
            root: 'bg-teal-500 hover:bg-teal-700 active:bg-teal-900 cursor-pointer py-2 px-4 rounded-full border-0 flex gap-2',
            label: 'text-white font-bold text-lg',
            icon: 'text-white text-xl'
        },
        panel: {
            header: 'bg-primary text-primary-contrast border-primary',
            content: 'border-primary text-lg text-primary-700',
            title: 'bg-primary text-primary-contrast text-xl',
            toggler: 'bg-primary text-primary-contrast hover:text-primary hover:bg-primary-contrast'
        }
    }
});
```
Copy
## Volt [\#](https://primevue.org/theming/unstyled/\#volt)
Tailwind CSS is perfect fit for the unstyled mode, PrimeTek has initiated a new UI library called [Volt](https://volt.primevue.org/) based on the unstyled PrimeVue and Tailwind CSS v4. Volt follows the code ownership model where the components are located in the application codebase rather than node\_modules. All components within Volt are essentially wrapped versions of the unstyled PrimeVue equivalents, with an added layer of theming through Tailwind CSS v4. This approach, along with the templating features, offers complete control over the theming and presentation.
- Architecture
- Setup
- Example
- Global
- Volt
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue RTL Support
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# RTL Support
Right-to-left direction support of PrimeVue.
## Configuration [\#](https://primevue.org/guides/rtl/\#configuration)
The PrimeVue components natively support Right-to-Left (RTL) text direction through a modern CSS implementation utilizing FlexBox and classes like _\*-inline-start_ and _\*-block-end_. Consequently, no JavaScript configuration is necessary; setting the document's text direction to RTL is sufficient to enable this feature.
The RTL setting can either be set using the _dir_ attribute or with the _direction_ style property.
With Markup
```
<html dir="rtl">
```
With CSS
```
html {
    direction: rtl
}
```
## Limitations [\#](https://primevue.org/guides/rtl/\#tailwindcss)
RTL is widely supported by the UI suite except the Galleria and Carousel components. These components will be enhanced with a modern implementation in upcoming versions with built-in support for RTL.
- Configuration
- Limitations
Theme Designer
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## ConfirmDialog Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# ConfirmDialog
ConfirmDialog uses a Dialog UI that is integrated with the Confirmation API.
## Import [\#](https://primevue.org/confirmdialog/\#import)
```javascript
import ConfirmDialog from 'primevue/confirmdialog';
```
Copy
## Service [\#](https://primevue.org/confirmdialog/\#confirmation-service)
ConfirmDialog is controlled via the _ConfirmationService_ that needs to be installed as an application plugin.
```javascript
import {createApp} from 'vue';
import ConfirmationService from 'primevue/confirmationservice';
const app = createApp(App);
app.use(ConfirmationService);
```
Copy
The service is available with the _useConfirm_ function for Composition API or using the _$confirm_ property of the application for Options API.
```javascript
import { useConfirm } from "primevue/useconfirm";
const confirm = useConfirm();
```
Copy
## Basic [\#](https://primevue.org/confirmdialog/\#basic)
ConfirmDialog is displayed by calling the _require_ method of the _$confirm_ instance by passing the options to customize the Dialog. The _target_ attribute is mandatory to align the popup to its referrer.
SaveDelete
```markup
<ConfirmDialog></ConfirmDialog>
<Button @click="confirm1()" label="Save" outlined></Button>
<Button @click="confirm2()" label="Delete" severity="danger" outlined></Button>
```
Copy
## Position [\#](https://primevue.org/confirmdialog/\#position)
The _position_ property of the confirm options specifies the location of the Dialog.
LeftRight
TopLeftTopTopRight
BottomLeftBottomBottomRight
```markup
<ConfirmDialog group="positioned"></ConfirmDialog>
<div class="flex flex-wrap justify-center gap-2 mb-4">
    <Button @click="confirmPosition('left')" icon="pi pi-arrow-right" label="Left" severity="secondary" style="min-width: 10rem"></Button>
    <Button @click="confirmPosition('right')" icon="pi pi-arrow-left" label="Right" severity="secondary" style="min-width: 10rem"></Button>
</div>
<div class="flex flex-wrap justify-center gap-2 mb-4">
    <Button @click="confirmPosition('topleft')" icon="pi pi-arrow-down-right" label="TopLeft" severity="secondary" style="min-width: 10rem"></Button>
    <Button @click="confirmPosition('top')" icon="pi pi-arrow-down" label="Top" severity="secondary" style="min-width: 10rem"></Button>
    <Button @click="confirmPosition('topright')" icon="pi pi-arrow-down-left" label="TopRight" severity="secondary" style="min-width: 10rem"></Button>
</div>
<div class="flex flex-wrap justify-center gap-2">
    <Button @click="confirmPosition('bottomleft')" icon="pi pi-arrow-up-right" label="BottomLeft" severity="secondary" style="min-width: 10rem"></Button>
    <Button @click="confirmPosition('bottom')" icon="pi pi-arrow-up" label="Bottom" severity="secondary" style="min-width: 10rem"></Button>
    <Button @click="confirmPosition('bottomright')" icon="pi pi-arrow-up-left" label="BottomRight" severity="secondary" style="min-width: 10rem"></Button>
</div>
```
Copy
## Template [\#](https://primevue.org/confirmdialog/\#template)
Templating allows customizing the message content.
Save
```markup
<ConfirmDialog group="templating">
    <template #message="slotProps">
        <div class="flex flex-col items-center w-full gap-4 border-b border-surface-200 dark:border-surface-700">
            <i :class="slotProps.message.icon" class="!text-6xl text-primary-500"></i>
            <p>{{ slotProps.message.message }}</p>
        </div>
    </template>
</ConfirmDialog>
<Button @click="showTemplate()" label="Save"></Button>
```
Copy
## Headless [\#](https://primevue.org/confirmdialog/\#headless)
Headless mode is enabled by defining a _container_ slot that lets you implement entire confirmation UI instead of the default elements.
Save
```markup
<ConfirmDialog group="headless">
    <template #container="{ message, acceptCallback, rejectCallback }">
        <div class="flex flex-col items-center p-8 bg-surface-0 dark:bg-surface-900 rounded">
            <div class="rounded-full bg-primary text-primary-contrast inline-flex justify-center items-center h-24 w-24 -mt-20">
                <i class="pi pi-question !text-4xl"></i>
            </div>
            <span class="font-bold text-2xl block mb-2 mt-6">{{ message.header }}</span>
            <p class="mb-0">{{ message.message }}</p>
            <div class="flex items-center gap-2 mt-6">
                <Button label="Save" @click="acceptCallback" class="w-32"></Button>
                <Button label="Cancel" outlined @click="rejectCallback" class="w-32"></Button>
            </div>
        </div>
    </template>
</ConfirmDialog>
<Button @click="requireConfirmation()" label="Save"></Button>
```
Copy
## Accessibility [\#](https://primevue.org/confirmdialog/\#accessibility)
### Screen Reader
ConfirmDialog component uses _alertdialog_ role along with _aria-labelledby_ referring to the header element however any attribute is passed to the root element so you may use _aria-labelledby_ to override this default behavior. In addition _aria-modal_ is added since focus is kept within the popup.
When _require_ method of the _$confirm_ instance is used and a trigger is passed as a parameter, ConfirmDialog adds _aria-expanded_ state attribute and _aria-controls_ to the trigger so that the relation between the trigger and the dialog is defined.
```markup
<ConfirmDialog id="confirm" />
<Button @click="openDialog()" label="Confirm" :aria-expanded="visible" :aria-controls="visible ? 'confirm' : null"></Button>
```
Copy
```markup
<script setup>
const confirm = useConfirm();
const isVisible = ref(false);
const openDialog = () => {
    confirm.require({
        message: 'Are you sure you want to proceed?',
        header: 'Confirmation',
        onShow: () => {
            isVisible.value = true;
        },
        onHide: () => {
            isVisible.value = false;
        }
    });
};
</script>
```
Copy
### Overlay Keyboard Support
| Key | Function |
| --- | --- |
| _tab_ | Moves focus to the next the focusable element within the dialog. |
| _shift_ \+ _tab_ | Moves focus to the previous the focusable element within the dialog. |
| _escape_ | Closes the dialog. |
### Buttons Keyboard Support
| Key | Function |
| --- | --- |
| _enter_ | Closes the dialog. |
| _space_ | Closes the dialog. |
- Import
- Service
- Basic
- Position
- Template
- Headless
- Accessibility
# ConfirmDialog API
API defines helper props, events and others for the PrimeVue ConfirmDialog module.
## ConfirmDialog [\#](https://primevue.org/confirmdialog/\#api.confirmdialog)
ConfirmDialog uses a Dialog UI with confirmDialog method or  tag.
### Props [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.props)
Defines valid properties in ConfirmDialog component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| group | string | null | Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance. |  |
| breakpoints | [ConfirmDialogBreakpoints](https://primevue.org/confirmdialog/#api.confirmdialog.interfaces.ConfirmDialogBreakpoints) | null | Object literal to define widths per screen size. |  |
| draggable | boolean | true | Enables dragging to change the position using header. |  |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<ConfirmDialogPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
### Slots [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.slots)
Defines valid slots in ConfirmDialog component.
| name | parameters | returnType | description |  |
| --- | --- | --- | --- | --- |
| message | scope: {<br>message: ConfirmationOptions, // Message of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom message template. |  |
| icon | scope: {<br>class: any, // Style class of the icon template<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| accepticon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| rejecticon |  | VNode<RendererNode, RendererElement, Object>\[\] | Custom icon template. |  |
| container | scope: {<br>message: any, // Message of the componentcloseCallback: () â‡’ void, // Close dialog function.acceptCallback: () â‡’ void, // Accept function of the componentrejectCallback: () â‡’ void, // Reject function of the component<br>} | VNode<RendererNode, RendererElement, Object>\[\] | Custom container slot. |  |
### Interfaces [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.interfaces)
Defines the custom interfaces used by the module.
#### ConfirmDialogPassThroughMethodOptions [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.interfaces.ConfirmDialogPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [ConfirmDialogProps](https://primevue.org/confirmdialog/#api.confirmdialog.interfaces.ConfirmDialogProps) | null | Defines valid properties. |
| state | [ConfirmDialogState](https://primevue.org/confirmdialog/#api.confirmdialog.interfaces.ConfirmDialogState) | null | Defines current inline state. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### ConfirmDialogSharedPassThroughMethodOptions [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.interfaces.ConfirmDialogSharedPassThroughMethodOptions)
Custom shared passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| props | [ConfirmDialogProps](https://primevue.org/confirmdialog/#api.confirmdialog.interfaces.ConfirmDialogProps) | null | Defines valid properties. |
| state | [ConfirmDialogState](https://primevue.org/confirmdialog/#api.confirmdialog.interfaces.ConfirmDialogState) | null | Defines current inline state. |
#### ConfirmDialogPassThroughOptions [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.interfaces.ConfirmDialogPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [ConfirmDialogPassThroughOptionType](https://primevue.org/confirmdialog/#api.confirmdialog.types.ConfirmDialogPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| header | [ConfirmDialogPassThroughOptionType](https://primevue.org/confirmdialog/#api.confirmdialog.types.ConfirmDialogPassThroughOptionType) | null | Used to pass attributes to the header's DOM element. |
| title | [ConfirmDialogPassThroughOptionType](https://primevue.org/confirmdialog/#api.confirmdialog.types.ConfirmDialogPassThroughOptionType) | null | Used to pass attributes to the header title's DOM element. |
| headerActions | [ConfirmDialogPassThroughOptionType](https://primevue.org/confirmdialog/#api.confirmdialog.types.ConfirmDialogPassThroughOptionType) | null | Used to pass attributes to the header actions' DOM element. |
| pcCloseButton | [ConfirmDialogPassThroughOptionType](https://primevue.org/confirmdialog/#api.confirmdialog.types.ConfirmDialogPassThroughOptionType) | null | Used to pass attributes to the close button's component. |
| content | [ConfirmDialogPassThroughOptionType](https://primevue.org/confirmdialog/#api.confirmdialog.types.ConfirmDialogPassThroughOptionType) | null | Used to pass attributes to the content's DOM element. |
| icon | [ConfirmDialogPassThroughOptionType](https://primevue.org/confirmdialog/#api.confirmdialog.types.ConfirmDialogPassThroughOptionType) | null | Used to pass attributes to the icon's DOM element. |
| message | [ConfirmDialogPassThroughOptionType](https://primevue.org/confirmdialog/#api.confirmdialog.types.ConfirmDialogPassThroughOptionType) | null | Used to pass attributes to the message's DOM element. |
| footer | [ConfirmDialogPassThroughOptionType](https://primevue.org/confirmdialog/#api.confirmdialog.types.ConfirmDialogPassThroughOptionType) | null | Used to pass attributes to the footer's DOM element. |
| mask | [ConfirmDialogPassThroughOptionType](https://primevue.org/confirmdialog/#api.confirmdialog.types.ConfirmDialogPassThroughOptionType) | null | Used to pass attributes to the mask's DOM element. |
| pcRejectButton | any | null | Used to pass attributes to the Button component. |
| pcAcceptButton | any | null | Used to pass attributes to the Button component. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### ConfirmDialogPassThroughAttributes [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.interfaces.ConfirmDialogPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
#### ConfirmDialogState [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.interfaces.ConfirmDialogState)
Defines current inline state in ConfirmDialog component.
| name | type | default | description |
| --- | --- | --- | --- |
| visible | boolean | false | Current visible state as a boolean. |
| confirmation | any | null | Current confirmation message. |
#### ConfirmDialogBreakpoints [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.interfaces.ConfirmDialogBreakpoints)
Breakpoint metadata.
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | string | null |  |
## Types [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.types)
Defines the custom types used by the module.
#### ConfirmDialogPassThroughOptionType [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.types.ConfirmDialogPassThroughOptionType)
| values |
| --- |
| ConfirmDialogPassThroughAttributes \| (options: ConfirmDialogPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### ConfirmDialogEmits [\#](https://primevue.org/confirmdialog/\#api.confirmdialog.types.ConfirmDialogEmits)
| values |
| --- |
| EmitFn<ConfirmDialogEmitsOptions> |
## ConfirmationService-UseConfirm [\#](https://primevue.org/confirmdialog/\#api.confirmationservice-useconfirm)
### Services [\#](https://primevue.org/confirmdialog/\#api.confirmationservice-useconfirm.services)
Confirmation Service methods.
| name | parameters | returnType | description |
| --- | --- | --- | --- |
| require | options: [ConfirmationOptions](https://primevue.org/confirmdialog/#api.options.ConfirmationOptions) | void | Displays the dialog using the confirmation object options. |
| close |  | void | Hides the dialog without invoking accept or reject callbacks. |
## ConfirmationOptions [\#](https://primevue.org/confirmdialog/\#api.confirmationoptions)
### Options [\#](https://primevue.org/confirmdialog/\#api.options.ConfirmationOptions)
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| target | HTMLElement | null | Element to align the overlay. |  |
| header | string | null | Header text of the dialog. |  |
| message | string | null | Message of the confirmation. |  |
| group | string | null | Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance. |  |
| position | HintedString<"left" \| "right" \| "top" \| "bottom" \| "center" \| "topleft" \| "topright" \| "bottomleft" \| "bottomright"> | center | Position of the dialog. |  |
| icon | string | null | Icon to display next to the message. |  |
| blockScroll | boolean | false | Whether background scroll should be blocked when dialog is visible. |  |
| appendTo | HTMLElement \| HintedString<"body" \| "self"> | body | A valid query selector or an HTMLElement to specify where the confirm dialog gets attached.<br>Special keywords are 'body' for document body and 'self' for the element itself. |  |
| modal | boolean | false | Defines if background should be blocked when confirm dialog is displayed. |  |
| accept | Function | null |  |  |
| reject | Function | null |  |  |
| onShow | Function | null |  |  |
| onHide | Function | null |  |  |
| acceptLabel | string | null | Label of the accept button. Defaults to PrimeVue Locale configuration. |  |
| rejectLabel | string | null | Label of the reject button. Defaults to PrimeVue Locale configuration. |  |
| acceptIcon | string | null | Icon of the accept button. |  |
| rejectIcon | string | null | Icon of the reject button. |  |
| acceptClass | string | null | Style class of the accept button. |  |
| rejectClass | string | null | Style class of the reject button. |  |
| defaultFocus | string | null | Element to receive the focus when the dialog gets visible, valid values are "accept" and "reject". |  |
| rejectProps | object | null | Used to pass all properties of the ButtonProps to the reject button inside the component. |  |
| acceptProps | object | null | Used to pass all properties of the ButtonProps to the accept button inside the component. |  |
- ConfirmDialog
  - Props
  - Slots
  - Interfaces
  - Types
- ConfirmationService-UseConfirm
  - Services
- ConfirmationOptions
  - Options
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Poseidon Template
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![Template Hero Pattern](https://primefaces.org/cdn/primevue/images/templates/poseidon/hero-background.png)
Experience a modern, user-friendly premium application template featuring a variety of color schemes. Based on flat design principles, it is fully responsive and touch-optimized, built with SASS, CSS3, and HTML5.
[Live Demo](https://poseidon.primevue.org/) [Buy Now](https://www.primefaces.org/store/)
[Community](https://github.com/orgs/primefaces/discussions/categories/primevue-templates) [Documentation](https://poseidon.primevue.org/documentation)
![Template Dashboard Image 1](https://primefaces.org/cdn/primevue/images/templates/poseidon/nextgen/poseidon-hero-1.jpg)![Template Dashboard Image 2](https://primefaces.org/cdn/primevue/images/templates/poseidon/nextgen/poseidon-hero-2.jpg)
Basic License
$59
Non Commercial Usage
Single End Product, No Multi-Use
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
Extended License
$590
Commercial Usage
Multiple End Products
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
The download package is a Vite-based project containing all application source codes deployed at the live demo. The project code is written in JavaScript.
Visit the [official documentation](https://poseidon.primevue.org/documentation/) for more information.
## Features
01
01
01
##### Light / Dark Modes
Poseidon offers light and dark color schemes with alternative color palettes.
02
02
02
##### Component Themes
Poseidon offers 17 fully customizable built-in themes featuring two different presets; Aura and Lara.
03
03
03
##### 7 Menu Orientations
Poseidon has 7 menu layouts to choose from; Static, Overlay, Horizontal, Compact, Slim, Reveal and Drawer.
04
04
04
##### Application Themes
The application layout and components seamlessly complements your brand color.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/poseidon/nextgen/poseidon-lightdark.png)
\> npm install or yarn
\> npm run dev or yarn dev
![Vue 3D Logo](https://primefaces.org/cdn/primevue/images/templates/vue-3d-logo.png)
### Vue based on Vite
Poseidon is powered by Vite to get started in no time following the best practices.
01
01
01
##### Tailwind CSS
The demo content is built with TailwindCSS, while the application shell uses custom CSS, offering flexibility and efficiency for responsive design.
02
02
02
##### PrimeBlocks
Fully compatible with [PrimeBlocks](https://primeblocks.org/), choose from the wide range of blocks and customize the way you like. Note that PrimeBlocks is not included in the
template and requires a separate purchase.
03
03
03
##### PrimeIcons
Poseidon ships with PrimeIcons, PrimeTekâ€™s modern icon library including a wide range of icons for your applications.
04
04
04
##### Figma File
Poseidon uses Figma as the design tool. It will be possible to download the Figma file after your purchase.
You can [preview the Figma file](https://www.figma.com/design/eMNbyxsMp3H0PQbMyyGK77/Preview-%7C-Poseidon?node-id=0-1&t=wJRSplRnKvjqju9S-1) the Figma file before the purchase.
Note that PrimeVue UI components are excluded from the Poseidon Figma file as they are available in PrimeOne for Figma only.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/common/tailwind.png)
![Fully Responsive](https://primefaces.org/cdn/primevue/images/templates/poseidon/nextgen/poseidon-responsive.png)
## Fully Responsive
Poseidon is crafted to provide optimal viewing and interaction experience for a wide range of devices.
![Support](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-lifetime.png)
## Support
PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users
can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and
[Forum](https://github.com/orgs/primefaces/discussions/categories/primevue-templates).
![Cross Browser Compatible](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-compatible.png)
## Cross Browser Compatible
First class support for Firefox, Safari, Chrome and Edge.
![Customizable Design](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-customizable.png)
## Customizable Design
Fully customizable with a mixture of Sass and CSS variables.
![Mobile Experience](https://primefaces.org/cdn/primevue/images/templates/poseidon/nextgen/poseidon-mobile.png)
## Mobile Experience
Touch optimized enhanced mobile experience with responsive design.
![Ready to Use Pages](https://primefaces.org/cdn/primevue/images/templates/poseidon/nextgen/poseidon-pages.png)
## Ready to Use Pages
Landing, dashboards, user management, mail, chat, authentication and many more to discover.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## Vue Template Features
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
![Template Hero Pattern](https://primefaces.org/cdn/primevue/images/templates/diamond/diamond-hero-pattern.png)
An amazing application template for Vue based on Vite with light-dark modes with 8 surface colors, seven menu layouts, various menu themes, sample apps, ready to use template pages and 3 presets.
[Live Demo](https://diamond.primevue.org/) [Buy Now](https://www.primefaces.org/store/)
[Community](https://github.com/orgs/primefaces/discussions/categories/primevue-templates) [Documentation](https://diamond.primevue.org/documentation)
![Template Dashboard Image 1](https://primefaces.org/cdn/primevue/images/templates/diamond/diamond-remastered-hero-dashboard-1.png)![Template Dashboard Image 2](https://primefaces.org/cdn/primevue/images/templates/diamond/diamond-remastered-hero-dashboard-2.png)
Basic License
$59
Non Commercial Usage
Single End Product, No Multi-Use
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
Extended License
$590
Commercial Usage
Multiple End Products
1 Year Free Updates
[License Details](https://www.primefaces.org/layouts/licenses)
The download package is a Vite-based project containing all application source codes deployed at the live demo. The project code is written in JavaScript.
Visit the [official documentation](https://diamond.primevue.org/documentation/) for more information.
## Features
01
01
01
##### Light / Dark Modes
Diamond has 2 display modes to choose from Light / Dark with 8 surface colors.
02
02
02
##### Themes and Presets
Diamond offers 17 built-in theme colors with the power of 3 presets: Aura, Lara and Nora.
03
03
03
##### 7 Menu Orientations
Static, Overlay, Slim, Compact, Horizontal, Reveal and Drawer are the available menu layouts depending on your preference.
04
04
04
##### Menu Themes
Stunning theming options for the main menu.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/diamond/features-remastered-animation-darkmode.png)
\> npm install or yarn
\> npm run dev or yarn dev
![Vue 3D Logo](https://primefaces.org/cdn/primevue/images/templates/vue-3d-logo.png)
### Vue App with No Configuration
Diamond is powered by Vite to get started in no time following the best practices.
01
01
01
##### Tailwind CSS
The demo content is built with TailwindCSS, while the application shell uses custom CSS, offering flexibility and efficiency for responsive design.
02
02
02
##### PrimeBlocks
Fully compatible with [PrimeBlocks](https://primeblocks.org/), choose from the wide range of blocks and customize the way you like. Note that PrimeBlocks is not included in the
template and requires a separate purchase.
03
03
03
##### PrimeIcons
Diamond ships with PrimeIcons, PrimeTekâ€™s modern icon library including a wide range of icons for your applications.
04
04
04
##### Figma File
Diamond uses Figma as the design tool. It will be possible to download the Figma file after your purchase. You can
[preview the Figma file](https://www.figma.com/design/3BgdXCQjva5nUEO8OidU1B/Preview-%7C-Diamond?node-id=0-1&t=KdfljgRtYLzFPfKL-1%20target=) before the purchase. Note that PrimeVue UI components are excluded from the Diamond Figma file as they
are available in PrimeOne for Figma only.
![Animation Feature Image](https://primefaces.org/cdn/primevue/images/templates/common/tailwind.png)
![Fully Responsive](https://primefaces.org/cdn/primevue/images/templates/diamond/diamond-remastered-features-responsive.png)
## Fully Responsive
Diamond is crafted to provide optimal viewing and interaction experience for a wide range of devices.
![Cross Browser Compatible](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-compatible.png)
## Cross Browser Compatible
First class support for Firefox, Safari, Chrome and Edge.
![Support](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-lifetime.png)
## Support
PrimeTek offers assistance with account management and licensing issues, with the expectation that users have the necessary technical knowledge to use our products, as we do not offer technical support or consulting. Users
can seek assistance in our community via our public [Discord](https://discord.com/invite/gzKFYnpmCY) and
[Forum](https://github.com/orgs/primefaces/discussions/categories/primevue-templates).
![Customizable Design](https://primefaces.org/cdn/primevue/images/templates/apollo/apollo-features2-customizable.png)
## Customizable Design
Fully customizable with CSS variables.
![Ready to Use Pages](https://primefaces.org/cdn/primevue/images/templates/diamond/diamond-remastered-features-ready.png)
## Ready to Use Pages
Landing, login, invoice, help, user management and error pages are provided as template pages to get started with building your app.
![Mobile Experience](https://primefaces.org/cdn/primevue/images/templates/diamond/diamond-remastered-features-mobile.png)
## Mobile Experience
Touch optimized enhanced mobile experience with responsive design.
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## FloatLabel Component
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
- FEATURES
- API
- THEMING
- PASS THROUGH
# FloatLabel
FloatLabel visually integrates a label with its form element.
## Import [\#](https://primevue.org/floatlabel/\#import)
```javascript
import FloatLabel from 'primevue/floatlabel';
```
Copy
## Basic [\#](https://primevue.org/floatlabel/\#basic)
FloatLabel is used by wrapping the input and its label.
Username
```markup
<FloatLabel>
    <InputText id="username" v-model="value" />
    <label for="username">Username</label>
</FloatLabel>
```
Copy
## Variants [\#](https://primevue.org/floatlabel/\#variants)
The _variant_ property defines the position of the label. Default value is _over_, whereas _in_ and _on_ are the alternatives.
In LabelOn Label
```markup
<FloatLabel variant="in">
    <InputText id="in_label" v-model="value1" autocomplete="off" />
    <label for="in_label">In Label</label>
</FloatLabel>
<FloatLabel variant="on">
    <InputText id="on_label" v-model="value2" autocomplete="off" />
    <label for="on_label">On Label</label>
</FloatLabel>
```
Copy
## Invalid [\#](https://primevue.org/floatlabel/\#invalid)
When the form element is invalid, the label is also highlighted.
UsernameUsernameUsername
```markup
<FloatLabel>
    <InputText id="value1" v-model="value1" :invalid="!value1" />
    <label for="value1">Username</label>
</FloatLabel>
<FloatLabel variant="in">
    <InputText id="value2" v-model="value2" :invalid="!value2" />
    <label for="value2">Username</label>
</FloatLabel>
<FloatLabel variant="on">
    <InputText id="value3" v-model="value3" :invalid="!value3" />
    <label for="value3">Username</label>
</FloatLabel>
```
Copy
## Accessibility [\#](https://primevue.org/floatlabel/\#accessibility)
### Screen Reader
FloatLabel does not require any roles and attributes.
### Keyboard Support
Component does not include any interactive elements.
- Import
- Basic
- Variants
- Invalid
- Accessibility
# FloatLabel API
API defines helper props, events and others for the PrimeVue FloatLabel module.
## FloatLabel [\#](https://primevue.org/floatlabel/\#api.floatlabel)
FloatLabel visually integrates a label with its form element.
### Props [\#](https://primevue.org/floatlabel/\#api.floatlabel.props)
Defines valid properties in FloatLabel component.
| name | type | default | description |  |
| --- | --- | --- | --- | --- |
| dt | any | null | It generates scoped CSS variables using design tokens for the component. |  |
| pt | PassThrough<FloatLabelPassThroughOptions> | null | Used to pass attributes to DOM elements inside the component. |  |
| ptOptions | any | null | Used to configure passthrough(pt) options of the component. |  |
| unstyled | boolean | false | When enabled, it removes component related styles in the core. |  |
| variant | HintedString<"on" \| "in" \| "over"> | false | Defines the positioning of the label relative to the input. |  |
### Interfaces [\#](https://primevue.org/floatlabel/\#api.floatlabel.interfaces)
Defines the custom interfaces used by the module.
#### FloatLabelPassThroughMethodOptions [\#](https://primevue.org/floatlabel/\#api.floatlabel.interfaces.FloatLabelPassThroughMethodOptions)
Custom passthrough(pt) option method.
| name | type | default | description |
| --- | --- | --- | --- |
| instance | any | null | Defines instance. |
| props | [FloatLabelProps](https://primevue.org/floatlabel/#api.floatlabel.interfaces.FloatLabelProps) | null | Defines valid properties. |
| attrs | any | null | Defines valid attributes. |
| parent | any | null | Defines parent options. |
| global | undefined \| object | null | Defines passthrough(pt) options in global config. |
#### FloatLabelPassThroughOptions [\#](https://primevue.org/floatlabel/\#api.floatlabel.interfaces.FloatLabelPassThroughOptions)
Custom passthrough(pt) options.
| name | type | default | description |
| --- | --- | --- | --- |
| root | [FloatLabelPassThroughOptionType](https://primevue.org/floatlabel/#api.floatlabel.types.FloatLabelPassThroughOptionType) | null | Used to pass attributes to the root's DOM element. |
| hooks | any | null | Used to manage all lifecycle hooks. |
#### FloatLabelPassThroughAttributes [\#](https://primevue.org/floatlabel/\#api.floatlabel.interfaces.FloatLabelPassThroughAttributes)
Custom passthrough attributes for each DOM elements
| name | type | default | description |
| --- | --- | --- | --- |
| \[key: string\] | any | null |  |
## Types [\#](https://primevue.org/floatlabel/\#api.floatlabel.types)
Defines the custom types used by the module.
#### FloatLabelPassThroughOptionType [\#](https://primevue.org/floatlabel/\#api.floatlabel.types.FloatLabelPassThroughOptionType)
| values |
| --- |
| FloatLabelPassThroughAttributes \| (options: FloatLabelPassThroughMethodOptions) => undefined \| string \| null \| undefined |
#### FloatLabelPassThroughTransitionType [\#](https://primevue.org/floatlabel/\#api.floatlabel.types.FloatLabelPassThroughTransitionType)
| values |
| --- |
| TransitionProps \| (options: FloatLabelPassThroughMethodOptions) => TransitionProps \| undefined |
#### FloatLabelEmits [\#](https://primevue.org/floatlabel/\#api.floatlabel.types.FloatLabelEmits)
| values |
| --- |
| EmitFn<FloatLabelEmitsOptions> |
- FloatLabel
  - Props
  - Interfaces
  - Types
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeFlex Overview
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Introduction
The PrimeFlex CSS library is being sunset and will no longer receive active development or maintenance.
## Overview [\#](https://primevue.org/guides/primeflex/\#overview)
[PrimeFlex](https://primeflex.org/) is designed to be a lightweight CSS utility to accompany Prime UI libraries. As part of our product roadmap planning at PrimeTek, the team has decided to avoid the maintenance of a CSS library and utilize the resources on improving the UI libraries instead. Community feedback has been essential in this decision as well since majority of the applications have their own CSS utilities whether it is Tailwind, Bootstrap or an in-house one, as a result adding PrimeFlex to a project was causing overlapping functionality.
## Compatibility [\#](https://primevue.org/guides/primeflex/\#compatibility)
The compatible versions to choose the correct combination.
|     |     |
| --- | --- |
| PrimeVue v4 and newer | PrimeFlex v4 |
| PrimeVue v3 and older | PrimeFlex v3 |
## Tailwind CSS [\#](https://primevue.org/guides/primeflex/\#tailwindcss)
Tailwind CSS in particular is a popular choice, we have even built the [Tailwind CSS presets](https://tailwind.primevue.org/) spin-off project for the unstyled mode to be able to use the utility classes to style the PrimeVue components. During this work, we've realized that the value added by PrimeFlex such as providing the PrimeVue theming as utility classes can be implemented as a Tailwind plugin. As part of PrimeVue v4, a tailwind-primeui plugin has been created for the seamless integration, the website templating demos have been migrated from PrimeFlex to Tailwind and a converter tool called _pf2tw_ has been created. In summary, PrimeTek officially suggests Tailwind CSS as the replacement for PrimeFlex.
## Plugin [\#](https://primevue.org/guides/primeflex/\#plugin)
The [tailwindcss-primeui](https://www.npmjs.com/package/tailwindcss-primeui) is an official plugin by PrimeTek to provide first class integration between a Prime UI library like PrimeVue and Tailwind CSS. It is designed to work both in styled and unstyled modes. For example, in styled mode the semantic colors such as primary and surfaces are provided as Tailwind utilities e.g. _bg-primary_, _text-surface-500_, _text-muted-color_ by deriving their values from the design tokens. This integration is not compatible with PrimeVue v3 and requires PrimeVue v4.
View the [Tailwind](https://primevue.org/tailwind/) section for more details about how to use Tailwind CSS with PrimeVue efficiently.
## Migration [\#](https://primevue.org/guides/primeflex/\#migration)
The [primeclt](https://www.npmjs.com/package/primeclt) is a command line utility by PrimeTek to assist project setup and migration. The _pf2tw_ command is created for smooth migration between PrimeFlex to Tailwind CSS. As a prequisite, the _tailwindcss-primeui_ is required to provide the matching classes that do not exist in core Tailwind CSS such as semantic colors and animations. For flawless migration, it is highly suggested to use PrimeVue v4 as the requirement of the tailwindcss plugin.
Install PrimeCLT.
```javascript
npm install -g primeclt
```
Copy
Run the _pf2tw_ in a directory that contains files to be migrated.
```javascript
prime pf2tw
```
Copy
There are a couple of utility classes that are not migrated as they have no counterparts, use flexbox utilities instead as replacements.
- formgrid
- formgroup
- formgroup-inline
- col
- col-fixed
- field
- field-checkbox
- field-radiobutton
- reset
- Overview
- Compatibility
- Tailwind CSS
- Plugin
- Migration
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Theme Designer
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Designer
Theme Designer is the ultimate tool to customize and design your own themes featuring a visual editor, figma to code, cloud storage, and migration assistant.
## Overview [\#](https://primevue.org/designer/guide/\#overview)
The [theming api](https://primevue.org/theming/styled) is open and source freely available with an extensive documentation. Theme Designer is a tool build on top of this theming api with important features to make theming easier. Designer consists of 4 key features; The **visual editor** provides a UI to edit the complete set of tokens. The **figma to code** generator is extremely useful to automate the design to code process and integrates seamlessly with the Figma UI Kit. The themes are saved in the **cloud storage** to be accessible from anywhere and any device and finally the **migration assistant** automatically updates your themes to the latest library version.
## License [\#](https://primevue.org/designer/guide/\#license)
A license key is required to be able to use all the services provided by the designer. Without a license, the visual editor is still available for trial purposes with various options such as downloads, and cloud storage disabled. The license key can be purchased at [PrimeStore](https://primefaces.org/store/designer.xhtml), it is valid for 1 year and needs to be renewed manually after a year.
## Dashboard [\#](https://primevue.org/designer/guide/\#dashboard)
Dashboard is the entry point of the designer. The license key can be configured at this view before getting started with the full set of features. In the **My Themes** section, you're able to create a theme, and manage existing themes. A theme can be renamed, duplicated and downloaded using the  button.
![Designer Dashboard](https://primefaces.org/cdn/designer/guide-dashboard.png)
## Create Theme [\#](https://primevue.org/designer/guide/\#create)
A theme can be initiated from one of the built-in themes or from Figma UI Kit.
### Base [\#](https://primevue.org/designer/guide/\#base)
In the new theme section, all of the built-in themes are available to use as the base. These are; _Aura_, _Material_, _Lara_ and _Nora_. Each have their own characteristics, and it is recommended to choose the one that best suits your requirements.
### Figma [\#](https://primevue.org/designer/guide/\#figma)
The [Figma UI Kit](https://primevue.org/designer/uikit) and the theming api is fully synchorized, meaning the design tokens in Figma map to the CSS variables in the code. The mapping is created via the [Token Studio](https://tokens.studio/) at Figma which allows exporting a single json file. The Designer is able to interpret this file and transform it to an actual theme. In case your UI Kit version is older, the transformation process marks the missing tokens and recommends an auto migration via the migration assistant. This is an automated workflow and eliminates the manual design to code during the handoff process. If you have UI designers in your team, the recommended approach is using Figma for the actual design process and utilizing the designer for transformation, preview and download purposes.
**Export JSON file**
Open the [PrimeOne UI Kit](https://primevue.org/uikit) in which you've modified tokens. In the Tokens Studio plugin, navigate to the _Tools_ menu and select _Export to file/folder._ When the Export tokens modal appears, make sure the _Single file_ tab is selected. Check the _All tokens sets_ option, then click _Export_.
In case you utilize custom tokens, create a new token set named _custom_ and define your tokens under this set to make sure they are also exported to the theme code.
![Designer Dashboard](https://primefaces.org/cdn/designer/tokens-studio.png)
**Import to Designer**
Choose the _Import Figma Tokens_ option when creating a new theme at Theme Designer and import the json file.
![Designer Dashboard](https://primefaces.org/cdn/designer/guide-create.png)
**Video Tutorial**
A tutorial is available demonstrating how the handoff process can be automated between the design team and the development team.
Generate Themes from Figma - YouTube
Cagatay Civici
8.4K subscribers
[Generate Themes from Figma](https://www.youtube.com/watch?v=Ktocmi2dLLM)
Cagatay Civici
Search
Watch later
Share
Copy link
Info
Shopping
Tap to unmute
If playback doesn't begin shortly, try restarting your device.
More videos
## More videos
You're signed out
Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.
CancelConfirm
Share
Include playlist
An error occurred while retrieving sharing information. Please try again later.
[Why am I seeing this?](https://support.google.com/youtube/answer/9004474?hl=en)
[Watch on](https://www.youtube.com/watch?v=Ktocmi2dLLM&embeds_referring_euri=https%3A%2F%2Fprimevue.org%2F)
0:00
0:00 / 3:54â€¢Live
â€¢
[Watch on YouTube](https://www.youtube.com/watch?v=Ktocmi2dLLM "Watch on YouTube")
## Editor [\#](https://primevue.org/designer/guide/\#editor)
### Token Sets [\#](https://primevue.org/designer/guide/\#tokensets)
The theming architecture is based on primitive, semantic and components tokens. The visual editor, displays a dedicated section for each set. For basic purposes such as customizing the primary and surface colors, primitive and semantic sections would be more than enough. The component tokens are displayed per route so navigate to the component page first to view the tokens of the specific component.
### Custom Tokens [\#](https://primevue.org/designer/guide/\#customtokens)
Custom tokens allow bringing in your own design tokens to the theme to go beyond the built-in ones. A design token requires a name and a value where the value can be a static value like a color or another token. The name of the token should be a dot seperated lowercase value e.g. _accent.color_. For example, a custom token name can be defined as _accent.color_ and the value can either be a value like _#eab308_ or another token such as _{yellow.50}_. Custom tokens can also refer to each other, e.g. _selection.background_ custom token can define _{accent.color}_ as a value.
If you have created a theme from Figma, use the name **custom** as the name of your token set group. This keyword is special since the import tool will populate the custom tokens using this set in tokens json file.
### Intelligent Completion [\#](https://primevue.org/designer/guide/\#autocomplete)
The editor is packed with features for improved user experience. The input fields in the editor are capable of displaying a color preview when the value is a color, and beginning the value with a curly brace opens up the autocompletion feature to list the available tokens to choose from. The _pi-sort-alt_ symbol over the input, transfers the token between the common tokens and color scheme specific tokens so that you are able to define tokens based on light and dark mode as well.
### Typography [\#](https://primevue.org/designer/guide/\#typography)
The components are not opinionated about the typography. Important properties such as the font family, font size, and line-height do not have design tokens since they can be inherited from the document. For preview purposes, the _settings_ tab displays options to customize the base font and the font family of the document. These values are not available in the generated theme and need to be applied to your application at the document level.
![Designer Dashboard](https://primefaces.org/cdn/designer/guide-editor.png)
## Migration Assistant [\#](https://primevue.org/designer/guide/\#migration)
Prime UI libraries continue to evolve with each version. New tokens are likely to be added with each major release, in order to keep your themes up to date the migration assistant is available featuring automated migration. The **Check for Updates** option initially scans a theme for any missing tokens. This tool does not override the values of existing tokens, and only adds missing tokens if necessary. Still, it is recommended to duplicate your theme as a backup and run a preview before the migration. Depending on the result, you may choose to proceed with the migration process. In case there are missing tokens, your theme would receive them with placeholder values so it is recommended to take a note of them before migration and then visit the components to replace the placeholder values with actual values of your choice. These types of newly added tokens would be highlighed in Editor.
![Designer Dashboard](https://primefaces.org/cdn/designer/guide-migration.png)
## Limitations [\#](https://primevue.org/designer/guide/\#limitations)
Current known technical limitations are listed at this section.
- The border width token in Figma does not support multiple values, related [issue](https://github.com/tokens-studio/figma-plugin/issues/3237).
- Overview
- License
- Dashboard
- Create Theme
  - Base
  - Figma
- Editor
  - Token Sets
  - Custom Tokens
  - Intelligent Completion
  - Typography
- Migration Assistant
- Limitations
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
## PrimeVue Icons Library
Introducing Volt UI Component Suite with Unstyled PrimeVue and Tailwind v4! ðŸŽ‰ [Learn More](https://volt.primevue.org/)
[PrimeVue logo](https://primevue.org/)[PrimeVue logo](https://primevue.org/)
- Search`` `K`
- Primary
Surface
Theme
AuraMaterialLaraNora
Ripple
RTL
- v4
- [PrimeVue v4](https://primevue.org/)
- [PrimeVue v3](https://v3.primevue.org/)
# Icons
[PrimeIcons](https://github.com/primefaces/primeicons) is the default icon library of PrimeVue with over 250 open source icons developed by PrimeTek. PrimeIcons library is optional as PrimeVue components can use any icon with templating.
## Download [\#](https://primevue.org/icons/\#download)
PrimeIcons is available at npm, run the following command to download it to your project.
```javascript
npm install primeicons
```
Copy
## Import [\#](https://primevue.org/icons/\#import)
CSS file of the icon library needs to be imported in _styles.scss_ of your application.
```javascript
import 'primeicons/primeicons.css'
```
Copy
## Figma [\#](https://primevue.org/icons/\#figma)
PrimeIcons library is now available on [Figma Community](https://www.figma.com/community/file/1354343849355792252/primeicons). By adding them as a library, you can easily use these icons in your designs.
## Basic [\#](https://primevue.org/icons/\#basic)
PrimeIcons use the _pi pi-{icon}_ syntax such as _pi pi-check_. A standalone icon can be displayed using an element such as _i_ or _span_
```javascript
<i class="pi pi-check"></i>
<i class="pi pi-times"></i>
<span class="pi pi-search"></span>
<span class="pi pi-user"></span>
```
Copy
## Size [\#](https://primevue.org/icons/\#size)
Size of an icon is controlled with the font-size property of the element.
```javascript
<i class="pi pi-check" style="font-size: 1rem"></i>
<i class="pi pi-times" style="font-size: 1.5rem"></i>
<i class="pi pi-search" style="font-size: 2rem"></i>
<i class="pi pi-user" style="font-size: 2.5rem"></i>
```
Copy
## Color [\#](https://primevue.org/icons/\#color)
Icon color is defined with the _color_ property which is inherited from parent by default.
```javascript
<i class="pi pi-check" style="color: slateblue"></i>
<i class="pi pi-times" style="color: green"></i>
<i class="pi pi-search" style="color: 'var(--p-primary-color)'"></i>
<i class="pi pi-user" style="color: #708090"></i>
```
Copy
## Spin [\#](https://primevue.org/icons/\#spin)
Special _pi-spin_ class applies infinite rotation to an icon.
```javascript
<i class="pi pi-spin pi-spinner" style="font-size: 2rem"></i>
<i class="pi pi-spin pi-cog" style="font-size: 2rem"></i>
```
Copy
## Constants [\#](https://primevue.org/icons/\#constants)
Constants API is available to reference icons easily when used programmatically.
- File
- New
- Open
```javascript
<template>
    <div class="card flex justify-center">
        <Menu :model="items" />
    </div>
</template>
<script>
import { PrimeIcons } from '@primevue/core/api';
export default {
    data() {
        return {
            items: [\
                {\
                    label: 'File',\
                    items: [\
                        { label: 'New', icon: PrimeIcons.PLUS },\
                        { label: 'Open', icon: PrimeIcons.DOWNLOAD }\
                    ]\
                }\
            ]
        };
    }
};
</script>
```
Copy
## List [\#](https://primevue.org/icons/\#list)
Here is the full list of PrimeIcons. More icons will be added periodically and you may also [request new icons](https://github.com/primefaces/primeicons/issues) at the issue tracker.
pi-address-book
pi-align-center
pi-align-justify
pi-align-left
pi-align-right
pi-amazon
pi-android
pi-angle-double-down
pi-angle-double-left
pi-angle-double-right
pi-angle-double-up
pi-angle-down
pi-angle-left
pi-angle-right
pi-angle-up
pi-apple
pi-arrow-circle-down
pi-arrow-circle-left
pi-arrow-circle-right
pi-arrow-circle-up
pi-arrow-down
pi-arrow-down-left
pi-arrow-down-left-and-arrow-up-right-to-center
pi-arrow-down-right
pi-arrow-left
pi-arrow-right
pi-arrow-right-arrow-left
pi-arrow-up
pi-arrow-up-left
pi-arrow-up-right
pi-arrow-up-right-and-arrow-down-left-from-center
pi-arrows-alt
pi-arrows-h
pi-arrows-v
pi-asterisk
pi-at
pi-backward
pi-ban
pi-barcode
pi-bars
pi-bell
pi-bell-slash
pi-bitcoin
pi-bolt
pi-book
pi-bookmark
pi-bookmark-fill
pi-box
pi-briefcase
pi-building
pi-building-columns
pi-bullseye
pi-calculator
pi-calendar
pi-calendar-clock
pi-calendar-minus
pi-calendar-plus
pi-calendar-times
pi-camera
pi-car
pi-caret-down
pi-caret-left
pi-caret-right
pi-caret-up
pi-cart-arrow-down
pi-cart-minus
pi-cart-plus
pi-chart-bar
pi-chart-line
pi-chart-pie
pi-chart-scatter
pi-check
pi-check-circle
pi-check-square
pi-chevron-circle-down
pi-chevron-circle-left
pi-chevron-circle-right
pi-chevron-circle-up
pi-chevron-down
pi-chevron-left
pi-chevron-right
pi-chevron-up
pi-circle
pi-circle-fill
pi-clipboard
pi-clock
pi-clone
pi-cloud
pi-cloud-download
pi-cloud-upload
pi-code
pi-cog
pi-comment
pi-comments
pi-compass
pi-copy
pi-credit-card
pi-crown
pi-database
pi-delete-left
pi-desktop
pi-directions
pi-directions-alt
pi-discord
pi-dollar
pi-download
pi-eject
pi-ellipsis-h
pi-ellipsis-v
pi-envelope
pi-equals
pi-eraser
pi-ethereum
pi-euro
pi-exclamation-circle
pi-exclamation-triangle
pi-expand
pi-external-link
pi-eye
pi-eye-slash
pi-face-smile
pi-facebook
pi-fast-backward
pi-fast-forward
pi-file
pi-file-arrow-up
pi-file-check
pi-file-edit
pi-file-excel
pi-file-export
pi-file-import
pi-file-pdf
pi-file-plus
pi-file-word
pi-filter
pi-filter-fill
pi-filter-slash
pi-flag
pi-flag-fill
pi-folder
pi-folder-open
pi-folder-plus
pi-forward
pi-gauge
pi-gift
pi-github
pi-globe
pi-google
pi-graduation-cap
pi-hammer
pi-hashtag
pi-headphones
pi-heart
pi-heart-fill
pi-history
pi-home
pi-hourglass
pi-id-card
pi-image
pi-images
pi-inbox
pi-indian-rupee
pi-info
pi-info-circle
pi-instagram
pi-key
pi-language
pi-lightbulb
pi-link
pi-linkedin
pi-list
pi-list-check
pi-lock
pi-lock-open
pi-map
pi-map-marker
pi-mars
pi-megaphone
pi-microchip
pi-microchip-ai
pi-microphone
pi-microsoft
pi-minus
pi-minus-circle
pi-mobile
pi-money-bill
pi-moon
pi-objects-column
pi-palette
pi-paperclip
pi-pause
pi-pause-circle
pi-paypal
pi-pen-to-square
pi-pencil
pi-percentage
pi-phone
pi-pinterest
pi-play
pi-play-circle
pi-plus
pi-plus-circle
pi-pound
pi-power-off
pi-prime
pi-print
pi-qrcode
pi-question
pi-question-circle
pi-receipt
pi-reddit
pi-refresh
pi-replay
pi-reply
pi-save
pi-search
pi-search-minus
pi-search-plus
pi-send
pi-server
pi-share-alt
pi-shield
pi-shop
pi-shopping-bag
pi-shopping-cart
pi-sign-in
pi-sign-out
pi-sitemap
pi-slack
pi-sliders-h
pi-sliders-v
pi-sort
pi-sort-alpha-down
pi-sort-alpha-down-alt
pi-sort-alpha-up
pi-sort-alpha-up-alt
pi-sort-alt
pi-sort-alt-slash
pi-sort-amount-down
pi-sort-amount-down-alt
pi-sort-amount-up
pi-sort-amount-up-alt
pi-sort-down
pi-sort-down-fill
pi-sort-numeric-down
pi-sort-numeric-down-alt
pi-sort-numeric-up
pi-sort-numeric-up-alt
pi-sort-up
pi-sort-up-fill
pi-sparkles
pi-spinner
pi-spinner-dotted
pi-star
pi-star-fill
pi-star-half
pi-star-half-fill
pi-step-backward
pi-step-backward-alt
pi-step-forward
pi-step-forward-alt
pi-stop
pi-stop-circle
pi-stopwatch
pi-sun
pi-sync
pi-table
pi-tablet
pi-tag
pi-tags
pi-telegram
pi-th-large
pi-thumbs-down
pi-thumbs-down-fill
pi-thumbs-up
pi-thumbs-up-fill
pi-thumbtack
pi-ticket
pi-tiktok
pi-times
pi-times-circle
pi-trash
pi-trophy
pi-truck
pi-turkish-lira
pi-twitch
pi-twitter
pi-undo
pi-unlock
pi-upload
pi-user
pi-user-edit
pi-user-minus
pi-user-plus
pi-users
pi-venus
pi-verified
pi-video
pi-vimeo
pi-volume-down
pi-volume-off
pi-volume-up
pi-wallet
pi-warehouse
pi-wave-pulse
pi-whatsapp
pi-wifi
pi-window-maximize
pi-window-minimize
pi-wrench
pi-youtube
- Download
- Import
- Figma
- Basic
- Size
- Color
- Spin
- Constants
- List
PrimeVue 4.3.3 on Vue 3 by [PrimeTek](https://www.primetek.com.tr/)
